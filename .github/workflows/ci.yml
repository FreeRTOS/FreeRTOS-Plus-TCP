name: CI Checks

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

env:
  bashPass: \033[32;1mPASSED -
  bashWarn: \033[33;1mWARNING -
  bashFail: \033[31;1mFAILED -
  bashEnd:  \033[0m

jobs:
  unittest:
    runs-on: ubuntu-latest
    steps:
      - name: Clone This Repo
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - env:
          stepName: Build Unit Tests
        name: ${{ env.stepName }}
        run: |
          # ${{ env.stepName }}
          echo "::group:: ${{ env.stepName }}"
          git submodule update --checkout
          cd tools/CMock
          git submodule update --init vendor/unity
          cd ../..
          sudo apt-get install -y lcov
          sudo apt-get install -y unifdef
          cmake -S test/unit-test -B test/unit-test/build/
          make -C test/unit-test/build/ all
          echo "::endgroup::"
          echo "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

      - env:
          stepName: Test
        name: ${{ env.stepName }}
        run: |
          # ${{ env.stepName }}
          echo "::group:: ${{ env.stepName }}"
          cd test/unit-test/build/
          ctest -E system --output-on-failure
          cd ..
          echo "::endgroup::"
          echo "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

      - env:
          stepName: Coverage
        name: ${{ env.stepName }}
        run: |
          # ${{ env.stepName }}
          echo "::group:: ${{ env.stepName }}"
          make -C test/unit-test/build/ coverage
          lcov --list --rc lcov_branch_coverage=1 test/unit-test/build/coverage.info
          echo "::endgroup::"
          echo "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

      - name: Check Coverage
        uses: Skptak/CI-CD-Github-Actions/coverage-cop@main
        with:
          path: ./test/unit-test/build/coverage.info

  spell-check:
    runs-on: ubuntu-latest
    steps:
      - name: Clone This Repo
        uses: actions/checkout@v3
      - name: Run spellings check
        uses: Skptak/CI-CD-Github-Actions/rust-spell-check@main
        with:
          path: ./

  formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Check formatting
        uses: Skptak/CI-CD-Github-Actions/formatting@main
        with:
          path: ./

  doxygen:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run doxygen build
        uses: Skptak/CI-CD-Github-Actions/doxygen@main
        with:
          path: ./

  link-verifier:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Check Links
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: Skptak/CI-CD-Github-Actions/link-verifier@main

  build-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - env:
          stepName: Build Install Dependencies
        name: ${{ env.stepName }}
        run: |
          # ${{ env.stepName }}
          echo "::group:: ${{ env.stepName }}"
          sudo apt-get install -y libpcap-dev
          echo "::endgroup::"
          echo "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

      - env:
          stepName: Build checks (Enable all functionalities)
        name: ${{ env.stepName }}
        run: |
          # ${{ env.stepName }}
          echo "::group:: ${{ env.stepName }}"
          cmake -S . -B build -DFREERTOS_PLUS_TCP_TEST_CONFIGURATION=ENABLE_ALL
          cmake --build build --target freertos_plus_tcp_build_test
          echo "::endgroup::"
          echo "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

      - env:
          stepName: Build checks (Enable all functionalities IPv4)
        name: ${{ env.stepName }}
        run: |
          # ${{ env.stepName }}
          echo "::group:: ${{ env.stepName }}"
          cmake -S . -B build -DFREERTOS_PLUS_TCP_TEST_CONFIGURATION=ENABLE_ALL_IPV4
          cmake --build build --target clean
          cmake --build build --target freertos_plus_tcp_build_test
          echo "::endgroup::"
          echo "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

      - env:
          stepName: Build checks (Enable all functionalities IPv6)
        name: ${{ env.stepName }}
        run: |
          # ${{ env.stepName }}
          echo "::group:: ${{ env.stepName }}"
          cmake -S . -B build -DFREERTOS_PLUS_TCP_TEST_CONFIGURATION=ENABLE_ALL_IPV6
          cmake --build build --target freertos_plus_tcp_build_test
          echo "::endgroup::"
          echo "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

      - env:
          stepName: Build checks (Enable all functionalities IPv4 IPv6)
        name: ${{ env.stepName }}
        run: |
          # ${{ env.stepName }}
          echo "::group:: ${{ env.stepName }}"
          cmake -S . -B build -DFREERTOS_PLUS_TCP_TEST_CONFIGURATION=ENABLE_ALL_IPV4_IPV6
          cmake --build build --target clean
          cmake --build build --target freertos_plus_tcp_build_test
          echo "::endgroup::"
          echo "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

      - env:
          stepName: Build checks (Enable all functionalities IPv4 TCP)
        name: ${{ env.stepName }}
        run: |
          # ${{ env.stepName }}
          echo "::group:: ${{ env.stepName }}"
          cmake -S . -B build -DFREERTOS_PLUS_TCP_TEST_CONFIGURATION=ENABLE_ALL_IPV4_TCP
          cmake --build build --target clean
          cmake --build build --target freertos_plus_tcp_build_testecho "::endgroup::"
          echo "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

      - env:
          stepName: Build checks (Enable all functionalities IPv6 TCP)
        name: ${{ env.stepName }}
        run: |
          # ${{ env.stepName }}
          echo "::group:: ${{ env.stepName }}"
          cmake -S . -B build -DFREERTOS_PLUS_TCP_TEST_CONFIGURATION=ENABLE_ALL_IPV6_TCP
          cmake --build build --target freertos_plus_tcp_build_test
          echo "::endgroup::"
          echo "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

      - env:
          stepName: Build checks (Disable all functionalities)
        name: ${{ env.stepName }}
        run: |
          # ${{ env.stepName }}
          echo "::group:: ${{ env.stepName }}"
          cmake -S . -B build -DFREERTOS_PLUS_TCP_TEST_CONFIGURATION=DISABLE_ALL
          cmake --build build --target clean
          cmake --build build --target freertos_plus_tcp_build_test
          echo "::endgroup::"
          echo "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

      - env:
          stepName: Build checks (Default configuration)
        name: ${{ env.stepName }}
        run: |
          # ${{ env.stepName }}
          echo "::group:: ${{ env.stepName }}"
          cmake -S . -B build -DFREERTOS_PLUS_TCP_TEST_CONFIGURATION=DEFAULT_CONF
          cmake --build build --target clean
          cmake --build build --target freertos_plus_tcp_build_test
          echo "::endgroup::"
          echo "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

  complexity:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - env:
          stepName: Setup
        name: ${{ env.stepName }}
        run: |
          # ${{ env.stepName }}
          echo "::group:: ${{ env.stepName }}"
          sudo apt-get install complexity
          sudo apt-get install uncrustify
          echo "::endgroup::"
          echo "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

      - env:
          stepName: Complexity
        name: ${{ env.stepName }}
        run: |
          # ${{ env.stepName }}
          echo "::group:: ${{ env.stepName }}"
          COMPLEXITY_PARAMS="--scores --threshold=10 --horrid-threshold=283"
          TEMP_DIR=./temp
          mkdir -p ${TEMP_DIR}
          for SOURCE_FILE in source/portable/BufferManagement/*.c source/*.c
          do
              TARGET_DIR=${TEMP_DIR}/`dirname ${SOURCE_FILE}`
              TARGET_FILE=${TARGET_DIR}/`basename ${SOURCE_FILE}`
              mkdir -p ${TARGET_DIR}
              uncrustify -c tools/uncrustify.complexity.cfg -f ${SOURCE_FILE} > ${TARGET_FILE}
          done
          find ${TEMP_DIR} -iname '*.c' | xargs complexity ${COMPLEXITY_PARAMS}
          RESULT=$?
          rm -rf ${TEMP_DIR}
          echo "::endgroup::"
          echo "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          if [ "${RESULT}" = "0" ]; then
              echo "All is good."
              exit 0
          else
              echo "Sources are too complex, rc = " ${RESULT}
              exit 1
          fi

  git-secrets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Checkout awslabs/git-secrets
        uses: actions/checkout@v3
        with:
          repository: awslabs/git-secrets
          ref: master
          path: git-secrets
      - env:
          stepName: Install git-secrets
        name: ${{ env.stepName }}
        run: |
          # ${{ env.stepName }}
          echo "::group:: ${{ env.stepName }}"
          cd git-secrets && sudo make install && cd ..
          echo "::endgroup::"
          echo "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

      - env:
          stepName: Run git-secrets
        name: ${{ env.stepName }}
        run: |
          # ${{ env.stepName }}
          echo "::group:: ${{ env.stepName }}"
          git-secrets --register-aws
          git-secrets --scan
          echo "::endgroup::"
          echo "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

  proof_ci:
    if: ${{ github.event.pull_request }}
    runs-on: cbmc_ubuntu-latest_16-core
    steps:
      - name: Set up CBMC runner
        uses: Skptak/CI-CD-Github-Actions/set_up_cbmc_runner@main
        with:
          cbmc_version: "5.61.0"

      - env:
          stepName: Install Dependencies
        name: ${{ env.stepName }}
        shell: bash
        run: |
          # ${{ env.stepName }}
          echo "::group:: ${{ env.stepName }}"
          git submodule update --init --checkout --recursive
          sudo apt-get update
          sudo apt-get install --yes --no-install-recommends gcc-multilib
          echo "::endgroup::"
          echo "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

      - name: Run CBMC
        uses: Skptak/CI-CD-Github-Actions/run_cbmc@main
        with:
          proofs_dir: test/cbmc/proofs
