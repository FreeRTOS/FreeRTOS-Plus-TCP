/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_FREERTOS_IP_PRIVATE_H
#define _MOCK_FREERTOS_IP_PRIVATE_H

#include "unity.h"
#include <stdbool.h>
#include <stdint.h>
#include <fcntl.h>
#include <unity.h>
#include "FreeRTOS.h"
#include "FreeRTOS_IP.h"
#include "FreeRTOS_IP_Private.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_FreeRTOS_IP_Private_Init(void);
void mock_FreeRTOS_IP_Private_Destroy(void);
void mock_FreeRTOS_IP_Private_Verify(void);




#define ipFOREVER_IgnoreAndReturn(cmock_retval) ipFOREVER_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ipFOREVER_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define ipFOREVER_StopIgnore() ipFOREVER_CMockStopIgnore()
void ipFOREVER_CMockStopIgnore(void);
#define ipFOREVER_ExpectAndReturn(cmock_retval) ipFOREVER_CMockExpectAndReturn(__LINE__, cmock_retval)
void ipFOREVER_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_ipFOREVER_CALLBACK)(int cmock_num_calls);
void ipFOREVER_AddCallback(CMOCK_ipFOREVER_CALLBACK Callback);
void ipFOREVER_Stub(CMOCK_ipFOREVER_CALLBACK Callback);
#define ipFOREVER_StubWithCallback ipFOREVER_Stub
#define FreeRTOS_NetworkDown_Ignore() FreeRTOS_NetworkDown_CMockIgnore()
void FreeRTOS_NetworkDown_CMockIgnore(void);
#define FreeRTOS_NetworkDown_StopIgnore() FreeRTOS_NetworkDown_CMockStopIgnore()
void FreeRTOS_NetworkDown_CMockStopIgnore(void);
#define FreeRTOS_NetworkDown_ExpectAnyArgs() FreeRTOS_NetworkDown_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_NetworkDown_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_NetworkDown_Expect(pxNetworkInterface) FreeRTOS_NetworkDown_CMockExpect(__LINE__, pxNetworkInterface)
void FreeRTOS_NetworkDown_CMockExpect(UNITY_LINE_TYPE cmock_line, struct xNetworkInterface* pxNetworkInterface);
typedef void (* CMOCK_FreeRTOS_NetworkDown_CALLBACK)(struct xNetworkInterface* pxNetworkInterface, int cmock_num_calls);
void FreeRTOS_NetworkDown_AddCallback(CMOCK_FreeRTOS_NetworkDown_CALLBACK Callback);
void FreeRTOS_NetworkDown_Stub(CMOCK_FreeRTOS_NetworkDown_CALLBACK Callback);
#define FreeRTOS_NetworkDown_StubWithCallback FreeRTOS_NetworkDown_Stub
#define FreeRTOS_NetworkDown_ExpectWithArray(pxNetworkInterface, pxNetworkInterface_Depth) FreeRTOS_NetworkDown_CMockExpectWithArray(__LINE__, pxNetworkInterface, pxNetworkInterface_Depth)
void FreeRTOS_NetworkDown_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct xNetworkInterface* pxNetworkInterface, int pxNetworkInterface_Depth);
#define FreeRTOS_NetworkDown_ReturnThruPtr_pxNetworkInterface(pxNetworkInterface) FreeRTOS_NetworkDown_CMockReturnMemThruPtr_pxNetworkInterface(__LINE__, pxNetworkInterface, sizeof(struct xNetworkInterface))
#define FreeRTOS_NetworkDown_ReturnArrayThruPtr_pxNetworkInterface(pxNetworkInterface, cmock_len) FreeRTOS_NetworkDown_CMockReturnMemThruPtr_pxNetworkInterface(__LINE__, pxNetworkInterface, (int)(cmock_len * (int)sizeof(*pxNetworkInterface)))
#define FreeRTOS_NetworkDown_ReturnMemThruPtr_pxNetworkInterface(pxNetworkInterface, cmock_size) FreeRTOS_NetworkDown_CMockReturnMemThruPtr_pxNetworkInterface(__LINE__, pxNetworkInterface, cmock_size)
void FreeRTOS_NetworkDown_CMockReturnMemThruPtr_pxNetworkInterface(UNITY_LINE_TYPE cmock_line, struct xNetworkInterface* pxNetworkInterface, int cmock_size);
#define FreeRTOS_NetworkDown_IgnoreArg_pxNetworkInterface() FreeRTOS_NetworkDown_CMockIgnoreArg_pxNetworkInterface(__LINE__)
void FreeRTOS_NetworkDown_CMockIgnoreArg_pxNetworkInterface(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_NetworkDownFromISR_IgnoreAndReturn(cmock_retval) FreeRTOS_NetworkDownFromISR_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_NetworkDownFromISR_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_NetworkDownFromISR_StopIgnore() FreeRTOS_NetworkDownFromISR_CMockStopIgnore()
void FreeRTOS_NetworkDownFromISR_CMockStopIgnore(void);
#define FreeRTOS_NetworkDownFromISR_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_NetworkDownFromISR_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_NetworkDownFromISR_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_NetworkDownFromISR_ExpectAndReturn(pxNetworkInterface, cmock_retval) FreeRTOS_NetworkDownFromISR_CMockExpectAndReturn(__LINE__, pxNetworkInterface, cmock_retval)
void FreeRTOS_NetworkDownFromISR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct xNetworkInterface* pxNetworkInterface, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_NetworkDownFromISR_CALLBACK)(struct xNetworkInterface* pxNetworkInterface, int cmock_num_calls);
void FreeRTOS_NetworkDownFromISR_AddCallback(CMOCK_FreeRTOS_NetworkDownFromISR_CALLBACK Callback);
void FreeRTOS_NetworkDownFromISR_Stub(CMOCK_FreeRTOS_NetworkDownFromISR_CALLBACK Callback);
#define FreeRTOS_NetworkDownFromISR_StubWithCallback FreeRTOS_NetworkDownFromISR_Stub
#define FreeRTOS_NetworkDownFromISR_ExpectWithArrayAndReturn(pxNetworkInterface, pxNetworkInterface_Depth, cmock_retval) FreeRTOS_NetworkDownFromISR_CMockExpectWithArrayAndReturn(__LINE__, pxNetworkInterface, pxNetworkInterface_Depth, cmock_retval)
void FreeRTOS_NetworkDownFromISR_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct xNetworkInterface* pxNetworkInterface, int pxNetworkInterface_Depth, BaseType_t cmock_to_return);
#define FreeRTOS_NetworkDownFromISR_ReturnThruPtr_pxNetworkInterface(pxNetworkInterface) FreeRTOS_NetworkDownFromISR_CMockReturnMemThruPtr_pxNetworkInterface(__LINE__, pxNetworkInterface, sizeof(struct xNetworkInterface))
#define FreeRTOS_NetworkDownFromISR_ReturnArrayThruPtr_pxNetworkInterface(pxNetworkInterface, cmock_len) FreeRTOS_NetworkDownFromISR_CMockReturnMemThruPtr_pxNetworkInterface(__LINE__, pxNetworkInterface, (int)(cmock_len * (int)sizeof(*pxNetworkInterface)))
#define FreeRTOS_NetworkDownFromISR_ReturnMemThruPtr_pxNetworkInterface(pxNetworkInterface, cmock_size) FreeRTOS_NetworkDownFromISR_CMockReturnMemThruPtr_pxNetworkInterface(__LINE__, pxNetworkInterface, cmock_size)
void FreeRTOS_NetworkDownFromISR_CMockReturnMemThruPtr_pxNetworkInterface(UNITY_LINE_TYPE cmock_line, struct xNetworkInterface* pxNetworkInterface, int cmock_size);
#define FreeRTOS_NetworkDownFromISR_IgnoreArg_pxNetworkInterface() FreeRTOS_NetworkDownFromISR_CMockIgnoreArg_pxNetworkInterface(__LINE__)
void FreeRTOS_NetworkDownFromISR_CMockIgnoreArg_pxNetworkInterface(UNITY_LINE_TYPE cmock_line);
#define eARPProcessPacket_IgnoreAndReturn(cmock_retval) eARPProcessPacket_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eARPProcessPacket_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eFrameProcessingResult_t cmock_to_return);
#define eARPProcessPacket_StopIgnore() eARPProcessPacket_CMockStopIgnore()
void eARPProcessPacket_CMockStopIgnore(void);
#define eARPProcessPacket_ExpectAnyArgsAndReturn(cmock_retval) eARPProcessPacket_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eARPProcessPacket_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eFrameProcessingResult_t cmock_to_return);
#define eARPProcessPacket_ExpectAndReturn(pxNetworkBuffer, cmock_retval) eARPProcessPacket_CMockExpectAndReturn(__LINE__, pxNetworkBuffer, cmock_retval)
void eARPProcessPacket_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkBufferDescriptor_t* pxNetworkBuffer, eFrameProcessingResult_t cmock_to_return);
typedef eFrameProcessingResult_t (* CMOCK_eARPProcessPacket_CALLBACK)(const NetworkBufferDescriptor_t* pxNetworkBuffer, int cmock_num_calls);
void eARPProcessPacket_AddCallback(CMOCK_eARPProcessPacket_CALLBACK Callback);
void eARPProcessPacket_Stub(CMOCK_eARPProcessPacket_CALLBACK Callback);
#define eARPProcessPacket_StubWithCallback eARPProcessPacket_Stub
#define eARPProcessPacket_ExpectWithArrayAndReturn(pxNetworkBuffer, pxNetworkBuffer_Depth, cmock_retval) eARPProcessPacket_CMockExpectWithArrayAndReturn(__LINE__, pxNetworkBuffer, pxNetworkBuffer_Depth, cmock_retval)
void eARPProcessPacket_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkBufferDescriptor_t* pxNetworkBuffer, int pxNetworkBuffer_Depth, eFrameProcessingResult_t cmock_to_return);
#define eARPProcessPacket_IgnoreArg_pxNetworkBuffer() eARPProcessPacket_CMockIgnoreArg_pxNetworkBuffer(__LINE__)
void eARPProcessPacket_CMockIgnoreArg_pxNetworkBuffer(UNITY_LINE_TYPE cmock_line);
#define eConsiderFrameForProcessing_IgnoreAndReturn(cmock_retval) eConsiderFrameForProcessing_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eConsiderFrameForProcessing_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eFrameProcessingResult_t cmock_to_return);
#define eConsiderFrameForProcessing_StopIgnore() eConsiderFrameForProcessing_CMockStopIgnore()
void eConsiderFrameForProcessing_CMockStopIgnore(void);
#define eConsiderFrameForProcessing_ExpectAnyArgsAndReturn(cmock_retval) eConsiderFrameForProcessing_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eConsiderFrameForProcessing_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eFrameProcessingResult_t cmock_to_return);
#define eConsiderFrameForProcessing_ExpectAndReturn(pucEthernetBuffer, cmock_retval) eConsiderFrameForProcessing_CMockExpectAndReturn(__LINE__, pucEthernetBuffer, cmock_retval)
void eConsiderFrameForProcessing_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const uint8_t* const pucEthernetBuffer, eFrameProcessingResult_t cmock_to_return);
typedef eFrameProcessingResult_t (* CMOCK_eConsiderFrameForProcessing_CALLBACK)(const uint8_t* const pucEthernetBuffer, int cmock_num_calls);
void eConsiderFrameForProcessing_AddCallback(CMOCK_eConsiderFrameForProcessing_CALLBACK Callback);
void eConsiderFrameForProcessing_Stub(CMOCK_eConsiderFrameForProcessing_CALLBACK Callback);
#define eConsiderFrameForProcessing_StubWithCallback eConsiderFrameForProcessing_Stub
#define eConsiderFrameForProcessing_ExpectWithArrayAndReturn(pucEthernetBuffer, pucEthernetBuffer_Depth, cmock_retval) eConsiderFrameForProcessing_CMockExpectWithArrayAndReturn(__LINE__, pucEthernetBuffer, pucEthernetBuffer_Depth, cmock_retval)
void eConsiderFrameForProcessing_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const uint8_t* const pucEthernetBuffer, int pucEthernetBuffer_Depth, eFrameProcessingResult_t cmock_to_return);
#define eConsiderFrameForProcessing_IgnoreArg_pucEthernetBuffer() eConsiderFrameForProcessing_CMockIgnoreArg_pucEthernetBuffer(__LINE__)
void eConsiderFrameForProcessing_CMockIgnoreArg_pucEthernetBuffer(UNITY_LINE_TYPE cmock_line);
#define usGenerateChecksum_IgnoreAndReturn(cmock_retval) usGenerateChecksum_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void usGenerateChecksum_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
#define usGenerateChecksum_StopIgnore() usGenerateChecksum_CMockStopIgnore()
void usGenerateChecksum_CMockStopIgnore(void);
#define usGenerateChecksum_ExpectAnyArgsAndReturn(cmock_retval) usGenerateChecksum_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void usGenerateChecksum_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
#define usGenerateChecksum_ExpectAndReturn(usSum, pucNextData, uxByteCount, cmock_retval) usGenerateChecksum_CMockExpectAndReturn(__LINE__, usSum, pucNextData, uxByteCount, cmock_retval)
void usGenerateChecksum_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t usSum, const uint8_t* pucNextData, size_t uxByteCount, uint16_t cmock_to_return);
typedef uint16_t (* CMOCK_usGenerateChecksum_CALLBACK)(uint16_t usSum, const uint8_t* pucNextData, size_t uxByteCount, int cmock_num_calls);
void usGenerateChecksum_AddCallback(CMOCK_usGenerateChecksum_CALLBACK Callback);
void usGenerateChecksum_Stub(CMOCK_usGenerateChecksum_CALLBACK Callback);
#define usGenerateChecksum_StubWithCallback usGenerateChecksum_Stub
#define usGenerateChecksum_ExpectWithArrayAndReturn(usSum, pucNextData, pucNextData_Depth, uxByteCount, cmock_retval) usGenerateChecksum_CMockExpectWithArrayAndReturn(__LINE__, usSum, pucNextData, pucNextData_Depth, uxByteCount, cmock_retval)
void usGenerateChecksum_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t usSum, const uint8_t* pucNextData, int pucNextData_Depth, size_t uxByteCount, uint16_t cmock_to_return);
#define usGenerateChecksum_IgnoreArg_usSum() usGenerateChecksum_CMockIgnoreArg_usSum(__LINE__)
void usGenerateChecksum_CMockIgnoreArg_usSum(UNITY_LINE_TYPE cmock_line);
#define usGenerateChecksum_IgnoreArg_pucNextData() usGenerateChecksum_CMockIgnoreArg_pucNextData(__LINE__)
void usGenerateChecksum_CMockIgnoreArg_pucNextData(UNITY_LINE_TYPE cmock_line);
#define usGenerateChecksum_IgnoreArg_uxByteCount() usGenerateChecksum_CMockIgnoreArg_uxByteCount(__LINE__)
void usGenerateChecksum_CMockIgnoreArg_uxByteCount(UNITY_LINE_TYPE cmock_line);
#define xProcessReceivedUDPPacket_IgnoreAndReturn(cmock_retval) xProcessReceivedUDPPacket_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xProcessReceivedUDPPacket_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xProcessReceivedUDPPacket_StopIgnore() xProcessReceivedUDPPacket_CMockStopIgnore()
void xProcessReceivedUDPPacket_CMockStopIgnore(void);
#define xProcessReceivedUDPPacket_ExpectAnyArgsAndReturn(cmock_retval) xProcessReceivedUDPPacket_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xProcessReceivedUDPPacket_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xProcessReceivedUDPPacket_ExpectAndReturn(pxNetworkBuffer, usPort, pxIsWaitingForARPResolution, cmock_retval) xProcessReceivedUDPPacket_CMockExpectAndReturn(__LINE__, pxNetworkBuffer, usPort, pxIsWaitingForARPResolution, cmock_retval)
void xProcessReceivedUDPPacket_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxNetworkBuffer, uint16_t usPort, BaseType_t* pxIsWaitingForARPResolution, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xProcessReceivedUDPPacket_CALLBACK)(NetworkBufferDescriptor_t* pxNetworkBuffer, uint16_t usPort, BaseType_t* pxIsWaitingForARPResolution, int cmock_num_calls);
void xProcessReceivedUDPPacket_AddCallback(CMOCK_xProcessReceivedUDPPacket_CALLBACK Callback);
void xProcessReceivedUDPPacket_Stub(CMOCK_xProcessReceivedUDPPacket_CALLBACK Callback);
#define xProcessReceivedUDPPacket_StubWithCallback xProcessReceivedUDPPacket_Stub
#define xProcessReceivedUDPPacket_ExpectWithArrayAndReturn(pxNetworkBuffer, pxNetworkBuffer_Depth, usPort, pxIsWaitingForARPResolution, pxIsWaitingForARPResolution_Depth, cmock_retval) xProcessReceivedUDPPacket_CMockExpectWithArrayAndReturn(__LINE__, pxNetworkBuffer, pxNetworkBuffer_Depth, usPort, pxIsWaitingForARPResolution, pxIsWaitingForARPResolution_Depth, cmock_retval)
void xProcessReceivedUDPPacket_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxNetworkBuffer, int pxNetworkBuffer_Depth, uint16_t usPort, BaseType_t* pxIsWaitingForARPResolution, int pxIsWaitingForARPResolution_Depth, BaseType_t cmock_to_return);
#define xProcessReceivedUDPPacket_ReturnThruPtr_pxNetworkBuffer(pxNetworkBuffer) xProcessReceivedUDPPacket_CMockReturnMemThruPtr_pxNetworkBuffer(__LINE__, pxNetworkBuffer, sizeof(NetworkBufferDescriptor_t))
#define xProcessReceivedUDPPacket_ReturnArrayThruPtr_pxNetworkBuffer(pxNetworkBuffer, cmock_len) xProcessReceivedUDPPacket_CMockReturnMemThruPtr_pxNetworkBuffer(__LINE__, pxNetworkBuffer, (int)(cmock_len * (int)sizeof(*pxNetworkBuffer)))
#define xProcessReceivedUDPPacket_ReturnMemThruPtr_pxNetworkBuffer(pxNetworkBuffer, cmock_size) xProcessReceivedUDPPacket_CMockReturnMemThruPtr_pxNetworkBuffer(__LINE__, pxNetworkBuffer, cmock_size)
void xProcessReceivedUDPPacket_CMockReturnMemThruPtr_pxNetworkBuffer(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxNetworkBuffer, int cmock_size);
#define xProcessReceivedUDPPacket_ReturnThruPtr_pxIsWaitingForARPResolution(pxIsWaitingForARPResolution) xProcessReceivedUDPPacket_CMockReturnMemThruPtr_pxIsWaitingForARPResolution(__LINE__, pxIsWaitingForARPResolution, sizeof(BaseType_t))
#define xProcessReceivedUDPPacket_ReturnArrayThruPtr_pxIsWaitingForARPResolution(pxIsWaitingForARPResolution, cmock_len) xProcessReceivedUDPPacket_CMockReturnMemThruPtr_pxIsWaitingForARPResolution(__LINE__, pxIsWaitingForARPResolution, (int)(cmock_len * (int)sizeof(*pxIsWaitingForARPResolution)))
#define xProcessReceivedUDPPacket_ReturnMemThruPtr_pxIsWaitingForARPResolution(pxIsWaitingForARPResolution, cmock_size) xProcessReceivedUDPPacket_CMockReturnMemThruPtr_pxIsWaitingForARPResolution(__LINE__, pxIsWaitingForARPResolution, cmock_size)
void xProcessReceivedUDPPacket_CMockReturnMemThruPtr_pxIsWaitingForARPResolution(UNITY_LINE_TYPE cmock_line, BaseType_t* pxIsWaitingForARPResolution, int cmock_size);
#define xProcessReceivedUDPPacket_IgnoreArg_pxNetworkBuffer() xProcessReceivedUDPPacket_CMockIgnoreArg_pxNetworkBuffer(__LINE__)
void xProcessReceivedUDPPacket_CMockIgnoreArg_pxNetworkBuffer(UNITY_LINE_TYPE cmock_line);
#define xProcessReceivedUDPPacket_IgnoreArg_usPort() xProcessReceivedUDPPacket_CMockIgnoreArg_usPort(__LINE__)
void xProcessReceivedUDPPacket_CMockIgnoreArg_usPort(UNITY_LINE_TYPE cmock_line);
#define xProcessReceivedUDPPacket_IgnoreArg_pxIsWaitingForARPResolution() xProcessReceivedUDPPacket_CMockIgnoreArg_pxIsWaitingForARPResolution(__LINE__)
void xProcessReceivedUDPPacket_CMockIgnoreArg_pxIsWaitingForARPResolution(UNITY_LINE_TYPE cmock_line);
#define vNetworkSocketsInit_Ignore() vNetworkSocketsInit_CMockIgnore()
void vNetworkSocketsInit_CMockIgnore(void);
#define vNetworkSocketsInit_StopIgnore() vNetworkSocketsInit_CMockStopIgnore()
void vNetworkSocketsInit_CMockStopIgnore(void);
#define vNetworkSocketsInit_Expect() vNetworkSocketsInit_CMockExpect(__LINE__)
void vNetworkSocketsInit_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_vNetworkSocketsInit_CALLBACK)(int cmock_num_calls);
void vNetworkSocketsInit_AddCallback(CMOCK_vNetworkSocketsInit_CALLBACK Callback);
void vNetworkSocketsInit_Stub(CMOCK_vNetworkSocketsInit_CALLBACK Callback);
#define vNetworkSocketsInit_StubWithCallback vNetworkSocketsInit_Stub
#define xIPIsNetworkTaskReady_IgnoreAndReturn(cmock_retval) xIPIsNetworkTaskReady_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xIPIsNetworkTaskReady_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xIPIsNetworkTaskReady_StopIgnore() xIPIsNetworkTaskReady_CMockStopIgnore()
void xIPIsNetworkTaskReady_CMockStopIgnore(void);
#define xIPIsNetworkTaskReady_ExpectAndReturn(cmock_retval) xIPIsNetworkTaskReady_CMockExpectAndReturn(__LINE__, cmock_retval)
void xIPIsNetworkTaskReady_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xIPIsNetworkTaskReady_CALLBACK)(int cmock_num_calls);
void xIPIsNetworkTaskReady_AddCallback(CMOCK_xIPIsNetworkTaskReady_CALLBACK Callback);
void xIPIsNetworkTaskReady_Stub(CMOCK_xIPIsNetworkTaskReady_CALLBACK Callback);
#define xIPIsNetworkTaskReady_StubWithCallback xIPIsNetworkTaskReady_Stub
#define vTCPNetStat_Ignore() vTCPNetStat_CMockIgnore()
void vTCPNetStat_CMockIgnore(void);
#define vTCPNetStat_StopIgnore() vTCPNetStat_CMockStopIgnore()
void vTCPNetStat_CMockStopIgnore(void);
#define vTCPNetStat_Expect() vTCPNetStat_CMockExpect(__LINE__)
void vTCPNetStat_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_vTCPNetStat_CALLBACK)(int cmock_num_calls);
void vTCPNetStat_AddCallback(CMOCK_vTCPNetStat_CALLBACK Callback);
void vTCPNetStat_Stub(CMOCK_vTCPNetStat_CALLBACK Callback);
#define vTCPNetStat_StubWithCallback vTCPNetStat_Stub
#define xTCPTimerCheck_IgnoreAndReturn(cmock_retval) xTCPTimerCheck_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTCPTimerCheck_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TickType_t cmock_to_return);
#define xTCPTimerCheck_StopIgnore() xTCPTimerCheck_CMockStopIgnore()
void xTCPTimerCheck_CMockStopIgnore(void);
#define xTCPTimerCheck_ExpectAnyArgsAndReturn(cmock_retval) xTCPTimerCheck_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTCPTimerCheck_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, TickType_t cmock_to_return);
#define xTCPTimerCheck_ExpectAndReturn(xWillSleep, cmock_retval) xTCPTimerCheck_CMockExpectAndReturn(__LINE__, xWillSleep, cmock_retval)
void xTCPTimerCheck_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t xWillSleep, TickType_t cmock_to_return);
typedef TickType_t (* CMOCK_xTCPTimerCheck_CALLBACK)(BaseType_t xWillSleep, int cmock_num_calls);
void xTCPTimerCheck_AddCallback(CMOCK_xTCPTimerCheck_CALLBACK Callback);
void xTCPTimerCheck_Stub(CMOCK_xTCPTimerCheck_CALLBACK Callback);
#define xTCPTimerCheck_StubWithCallback xTCPTimerCheck_Stub
#define xTCPTimerCheck_IgnoreArg_xWillSleep() xTCPTimerCheck_CMockIgnoreArg_xWillSleep(__LINE__)
void xTCPTimerCheck_CMockIgnoreArg_xWillSleep(UNITY_LINE_TYPE cmock_line);
#define vSocketCloseNextTime_Ignore() vSocketCloseNextTime_CMockIgnore()
void vSocketCloseNextTime_CMockIgnore(void);
#define vSocketCloseNextTime_StopIgnore() vSocketCloseNextTime_CMockStopIgnore()
void vSocketCloseNextTime_CMockStopIgnore(void);
#define vSocketCloseNextTime_ExpectAnyArgs() vSocketCloseNextTime_CMockExpectAnyArgs(__LINE__)
void vSocketCloseNextTime_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vSocketCloseNextTime_Expect(pxSocket) vSocketCloseNextTime_CMockExpect(__LINE__, pxSocket)
void vSocketCloseNextTime_CMockExpect(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket);
typedef void (* CMOCK_vSocketCloseNextTime_CALLBACK)(FreeRTOS_Socket_t* pxSocket, int cmock_num_calls);
void vSocketCloseNextTime_AddCallback(CMOCK_vSocketCloseNextTime_CALLBACK Callback);
void vSocketCloseNextTime_Stub(CMOCK_vSocketCloseNextTime_CALLBACK Callback);
#define vSocketCloseNextTime_StubWithCallback vSocketCloseNextTime_Stub
#define vSocketCloseNextTime_ExpectWithArray(pxSocket, pxSocket_Depth) vSocketCloseNextTime_CMockExpectWithArray(__LINE__, pxSocket, pxSocket_Depth)
void vSocketCloseNextTime_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, int pxSocket_Depth);
#define vSocketCloseNextTime_ReturnThruPtr_pxSocket(pxSocket) vSocketCloseNextTime_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, sizeof(FreeRTOS_Socket_t))
#define vSocketCloseNextTime_ReturnArrayThruPtr_pxSocket(pxSocket, cmock_len) vSocketCloseNextTime_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, (int)(cmock_len * (int)sizeof(*pxSocket)))
#define vSocketCloseNextTime_ReturnMemThruPtr_pxSocket(pxSocket, cmock_size) vSocketCloseNextTime_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, cmock_size)
void vSocketCloseNextTime_CMockReturnMemThruPtr_pxSocket(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, int cmock_size);
#define vSocketCloseNextTime_IgnoreArg_pxSocket() vSocketCloseNextTime_CMockIgnoreArg_pxSocket(__LINE__)
void vSocketCloseNextTime_CMockIgnoreArg_pxSocket(UNITY_LINE_TYPE cmock_line);
#define vSocketListenNextTime_Ignore() vSocketListenNextTime_CMockIgnore()
void vSocketListenNextTime_CMockIgnore(void);
#define vSocketListenNextTime_StopIgnore() vSocketListenNextTime_CMockStopIgnore()
void vSocketListenNextTime_CMockStopIgnore(void);
#define vSocketListenNextTime_ExpectAnyArgs() vSocketListenNextTime_CMockExpectAnyArgs(__LINE__)
void vSocketListenNextTime_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vSocketListenNextTime_Expect(pxSocket) vSocketListenNextTime_CMockExpect(__LINE__, pxSocket)
void vSocketListenNextTime_CMockExpect(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket);
typedef void (* CMOCK_vSocketListenNextTime_CALLBACK)(FreeRTOS_Socket_t* pxSocket, int cmock_num_calls);
void vSocketListenNextTime_AddCallback(CMOCK_vSocketListenNextTime_CALLBACK Callback);
void vSocketListenNextTime_Stub(CMOCK_vSocketListenNextTime_CALLBACK Callback);
#define vSocketListenNextTime_StubWithCallback vSocketListenNextTime_Stub
#define vSocketListenNextTime_ExpectWithArray(pxSocket, pxSocket_Depth) vSocketListenNextTime_CMockExpectWithArray(__LINE__, pxSocket, pxSocket_Depth)
void vSocketListenNextTime_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, int pxSocket_Depth);
#define vSocketListenNextTime_ReturnThruPtr_pxSocket(pxSocket) vSocketListenNextTime_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, sizeof(FreeRTOS_Socket_t))
#define vSocketListenNextTime_ReturnArrayThruPtr_pxSocket(pxSocket, cmock_len) vSocketListenNextTime_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, (int)(cmock_len * (int)sizeof(*pxSocket)))
#define vSocketListenNextTime_ReturnMemThruPtr_pxSocket(pxSocket, cmock_size) vSocketListenNextTime_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, cmock_size)
void vSocketListenNextTime_CMockReturnMemThruPtr_pxSocket(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, int cmock_size);
#define vSocketListenNextTime_IgnoreArg_pxSocket() vSocketListenNextTime_CMockIgnoreArg_pxSocket(__LINE__)
void vSocketListenNextTime_CMockIgnoreArg_pxSocket(UNITY_LINE_TYPE cmock_line);
#define pxTCPSocketLookup_IgnoreAndReturn(cmock_retval) pxTCPSocketLookup_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pxTCPSocketLookup_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* cmock_to_return);
#define pxTCPSocketLookup_StopIgnore() pxTCPSocketLookup_CMockStopIgnore()
void pxTCPSocketLookup_CMockStopIgnore(void);
#define pxTCPSocketLookup_ExpectAnyArgsAndReturn(cmock_retval) pxTCPSocketLookup_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void pxTCPSocketLookup_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* cmock_to_return);
#define pxTCPSocketLookup_ExpectAndReturn(ulLocalIP, uxLocalPort, ulRemoteIP, uxRemotePort, cmock_retval) pxTCPSocketLookup_CMockExpectAndReturn(__LINE__, ulLocalIP, uxLocalPort, ulRemoteIP, uxRemotePort, cmock_retval)
void pxTCPSocketLookup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t ulLocalIP, UBaseType_t uxLocalPort, IP_Address_t ulRemoteIP, UBaseType_t uxRemotePort, FreeRTOS_Socket_t* cmock_to_return);
typedef FreeRTOS_Socket_t* (* CMOCK_pxTCPSocketLookup_CALLBACK)(uint32_t ulLocalIP, UBaseType_t uxLocalPort, IP_Address_t ulRemoteIP, UBaseType_t uxRemotePort, int cmock_num_calls);
void pxTCPSocketLookup_AddCallback(CMOCK_pxTCPSocketLookup_CALLBACK Callback);
void pxTCPSocketLookup_Stub(CMOCK_pxTCPSocketLookup_CALLBACK Callback);
#define pxTCPSocketLookup_StubWithCallback pxTCPSocketLookup_Stub
#define pxTCPSocketLookup_IgnoreArg_ulLocalIP() pxTCPSocketLookup_CMockIgnoreArg_ulLocalIP(__LINE__)
void pxTCPSocketLookup_CMockIgnoreArg_ulLocalIP(UNITY_LINE_TYPE cmock_line);
#define pxTCPSocketLookup_IgnoreArg_uxLocalPort() pxTCPSocketLookup_CMockIgnoreArg_uxLocalPort(__LINE__)
void pxTCPSocketLookup_CMockIgnoreArg_uxLocalPort(UNITY_LINE_TYPE cmock_line);
#define pxTCPSocketLookup_IgnoreArg_ulRemoteIP() pxTCPSocketLookup_CMockIgnoreArg_ulRemoteIP(__LINE__)
void pxTCPSocketLookup_CMockIgnoreArg_ulRemoteIP(UNITY_LINE_TYPE cmock_line);
#define pxTCPSocketLookup_IgnoreArg_uxRemotePort() pxTCPSocketLookup_CMockIgnoreArg_uxRemotePort(__LINE__)
void pxTCPSocketLookup_CMockIgnoreArg_uxRemotePort(UNITY_LINE_TYPE cmock_line);
#define pxUDPSocketLookup_IgnoreAndReturn(cmock_retval) pxUDPSocketLookup_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pxUDPSocketLookup_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* cmock_to_return);
#define pxUDPSocketLookup_StopIgnore() pxUDPSocketLookup_CMockStopIgnore()
void pxUDPSocketLookup_CMockStopIgnore(void);
#define pxUDPSocketLookup_ExpectAnyArgsAndReturn(cmock_retval) pxUDPSocketLookup_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void pxUDPSocketLookup_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* cmock_to_return);
#define pxUDPSocketLookup_ExpectAndReturn(uxLocalPort, cmock_retval) pxUDPSocketLookup_CMockExpectAndReturn(__LINE__, uxLocalPort, cmock_retval)
void pxUDPSocketLookup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t uxLocalPort, FreeRTOS_Socket_t* cmock_to_return);
typedef FreeRTOS_Socket_t* (* CMOCK_pxUDPSocketLookup_CALLBACK)(UBaseType_t uxLocalPort, int cmock_num_calls);
void pxUDPSocketLookup_AddCallback(CMOCK_pxUDPSocketLookup_CALLBACK Callback);
void pxUDPSocketLookup_Stub(CMOCK_pxUDPSocketLookup_CALLBACK Callback);
#define pxUDPSocketLookup_StubWithCallback pxUDPSocketLookup_Stub
#define pxUDPSocketLookup_IgnoreArg_uxLocalPort() pxUDPSocketLookup_CMockIgnoreArg_uxLocalPort(__LINE__)
void pxUDPSocketLookup_CMockIgnoreArg_uxLocalPort(UNITY_LINE_TYPE cmock_line);
#define usGenerateProtocolChecksum_IgnoreAndReturn(cmock_retval) usGenerateProtocolChecksum_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void usGenerateProtocolChecksum_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
#define usGenerateProtocolChecksum_StopIgnore() usGenerateProtocolChecksum_CMockStopIgnore()
void usGenerateProtocolChecksum_CMockStopIgnore(void);
#define usGenerateProtocolChecksum_ExpectAnyArgsAndReturn(cmock_retval) usGenerateProtocolChecksum_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void usGenerateProtocolChecksum_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
#define usGenerateProtocolChecksum_ExpectAndReturn(pucEthernetBuffer, uxBufferLength, xOutgoingPacket, cmock_retval) usGenerateProtocolChecksum_CMockExpectAndReturn(__LINE__, pucEthernetBuffer, uxBufferLength, xOutgoingPacket, cmock_retval)
void usGenerateProtocolChecksum_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* pucEthernetBuffer, size_t uxBufferLength, BaseType_t xOutgoingPacket, uint16_t cmock_to_return);
typedef uint16_t (* CMOCK_usGenerateProtocolChecksum_CALLBACK)(uint8_t* pucEthernetBuffer, size_t uxBufferLength, BaseType_t xOutgoingPacket, int cmock_num_calls);
void usGenerateProtocolChecksum_AddCallback(CMOCK_usGenerateProtocolChecksum_CALLBACK Callback);
void usGenerateProtocolChecksum_Stub(CMOCK_usGenerateProtocolChecksum_CALLBACK Callback);
#define usGenerateProtocolChecksum_StubWithCallback usGenerateProtocolChecksum_Stub
#define usGenerateProtocolChecksum_ExpectWithArrayAndReturn(pucEthernetBuffer, pucEthernetBuffer_Depth, uxBufferLength, xOutgoingPacket, cmock_retval) usGenerateProtocolChecksum_CMockExpectWithArrayAndReturn(__LINE__, pucEthernetBuffer, pucEthernetBuffer_Depth, uxBufferLength, xOutgoingPacket, cmock_retval)
void usGenerateProtocolChecksum_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* pucEthernetBuffer, int pucEthernetBuffer_Depth, size_t uxBufferLength, BaseType_t xOutgoingPacket, uint16_t cmock_to_return);
#define usGenerateProtocolChecksum_ReturnThruPtr_pucEthernetBuffer(pucEthernetBuffer) usGenerateProtocolChecksum_CMockReturnMemThruPtr_pucEthernetBuffer(__LINE__, pucEthernetBuffer, sizeof(uint8_t))
#define usGenerateProtocolChecksum_ReturnArrayThruPtr_pucEthernetBuffer(pucEthernetBuffer, cmock_len) usGenerateProtocolChecksum_CMockReturnMemThruPtr_pucEthernetBuffer(__LINE__, pucEthernetBuffer, (int)(cmock_len * (int)sizeof(*pucEthernetBuffer)))
#define usGenerateProtocolChecksum_ReturnMemThruPtr_pucEthernetBuffer(pucEthernetBuffer, cmock_size) usGenerateProtocolChecksum_CMockReturnMemThruPtr_pucEthernetBuffer(__LINE__, pucEthernetBuffer, cmock_size)
void usGenerateProtocolChecksum_CMockReturnMemThruPtr_pucEthernetBuffer(UNITY_LINE_TYPE cmock_line, uint8_t* pucEthernetBuffer, int cmock_size);
#define usGenerateProtocolChecksum_IgnoreArg_pucEthernetBuffer() usGenerateProtocolChecksum_CMockIgnoreArg_pucEthernetBuffer(__LINE__)
void usGenerateProtocolChecksum_CMockIgnoreArg_pucEthernetBuffer(UNITY_LINE_TYPE cmock_line);
#define usGenerateProtocolChecksum_IgnoreArg_uxBufferLength() usGenerateProtocolChecksum_CMockIgnoreArg_uxBufferLength(__LINE__)
void usGenerateProtocolChecksum_CMockIgnoreArg_uxBufferLength(UNITY_LINE_TYPE cmock_line);
#define usGenerateProtocolChecksum_IgnoreArg_xOutgoingPacket() usGenerateProtocolChecksum_CMockIgnoreArg_xOutgoingPacket(__LINE__)
void usGenerateProtocolChecksum_CMockIgnoreArg_xOutgoingPacket(UNITY_LINE_TYPE cmock_line);
#define vReturnEthernetFrame_Ignore() vReturnEthernetFrame_CMockIgnore()
void vReturnEthernetFrame_CMockIgnore(void);
#define vReturnEthernetFrame_StopIgnore() vReturnEthernetFrame_CMockStopIgnore()
void vReturnEthernetFrame_CMockStopIgnore(void);
#define vReturnEthernetFrame_ExpectAnyArgs() vReturnEthernetFrame_CMockExpectAnyArgs(__LINE__)
void vReturnEthernetFrame_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vReturnEthernetFrame_Expect(pxNetworkBuffer, xReleaseAfterSend) vReturnEthernetFrame_CMockExpect(__LINE__, pxNetworkBuffer, xReleaseAfterSend)
void vReturnEthernetFrame_CMockExpect(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxNetworkBuffer, BaseType_t xReleaseAfterSend);
typedef void (* CMOCK_vReturnEthernetFrame_CALLBACK)(NetworkBufferDescriptor_t* pxNetworkBuffer, BaseType_t xReleaseAfterSend, int cmock_num_calls);
void vReturnEthernetFrame_AddCallback(CMOCK_vReturnEthernetFrame_CALLBACK Callback);
void vReturnEthernetFrame_Stub(CMOCK_vReturnEthernetFrame_CALLBACK Callback);
#define vReturnEthernetFrame_StubWithCallback vReturnEthernetFrame_Stub
#define vReturnEthernetFrame_ExpectWithArray(pxNetworkBuffer, pxNetworkBuffer_Depth, xReleaseAfterSend) vReturnEthernetFrame_CMockExpectWithArray(__LINE__, pxNetworkBuffer, pxNetworkBuffer_Depth, xReleaseAfterSend)
void vReturnEthernetFrame_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxNetworkBuffer, int pxNetworkBuffer_Depth, BaseType_t xReleaseAfterSend);
#define vReturnEthernetFrame_ReturnThruPtr_pxNetworkBuffer(pxNetworkBuffer) vReturnEthernetFrame_CMockReturnMemThruPtr_pxNetworkBuffer(__LINE__, pxNetworkBuffer, sizeof(NetworkBufferDescriptor_t))
#define vReturnEthernetFrame_ReturnArrayThruPtr_pxNetworkBuffer(pxNetworkBuffer, cmock_len) vReturnEthernetFrame_CMockReturnMemThruPtr_pxNetworkBuffer(__LINE__, pxNetworkBuffer, (int)(cmock_len * (int)sizeof(*pxNetworkBuffer)))
#define vReturnEthernetFrame_ReturnMemThruPtr_pxNetworkBuffer(pxNetworkBuffer, cmock_size) vReturnEthernetFrame_CMockReturnMemThruPtr_pxNetworkBuffer(__LINE__, pxNetworkBuffer, cmock_size)
void vReturnEthernetFrame_CMockReturnMemThruPtr_pxNetworkBuffer(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxNetworkBuffer, int cmock_size);
#define vReturnEthernetFrame_IgnoreArg_pxNetworkBuffer() vReturnEthernetFrame_CMockIgnoreArg_pxNetworkBuffer(__LINE__)
void vReturnEthernetFrame_CMockIgnoreArg_pxNetworkBuffer(UNITY_LINE_TYPE cmock_line);
#define vReturnEthernetFrame_IgnoreArg_xReleaseAfterSend() vReturnEthernetFrame_CMockIgnoreArg_xReleaseAfterSend(__LINE__)
void vReturnEthernetFrame_CMockIgnoreArg_xReleaseAfterSend(UNITY_LINE_TYPE cmock_line);
#define vSocketBind_IgnoreAndReturn(cmock_retval) vSocketBind_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void vSocketBind_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define vSocketBind_StopIgnore() vSocketBind_CMockStopIgnore()
void vSocketBind_CMockStopIgnore(void);
#define vSocketBind_ExpectAnyArgsAndReturn(cmock_retval) vSocketBind_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void vSocketBind_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define vSocketBind_ExpectAndReturn(pxSocket, pxBindAddress, uxAddressLength, xInternal, cmock_retval) vSocketBind_CMockExpectAndReturn(__LINE__, pxSocket, pxBindAddress, uxAddressLength, xInternal, cmock_retval)
void vSocketBind_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, struct freertos_sockaddr* pxBindAddress, size_t uxAddressLength, BaseType_t xInternal, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_vSocketBind_CALLBACK)(FreeRTOS_Socket_t* pxSocket, struct freertos_sockaddr* pxBindAddress, size_t uxAddressLength, BaseType_t xInternal, int cmock_num_calls);
void vSocketBind_AddCallback(CMOCK_vSocketBind_CALLBACK Callback);
void vSocketBind_Stub(CMOCK_vSocketBind_CALLBACK Callback);
#define vSocketBind_StubWithCallback vSocketBind_Stub
#define vSocketBind_ExpectWithArrayAndReturn(pxSocket, pxSocket_Depth, pxBindAddress, pxBindAddress_Depth, uxAddressLength, xInternal, cmock_retval) vSocketBind_CMockExpectWithArrayAndReturn(__LINE__, pxSocket, pxSocket_Depth, pxBindAddress, pxBindAddress_Depth, uxAddressLength, xInternal, cmock_retval)
void vSocketBind_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, int pxSocket_Depth, struct freertos_sockaddr* pxBindAddress, int pxBindAddress_Depth, size_t uxAddressLength, BaseType_t xInternal, BaseType_t cmock_to_return);
#define vSocketBind_ReturnThruPtr_pxSocket(pxSocket) vSocketBind_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, sizeof(FreeRTOS_Socket_t))
#define vSocketBind_ReturnArrayThruPtr_pxSocket(pxSocket, cmock_len) vSocketBind_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, (int)(cmock_len * (int)sizeof(*pxSocket)))
#define vSocketBind_ReturnMemThruPtr_pxSocket(pxSocket, cmock_size) vSocketBind_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, cmock_size)
void vSocketBind_CMockReturnMemThruPtr_pxSocket(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, int cmock_size);
#define vSocketBind_ReturnThruPtr_pxBindAddress(pxBindAddress) vSocketBind_CMockReturnMemThruPtr_pxBindAddress(__LINE__, pxBindAddress, sizeof(struct freertos_sockaddr))
#define vSocketBind_ReturnArrayThruPtr_pxBindAddress(pxBindAddress, cmock_len) vSocketBind_CMockReturnMemThruPtr_pxBindAddress(__LINE__, pxBindAddress, (int)(cmock_len * (int)sizeof(*pxBindAddress)))
#define vSocketBind_ReturnMemThruPtr_pxBindAddress(pxBindAddress, cmock_size) vSocketBind_CMockReturnMemThruPtr_pxBindAddress(__LINE__, pxBindAddress, cmock_size)
void vSocketBind_CMockReturnMemThruPtr_pxBindAddress(UNITY_LINE_TYPE cmock_line, struct freertos_sockaddr* pxBindAddress, int cmock_size);
#define vSocketBind_IgnoreArg_pxSocket() vSocketBind_CMockIgnoreArg_pxSocket(__LINE__)
void vSocketBind_CMockIgnoreArg_pxSocket(UNITY_LINE_TYPE cmock_line);
#define vSocketBind_IgnoreArg_pxBindAddress() vSocketBind_CMockIgnoreArg_pxBindAddress(__LINE__)
void vSocketBind_CMockIgnoreArg_pxBindAddress(UNITY_LINE_TYPE cmock_line);
#define vSocketBind_IgnoreArg_uxAddressLength() vSocketBind_CMockIgnoreArg_uxAddressLength(__LINE__)
void vSocketBind_CMockIgnoreArg_uxAddressLength(UNITY_LINE_TYPE cmock_line);
#define vSocketBind_IgnoreArg_xInternal() vSocketBind_CMockIgnoreArg_xInternal(__LINE__)
void vSocketBind_CMockIgnoreArg_xInternal(UNITY_LINE_TYPE cmock_line);
#define lTCPAddRxdata_IgnoreAndReturn(cmock_retval) lTCPAddRxdata_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void lTCPAddRxdata_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define lTCPAddRxdata_StopIgnore() lTCPAddRxdata_CMockStopIgnore()
void lTCPAddRxdata_CMockStopIgnore(void);
#define lTCPAddRxdata_ExpectAnyArgsAndReturn(cmock_retval) lTCPAddRxdata_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void lTCPAddRxdata_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define lTCPAddRxdata_ExpectAndReturn(pxSocket, uxOffset, pcData, ulByteCount, cmock_retval) lTCPAddRxdata_CMockExpectAndReturn(__LINE__, pxSocket, uxOffset, pcData, ulByteCount, cmock_retval)
void lTCPAddRxdata_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, size_t uxOffset, const uint8_t* pcData, uint32_t ulByteCount, int32_t cmock_to_return);
typedef int32_t (* CMOCK_lTCPAddRxdata_CALLBACK)(FreeRTOS_Socket_t* pxSocket, size_t uxOffset, const uint8_t* pcData, uint32_t ulByteCount, int cmock_num_calls);
void lTCPAddRxdata_AddCallback(CMOCK_lTCPAddRxdata_CALLBACK Callback);
void lTCPAddRxdata_Stub(CMOCK_lTCPAddRxdata_CALLBACK Callback);
#define lTCPAddRxdata_StubWithCallback lTCPAddRxdata_Stub
#define lTCPAddRxdata_ExpectWithArrayAndReturn(pxSocket, pxSocket_Depth, uxOffset, pcData, pcData_Depth, ulByteCount, cmock_retval) lTCPAddRxdata_CMockExpectWithArrayAndReturn(__LINE__, pxSocket, pxSocket_Depth, uxOffset, pcData, pcData_Depth, ulByteCount, cmock_retval)
void lTCPAddRxdata_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, int pxSocket_Depth, size_t uxOffset, const uint8_t* pcData, int pcData_Depth, uint32_t ulByteCount, int32_t cmock_to_return);
#define lTCPAddRxdata_ReturnThruPtr_pxSocket(pxSocket) lTCPAddRxdata_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, sizeof(FreeRTOS_Socket_t))
#define lTCPAddRxdata_ReturnArrayThruPtr_pxSocket(pxSocket, cmock_len) lTCPAddRxdata_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, (int)(cmock_len * (int)sizeof(*pxSocket)))
#define lTCPAddRxdata_ReturnMemThruPtr_pxSocket(pxSocket, cmock_size) lTCPAddRxdata_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, cmock_size)
void lTCPAddRxdata_CMockReturnMemThruPtr_pxSocket(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, int cmock_size);
#define lTCPAddRxdata_IgnoreArg_pxSocket() lTCPAddRxdata_CMockIgnoreArg_pxSocket(__LINE__)
void lTCPAddRxdata_CMockIgnoreArg_pxSocket(UNITY_LINE_TYPE cmock_line);
#define lTCPAddRxdata_IgnoreArg_uxOffset() lTCPAddRxdata_CMockIgnoreArg_uxOffset(__LINE__)
void lTCPAddRxdata_CMockIgnoreArg_uxOffset(UNITY_LINE_TYPE cmock_line);
#define lTCPAddRxdata_IgnoreArg_pcData() lTCPAddRxdata_CMockIgnoreArg_pcData(__LINE__)
void lTCPAddRxdata_CMockIgnoreArg_pcData(UNITY_LINE_TYPE cmock_line);
#define lTCPAddRxdata_IgnoreArg_ulByteCount() lTCPAddRxdata_CMockIgnoreArg_ulByteCount(__LINE__)
void lTCPAddRxdata_CMockIgnoreArg_ulByteCount(UNITY_LINE_TYPE cmock_line);
#define vSocketWakeUpUser_Ignore() vSocketWakeUpUser_CMockIgnore()
void vSocketWakeUpUser_CMockIgnore(void);
#define vSocketWakeUpUser_StopIgnore() vSocketWakeUpUser_CMockStopIgnore()
void vSocketWakeUpUser_CMockStopIgnore(void);
#define vSocketWakeUpUser_ExpectAnyArgs() vSocketWakeUpUser_CMockExpectAnyArgs(__LINE__)
void vSocketWakeUpUser_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vSocketWakeUpUser_Expect(pxSocket) vSocketWakeUpUser_CMockExpect(__LINE__, pxSocket)
void vSocketWakeUpUser_CMockExpect(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket);
typedef void (* CMOCK_vSocketWakeUpUser_CALLBACK)(FreeRTOS_Socket_t* pxSocket, int cmock_num_calls);
void vSocketWakeUpUser_AddCallback(CMOCK_vSocketWakeUpUser_CALLBACK Callback);
void vSocketWakeUpUser_Stub(CMOCK_vSocketWakeUpUser_CALLBACK Callback);
#define vSocketWakeUpUser_StubWithCallback vSocketWakeUpUser_Stub
#define vSocketWakeUpUser_ExpectWithArray(pxSocket, pxSocket_Depth) vSocketWakeUpUser_CMockExpectWithArray(__LINE__, pxSocket, pxSocket_Depth)
void vSocketWakeUpUser_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, int pxSocket_Depth);
#define vSocketWakeUpUser_ReturnThruPtr_pxSocket(pxSocket) vSocketWakeUpUser_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, sizeof(FreeRTOS_Socket_t))
#define vSocketWakeUpUser_ReturnArrayThruPtr_pxSocket(pxSocket, cmock_len) vSocketWakeUpUser_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, (int)(cmock_len * (int)sizeof(*pxSocket)))
#define vSocketWakeUpUser_ReturnMemThruPtr_pxSocket(pxSocket, cmock_size) vSocketWakeUpUser_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, cmock_size)
void vSocketWakeUpUser_CMockReturnMemThruPtr_pxSocket(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, int cmock_size);
#define vSocketWakeUpUser_IgnoreArg_pxSocket() vSocketWakeUpUser_CMockIgnoreArg_pxSocket(__LINE__)
void vSocketWakeUpUser_CMockIgnoreArg_pxSocket(UNITY_LINE_TYPE cmock_line);
#define ulChar2u32_IgnoreAndReturn(cmock_retval) ulChar2u32_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ulChar2u32_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulChar2u32_StopIgnore() ulChar2u32_CMockStopIgnore()
void ulChar2u32_CMockStopIgnore(void);
#define ulChar2u32_ExpectAnyArgsAndReturn(cmock_retval) ulChar2u32_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ulChar2u32_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulChar2u32_ExpectAndReturn(pucPtr, cmock_retval) ulChar2u32_CMockExpectAndReturn(__LINE__, pucPtr, cmock_retval)
void ulChar2u32_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const uint8_t* pucPtr, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_ulChar2u32_CALLBACK)(const uint8_t* pucPtr, int cmock_num_calls);
void ulChar2u32_AddCallback(CMOCK_ulChar2u32_CALLBACK Callback);
void ulChar2u32_Stub(CMOCK_ulChar2u32_CALLBACK Callback);
#define ulChar2u32_StubWithCallback ulChar2u32_Stub
#define ulChar2u32_ExpectWithArrayAndReturn(pucPtr, pucPtr_Depth, cmock_retval) ulChar2u32_CMockExpectWithArrayAndReturn(__LINE__, pucPtr, pucPtr_Depth, cmock_retval)
void ulChar2u32_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const uint8_t* pucPtr, int pucPtr_Depth, uint32_t cmock_to_return);
#define ulChar2u32_IgnoreArg_pucPtr() ulChar2u32_CMockIgnoreArg_pucPtr(__LINE__)
void ulChar2u32_CMockIgnoreArg_pucPtr(UNITY_LINE_TYPE cmock_line);
#define usChar2u16_IgnoreAndReturn(cmock_retval) usChar2u16_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void usChar2u16_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
#define usChar2u16_StopIgnore() usChar2u16_CMockStopIgnore()
void usChar2u16_CMockStopIgnore(void);
#define usChar2u16_ExpectAnyArgsAndReturn(cmock_retval) usChar2u16_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void usChar2u16_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
#define usChar2u16_ExpectAndReturn(pucPtr, cmock_retval) usChar2u16_CMockExpectAndReturn(__LINE__, pucPtr, cmock_retval)
void usChar2u16_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const uint8_t* pucPtr, uint16_t cmock_to_return);
typedef uint16_t (* CMOCK_usChar2u16_CALLBACK)(const uint8_t* pucPtr, int cmock_num_calls);
void usChar2u16_AddCallback(CMOCK_usChar2u16_CALLBACK Callback);
void usChar2u16_Stub(CMOCK_usChar2u16_CALLBACK Callback);
#define usChar2u16_StubWithCallback usChar2u16_Stub
#define usChar2u16_ExpectWithArrayAndReturn(pucPtr, pucPtr_Depth, cmock_retval) usChar2u16_CMockExpectWithArrayAndReturn(__LINE__, pucPtr, pucPtr_Depth, cmock_retval)
void usChar2u16_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const uint8_t* pucPtr, int pucPtr_Depth, uint16_t cmock_to_return);
#define usChar2u16_IgnoreArg_pucPtr() usChar2u16_CMockIgnoreArg_pucPtr(__LINE__)
void usChar2u16_CMockIgnoreArg_pucPtr(UNITY_LINE_TYPE cmock_line);
#define xTCPSocketCheck_IgnoreAndReturn(cmock_retval) xTCPSocketCheck_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTCPSocketCheck_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTCPSocketCheck_StopIgnore() xTCPSocketCheck_CMockStopIgnore()
void xTCPSocketCheck_CMockStopIgnore(void);
#define xTCPSocketCheck_ExpectAnyArgsAndReturn(cmock_retval) xTCPSocketCheck_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTCPSocketCheck_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTCPSocketCheck_ExpectAndReturn(pxSocket, cmock_retval) xTCPSocketCheck_CMockExpectAndReturn(__LINE__, pxSocket, cmock_retval)
void xTCPSocketCheck_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTCPSocketCheck_CALLBACK)(FreeRTOS_Socket_t* pxSocket, int cmock_num_calls);
void xTCPSocketCheck_AddCallback(CMOCK_xTCPSocketCheck_CALLBACK Callback);
void xTCPSocketCheck_Stub(CMOCK_xTCPSocketCheck_CALLBACK Callback);
#define xTCPSocketCheck_StubWithCallback xTCPSocketCheck_Stub
#define xTCPSocketCheck_ExpectWithArrayAndReturn(pxSocket, pxSocket_Depth, cmock_retval) xTCPSocketCheck_CMockExpectWithArrayAndReturn(__LINE__, pxSocket, pxSocket_Depth, cmock_retval)
void xTCPSocketCheck_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, int pxSocket_Depth, BaseType_t cmock_to_return);
#define xTCPSocketCheck_ReturnThruPtr_pxSocket(pxSocket) xTCPSocketCheck_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, sizeof(FreeRTOS_Socket_t))
#define xTCPSocketCheck_ReturnArrayThruPtr_pxSocket(pxSocket, cmock_len) xTCPSocketCheck_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, (int)(cmock_len * (int)sizeof(*pxSocket)))
#define xTCPSocketCheck_ReturnMemThruPtr_pxSocket(pxSocket, cmock_size) xTCPSocketCheck_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, cmock_size)
void xTCPSocketCheck_CMockReturnMemThruPtr_pxSocket(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, int cmock_size);
#define xTCPSocketCheck_IgnoreArg_pxSocket() xTCPSocketCheck_CMockIgnoreArg_pxSocket(__LINE__)
void xTCPSocketCheck_CMockIgnoreArg_pxSocket(UNITY_LINE_TYPE cmock_line);
#define xTCPCheckNewClient_IgnoreAndReturn(cmock_retval) xTCPCheckNewClient_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTCPCheckNewClient_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTCPCheckNewClient_StopIgnore() xTCPCheckNewClient_CMockStopIgnore()
void xTCPCheckNewClient_CMockStopIgnore(void);
#define xTCPCheckNewClient_ExpectAnyArgsAndReturn(cmock_retval) xTCPCheckNewClient_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTCPCheckNewClient_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTCPCheckNewClient_ExpectAndReturn(pxSocket, cmock_retval) xTCPCheckNewClient_CMockExpectAndReturn(__LINE__, pxSocket, cmock_retval)
void xTCPCheckNewClient_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTCPCheckNewClient_CALLBACK)(FreeRTOS_Socket_t* pxSocket, int cmock_num_calls);
void xTCPCheckNewClient_AddCallback(CMOCK_xTCPCheckNewClient_CALLBACK Callback);
void xTCPCheckNewClient_Stub(CMOCK_xTCPCheckNewClient_CALLBACK Callback);
#define xTCPCheckNewClient_StubWithCallback xTCPCheckNewClient_Stub
#define xTCPCheckNewClient_ExpectWithArrayAndReturn(pxSocket, pxSocket_Depth, cmock_retval) xTCPCheckNewClient_CMockExpectWithArrayAndReturn(__LINE__, pxSocket, pxSocket_Depth, cmock_retval)
void xTCPCheckNewClient_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, int pxSocket_Depth, BaseType_t cmock_to_return);
#define xTCPCheckNewClient_ReturnThruPtr_pxSocket(pxSocket) xTCPCheckNewClient_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, sizeof(FreeRTOS_Socket_t))
#define xTCPCheckNewClient_ReturnArrayThruPtr_pxSocket(pxSocket, cmock_len) xTCPCheckNewClient_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, (int)(cmock_len * (int)sizeof(*pxSocket)))
#define xTCPCheckNewClient_ReturnMemThruPtr_pxSocket(pxSocket, cmock_size) xTCPCheckNewClient_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, cmock_size)
void xTCPCheckNewClient_CMockReturnMemThruPtr_pxSocket(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, int cmock_size);
#define xTCPCheckNewClient_IgnoreArg_pxSocket() xTCPCheckNewClient_CMockIgnoreArg_pxSocket(__LINE__)
void xTCPCheckNewClient_CMockIgnoreArg_pxSocket(UNITY_LINE_TYPE cmock_line);
#define vSocketClose_IgnoreAndReturn(cmock_retval) vSocketClose_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void vSocketClose_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define vSocketClose_StopIgnore() vSocketClose_CMockStopIgnore()
void vSocketClose_CMockStopIgnore(void);
#define vSocketClose_ExpectAnyArgsAndReturn(cmock_retval) vSocketClose_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void vSocketClose_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define vSocketClose_ExpectAndReturn(pxSocket, cmock_retval) vSocketClose_CMockExpectAndReturn(__LINE__, pxSocket, cmock_retval)
void vSocketClose_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, void* cmock_to_return);
typedef void* (* CMOCK_vSocketClose_CALLBACK)(FreeRTOS_Socket_t* pxSocket, int cmock_num_calls);
void vSocketClose_AddCallback(CMOCK_vSocketClose_CALLBACK Callback);
void vSocketClose_Stub(CMOCK_vSocketClose_CALLBACK Callback);
#define vSocketClose_StubWithCallback vSocketClose_Stub
#define vSocketClose_ExpectWithArrayAndReturn(pxSocket, pxSocket_Depth, cmock_retval) vSocketClose_CMockExpectWithArrayAndReturn(__LINE__, pxSocket, pxSocket_Depth, cmock_retval)
void vSocketClose_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, int pxSocket_Depth, void* cmock_to_return);
#define vSocketClose_ReturnThruPtr_pxSocket(pxSocket) vSocketClose_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, sizeof(FreeRTOS_Socket_t))
#define vSocketClose_ReturnArrayThruPtr_pxSocket(pxSocket, cmock_len) vSocketClose_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, (int)(cmock_len * (int)sizeof(*pxSocket)))
#define vSocketClose_ReturnMemThruPtr_pxSocket(pxSocket, cmock_size) vSocketClose_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, cmock_size)
void vSocketClose_CMockReturnMemThruPtr_pxSocket(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, int cmock_size);
#define vSocketClose_IgnoreArg_pxSocket() vSocketClose_CMockIgnoreArg_pxSocket(__LINE__)
void vSocketClose_CMockIgnoreArg_pxSocket(UNITY_LINE_TYPE cmock_line);
#define xSendEventToIPTask_IgnoreAndReturn(cmock_retval) xSendEventToIPTask_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xSendEventToIPTask_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xSendEventToIPTask_StopIgnore() xSendEventToIPTask_CMockStopIgnore()
void xSendEventToIPTask_CMockStopIgnore(void);
#define xSendEventToIPTask_ExpectAnyArgsAndReturn(cmock_retval) xSendEventToIPTask_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xSendEventToIPTask_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xSendEventToIPTask_ExpectAndReturn(eEvent, cmock_retval) xSendEventToIPTask_CMockExpectAndReturn(__LINE__, eEvent, cmock_retval)
void xSendEventToIPTask_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, eIPEvent_t eEvent, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xSendEventToIPTask_CALLBACK)(eIPEvent_t eEvent, int cmock_num_calls);
void xSendEventToIPTask_AddCallback(CMOCK_xSendEventToIPTask_CALLBACK Callback);
void xSendEventToIPTask_Stub(CMOCK_xSendEventToIPTask_CALLBACK Callback);
#define xSendEventToIPTask_StubWithCallback xSendEventToIPTask_Stub
#define xSendEventToIPTask_IgnoreArg_eEvent() xSendEventToIPTask_CMockIgnoreArg_eEvent(__LINE__)
void xSendEventToIPTask_CMockIgnoreArg_eEvent(UNITY_LINE_TYPE cmock_line);
#define xSendEventStructToIPTask_IgnoreAndReturn(cmock_retval) xSendEventStructToIPTask_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xSendEventStructToIPTask_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xSendEventStructToIPTask_StopIgnore() xSendEventStructToIPTask_CMockStopIgnore()
void xSendEventStructToIPTask_CMockStopIgnore(void);
#define xSendEventStructToIPTask_ExpectAnyArgsAndReturn(cmock_retval) xSendEventStructToIPTask_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xSendEventStructToIPTask_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xSendEventStructToIPTask_ExpectAndReturn(pxEvent, uxTimeout, cmock_retval) xSendEventStructToIPTask_CMockExpectAndReturn(__LINE__, pxEvent, uxTimeout, cmock_retval)
void xSendEventStructToIPTask_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const IPStackEvent_t* pxEvent, TickType_t uxTimeout, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xSendEventStructToIPTask_CALLBACK)(const IPStackEvent_t* pxEvent, TickType_t uxTimeout, int cmock_num_calls);
void xSendEventStructToIPTask_AddCallback(CMOCK_xSendEventStructToIPTask_CALLBACK Callback);
void xSendEventStructToIPTask_Stub(CMOCK_xSendEventStructToIPTask_CALLBACK Callback);
#define xSendEventStructToIPTask_StubWithCallback xSendEventStructToIPTask_Stub
#define xSendEventStructToIPTask_ExpectWithArrayAndReturn(pxEvent, pxEvent_Depth, uxTimeout, cmock_retval) xSendEventStructToIPTask_CMockExpectWithArrayAndReturn(__LINE__, pxEvent, pxEvent_Depth, uxTimeout, cmock_retval)
void xSendEventStructToIPTask_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const IPStackEvent_t* pxEvent, int pxEvent_Depth, TickType_t uxTimeout, BaseType_t cmock_to_return);
#define xSendEventStructToIPTask_IgnoreArg_pxEvent() xSendEventStructToIPTask_CMockIgnoreArg_pxEvent(__LINE__)
void xSendEventStructToIPTask_CMockIgnoreArg_pxEvent(UNITY_LINE_TYPE cmock_line);
#define xSendEventStructToIPTask_IgnoreArg_uxTimeout() xSendEventStructToIPTask_CMockIgnoreArg_uxTimeout(__LINE__)
void xSendEventStructToIPTask_CMockIgnoreArg_uxTimeout(UNITY_LINE_TYPE cmock_line);
#define pxUDPPayloadBuffer_to_NetworkBuffer_IgnoreAndReturn(cmock_retval) pxUDPPayloadBuffer_to_NetworkBuffer_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pxUDPPayloadBuffer_to_NetworkBuffer_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* cmock_to_return);
#define pxUDPPayloadBuffer_to_NetworkBuffer_StopIgnore() pxUDPPayloadBuffer_to_NetworkBuffer_CMockStopIgnore()
void pxUDPPayloadBuffer_to_NetworkBuffer_CMockStopIgnore(void);
#define pxUDPPayloadBuffer_to_NetworkBuffer_ExpectAnyArgsAndReturn(cmock_retval) pxUDPPayloadBuffer_to_NetworkBuffer_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void pxUDPPayloadBuffer_to_NetworkBuffer_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* cmock_to_return);
#define pxUDPPayloadBuffer_to_NetworkBuffer_ExpectAndReturn(pvBuffer, cmock_retval) pxUDPPayloadBuffer_to_NetworkBuffer_CMockExpectAndReturn(__LINE__, pvBuffer, cmock_retval)
void pxUDPPayloadBuffer_to_NetworkBuffer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const void* pvBuffer, NetworkBufferDescriptor_t* cmock_to_return);
typedef NetworkBufferDescriptor_t* (* CMOCK_pxUDPPayloadBuffer_to_NetworkBuffer_CALLBACK)(const void* pvBuffer, int cmock_num_calls);
void pxUDPPayloadBuffer_to_NetworkBuffer_AddCallback(CMOCK_pxUDPPayloadBuffer_to_NetworkBuffer_CALLBACK Callback);
void pxUDPPayloadBuffer_to_NetworkBuffer_Stub(CMOCK_pxUDPPayloadBuffer_to_NetworkBuffer_CALLBACK Callback);
#define pxUDPPayloadBuffer_to_NetworkBuffer_StubWithCallback pxUDPPayloadBuffer_to_NetworkBuffer_Stub
#define pxUDPPayloadBuffer_to_NetworkBuffer_ExpectWithArrayAndReturn(pvBuffer, pvBuffer_Depth, cmock_retval) pxUDPPayloadBuffer_to_NetworkBuffer_CMockExpectWithArrayAndReturn(__LINE__, pvBuffer, pvBuffer_Depth, cmock_retval)
void pxUDPPayloadBuffer_to_NetworkBuffer_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const void* pvBuffer, int pvBuffer_Depth, NetworkBufferDescriptor_t* cmock_to_return);
#define pxUDPPayloadBuffer_to_NetworkBuffer_IgnoreArg_pvBuffer() pxUDPPayloadBuffer_to_NetworkBuffer_CMockIgnoreArg_pvBuffer(__LINE__)
void pxUDPPayloadBuffer_to_NetworkBuffer_CMockIgnoreArg_pvBuffer(UNITY_LINE_TYPE cmock_line);
#define uxIPHeaderSizePacket_IgnoreAndReturn(cmock_retval) uxIPHeaderSizePacket_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uxIPHeaderSizePacket_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define uxIPHeaderSizePacket_StopIgnore() uxIPHeaderSizePacket_CMockStopIgnore()
void uxIPHeaderSizePacket_CMockStopIgnore(void);
#define uxIPHeaderSizePacket_ExpectAnyArgsAndReturn(cmock_retval) uxIPHeaderSizePacket_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void uxIPHeaderSizePacket_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define uxIPHeaderSizePacket_ExpectAndReturn(pxNetworkBuffer, cmock_retval) uxIPHeaderSizePacket_CMockExpectAndReturn(__LINE__, pxNetworkBuffer, cmock_retval)
void uxIPHeaderSizePacket_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkBufferDescriptor_t* pxNetworkBuffer, size_t cmock_to_return);
typedef size_t (* CMOCK_uxIPHeaderSizePacket_CALLBACK)(const NetworkBufferDescriptor_t* pxNetworkBuffer, int cmock_num_calls);
void uxIPHeaderSizePacket_AddCallback(CMOCK_uxIPHeaderSizePacket_CALLBACK Callback);
void uxIPHeaderSizePacket_Stub(CMOCK_uxIPHeaderSizePacket_CALLBACK Callback);
#define uxIPHeaderSizePacket_StubWithCallback uxIPHeaderSizePacket_Stub
#define uxIPHeaderSizePacket_ExpectWithArrayAndReturn(pxNetworkBuffer, pxNetworkBuffer_Depth, cmock_retval) uxIPHeaderSizePacket_CMockExpectWithArrayAndReturn(__LINE__, pxNetworkBuffer, pxNetworkBuffer_Depth, cmock_retval)
void uxIPHeaderSizePacket_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkBufferDescriptor_t* pxNetworkBuffer, int pxNetworkBuffer_Depth, size_t cmock_to_return);
#define uxIPHeaderSizePacket_IgnoreArg_pxNetworkBuffer() uxIPHeaderSizePacket_CMockIgnoreArg_pxNetworkBuffer(__LINE__)
void uxIPHeaderSizePacket_CMockIgnoreArg_pxNetworkBuffer(UNITY_LINE_TYPE cmock_line);
#define uxIPHeaderSizeSocket_IgnoreAndReturn(cmock_retval) uxIPHeaderSizeSocket_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uxIPHeaderSizeSocket_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define uxIPHeaderSizeSocket_StopIgnore() uxIPHeaderSizeSocket_CMockStopIgnore()
void uxIPHeaderSizeSocket_CMockStopIgnore(void);
#define uxIPHeaderSizeSocket_ExpectAnyArgsAndReturn(cmock_retval) uxIPHeaderSizeSocket_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void uxIPHeaderSizeSocket_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define uxIPHeaderSizeSocket_ExpectAndReturn(pxSocket, cmock_retval) uxIPHeaderSizeSocket_CMockExpectAndReturn(__LINE__, pxSocket, cmock_retval)
void uxIPHeaderSizeSocket_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const FreeRTOS_Socket_t* pxSocket, size_t cmock_to_return);
typedef size_t (* CMOCK_uxIPHeaderSizeSocket_CALLBACK)(const FreeRTOS_Socket_t* pxSocket, int cmock_num_calls);
void uxIPHeaderSizeSocket_AddCallback(CMOCK_uxIPHeaderSizeSocket_CALLBACK Callback);
void uxIPHeaderSizeSocket_Stub(CMOCK_uxIPHeaderSizeSocket_CALLBACK Callback);
#define uxIPHeaderSizeSocket_StubWithCallback uxIPHeaderSizeSocket_Stub
#define uxIPHeaderSizeSocket_ExpectWithArrayAndReturn(pxSocket, pxSocket_Depth, cmock_retval) uxIPHeaderSizeSocket_CMockExpectWithArrayAndReturn(__LINE__, pxSocket, pxSocket_Depth, cmock_retval)
void uxIPHeaderSizeSocket_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const FreeRTOS_Socket_t* pxSocket, int pxSocket_Depth, size_t cmock_to_return);
#define uxIPHeaderSizeSocket_IgnoreArg_pxSocket() uxIPHeaderSizeSocket_CMockIgnoreArg_pxSocket(__LINE__)
void uxIPHeaderSizeSocket_CMockIgnoreArg_pxSocket(UNITY_LINE_TYPE cmock_line);
#define vTCPStateChange_Ignore() vTCPStateChange_CMockIgnore()
void vTCPStateChange_CMockIgnore(void);
#define vTCPStateChange_StopIgnore() vTCPStateChange_CMockStopIgnore()
void vTCPStateChange_CMockStopIgnore(void);
#define vTCPStateChange_ExpectAnyArgs() vTCPStateChange_CMockExpectAnyArgs(__LINE__)
void vTCPStateChange_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTCPStateChange_Expect(pxSocket, eTCPState) vTCPStateChange_CMockExpect(__LINE__, pxSocket, eTCPState)
void vTCPStateChange_CMockExpect(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, enum eTCP_STATE eTCPState);
typedef void (* CMOCK_vTCPStateChange_CALLBACK)(FreeRTOS_Socket_t* pxSocket, enum eTCP_STATE eTCPState, int cmock_num_calls);
void vTCPStateChange_AddCallback(CMOCK_vTCPStateChange_CALLBACK Callback);
void vTCPStateChange_Stub(CMOCK_vTCPStateChange_CALLBACK Callback);
#define vTCPStateChange_StubWithCallback vTCPStateChange_Stub
#define vTCPStateChange_ExpectWithArray(pxSocket, pxSocket_Depth, eTCPState) vTCPStateChange_CMockExpectWithArray(__LINE__, pxSocket, pxSocket_Depth, eTCPState)
void vTCPStateChange_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, int pxSocket_Depth, enum eTCP_STATE eTCPState);
#define vTCPStateChange_ReturnThruPtr_pxSocket(pxSocket) vTCPStateChange_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, sizeof(FreeRTOS_Socket_t))
#define vTCPStateChange_ReturnArrayThruPtr_pxSocket(pxSocket, cmock_len) vTCPStateChange_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, (int)(cmock_len * (int)sizeof(*pxSocket)))
#define vTCPStateChange_ReturnMemThruPtr_pxSocket(pxSocket, cmock_size) vTCPStateChange_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, cmock_size)
void vTCPStateChange_CMockReturnMemThruPtr_pxSocket(UNITY_LINE_TYPE cmock_line, FreeRTOS_Socket_t* pxSocket, int cmock_size);
#define vTCPStateChange_IgnoreArg_pxSocket() vTCPStateChange_CMockIgnoreArg_pxSocket(__LINE__)
void vTCPStateChange_CMockIgnoreArg_pxSocket(UNITY_LINE_TYPE cmock_line);
#define vTCPStateChange_IgnoreArg_eTCPState() vTCPStateChange_CMockIgnoreArg_eTCPState(__LINE__)
void vTCPStateChange_CMockIgnoreArg_eTCPState(UNITY_LINE_TYPE cmock_line);
#define xIsCallingFromIPTask_IgnoreAndReturn(cmock_retval) xIsCallingFromIPTask_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xIsCallingFromIPTask_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xIsCallingFromIPTask_StopIgnore() xIsCallingFromIPTask_CMockStopIgnore()
void xIsCallingFromIPTask_CMockStopIgnore(void);
#define xIsCallingFromIPTask_ExpectAndReturn(cmock_retval) xIsCallingFromIPTask_CMockExpectAndReturn(__LINE__, cmock_retval)
void xIsCallingFromIPTask_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xIsCallingFromIPTask_CALLBACK)(int cmock_num_calls);
void xIsCallingFromIPTask_AddCallback(CMOCK_xIsCallingFromIPTask_CALLBACK Callback);
void xIsCallingFromIPTask_Stub(CMOCK_xIsCallingFromIPTask_CALLBACK Callback);
#define xIsCallingFromIPTask_StubWithCallback xIsCallingFromIPTask_Stub
#define vSocketSelect_Ignore() vSocketSelect_CMockIgnore()
void vSocketSelect_CMockIgnore(void);
#define vSocketSelect_StopIgnore() vSocketSelect_CMockStopIgnore()
void vSocketSelect_CMockStopIgnore(void);
#define vSocketSelect_ExpectAnyArgs() vSocketSelect_CMockExpectAnyArgs(__LINE__)
void vSocketSelect_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vSocketSelect_Expect(pxSocketSet) vSocketSelect_CMockExpect(__LINE__, pxSocketSet)
void vSocketSelect_CMockExpect(UNITY_LINE_TYPE cmock_line, const SocketSelect_t* pxSocketSet);
typedef void (* CMOCK_vSocketSelect_CALLBACK)(const SocketSelect_t* pxSocketSet, int cmock_num_calls);
void vSocketSelect_AddCallback(CMOCK_vSocketSelect_CALLBACK Callback);
void vSocketSelect_Stub(CMOCK_vSocketSelect_CALLBACK Callback);
#define vSocketSelect_StubWithCallback vSocketSelect_Stub
#define vSocketSelect_ExpectWithArray(pxSocketSet, pxSocketSet_Depth) vSocketSelect_CMockExpectWithArray(__LINE__, pxSocketSet, pxSocketSet_Depth)
void vSocketSelect_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, const SocketSelect_t* pxSocketSet, int pxSocketSet_Depth);
#define vSocketSelect_IgnoreArg_pxSocketSet() vSocketSelect_CMockIgnoreArg_pxSocketSet(__LINE__)
void vSocketSelect_CMockIgnoreArg_pxSocketSet(UNITY_LINE_TYPE cmock_line);
#define vIPNetworkUpCalls_Ignore() vIPNetworkUpCalls_CMockIgnore()
void vIPNetworkUpCalls_CMockIgnore(void);
#define vIPNetworkUpCalls_StopIgnore() vIPNetworkUpCalls_CMockStopIgnore()
void vIPNetworkUpCalls_CMockStopIgnore(void);
#define vIPNetworkUpCalls_ExpectAnyArgs() vIPNetworkUpCalls_CMockExpectAnyArgs(__LINE__)
void vIPNetworkUpCalls_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vIPNetworkUpCalls_Expect(pxEndPoint) vIPNetworkUpCalls_CMockExpect(__LINE__, pxEndPoint)
void vIPNetworkUpCalls_CMockExpect(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* pxEndPoint);
typedef void (* CMOCK_vIPNetworkUpCalls_CALLBACK)(NetworkEndPoint_t* pxEndPoint, int cmock_num_calls);
void vIPNetworkUpCalls_AddCallback(CMOCK_vIPNetworkUpCalls_CALLBACK Callback);
void vIPNetworkUpCalls_Stub(CMOCK_vIPNetworkUpCalls_CALLBACK Callback);
#define vIPNetworkUpCalls_StubWithCallback vIPNetworkUpCalls_Stub
#define vIPNetworkUpCalls_ExpectWithArray(pxEndPoint, pxEndPoint_Depth) vIPNetworkUpCalls_CMockExpectWithArray(__LINE__, pxEndPoint, pxEndPoint_Depth)
void vIPNetworkUpCalls_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* pxEndPoint, int pxEndPoint_Depth);
#define vIPNetworkUpCalls_ReturnThruPtr_pxEndPoint(pxEndPoint) vIPNetworkUpCalls_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, sizeof(NetworkEndPoint_t))
#define vIPNetworkUpCalls_ReturnArrayThruPtr_pxEndPoint(pxEndPoint, cmock_len) vIPNetworkUpCalls_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, (int)(cmock_len * (int)sizeof(*pxEndPoint)))
#define vIPNetworkUpCalls_ReturnMemThruPtr_pxEndPoint(pxEndPoint, cmock_size) vIPNetworkUpCalls_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, cmock_size)
void vIPNetworkUpCalls_CMockReturnMemThruPtr_pxEndPoint(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* pxEndPoint, int cmock_size);
#define vIPNetworkUpCalls_IgnoreArg_pxEndPoint() vIPNetworkUpCalls_CMockIgnoreArg_pxEndPoint(__LINE__)
void vIPNetworkUpCalls_CMockIgnoreArg_pxEndPoint(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
