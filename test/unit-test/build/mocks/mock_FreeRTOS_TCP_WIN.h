/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_FREERTOS_TCP_WIN_H
#define _MOCK_FREERTOS_TCP_WIN_H

#include "unity.h"
#include <stdbool.h>
#include <stdint.h>
#include <fcntl.h>
#include <unity.h>
#include "FreeRTOS.h"
#include "FreeRTOS_IP.h"
#include "FreeRTOS_TCP_WIN.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_FreeRTOS_TCP_WIN_Init(void);
void mock_FreeRTOS_TCP_WIN_Destroy(void);
void mock_FreeRTOS_TCP_WIN_Verify(void);




#define vTCPWindowCreate_Ignore() vTCPWindowCreate_CMockIgnore()
void vTCPWindowCreate_CMockIgnore(void);
#define vTCPWindowCreate_StopIgnore() vTCPWindowCreate_CMockStopIgnore()
void vTCPWindowCreate_CMockStopIgnore(void);
#define vTCPWindowCreate_ExpectAnyArgs() vTCPWindowCreate_CMockExpectAnyArgs(__LINE__)
void vTCPWindowCreate_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTCPWindowCreate_Expect(pxWindow, ulRxWindowLength, ulTxWindowLength, ulAckNumber, ulSequenceNumber, ulMSS) vTCPWindowCreate_CMockExpect(__LINE__, pxWindow, ulRxWindowLength, ulTxWindowLength, ulAckNumber, ulSequenceNumber, ulMSS)
void vTCPWindowCreate_CMockExpect(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, uint32_t ulRxWindowLength, uint32_t ulTxWindowLength, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS);
typedef void (* CMOCK_vTCPWindowCreate_CALLBACK)(TCPWindow_t* pxWindow, uint32_t ulRxWindowLength, uint32_t ulTxWindowLength, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS, int cmock_num_calls);
void vTCPWindowCreate_AddCallback(CMOCK_vTCPWindowCreate_CALLBACK Callback);
void vTCPWindowCreate_Stub(CMOCK_vTCPWindowCreate_CALLBACK Callback);
#define vTCPWindowCreate_StubWithCallback vTCPWindowCreate_Stub
#define vTCPWindowCreate_ExpectWithArray(pxWindow, pxWindow_Depth, ulRxWindowLength, ulTxWindowLength, ulAckNumber, ulSequenceNumber, ulMSS) vTCPWindowCreate_CMockExpectWithArray(__LINE__, pxWindow, pxWindow_Depth, ulRxWindowLength, ulTxWindowLength, ulAckNumber, ulSequenceNumber, ulMSS)
void vTCPWindowCreate_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, int pxWindow_Depth, uint32_t ulRxWindowLength, uint32_t ulTxWindowLength, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS);
#define vTCPWindowCreate_ReturnThruPtr_pxWindow(pxWindow) vTCPWindowCreate_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, sizeof(TCPWindow_t))
#define vTCPWindowCreate_ReturnArrayThruPtr_pxWindow(pxWindow, cmock_len) vTCPWindowCreate_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, (int)(cmock_len * (int)sizeof(*pxWindow)))
#define vTCPWindowCreate_ReturnMemThruPtr_pxWindow(pxWindow, cmock_size) vTCPWindowCreate_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, cmock_size)
void vTCPWindowCreate_CMockReturnMemThruPtr_pxWindow(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, int cmock_size);
#define vTCPWindowCreate_IgnoreArg_pxWindow() vTCPWindowCreate_CMockIgnoreArg_pxWindow(__LINE__)
void vTCPWindowCreate_CMockIgnoreArg_pxWindow(UNITY_LINE_TYPE cmock_line);
#define vTCPWindowCreate_IgnoreArg_ulRxWindowLength() vTCPWindowCreate_CMockIgnoreArg_ulRxWindowLength(__LINE__)
void vTCPWindowCreate_CMockIgnoreArg_ulRxWindowLength(UNITY_LINE_TYPE cmock_line);
#define vTCPWindowCreate_IgnoreArg_ulTxWindowLength() vTCPWindowCreate_CMockIgnoreArg_ulTxWindowLength(__LINE__)
void vTCPWindowCreate_CMockIgnoreArg_ulTxWindowLength(UNITY_LINE_TYPE cmock_line);
#define vTCPWindowCreate_IgnoreArg_ulAckNumber() vTCPWindowCreate_CMockIgnoreArg_ulAckNumber(__LINE__)
void vTCPWindowCreate_CMockIgnoreArg_ulAckNumber(UNITY_LINE_TYPE cmock_line);
#define vTCPWindowCreate_IgnoreArg_ulSequenceNumber() vTCPWindowCreate_CMockIgnoreArg_ulSequenceNumber(__LINE__)
void vTCPWindowCreate_CMockIgnoreArg_ulSequenceNumber(UNITY_LINE_TYPE cmock_line);
#define vTCPWindowCreate_IgnoreArg_ulMSS() vTCPWindowCreate_CMockIgnoreArg_ulMSS(__LINE__)
void vTCPWindowCreate_CMockIgnoreArg_ulMSS(UNITY_LINE_TYPE cmock_line);
#define vTCPWindowDestroy_Ignore() vTCPWindowDestroy_CMockIgnore()
void vTCPWindowDestroy_CMockIgnore(void);
#define vTCPWindowDestroy_StopIgnore() vTCPWindowDestroy_CMockStopIgnore()
void vTCPWindowDestroy_CMockStopIgnore(void);
#define vTCPWindowDestroy_ExpectAnyArgs() vTCPWindowDestroy_CMockExpectAnyArgs(__LINE__)
void vTCPWindowDestroy_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTCPWindowDestroy_Expect(pxWindow) vTCPWindowDestroy_CMockExpect(__LINE__, pxWindow)
void vTCPWindowDestroy_CMockExpect(UNITY_LINE_TYPE cmock_line, TCPWindow_t const* pxWindow);
typedef void (* CMOCK_vTCPWindowDestroy_CALLBACK)(TCPWindow_t const* pxWindow, int cmock_num_calls);
void vTCPWindowDestroy_AddCallback(CMOCK_vTCPWindowDestroy_CALLBACK Callback);
void vTCPWindowDestroy_Stub(CMOCK_vTCPWindowDestroy_CALLBACK Callback);
#define vTCPWindowDestroy_StubWithCallback vTCPWindowDestroy_Stub
#define vTCPWindowDestroy_ExpectWithArray(pxWindow, pxWindow_Depth) vTCPWindowDestroy_CMockExpectWithArray(__LINE__, pxWindow, pxWindow_Depth)
void vTCPWindowDestroy_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, TCPWindow_t const* pxWindow, int pxWindow_Depth);
#define vTCPWindowDestroy_IgnoreArg_pxWindow() vTCPWindowDestroy_CMockIgnoreArg_pxWindow(__LINE__)
void vTCPWindowDestroy_CMockIgnoreArg_pxWindow(UNITY_LINE_TYPE cmock_line);
#define vTCPWindowInit_Ignore() vTCPWindowInit_CMockIgnore()
void vTCPWindowInit_CMockIgnore(void);
#define vTCPWindowInit_StopIgnore() vTCPWindowInit_CMockStopIgnore()
void vTCPWindowInit_CMockStopIgnore(void);
#define vTCPWindowInit_ExpectAnyArgs() vTCPWindowInit_CMockExpectAnyArgs(__LINE__)
void vTCPWindowInit_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTCPWindowInit_Expect(pxWindow, ulAckNumber, ulSequenceNumber, ulMSS) vTCPWindowInit_CMockExpect(__LINE__, pxWindow, ulAckNumber, ulSequenceNumber, ulMSS)
void vTCPWindowInit_CMockExpect(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS);
typedef void (* CMOCK_vTCPWindowInit_CALLBACK)(TCPWindow_t* pxWindow, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS, int cmock_num_calls);
void vTCPWindowInit_AddCallback(CMOCK_vTCPWindowInit_CALLBACK Callback);
void vTCPWindowInit_Stub(CMOCK_vTCPWindowInit_CALLBACK Callback);
#define vTCPWindowInit_StubWithCallback vTCPWindowInit_Stub
#define vTCPWindowInit_ExpectWithArray(pxWindow, pxWindow_Depth, ulAckNumber, ulSequenceNumber, ulMSS) vTCPWindowInit_CMockExpectWithArray(__LINE__, pxWindow, pxWindow_Depth, ulAckNumber, ulSequenceNumber, ulMSS)
void vTCPWindowInit_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, int pxWindow_Depth, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS);
#define vTCPWindowInit_ReturnThruPtr_pxWindow(pxWindow) vTCPWindowInit_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, sizeof(TCPWindow_t))
#define vTCPWindowInit_ReturnArrayThruPtr_pxWindow(pxWindow, cmock_len) vTCPWindowInit_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, (int)(cmock_len * (int)sizeof(*pxWindow)))
#define vTCPWindowInit_ReturnMemThruPtr_pxWindow(pxWindow, cmock_size) vTCPWindowInit_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, cmock_size)
void vTCPWindowInit_CMockReturnMemThruPtr_pxWindow(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, int cmock_size);
#define vTCPWindowInit_IgnoreArg_pxWindow() vTCPWindowInit_CMockIgnoreArg_pxWindow(__LINE__)
void vTCPWindowInit_CMockIgnoreArg_pxWindow(UNITY_LINE_TYPE cmock_line);
#define vTCPWindowInit_IgnoreArg_ulAckNumber() vTCPWindowInit_CMockIgnoreArg_ulAckNumber(__LINE__)
void vTCPWindowInit_CMockIgnoreArg_ulAckNumber(UNITY_LINE_TYPE cmock_line);
#define vTCPWindowInit_IgnoreArg_ulSequenceNumber() vTCPWindowInit_CMockIgnoreArg_ulSequenceNumber(__LINE__)
void vTCPWindowInit_CMockIgnoreArg_ulSequenceNumber(UNITY_LINE_TYPE cmock_line);
#define vTCPWindowInit_IgnoreArg_ulMSS() vTCPWindowInit_CMockIgnoreArg_ulMSS(__LINE__)
void vTCPWindowInit_CMockIgnoreArg_ulMSS(UNITY_LINE_TYPE cmock_line);
#define vTCPSegmentCleanup_Ignore() vTCPSegmentCleanup_CMockIgnore()
void vTCPSegmentCleanup_CMockIgnore(void);
#define vTCPSegmentCleanup_StopIgnore() vTCPSegmentCleanup_CMockStopIgnore()
void vTCPSegmentCleanup_CMockStopIgnore(void);
#define vTCPSegmentCleanup_Expect() vTCPSegmentCleanup_CMockExpect(__LINE__)
void vTCPSegmentCleanup_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_vTCPSegmentCleanup_CALLBACK)(int cmock_num_calls);
void vTCPSegmentCleanup_AddCallback(CMOCK_vTCPSegmentCleanup_CALLBACK Callback);
void vTCPSegmentCleanup_Stub(CMOCK_vTCPSegmentCleanup_CALLBACK Callback);
#define vTCPSegmentCleanup_StubWithCallback vTCPSegmentCleanup_Stub
#define lTCPWindowRxCheck_IgnoreAndReturn(cmock_retval) lTCPWindowRxCheck_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void lTCPWindowRxCheck_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define lTCPWindowRxCheck_StopIgnore() lTCPWindowRxCheck_CMockStopIgnore()
void lTCPWindowRxCheck_CMockStopIgnore(void);
#define lTCPWindowRxCheck_ExpectAnyArgsAndReturn(cmock_retval) lTCPWindowRxCheck_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void lTCPWindowRxCheck_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define lTCPWindowRxCheck_ExpectAndReturn(pxWindow, ulSequenceNumber, ulLength, ulSpace, pulSkipCount, cmock_retval) lTCPWindowRxCheck_CMockExpectAndReturn(__LINE__, pxWindow, ulSequenceNumber, ulLength, ulSpace, pulSkipCount, cmock_retval)
void lTCPWindowRxCheck_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, uint32_t ulSequenceNumber, uint32_t ulLength, uint32_t ulSpace, uint32_t* pulSkipCount, int32_t cmock_to_return);
typedef int32_t (* CMOCK_lTCPWindowRxCheck_CALLBACK)(TCPWindow_t* pxWindow, uint32_t ulSequenceNumber, uint32_t ulLength, uint32_t ulSpace, uint32_t* pulSkipCount, int cmock_num_calls);
void lTCPWindowRxCheck_AddCallback(CMOCK_lTCPWindowRxCheck_CALLBACK Callback);
void lTCPWindowRxCheck_Stub(CMOCK_lTCPWindowRxCheck_CALLBACK Callback);
#define lTCPWindowRxCheck_StubWithCallback lTCPWindowRxCheck_Stub
#define lTCPWindowRxCheck_ExpectWithArrayAndReturn(pxWindow, pxWindow_Depth, ulSequenceNumber, ulLength, ulSpace, pulSkipCount, pulSkipCount_Depth, cmock_retval) lTCPWindowRxCheck_CMockExpectWithArrayAndReturn(__LINE__, pxWindow, pxWindow_Depth, ulSequenceNumber, ulLength, ulSpace, pulSkipCount, pulSkipCount_Depth, cmock_retval)
void lTCPWindowRxCheck_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, int pxWindow_Depth, uint32_t ulSequenceNumber, uint32_t ulLength, uint32_t ulSpace, uint32_t* pulSkipCount, int pulSkipCount_Depth, int32_t cmock_to_return);
#define lTCPWindowRxCheck_ReturnThruPtr_pxWindow(pxWindow) lTCPWindowRxCheck_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, sizeof(TCPWindow_t))
#define lTCPWindowRxCheck_ReturnArrayThruPtr_pxWindow(pxWindow, cmock_len) lTCPWindowRxCheck_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, (int)(cmock_len * (int)sizeof(*pxWindow)))
#define lTCPWindowRxCheck_ReturnMemThruPtr_pxWindow(pxWindow, cmock_size) lTCPWindowRxCheck_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, cmock_size)
void lTCPWindowRxCheck_CMockReturnMemThruPtr_pxWindow(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, int cmock_size);
#define lTCPWindowRxCheck_ReturnThruPtr_pulSkipCount(pulSkipCount) lTCPWindowRxCheck_CMockReturnMemThruPtr_pulSkipCount(__LINE__, pulSkipCount, sizeof(uint32_t))
#define lTCPWindowRxCheck_ReturnArrayThruPtr_pulSkipCount(pulSkipCount, cmock_len) lTCPWindowRxCheck_CMockReturnMemThruPtr_pulSkipCount(__LINE__, pulSkipCount, (int)(cmock_len * (int)sizeof(*pulSkipCount)))
#define lTCPWindowRxCheck_ReturnMemThruPtr_pulSkipCount(pulSkipCount, cmock_size) lTCPWindowRxCheck_CMockReturnMemThruPtr_pulSkipCount(__LINE__, pulSkipCount, cmock_size)
void lTCPWindowRxCheck_CMockReturnMemThruPtr_pulSkipCount(UNITY_LINE_TYPE cmock_line, uint32_t* pulSkipCount, int cmock_size);
#define lTCPWindowRxCheck_IgnoreArg_pxWindow() lTCPWindowRxCheck_CMockIgnoreArg_pxWindow(__LINE__)
void lTCPWindowRxCheck_CMockIgnoreArg_pxWindow(UNITY_LINE_TYPE cmock_line);
#define lTCPWindowRxCheck_IgnoreArg_ulSequenceNumber() lTCPWindowRxCheck_CMockIgnoreArg_ulSequenceNumber(__LINE__)
void lTCPWindowRxCheck_CMockIgnoreArg_ulSequenceNumber(UNITY_LINE_TYPE cmock_line);
#define lTCPWindowRxCheck_IgnoreArg_ulLength() lTCPWindowRxCheck_CMockIgnoreArg_ulLength(__LINE__)
void lTCPWindowRxCheck_CMockIgnoreArg_ulLength(UNITY_LINE_TYPE cmock_line);
#define lTCPWindowRxCheck_IgnoreArg_ulSpace() lTCPWindowRxCheck_CMockIgnoreArg_ulSpace(__LINE__)
void lTCPWindowRxCheck_CMockIgnoreArg_ulSpace(UNITY_LINE_TYPE cmock_line);
#define lTCPWindowRxCheck_IgnoreArg_pulSkipCount() lTCPWindowRxCheck_CMockIgnoreArg_pulSkipCount(__LINE__)
void lTCPWindowRxCheck_CMockIgnoreArg_pulSkipCount(UNITY_LINE_TYPE cmock_line);
#define xTCPWindowRxEmpty_IgnoreAndReturn(cmock_retval) xTCPWindowRxEmpty_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTCPWindowRxEmpty_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTCPWindowRxEmpty_StopIgnore() xTCPWindowRxEmpty_CMockStopIgnore()
void xTCPWindowRxEmpty_CMockStopIgnore(void);
#define xTCPWindowRxEmpty_ExpectAnyArgsAndReturn(cmock_retval) xTCPWindowRxEmpty_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTCPWindowRxEmpty_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTCPWindowRxEmpty_ExpectAndReturn(pxWindow, cmock_retval) xTCPWindowRxEmpty_CMockExpectAndReturn(__LINE__, pxWindow, cmock_retval)
void xTCPWindowRxEmpty_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const TCPWindow_t* pxWindow, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTCPWindowRxEmpty_CALLBACK)(const TCPWindow_t* pxWindow, int cmock_num_calls);
void xTCPWindowRxEmpty_AddCallback(CMOCK_xTCPWindowRxEmpty_CALLBACK Callback);
void xTCPWindowRxEmpty_Stub(CMOCK_xTCPWindowRxEmpty_CALLBACK Callback);
#define xTCPWindowRxEmpty_StubWithCallback xTCPWindowRxEmpty_Stub
#define xTCPWindowRxEmpty_ExpectWithArrayAndReturn(pxWindow, pxWindow_Depth, cmock_retval) xTCPWindowRxEmpty_CMockExpectWithArrayAndReturn(__LINE__, pxWindow, pxWindow_Depth, cmock_retval)
void xTCPWindowRxEmpty_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const TCPWindow_t* pxWindow, int pxWindow_Depth, BaseType_t cmock_to_return);
#define xTCPWindowRxEmpty_IgnoreArg_pxWindow() xTCPWindowRxEmpty_CMockIgnoreArg_pxWindow(__LINE__)
void xTCPWindowRxEmpty_CMockIgnoreArg_pxWindow(UNITY_LINE_TYPE cmock_line);
#define lTCPWindowTxAdd_IgnoreAndReturn(cmock_retval) lTCPWindowTxAdd_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void lTCPWindowTxAdd_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define lTCPWindowTxAdd_StopIgnore() lTCPWindowTxAdd_CMockStopIgnore()
void lTCPWindowTxAdd_CMockStopIgnore(void);
#define lTCPWindowTxAdd_ExpectAnyArgsAndReturn(cmock_retval) lTCPWindowTxAdd_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void lTCPWindowTxAdd_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define lTCPWindowTxAdd_ExpectAndReturn(pxWindow, ulLength, lPosition, lMax, cmock_retval) lTCPWindowTxAdd_CMockExpectAndReturn(__LINE__, pxWindow, ulLength, lPosition, lMax, cmock_retval)
void lTCPWindowTxAdd_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, uint32_t ulLength, int32_t lPosition, int32_t lMax, int32_t cmock_to_return);
typedef int32_t (* CMOCK_lTCPWindowTxAdd_CALLBACK)(TCPWindow_t* pxWindow, uint32_t ulLength, int32_t lPosition, int32_t lMax, int cmock_num_calls);
void lTCPWindowTxAdd_AddCallback(CMOCK_lTCPWindowTxAdd_CALLBACK Callback);
void lTCPWindowTxAdd_Stub(CMOCK_lTCPWindowTxAdd_CALLBACK Callback);
#define lTCPWindowTxAdd_StubWithCallback lTCPWindowTxAdd_Stub
#define lTCPWindowTxAdd_ExpectWithArrayAndReturn(pxWindow, pxWindow_Depth, ulLength, lPosition, lMax, cmock_retval) lTCPWindowTxAdd_CMockExpectWithArrayAndReturn(__LINE__, pxWindow, pxWindow_Depth, ulLength, lPosition, lMax, cmock_retval)
void lTCPWindowTxAdd_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, int pxWindow_Depth, uint32_t ulLength, int32_t lPosition, int32_t lMax, int32_t cmock_to_return);
#define lTCPWindowTxAdd_ReturnThruPtr_pxWindow(pxWindow) lTCPWindowTxAdd_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, sizeof(TCPWindow_t))
#define lTCPWindowTxAdd_ReturnArrayThruPtr_pxWindow(pxWindow, cmock_len) lTCPWindowTxAdd_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, (int)(cmock_len * (int)sizeof(*pxWindow)))
#define lTCPWindowTxAdd_ReturnMemThruPtr_pxWindow(pxWindow, cmock_size) lTCPWindowTxAdd_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, cmock_size)
void lTCPWindowTxAdd_CMockReturnMemThruPtr_pxWindow(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, int cmock_size);
#define lTCPWindowTxAdd_IgnoreArg_pxWindow() lTCPWindowTxAdd_CMockIgnoreArg_pxWindow(__LINE__)
void lTCPWindowTxAdd_CMockIgnoreArg_pxWindow(UNITY_LINE_TYPE cmock_line);
#define lTCPWindowTxAdd_IgnoreArg_ulLength() lTCPWindowTxAdd_CMockIgnoreArg_ulLength(__LINE__)
void lTCPWindowTxAdd_CMockIgnoreArg_ulLength(UNITY_LINE_TYPE cmock_line);
#define lTCPWindowTxAdd_IgnoreArg_lPosition() lTCPWindowTxAdd_CMockIgnoreArg_lPosition(__LINE__)
void lTCPWindowTxAdd_CMockIgnoreArg_lPosition(UNITY_LINE_TYPE cmock_line);
#define lTCPWindowTxAdd_IgnoreArg_lMax() lTCPWindowTxAdd_CMockIgnoreArg_lMax(__LINE__)
void lTCPWindowTxAdd_CMockIgnoreArg_lMax(UNITY_LINE_TYPE cmock_line);
#define xTCPWindowTxHasData_IgnoreAndReturn(cmock_retval) xTCPWindowTxHasData_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTCPWindowTxHasData_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTCPWindowTxHasData_StopIgnore() xTCPWindowTxHasData_CMockStopIgnore()
void xTCPWindowTxHasData_CMockStopIgnore(void);
#define xTCPWindowTxHasData_ExpectAnyArgsAndReturn(cmock_retval) xTCPWindowTxHasData_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTCPWindowTxHasData_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTCPWindowTxHasData_ExpectAndReturn(pxWindow, ulWindowSize, pulDelay, cmock_retval) xTCPWindowTxHasData_CMockExpectAndReturn(__LINE__, pxWindow, ulWindowSize, pulDelay, cmock_retval)
void xTCPWindowTxHasData_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TCPWindow_t const* pxWindow, uint32_t ulWindowSize, TickType_t* pulDelay, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTCPWindowTxHasData_CALLBACK)(TCPWindow_t const* pxWindow, uint32_t ulWindowSize, TickType_t* pulDelay, int cmock_num_calls);
void xTCPWindowTxHasData_AddCallback(CMOCK_xTCPWindowTxHasData_CALLBACK Callback);
void xTCPWindowTxHasData_Stub(CMOCK_xTCPWindowTxHasData_CALLBACK Callback);
#define xTCPWindowTxHasData_StubWithCallback xTCPWindowTxHasData_Stub
#define xTCPWindowTxHasData_ExpectWithArrayAndReturn(pxWindow, pxWindow_Depth, ulWindowSize, pulDelay, pulDelay_Depth, cmock_retval) xTCPWindowTxHasData_CMockExpectWithArrayAndReturn(__LINE__, pxWindow, pxWindow_Depth, ulWindowSize, pulDelay, pulDelay_Depth, cmock_retval)
void xTCPWindowTxHasData_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, TCPWindow_t const* pxWindow, int pxWindow_Depth, uint32_t ulWindowSize, TickType_t* pulDelay, int pulDelay_Depth, BaseType_t cmock_to_return);
#define xTCPWindowTxHasData_ReturnThruPtr_pulDelay(pulDelay) xTCPWindowTxHasData_CMockReturnMemThruPtr_pulDelay(__LINE__, pulDelay, sizeof(TickType_t))
#define xTCPWindowTxHasData_ReturnArrayThruPtr_pulDelay(pulDelay, cmock_len) xTCPWindowTxHasData_CMockReturnMemThruPtr_pulDelay(__LINE__, pulDelay, (int)(cmock_len * (int)sizeof(*pulDelay)))
#define xTCPWindowTxHasData_ReturnMemThruPtr_pulDelay(pulDelay, cmock_size) xTCPWindowTxHasData_CMockReturnMemThruPtr_pulDelay(__LINE__, pulDelay, cmock_size)
void xTCPWindowTxHasData_CMockReturnMemThruPtr_pulDelay(UNITY_LINE_TYPE cmock_line, TickType_t* pulDelay, int cmock_size);
#define xTCPWindowTxHasData_IgnoreArg_pxWindow() xTCPWindowTxHasData_CMockIgnoreArg_pxWindow(__LINE__)
void xTCPWindowTxHasData_CMockIgnoreArg_pxWindow(UNITY_LINE_TYPE cmock_line);
#define xTCPWindowTxHasData_IgnoreArg_ulWindowSize() xTCPWindowTxHasData_CMockIgnoreArg_ulWindowSize(__LINE__)
void xTCPWindowTxHasData_CMockIgnoreArg_ulWindowSize(UNITY_LINE_TYPE cmock_line);
#define xTCPWindowTxHasData_IgnoreArg_pulDelay() xTCPWindowTxHasData_CMockIgnoreArg_pulDelay(__LINE__)
void xTCPWindowTxHasData_CMockIgnoreArg_pulDelay(UNITY_LINE_TYPE cmock_line);
#define xTCPWindowTxDone_IgnoreAndReturn(cmock_retval) xTCPWindowTxDone_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTCPWindowTxDone_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTCPWindowTxDone_StopIgnore() xTCPWindowTxDone_CMockStopIgnore()
void xTCPWindowTxDone_CMockStopIgnore(void);
#define xTCPWindowTxDone_ExpectAnyArgsAndReturn(cmock_retval) xTCPWindowTxDone_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTCPWindowTxDone_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTCPWindowTxDone_ExpectAndReturn(pxWindow, cmock_retval) xTCPWindowTxDone_CMockExpectAndReturn(__LINE__, pxWindow, cmock_retval)
void xTCPWindowTxDone_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const TCPWindow_t* pxWindow, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTCPWindowTxDone_CALLBACK)(const TCPWindow_t* pxWindow, int cmock_num_calls);
void xTCPWindowTxDone_AddCallback(CMOCK_xTCPWindowTxDone_CALLBACK Callback);
void xTCPWindowTxDone_Stub(CMOCK_xTCPWindowTxDone_CALLBACK Callback);
#define xTCPWindowTxDone_StubWithCallback xTCPWindowTxDone_Stub
#define xTCPWindowTxDone_ExpectWithArrayAndReturn(pxWindow, pxWindow_Depth, cmock_retval) xTCPWindowTxDone_CMockExpectWithArrayAndReturn(__LINE__, pxWindow, pxWindow_Depth, cmock_retval)
void xTCPWindowTxDone_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const TCPWindow_t* pxWindow, int pxWindow_Depth, BaseType_t cmock_to_return);
#define xTCPWindowTxDone_IgnoreArg_pxWindow() xTCPWindowTxDone_CMockIgnoreArg_pxWindow(__LINE__)
void xTCPWindowTxDone_CMockIgnoreArg_pxWindow(UNITY_LINE_TYPE cmock_line);
#define ulTCPWindowTxGet_IgnoreAndReturn(cmock_retval) ulTCPWindowTxGet_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ulTCPWindowTxGet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulTCPWindowTxGet_StopIgnore() ulTCPWindowTxGet_CMockStopIgnore()
void ulTCPWindowTxGet_CMockStopIgnore(void);
#define ulTCPWindowTxGet_ExpectAnyArgsAndReturn(cmock_retval) ulTCPWindowTxGet_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ulTCPWindowTxGet_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulTCPWindowTxGet_ExpectAndReturn(pxWindow, ulWindowSize, plPosition, cmock_retval) ulTCPWindowTxGet_CMockExpectAndReturn(__LINE__, pxWindow, ulWindowSize, plPosition, cmock_retval)
void ulTCPWindowTxGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, uint32_t ulWindowSize, int32_t* plPosition, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_ulTCPWindowTxGet_CALLBACK)(TCPWindow_t* pxWindow, uint32_t ulWindowSize, int32_t* plPosition, int cmock_num_calls);
void ulTCPWindowTxGet_AddCallback(CMOCK_ulTCPWindowTxGet_CALLBACK Callback);
void ulTCPWindowTxGet_Stub(CMOCK_ulTCPWindowTxGet_CALLBACK Callback);
#define ulTCPWindowTxGet_StubWithCallback ulTCPWindowTxGet_Stub
#define ulTCPWindowTxGet_ExpectWithArrayAndReturn(pxWindow, pxWindow_Depth, ulWindowSize, plPosition, plPosition_Depth, cmock_retval) ulTCPWindowTxGet_CMockExpectWithArrayAndReturn(__LINE__, pxWindow, pxWindow_Depth, ulWindowSize, plPosition, plPosition_Depth, cmock_retval)
void ulTCPWindowTxGet_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, int pxWindow_Depth, uint32_t ulWindowSize, int32_t* plPosition, int plPosition_Depth, uint32_t cmock_to_return);
#define ulTCPWindowTxGet_ReturnThruPtr_pxWindow(pxWindow) ulTCPWindowTxGet_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, sizeof(TCPWindow_t))
#define ulTCPWindowTxGet_ReturnArrayThruPtr_pxWindow(pxWindow, cmock_len) ulTCPWindowTxGet_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, (int)(cmock_len * (int)sizeof(*pxWindow)))
#define ulTCPWindowTxGet_ReturnMemThruPtr_pxWindow(pxWindow, cmock_size) ulTCPWindowTxGet_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, cmock_size)
void ulTCPWindowTxGet_CMockReturnMemThruPtr_pxWindow(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, int cmock_size);
#define ulTCPWindowTxGet_ReturnThruPtr_plPosition(plPosition) ulTCPWindowTxGet_CMockReturnMemThruPtr_plPosition(__LINE__, plPosition, sizeof(int32_t))
#define ulTCPWindowTxGet_ReturnArrayThruPtr_plPosition(plPosition, cmock_len) ulTCPWindowTxGet_CMockReturnMemThruPtr_plPosition(__LINE__, plPosition, (int)(cmock_len * (int)sizeof(*plPosition)))
#define ulTCPWindowTxGet_ReturnMemThruPtr_plPosition(plPosition, cmock_size) ulTCPWindowTxGet_CMockReturnMemThruPtr_plPosition(__LINE__, plPosition, cmock_size)
void ulTCPWindowTxGet_CMockReturnMemThruPtr_plPosition(UNITY_LINE_TYPE cmock_line, int32_t* plPosition, int cmock_size);
#define ulTCPWindowTxGet_IgnoreArg_pxWindow() ulTCPWindowTxGet_CMockIgnoreArg_pxWindow(__LINE__)
void ulTCPWindowTxGet_CMockIgnoreArg_pxWindow(UNITY_LINE_TYPE cmock_line);
#define ulTCPWindowTxGet_IgnoreArg_ulWindowSize() ulTCPWindowTxGet_CMockIgnoreArg_ulWindowSize(__LINE__)
void ulTCPWindowTxGet_CMockIgnoreArg_ulWindowSize(UNITY_LINE_TYPE cmock_line);
#define ulTCPWindowTxGet_IgnoreArg_plPosition() ulTCPWindowTxGet_CMockIgnoreArg_plPosition(__LINE__)
void ulTCPWindowTxGet_CMockIgnoreArg_plPosition(UNITY_LINE_TYPE cmock_line);
#define ulTCPWindowTxAck_IgnoreAndReturn(cmock_retval) ulTCPWindowTxAck_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ulTCPWindowTxAck_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulTCPWindowTxAck_StopIgnore() ulTCPWindowTxAck_CMockStopIgnore()
void ulTCPWindowTxAck_CMockStopIgnore(void);
#define ulTCPWindowTxAck_ExpectAnyArgsAndReturn(cmock_retval) ulTCPWindowTxAck_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ulTCPWindowTxAck_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulTCPWindowTxAck_ExpectAndReturn(pxWindow, ulSequenceNumber, cmock_retval) ulTCPWindowTxAck_CMockExpectAndReturn(__LINE__, pxWindow, ulSequenceNumber, cmock_retval)
void ulTCPWindowTxAck_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, uint32_t ulSequenceNumber, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_ulTCPWindowTxAck_CALLBACK)(TCPWindow_t* pxWindow, uint32_t ulSequenceNumber, int cmock_num_calls);
void ulTCPWindowTxAck_AddCallback(CMOCK_ulTCPWindowTxAck_CALLBACK Callback);
void ulTCPWindowTxAck_Stub(CMOCK_ulTCPWindowTxAck_CALLBACK Callback);
#define ulTCPWindowTxAck_StubWithCallback ulTCPWindowTxAck_Stub
#define ulTCPWindowTxAck_ExpectWithArrayAndReturn(pxWindow, pxWindow_Depth, ulSequenceNumber, cmock_retval) ulTCPWindowTxAck_CMockExpectWithArrayAndReturn(__LINE__, pxWindow, pxWindow_Depth, ulSequenceNumber, cmock_retval)
void ulTCPWindowTxAck_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, int pxWindow_Depth, uint32_t ulSequenceNumber, uint32_t cmock_to_return);
#define ulTCPWindowTxAck_ReturnThruPtr_pxWindow(pxWindow) ulTCPWindowTxAck_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, sizeof(TCPWindow_t))
#define ulTCPWindowTxAck_ReturnArrayThruPtr_pxWindow(pxWindow, cmock_len) ulTCPWindowTxAck_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, (int)(cmock_len * (int)sizeof(*pxWindow)))
#define ulTCPWindowTxAck_ReturnMemThruPtr_pxWindow(pxWindow, cmock_size) ulTCPWindowTxAck_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, cmock_size)
void ulTCPWindowTxAck_CMockReturnMemThruPtr_pxWindow(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, int cmock_size);
#define ulTCPWindowTxAck_IgnoreArg_pxWindow() ulTCPWindowTxAck_CMockIgnoreArg_pxWindow(__LINE__)
void ulTCPWindowTxAck_CMockIgnoreArg_pxWindow(UNITY_LINE_TYPE cmock_line);
#define ulTCPWindowTxAck_IgnoreArg_ulSequenceNumber() ulTCPWindowTxAck_CMockIgnoreArg_ulSequenceNumber(__LINE__)
void ulTCPWindowTxAck_CMockIgnoreArg_ulSequenceNumber(UNITY_LINE_TYPE cmock_line);
#define ulTCPWindowTxSack_IgnoreAndReturn(cmock_retval) ulTCPWindowTxSack_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ulTCPWindowTxSack_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulTCPWindowTxSack_StopIgnore() ulTCPWindowTxSack_CMockStopIgnore()
void ulTCPWindowTxSack_CMockStopIgnore(void);
#define ulTCPWindowTxSack_ExpectAnyArgsAndReturn(cmock_retval) ulTCPWindowTxSack_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ulTCPWindowTxSack_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulTCPWindowTxSack_ExpectAndReturn(pxWindow, ulFirst, ulLast, cmock_retval) ulTCPWindowTxSack_CMockExpectAndReturn(__LINE__, pxWindow, ulFirst, ulLast, cmock_retval)
void ulTCPWindowTxSack_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, uint32_t ulFirst, uint32_t ulLast, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_ulTCPWindowTxSack_CALLBACK)(TCPWindow_t* pxWindow, uint32_t ulFirst, uint32_t ulLast, int cmock_num_calls);
void ulTCPWindowTxSack_AddCallback(CMOCK_ulTCPWindowTxSack_CALLBACK Callback);
void ulTCPWindowTxSack_Stub(CMOCK_ulTCPWindowTxSack_CALLBACK Callback);
#define ulTCPWindowTxSack_StubWithCallback ulTCPWindowTxSack_Stub
#define ulTCPWindowTxSack_ExpectWithArrayAndReturn(pxWindow, pxWindow_Depth, ulFirst, ulLast, cmock_retval) ulTCPWindowTxSack_CMockExpectWithArrayAndReturn(__LINE__, pxWindow, pxWindow_Depth, ulFirst, ulLast, cmock_retval)
void ulTCPWindowTxSack_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, int pxWindow_Depth, uint32_t ulFirst, uint32_t ulLast, uint32_t cmock_to_return);
#define ulTCPWindowTxSack_ReturnThruPtr_pxWindow(pxWindow) ulTCPWindowTxSack_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, sizeof(TCPWindow_t))
#define ulTCPWindowTxSack_ReturnArrayThruPtr_pxWindow(pxWindow, cmock_len) ulTCPWindowTxSack_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, (int)(cmock_len * (int)sizeof(*pxWindow)))
#define ulTCPWindowTxSack_ReturnMemThruPtr_pxWindow(pxWindow, cmock_size) ulTCPWindowTxSack_CMockReturnMemThruPtr_pxWindow(__LINE__, pxWindow, cmock_size)
void ulTCPWindowTxSack_CMockReturnMemThruPtr_pxWindow(UNITY_LINE_TYPE cmock_line, TCPWindow_t* pxWindow, int cmock_size);
#define ulTCPWindowTxSack_IgnoreArg_pxWindow() ulTCPWindowTxSack_CMockIgnoreArg_pxWindow(__LINE__)
void ulTCPWindowTxSack_CMockIgnoreArg_pxWindow(UNITY_LINE_TYPE cmock_line);
#define ulTCPWindowTxSack_IgnoreArg_ulFirst() ulTCPWindowTxSack_CMockIgnoreArg_ulFirst(__LINE__)
void ulTCPWindowTxSack_CMockIgnoreArg_ulFirst(UNITY_LINE_TYPE cmock_line);
#define ulTCPWindowTxSack_IgnoreArg_ulLast() ulTCPWindowTxSack_CMockIgnoreArg_ulLast(__LINE__)
void ulTCPWindowTxSack_CMockIgnoreArg_ulLast(UNITY_LINE_TYPE cmock_line);
#define xSequenceGreaterThan_IgnoreAndReturn(cmock_retval) xSequenceGreaterThan_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xSequenceGreaterThan_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xSequenceGreaterThan_StopIgnore() xSequenceGreaterThan_CMockStopIgnore()
void xSequenceGreaterThan_CMockStopIgnore(void);
#define xSequenceGreaterThan_ExpectAnyArgsAndReturn(cmock_retval) xSequenceGreaterThan_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xSequenceGreaterThan_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xSequenceGreaterThan_ExpectAndReturn(a, b, cmock_retval) xSequenceGreaterThan_CMockExpectAndReturn(__LINE__, a, b, cmock_retval)
void xSequenceGreaterThan_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t a, uint32_t b, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xSequenceGreaterThan_CALLBACK)(uint32_t a, uint32_t b, int cmock_num_calls);
void xSequenceGreaterThan_AddCallback(CMOCK_xSequenceGreaterThan_CALLBACK Callback);
void xSequenceGreaterThan_Stub(CMOCK_xSequenceGreaterThan_CALLBACK Callback);
#define xSequenceGreaterThan_StubWithCallback xSequenceGreaterThan_Stub
#define xSequenceGreaterThan_IgnoreArg_a() xSequenceGreaterThan_CMockIgnoreArg_a(__LINE__)
void xSequenceGreaterThan_CMockIgnoreArg_a(UNITY_LINE_TYPE cmock_line);
#define xSequenceGreaterThan_IgnoreArg_b() xSequenceGreaterThan_CMockIgnoreArg_b(__LINE__)
void xSequenceGreaterThan_CMockIgnoreArg_b(UNITY_LINE_TYPE cmock_line);
#define xSequenceLessThan_IgnoreAndReturn(cmock_retval) xSequenceLessThan_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xSequenceLessThan_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xSequenceLessThan_StopIgnore() xSequenceLessThan_CMockStopIgnore()
void xSequenceLessThan_CMockStopIgnore(void);
#define xSequenceLessThan_ExpectAnyArgsAndReturn(cmock_retval) xSequenceLessThan_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xSequenceLessThan_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xSequenceLessThan_ExpectAndReturn(a, b, cmock_retval) xSequenceLessThan_CMockExpectAndReturn(__LINE__, a, b, cmock_retval)
void xSequenceLessThan_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t a, uint32_t b, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xSequenceLessThan_CALLBACK)(uint32_t a, uint32_t b, int cmock_num_calls);
void xSequenceLessThan_AddCallback(CMOCK_xSequenceLessThan_CALLBACK Callback);
void xSequenceLessThan_Stub(CMOCK_xSequenceLessThan_CALLBACK Callback);
#define xSequenceLessThan_StubWithCallback xSequenceLessThan_Stub
#define xSequenceLessThan_IgnoreArg_a() xSequenceLessThan_CMockIgnoreArg_a(__LINE__)
void xSequenceLessThan_CMockIgnoreArg_a(UNITY_LINE_TYPE cmock_line);
#define xSequenceLessThan_IgnoreArg_b() xSequenceLessThan_CMockIgnoreArg_b(__LINE__)
void xSequenceLessThan_CMockIgnoreArg_b(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
