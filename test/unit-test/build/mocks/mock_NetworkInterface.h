/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_NETWORKINTERFACE_H
#define _MOCK_NETWORKINTERFACE_H

#include "unity.h"
#include <stdbool.h>
#include <stdint.h>
#include <fcntl.h>
#include <unity.h>
#include "FreeRTOS.h"
#include "FreeRTOS_IP.h"
#include "NetworkInterface.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_NetworkInterface_Init(void);
void mock_NetworkInterface_Destroy(void);
void mock_NetworkInterface_Verify(void);




#define vNetworkInterfaceAllocateRAMToBuffers_Ignore() vNetworkInterfaceAllocateRAMToBuffers_CMockIgnore()
void vNetworkInterfaceAllocateRAMToBuffers_CMockIgnore(void);
#define vNetworkInterfaceAllocateRAMToBuffers_StopIgnore() vNetworkInterfaceAllocateRAMToBuffers_CMockStopIgnore()
void vNetworkInterfaceAllocateRAMToBuffers_CMockStopIgnore(void);
#define vNetworkInterfaceAllocateRAMToBuffers_ExpectAnyArgs() vNetworkInterfaceAllocateRAMToBuffers_CMockExpectAnyArgs(__LINE__)
void vNetworkInterfaceAllocateRAMToBuffers_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vNetworkInterfaceAllocateRAMToBuffers_Expect(pxNetworkBuffers) vNetworkInterfaceAllocateRAMToBuffers_CMockExpect(__LINE__, pxNetworkBuffers)
void vNetworkInterfaceAllocateRAMToBuffers_CMockExpect(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxNetworkBuffers);
typedef void (* CMOCK_vNetworkInterfaceAllocateRAMToBuffers_CALLBACK)(NetworkBufferDescriptor_t* pxNetworkBuffers, int cmock_num_calls);
void vNetworkInterfaceAllocateRAMToBuffers_AddCallback(CMOCK_vNetworkInterfaceAllocateRAMToBuffers_CALLBACK Callback);
void vNetworkInterfaceAllocateRAMToBuffers_Stub(CMOCK_vNetworkInterfaceAllocateRAMToBuffers_CALLBACK Callback);
#define vNetworkInterfaceAllocateRAMToBuffers_StubWithCallback vNetworkInterfaceAllocateRAMToBuffers_Stub
#define vNetworkInterfaceAllocateRAMToBuffers_ExpectWithArray(pxNetworkBuffers, pxNetworkBuffers_Depth) vNetworkInterfaceAllocateRAMToBuffers_CMockExpectWithArray(__LINE__, pxNetworkBuffers, pxNetworkBuffers_Depth)
void vNetworkInterfaceAllocateRAMToBuffers_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxNetworkBuffers, int pxNetworkBuffers_Depth);
#define vNetworkInterfaceAllocateRAMToBuffers_ReturnThruPtr_pxNetworkBuffers(pxNetworkBuffers) vNetworkInterfaceAllocateRAMToBuffers_CMockReturnMemThruPtr_pxNetworkBuffers(__LINE__, pxNetworkBuffers, sizeof(NetworkBufferDescriptor_t))
#define vNetworkInterfaceAllocateRAMToBuffers_ReturnArrayThruPtr_pxNetworkBuffers(pxNetworkBuffers, cmock_len) vNetworkInterfaceAllocateRAMToBuffers_CMockReturnMemThruPtr_pxNetworkBuffers(__LINE__, pxNetworkBuffers, (int)(cmock_len * (int)sizeof(*pxNetworkBuffers)))
#define vNetworkInterfaceAllocateRAMToBuffers_ReturnMemThruPtr_pxNetworkBuffers(pxNetworkBuffers, cmock_size) vNetworkInterfaceAllocateRAMToBuffers_CMockReturnMemThruPtr_pxNetworkBuffers(__LINE__, pxNetworkBuffers, cmock_size)
void vNetworkInterfaceAllocateRAMToBuffers_CMockReturnMemThruPtr_pxNetworkBuffers(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxNetworkBuffers, int cmock_size);
#define vNetworkInterfaceAllocateRAMToBuffers_IgnoreArg_pxNetworkBuffers() vNetworkInterfaceAllocateRAMToBuffers_CMockIgnoreArg_pxNetworkBuffers(__LINE__)
void vNetworkInterfaceAllocateRAMToBuffers_CMockIgnoreArg_pxNetworkBuffers(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
