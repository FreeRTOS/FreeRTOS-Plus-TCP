/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_LIST_H
#define _MOCK_LIST_H

#include "unity.h"
#include <stdbool.h>
#include <stdint.h>
#include <fcntl.h>
#include <unity.h>
#include "FreeRTOS.h"
#include "FreeRTOS_IP.h"
#include "list.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_list_Init(void);
void mock_list_Destroy(void);
void mock_list_Verify(void);




#define vListInitialise_Ignore() vListInitialise_CMockIgnore()
void vListInitialise_CMockIgnore(void);
#define vListInitialise_StopIgnore() vListInitialise_CMockStopIgnore()
void vListInitialise_CMockStopIgnore(void);
#define vListInitialise_ExpectAnyArgs() vListInitialise_CMockExpectAnyArgs(__LINE__)
void vListInitialise_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vListInitialise_Expect(pxList) vListInitialise_CMockExpect(__LINE__, pxList)
void vListInitialise_CMockExpect(UNITY_LINE_TYPE cmock_line, List_t* const pxList);
typedef void (* CMOCK_vListInitialise_CALLBACK)(List_t* const pxList, int cmock_num_calls);
void vListInitialise_AddCallback(CMOCK_vListInitialise_CALLBACK Callback);
void vListInitialise_Stub(CMOCK_vListInitialise_CALLBACK Callback);
#define vListInitialise_StubWithCallback vListInitialise_Stub
#define vListInitialise_ExpectWithArray(pxList, pxList_Depth) vListInitialise_CMockExpectWithArray(__LINE__, pxList, pxList_Depth)
void vListInitialise_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, List_t* const pxList, int pxList_Depth);
#define vListInitialise_ReturnThruPtr_pxList(pxList) vListInitialise_CMockReturnMemThruPtr_pxList(__LINE__, pxList, sizeof(List_t))
#define vListInitialise_ReturnArrayThruPtr_pxList(pxList, cmock_len) vListInitialise_CMockReturnMemThruPtr_pxList(__LINE__, pxList, (int)(cmock_len * (int)sizeof(*pxList)))
#define vListInitialise_ReturnMemThruPtr_pxList(pxList, cmock_size) vListInitialise_CMockReturnMemThruPtr_pxList(__LINE__, pxList, cmock_size)
void vListInitialise_CMockReturnMemThruPtr_pxList(UNITY_LINE_TYPE cmock_line, List_t* pxList, int cmock_size);
#define vListInitialise_IgnoreArg_pxList() vListInitialise_CMockIgnoreArg_pxList(__LINE__)
void vListInitialise_CMockIgnoreArg_pxList(UNITY_LINE_TYPE cmock_line);
#define vListInitialiseItem_Ignore() vListInitialiseItem_CMockIgnore()
void vListInitialiseItem_CMockIgnore(void);
#define vListInitialiseItem_StopIgnore() vListInitialiseItem_CMockStopIgnore()
void vListInitialiseItem_CMockStopIgnore(void);
#define vListInitialiseItem_ExpectAnyArgs() vListInitialiseItem_CMockExpectAnyArgs(__LINE__)
void vListInitialiseItem_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vListInitialiseItem_Expect(pxItem) vListInitialiseItem_CMockExpect(__LINE__, pxItem)
void vListInitialiseItem_CMockExpect(UNITY_LINE_TYPE cmock_line, ListItem_t* const pxItem);
typedef void (* CMOCK_vListInitialiseItem_CALLBACK)(ListItem_t* const pxItem, int cmock_num_calls);
void vListInitialiseItem_AddCallback(CMOCK_vListInitialiseItem_CALLBACK Callback);
void vListInitialiseItem_Stub(CMOCK_vListInitialiseItem_CALLBACK Callback);
#define vListInitialiseItem_StubWithCallback vListInitialiseItem_Stub
#define vListInitialiseItem_ExpectWithArray(pxItem, pxItem_Depth) vListInitialiseItem_CMockExpectWithArray(__LINE__, pxItem, pxItem_Depth)
void vListInitialiseItem_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, ListItem_t* const pxItem, int pxItem_Depth);
#define vListInitialiseItem_ReturnThruPtr_pxItem(pxItem) vListInitialiseItem_CMockReturnMemThruPtr_pxItem(__LINE__, pxItem, sizeof(ListItem_t))
#define vListInitialiseItem_ReturnArrayThruPtr_pxItem(pxItem, cmock_len) vListInitialiseItem_CMockReturnMemThruPtr_pxItem(__LINE__, pxItem, (int)(cmock_len * (int)sizeof(*pxItem)))
#define vListInitialiseItem_ReturnMemThruPtr_pxItem(pxItem, cmock_size) vListInitialiseItem_CMockReturnMemThruPtr_pxItem(__LINE__, pxItem, cmock_size)
void vListInitialiseItem_CMockReturnMemThruPtr_pxItem(UNITY_LINE_TYPE cmock_line, ListItem_t* pxItem, int cmock_size);
#define vListInitialiseItem_IgnoreArg_pxItem() vListInitialiseItem_CMockIgnoreArg_pxItem(__LINE__)
void vListInitialiseItem_CMockIgnoreArg_pxItem(UNITY_LINE_TYPE cmock_line);
#define vListInsert_Ignore() vListInsert_CMockIgnore()
void vListInsert_CMockIgnore(void);
#define vListInsert_StopIgnore() vListInsert_CMockStopIgnore()
void vListInsert_CMockStopIgnore(void);
#define vListInsert_ExpectAnyArgs() vListInsert_CMockExpectAnyArgs(__LINE__)
void vListInsert_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vListInsert_Expect(pxList, pxNewListItem) vListInsert_CMockExpect(__LINE__, pxList, pxNewListItem)
void vListInsert_CMockExpect(UNITY_LINE_TYPE cmock_line, List_t* const pxList, ListItem_t* const pxNewListItem);
typedef void (* CMOCK_vListInsert_CALLBACK)(List_t* const pxList, ListItem_t* const pxNewListItem, int cmock_num_calls);
void vListInsert_AddCallback(CMOCK_vListInsert_CALLBACK Callback);
void vListInsert_Stub(CMOCK_vListInsert_CALLBACK Callback);
#define vListInsert_StubWithCallback vListInsert_Stub
#define vListInsert_ExpectWithArray(pxList, pxList_Depth, pxNewListItem, pxNewListItem_Depth) vListInsert_CMockExpectWithArray(__LINE__, pxList, pxList_Depth, pxNewListItem, pxNewListItem_Depth)
void vListInsert_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, List_t* const pxList, int pxList_Depth, ListItem_t* const pxNewListItem, int pxNewListItem_Depth);
#define vListInsert_ReturnThruPtr_pxList(pxList) vListInsert_CMockReturnMemThruPtr_pxList(__LINE__, pxList, sizeof(List_t))
#define vListInsert_ReturnArrayThruPtr_pxList(pxList, cmock_len) vListInsert_CMockReturnMemThruPtr_pxList(__LINE__, pxList, (int)(cmock_len * (int)sizeof(*pxList)))
#define vListInsert_ReturnMemThruPtr_pxList(pxList, cmock_size) vListInsert_CMockReturnMemThruPtr_pxList(__LINE__, pxList, cmock_size)
void vListInsert_CMockReturnMemThruPtr_pxList(UNITY_LINE_TYPE cmock_line, List_t* pxList, int cmock_size);
#define vListInsert_ReturnThruPtr_pxNewListItem(pxNewListItem) vListInsert_CMockReturnMemThruPtr_pxNewListItem(__LINE__, pxNewListItem, sizeof(ListItem_t))
#define vListInsert_ReturnArrayThruPtr_pxNewListItem(pxNewListItem, cmock_len) vListInsert_CMockReturnMemThruPtr_pxNewListItem(__LINE__, pxNewListItem, (int)(cmock_len * (int)sizeof(*pxNewListItem)))
#define vListInsert_ReturnMemThruPtr_pxNewListItem(pxNewListItem, cmock_size) vListInsert_CMockReturnMemThruPtr_pxNewListItem(__LINE__, pxNewListItem, cmock_size)
void vListInsert_CMockReturnMemThruPtr_pxNewListItem(UNITY_LINE_TYPE cmock_line, ListItem_t* pxNewListItem, int cmock_size);
#define vListInsert_IgnoreArg_pxList() vListInsert_CMockIgnoreArg_pxList(__LINE__)
void vListInsert_CMockIgnoreArg_pxList(UNITY_LINE_TYPE cmock_line);
#define vListInsert_IgnoreArg_pxNewListItem() vListInsert_CMockIgnoreArg_pxNewListItem(__LINE__)
void vListInsert_CMockIgnoreArg_pxNewListItem(UNITY_LINE_TYPE cmock_line);
#define vListInsertEnd_Ignore() vListInsertEnd_CMockIgnore()
void vListInsertEnd_CMockIgnore(void);
#define vListInsertEnd_StopIgnore() vListInsertEnd_CMockStopIgnore()
void vListInsertEnd_CMockStopIgnore(void);
#define vListInsertEnd_ExpectAnyArgs() vListInsertEnd_CMockExpectAnyArgs(__LINE__)
void vListInsertEnd_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vListInsertEnd_Expect(pxList, pxNewListItem) vListInsertEnd_CMockExpect(__LINE__, pxList, pxNewListItem)
void vListInsertEnd_CMockExpect(UNITY_LINE_TYPE cmock_line, List_t* const pxList, ListItem_t* const pxNewListItem);
typedef void (* CMOCK_vListInsertEnd_CALLBACK)(List_t* const pxList, ListItem_t* const pxNewListItem, int cmock_num_calls);
void vListInsertEnd_AddCallback(CMOCK_vListInsertEnd_CALLBACK Callback);
void vListInsertEnd_Stub(CMOCK_vListInsertEnd_CALLBACK Callback);
#define vListInsertEnd_StubWithCallback vListInsertEnd_Stub
#define vListInsertEnd_ExpectWithArray(pxList, pxList_Depth, pxNewListItem, pxNewListItem_Depth) vListInsertEnd_CMockExpectWithArray(__LINE__, pxList, pxList_Depth, pxNewListItem, pxNewListItem_Depth)
void vListInsertEnd_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, List_t* const pxList, int pxList_Depth, ListItem_t* const pxNewListItem, int pxNewListItem_Depth);
#define vListInsertEnd_ReturnThruPtr_pxList(pxList) vListInsertEnd_CMockReturnMemThruPtr_pxList(__LINE__, pxList, sizeof(List_t))
#define vListInsertEnd_ReturnArrayThruPtr_pxList(pxList, cmock_len) vListInsertEnd_CMockReturnMemThruPtr_pxList(__LINE__, pxList, (int)(cmock_len * (int)sizeof(*pxList)))
#define vListInsertEnd_ReturnMemThruPtr_pxList(pxList, cmock_size) vListInsertEnd_CMockReturnMemThruPtr_pxList(__LINE__, pxList, cmock_size)
void vListInsertEnd_CMockReturnMemThruPtr_pxList(UNITY_LINE_TYPE cmock_line, List_t* pxList, int cmock_size);
#define vListInsertEnd_ReturnThruPtr_pxNewListItem(pxNewListItem) vListInsertEnd_CMockReturnMemThruPtr_pxNewListItem(__LINE__, pxNewListItem, sizeof(ListItem_t))
#define vListInsertEnd_ReturnArrayThruPtr_pxNewListItem(pxNewListItem, cmock_len) vListInsertEnd_CMockReturnMemThruPtr_pxNewListItem(__LINE__, pxNewListItem, (int)(cmock_len * (int)sizeof(*pxNewListItem)))
#define vListInsertEnd_ReturnMemThruPtr_pxNewListItem(pxNewListItem, cmock_size) vListInsertEnd_CMockReturnMemThruPtr_pxNewListItem(__LINE__, pxNewListItem, cmock_size)
void vListInsertEnd_CMockReturnMemThruPtr_pxNewListItem(UNITY_LINE_TYPE cmock_line, ListItem_t* pxNewListItem, int cmock_size);
#define vListInsertEnd_IgnoreArg_pxList() vListInsertEnd_CMockIgnoreArg_pxList(__LINE__)
void vListInsertEnd_CMockIgnoreArg_pxList(UNITY_LINE_TYPE cmock_line);
#define vListInsertEnd_IgnoreArg_pxNewListItem() vListInsertEnd_CMockIgnoreArg_pxNewListItem(__LINE__)
void vListInsertEnd_CMockIgnoreArg_pxNewListItem(UNITY_LINE_TYPE cmock_line);
#define uxListRemove_IgnoreAndReturn(cmock_retval) uxListRemove_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uxListRemove_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
#define uxListRemove_StopIgnore() uxListRemove_CMockStopIgnore()
void uxListRemove_CMockStopIgnore(void);
#define uxListRemove_ExpectAnyArgsAndReturn(cmock_retval) uxListRemove_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void uxListRemove_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
#define uxListRemove_ExpectAndReturn(pxItemToRemove, cmock_retval) uxListRemove_CMockExpectAndReturn(__LINE__, pxItemToRemove, cmock_retval)
void uxListRemove_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ListItem_t* const pxItemToRemove, UBaseType_t cmock_to_return);
typedef UBaseType_t (* CMOCK_uxListRemove_CALLBACK)(ListItem_t* const pxItemToRemove, int cmock_num_calls);
void uxListRemove_AddCallback(CMOCK_uxListRemove_CALLBACK Callback);
void uxListRemove_Stub(CMOCK_uxListRemove_CALLBACK Callback);
#define uxListRemove_StubWithCallback uxListRemove_Stub
#define uxListRemove_ExpectWithArrayAndReturn(pxItemToRemove, pxItemToRemove_Depth, cmock_retval) uxListRemove_CMockExpectWithArrayAndReturn(__LINE__, pxItemToRemove, pxItemToRemove_Depth, cmock_retval)
void uxListRemove_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, ListItem_t* const pxItemToRemove, int pxItemToRemove_Depth, UBaseType_t cmock_to_return);
#define uxListRemove_ReturnThruPtr_pxItemToRemove(pxItemToRemove) uxListRemove_CMockReturnMemThruPtr_pxItemToRemove(__LINE__, pxItemToRemove, sizeof(ListItem_t))
#define uxListRemove_ReturnArrayThruPtr_pxItemToRemove(pxItemToRemove, cmock_len) uxListRemove_CMockReturnMemThruPtr_pxItemToRemove(__LINE__, pxItemToRemove, (int)(cmock_len * (int)sizeof(*pxItemToRemove)))
#define uxListRemove_ReturnMemThruPtr_pxItemToRemove(pxItemToRemove, cmock_size) uxListRemove_CMockReturnMemThruPtr_pxItemToRemove(__LINE__, pxItemToRemove, cmock_size)
void uxListRemove_CMockReturnMemThruPtr_pxItemToRemove(UNITY_LINE_TYPE cmock_line, ListItem_t* pxItemToRemove, int cmock_size);
#define uxListRemove_IgnoreArg_pxItemToRemove() uxListRemove_CMockIgnoreArg_pxItemToRemove(__LINE__)
void uxListRemove_CMockIgnoreArg_pxItemToRemove(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
