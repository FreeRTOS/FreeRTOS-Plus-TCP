/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_FREERTOS_IP_H
#define _MOCK_FREERTOS_IP_H

#include "unity.h"
#include <stdbool.h>
#include <stdint.h>
#include <fcntl.h>
#include <unity.h>
#include "FreeRTOS.h"
#include "FreeRTOS_IP.h"
#include "FreeRTOS_IP.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_FreeRTOS_IP_Init(void);
void mock_FreeRTOS_IP_Destroy(void);
void mock_FreeRTOS_IP_Verify(void);




#define ulApplicationGetNextSequenceNumber_IgnoreAndReturn(cmock_retval) ulApplicationGetNextSequenceNumber_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ulApplicationGetNextSequenceNumber_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulApplicationGetNextSequenceNumber_StopIgnore() ulApplicationGetNextSequenceNumber_CMockStopIgnore()
void ulApplicationGetNextSequenceNumber_CMockStopIgnore(void);
#define ulApplicationGetNextSequenceNumber_ExpectAnyArgsAndReturn(cmock_retval) ulApplicationGetNextSequenceNumber_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ulApplicationGetNextSequenceNumber_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulApplicationGetNextSequenceNumber_ExpectAndReturn(ulSourceAddress, usSourcePort, ulDestinationAddress, usDestinationPort, cmock_retval) ulApplicationGetNextSequenceNumber_CMockExpectAndReturn(__LINE__, ulSourceAddress, usSourcePort, ulDestinationAddress, usDestinationPort, cmock_retval)
void ulApplicationGetNextSequenceNumber_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t ulSourceAddress, uint16_t usSourcePort, uint32_t ulDestinationAddress, uint16_t usDestinationPort, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_ulApplicationGetNextSequenceNumber_CALLBACK)(uint32_t ulSourceAddress, uint16_t usSourcePort, uint32_t ulDestinationAddress, uint16_t usDestinationPort, int cmock_num_calls);
void ulApplicationGetNextSequenceNumber_AddCallback(CMOCK_ulApplicationGetNextSequenceNumber_CALLBACK Callback);
void ulApplicationGetNextSequenceNumber_Stub(CMOCK_ulApplicationGetNextSequenceNumber_CALLBACK Callback);
#define ulApplicationGetNextSequenceNumber_StubWithCallback ulApplicationGetNextSequenceNumber_Stub
#define ulApplicationGetNextSequenceNumber_IgnoreArg_ulSourceAddress() ulApplicationGetNextSequenceNumber_CMockIgnoreArg_ulSourceAddress(__LINE__)
void ulApplicationGetNextSequenceNumber_CMockIgnoreArg_ulSourceAddress(UNITY_LINE_TYPE cmock_line);
#define ulApplicationGetNextSequenceNumber_IgnoreArg_usSourcePort() ulApplicationGetNextSequenceNumber_CMockIgnoreArg_usSourcePort(__LINE__)
void ulApplicationGetNextSequenceNumber_CMockIgnoreArg_usSourcePort(UNITY_LINE_TYPE cmock_line);
#define ulApplicationGetNextSequenceNumber_IgnoreArg_ulDestinationAddress() ulApplicationGetNextSequenceNumber_CMockIgnoreArg_ulDestinationAddress(__LINE__)
void ulApplicationGetNextSequenceNumber_CMockIgnoreArg_ulDestinationAddress(UNITY_LINE_TYPE cmock_line);
#define ulApplicationGetNextSequenceNumber_IgnoreArg_usDestinationPort() ulApplicationGetNextSequenceNumber_CMockIgnoreArg_usDestinationPort(__LINE__)
void ulApplicationGetNextSequenceNumber_CMockIgnoreArg_usDestinationPort(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_max_int32_IgnoreAndReturn(cmock_retval) FreeRTOS_max_int32_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_max_int32_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define FreeRTOS_max_int32_StopIgnore() FreeRTOS_max_int32_CMockStopIgnore()
void FreeRTOS_max_int32_CMockStopIgnore(void);
#define FreeRTOS_max_int32_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_max_int32_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_max_int32_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define FreeRTOS_max_int32_ExpectAndReturn(a, b, cmock_retval) FreeRTOS_max_int32_CMockExpectAndReturn(__LINE__, a, b, cmock_retval)
void FreeRTOS_max_int32_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int32_t a, int32_t b, int32_t cmock_to_return);
typedef int32_t (* CMOCK_FreeRTOS_max_int32_CALLBACK)(int32_t a, int32_t b, int cmock_num_calls);
void FreeRTOS_max_int32_AddCallback(CMOCK_FreeRTOS_max_int32_CALLBACK Callback);
void FreeRTOS_max_int32_Stub(CMOCK_FreeRTOS_max_int32_CALLBACK Callback);
#define FreeRTOS_max_int32_StubWithCallback FreeRTOS_max_int32_Stub
#define FreeRTOS_max_int32_IgnoreArg_a() FreeRTOS_max_int32_CMockIgnoreArg_a(__LINE__)
void FreeRTOS_max_int32_CMockIgnoreArg_a(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_max_int32_IgnoreArg_b() FreeRTOS_max_int32_CMockIgnoreArg_b(__LINE__)
void FreeRTOS_max_int32_CMockIgnoreArg_b(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_max_uint32_IgnoreAndReturn(cmock_retval) FreeRTOS_max_uint32_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_max_uint32_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define FreeRTOS_max_uint32_StopIgnore() FreeRTOS_max_uint32_CMockStopIgnore()
void FreeRTOS_max_uint32_CMockStopIgnore(void);
#define FreeRTOS_max_uint32_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_max_uint32_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_max_uint32_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define FreeRTOS_max_uint32_ExpectAndReturn(a, b, cmock_retval) FreeRTOS_max_uint32_CMockExpectAndReturn(__LINE__, a, b, cmock_retval)
void FreeRTOS_max_uint32_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t a, uint32_t b, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_FreeRTOS_max_uint32_CALLBACK)(uint32_t a, uint32_t b, int cmock_num_calls);
void FreeRTOS_max_uint32_AddCallback(CMOCK_FreeRTOS_max_uint32_CALLBACK Callback);
void FreeRTOS_max_uint32_Stub(CMOCK_FreeRTOS_max_uint32_CALLBACK Callback);
#define FreeRTOS_max_uint32_StubWithCallback FreeRTOS_max_uint32_Stub
#define FreeRTOS_max_uint32_IgnoreArg_a() FreeRTOS_max_uint32_CMockIgnoreArg_a(__LINE__)
void FreeRTOS_max_uint32_CMockIgnoreArg_a(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_max_uint32_IgnoreArg_b() FreeRTOS_max_uint32_CMockIgnoreArg_b(__LINE__)
void FreeRTOS_max_uint32_CMockIgnoreArg_b(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_max_size_t_IgnoreAndReturn(cmock_retval) FreeRTOS_max_size_t_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_max_size_t_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define FreeRTOS_max_size_t_StopIgnore() FreeRTOS_max_size_t_CMockStopIgnore()
void FreeRTOS_max_size_t_CMockStopIgnore(void);
#define FreeRTOS_max_size_t_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_max_size_t_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_max_size_t_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define FreeRTOS_max_size_t_ExpectAndReturn(a, b, cmock_retval) FreeRTOS_max_size_t_CMockExpectAndReturn(__LINE__, a, b, cmock_retval)
void FreeRTOS_max_size_t_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t a, size_t b, size_t cmock_to_return);
typedef size_t (* CMOCK_FreeRTOS_max_size_t_CALLBACK)(size_t a, size_t b, int cmock_num_calls);
void FreeRTOS_max_size_t_AddCallback(CMOCK_FreeRTOS_max_size_t_CALLBACK Callback);
void FreeRTOS_max_size_t_Stub(CMOCK_FreeRTOS_max_size_t_CALLBACK Callback);
#define FreeRTOS_max_size_t_StubWithCallback FreeRTOS_max_size_t_Stub
#define FreeRTOS_max_size_t_IgnoreArg_a() FreeRTOS_max_size_t_CMockIgnoreArg_a(__LINE__)
void FreeRTOS_max_size_t_CMockIgnoreArg_a(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_max_size_t_IgnoreArg_b() FreeRTOS_max_size_t_CMockIgnoreArg_b(__LINE__)
void FreeRTOS_max_size_t_CMockIgnoreArg_b(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_min_int32_IgnoreAndReturn(cmock_retval) FreeRTOS_min_int32_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_min_int32_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define FreeRTOS_min_int32_StopIgnore() FreeRTOS_min_int32_CMockStopIgnore()
void FreeRTOS_min_int32_CMockStopIgnore(void);
#define FreeRTOS_min_int32_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_min_int32_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_min_int32_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define FreeRTOS_min_int32_ExpectAndReturn(a, b, cmock_retval) FreeRTOS_min_int32_CMockExpectAndReturn(__LINE__, a, b, cmock_retval)
void FreeRTOS_min_int32_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int32_t a, int32_t b, int32_t cmock_to_return);
typedef int32_t (* CMOCK_FreeRTOS_min_int32_CALLBACK)(int32_t a, int32_t b, int cmock_num_calls);
void FreeRTOS_min_int32_AddCallback(CMOCK_FreeRTOS_min_int32_CALLBACK Callback);
void FreeRTOS_min_int32_Stub(CMOCK_FreeRTOS_min_int32_CALLBACK Callback);
#define FreeRTOS_min_int32_StubWithCallback FreeRTOS_min_int32_Stub
#define FreeRTOS_min_int32_IgnoreArg_a() FreeRTOS_min_int32_CMockIgnoreArg_a(__LINE__)
void FreeRTOS_min_int32_CMockIgnoreArg_a(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_min_int32_IgnoreArg_b() FreeRTOS_min_int32_CMockIgnoreArg_b(__LINE__)
void FreeRTOS_min_int32_CMockIgnoreArg_b(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_min_uint32_IgnoreAndReturn(cmock_retval) FreeRTOS_min_uint32_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_min_uint32_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define FreeRTOS_min_uint32_StopIgnore() FreeRTOS_min_uint32_CMockStopIgnore()
void FreeRTOS_min_uint32_CMockStopIgnore(void);
#define FreeRTOS_min_uint32_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_min_uint32_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_min_uint32_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define FreeRTOS_min_uint32_ExpectAndReturn(a, b, cmock_retval) FreeRTOS_min_uint32_CMockExpectAndReturn(__LINE__, a, b, cmock_retval)
void FreeRTOS_min_uint32_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t a, uint32_t b, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_FreeRTOS_min_uint32_CALLBACK)(uint32_t a, uint32_t b, int cmock_num_calls);
void FreeRTOS_min_uint32_AddCallback(CMOCK_FreeRTOS_min_uint32_CALLBACK Callback);
void FreeRTOS_min_uint32_Stub(CMOCK_FreeRTOS_min_uint32_CALLBACK Callback);
#define FreeRTOS_min_uint32_StubWithCallback FreeRTOS_min_uint32_Stub
#define FreeRTOS_min_uint32_IgnoreArg_a() FreeRTOS_min_uint32_CMockIgnoreArg_a(__LINE__)
void FreeRTOS_min_uint32_CMockIgnoreArg_a(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_min_uint32_IgnoreArg_b() FreeRTOS_min_uint32_CMockIgnoreArg_b(__LINE__)
void FreeRTOS_min_uint32_CMockIgnoreArg_b(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_min_size_t_IgnoreAndReturn(cmock_retval) FreeRTOS_min_size_t_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_min_size_t_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define FreeRTOS_min_size_t_StopIgnore() FreeRTOS_min_size_t_CMockStopIgnore()
void FreeRTOS_min_size_t_CMockStopIgnore(void);
#define FreeRTOS_min_size_t_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_min_size_t_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_min_size_t_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define FreeRTOS_min_size_t_ExpectAndReturn(a, b, cmock_retval) FreeRTOS_min_size_t_CMockExpectAndReturn(__LINE__, a, b, cmock_retval)
void FreeRTOS_min_size_t_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t a, size_t b, size_t cmock_to_return);
typedef size_t (* CMOCK_FreeRTOS_min_size_t_CALLBACK)(size_t a, size_t b, int cmock_num_calls);
void FreeRTOS_min_size_t_AddCallback(CMOCK_FreeRTOS_min_size_t_CALLBACK Callback);
void FreeRTOS_min_size_t_Stub(CMOCK_FreeRTOS_min_size_t_CALLBACK Callback);
#define FreeRTOS_min_size_t_StubWithCallback FreeRTOS_min_size_t_Stub
#define FreeRTOS_min_size_t_IgnoreArg_a() FreeRTOS_min_size_t_CMockIgnoreArg_a(__LINE__)
void FreeRTOS_min_size_t_CMockIgnoreArg_a(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_min_size_t_IgnoreArg_b() FreeRTOS_min_size_t_CMockIgnoreArg_b(__LINE__)
void FreeRTOS_min_size_t_CMockIgnoreArg_b(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_round_up_IgnoreAndReturn(cmock_retval) FreeRTOS_round_up_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_round_up_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define FreeRTOS_round_up_StopIgnore() FreeRTOS_round_up_CMockStopIgnore()
void FreeRTOS_round_up_CMockStopIgnore(void);
#define FreeRTOS_round_up_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_round_up_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_round_up_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define FreeRTOS_round_up_ExpectAndReturn(a, d, cmock_retval) FreeRTOS_round_up_CMockExpectAndReturn(__LINE__, a, d, cmock_retval)
void FreeRTOS_round_up_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t a, uint32_t d, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_FreeRTOS_round_up_CALLBACK)(uint32_t a, uint32_t d, int cmock_num_calls);
void FreeRTOS_round_up_AddCallback(CMOCK_FreeRTOS_round_up_CALLBACK Callback);
void FreeRTOS_round_up_Stub(CMOCK_FreeRTOS_round_up_CALLBACK Callback);
#define FreeRTOS_round_up_StubWithCallback FreeRTOS_round_up_Stub
#define FreeRTOS_round_up_IgnoreArg_a() FreeRTOS_round_up_CMockIgnoreArg_a(__LINE__)
void FreeRTOS_round_up_CMockIgnoreArg_a(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_round_up_IgnoreArg_d() FreeRTOS_round_up_CMockIgnoreArg_d(__LINE__)
void FreeRTOS_round_up_CMockIgnoreArg_d(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_round_down_IgnoreAndReturn(cmock_retval) FreeRTOS_round_down_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_round_down_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define FreeRTOS_round_down_StopIgnore() FreeRTOS_round_down_CMockStopIgnore()
void FreeRTOS_round_down_CMockStopIgnore(void);
#define FreeRTOS_round_down_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_round_down_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_round_down_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define FreeRTOS_round_down_ExpectAndReturn(a, d, cmock_retval) FreeRTOS_round_down_CMockExpectAndReturn(__LINE__, a, d, cmock_retval)
void FreeRTOS_round_down_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t a, uint32_t d, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_FreeRTOS_round_down_CALLBACK)(uint32_t a, uint32_t d, int cmock_num_calls);
void FreeRTOS_round_down_AddCallback(CMOCK_FreeRTOS_round_down_CALLBACK Callback);
void FreeRTOS_round_down_Stub(CMOCK_FreeRTOS_round_down_CALLBACK Callback);
#define FreeRTOS_round_down_StubWithCallback FreeRTOS_round_down_Stub
#define FreeRTOS_round_down_IgnoreArg_a() FreeRTOS_round_down_CMockIgnoreArg_a(__LINE__)
void FreeRTOS_round_down_CMockIgnoreArg_a(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_round_down_IgnoreArg_d() FreeRTOS_round_down_CMockIgnoreArg_d(__LINE__)
void FreeRTOS_round_down_CMockIgnoreArg_d(UNITY_LINE_TYPE cmock_line);
#define pxFillInterfaceDescriptor_IgnoreAndReturn(cmock_retval) pxFillInterfaceDescriptor_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pxFillInterfaceDescriptor_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, struct xNetworkInterface* cmock_to_return);
#define pxFillInterfaceDescriptor_StopIgnore() pxFillInterfaceDescriptor_CMockStopIgnore()
void pxFillInterfaceDescriptor_CMockStopIgnore(void);
#define pxFillInterfaceDescriptor_ExpectAnyArgsAndReturn(cmock_retval) pxFillInterfaceDescriptor_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void pxFillInterfaceDescriptor_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, struct xNetworkInterface* cmock_to_return);
#define pxFillInterfaceDescriptor_ExpectAndReturn(xEMACIndex, pxInterface, cmock_retval) pxFillInterfaceDescriptor_CMockExpectAndReturn(__LINE__, xEMACIndex, pxInterface, cmock_retval)
void pxFillInterfaceDescriptor_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t xEMACIndex, struct xNetworkInterface* pxInterface, struct xNetworkInterface* cmock_to_return);
typedef struct xNetworkInterface* (* CMOCK_pxFillInterfaceDescriptor_CALLBACK)(BaseType_t xEMACIndex, struct xNetworkInterface* pxInterface, int cmock_num_calls);
void pxFillInterfaceDescriptor_AddCallback(CMOCK_pxFillInterfaceDescriptor_CALLBACK Callback);
void pxFillInterfaceDescriptor_Stub(CMOCK_pxFillInterfaceDescriptor_CALLBACK Callback);
#define pxFillInterfaceDescriptor_StubWithCallback pxFillInterfaceDescriptor_Stub
#define pxFillInterfaceDescriptor_ExpectWithArrayAndReturn(xEMACIndex, pxInterface, pxInterface_Depth, cmock_retval) pxFillInterfaceDescriptor_CMockExpectWithArrayAndReturn(__LINE__, xEMACIndex, pxInterface, pxInterface_Depth, cmock_retval)
void pxFillInterfaceDescriptor_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t xEMACIndex, struct xNetworkInterface* pxInterface, int pxInterface_Depth, struct xNetworkInterface* cmock_to_return);
#define pxFillInterfaceDescriptor_ReturnThruPtr_pxInterface(pxInterface) pxFillInterfaceDescriptor_CMockReturnMemThruPtr_pxInterface(__LINE__, pxInterface, sizeof(struct xNetworkInterface))
#define pxFillInterfaceDescriptor_ReturnArrayThruPtr_pxInterface(pxInterface, cmock_len) pxFillInterfaceDescriptor_CMockReturnMemThruPtr_pxInterface(__LINE__, pxInterface, (int)(cmock_len * (int)sizeof(*pxInterface)))
#define pxFillInterfaceDescriptor_ReturnMemThruPtr_pxInterface(pxInterface, cmock_size) pxFillInterfaceDescriptor_CMockReturnMemThruPtr_pxInterface(__LINE__, pxInterface, cmock_size)
void pxFillInterfaceDescriptor_CMockReturnMemThruPtr_pxInterface(UNITY_LINE_TYPE cmock_line, struct xNetworkInterface* pxInterface, int cmock_size);
#define pxFillInterfaceDescriptor_IgnoreArg_xEMACIndex() pxFillInterfaceDescriptor_CMockIgnoreArg_xEMACIndex(__LINE__)
void pxFillInterfaceDescriptor_CMockIgnoreArg_xEMACIndex(UNITY_LINE_TYPE cmock_line);
#define pxFillInterfaceDescriptor_IgnoreArg_pxInterface() pxFillInterfaceDescriptor_CMockIgnoreArg_pxInterface(__LINE__)
void pxFillInterfaceDescriptor_CMockIgnoreArg_pxInterface(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_IPInit_IgnoreAndReturn(cmock_retval) FreeRTOS_IPInit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_IPInit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_IPInit_StopIgnore() FreeRTOS_IPInit_CMockStopIgnore()
void FreeRTOS_IPInit_CMockStopIgnore(void);
#define FreeRTOS_IPInit_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_IPInit_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_IPInit_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_IPInit_ExpectAndReturn(ucIPAddress, ucNetMask, ucGatewayAddress, ucDNSServerAddress, ucMACAddress, cmock_retval) FreeRTOS_IPInit_CMockExpectAndReturn(__LINE__, ucIPAddress, ucNetMask, ucGatewayAddress, ucDNSServerAddress, ucMACAddress, cmock_retval)
void FreeRTOS_IPInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const uint8_t* ucIPAddress, const uint8_t* ucNetMask, const uint8_t* ucGatewayAddress, const uint8_t* ucDNSServerAddress, const uint8_t* ucMACAddress, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_IPInit_CALLBACK)(const uint8_t* ucIPAddress, const uint8_t* ucNetMask, const uint8_t* ucGatewayAddress, const uint8_t* ucDNSServerAddress, const uint8_t* ucMACAddress, int cmock_num_calls);
void FreeRTOS_IPInit_AddCallback(CMOCK_FreeRTOS_IPInit_CALLBACK Callback);
void FreeRTOS_IPInit_Stub(CMOCK_FreeRTOS_IPInit_CALLBACK Callback);
#define FreeRTOS_IPInit_StubWithCallback FreeRTOS_IPInit_Stub
#define FreeRTOS_IPInit_ExpectWithArrayAndReturn(ucIPAddress, ucIPAddress_Depth, ucNetMask, ucNetMask_Depth, ucGatewayAddress, ucGatewayAddress_Depth, ucDNSServerAddress, ucDNSServerAddress_Depth, ucMACAddress, ucMACAddress_Depth, cmock_retval) FreeRTOS_IPInit_CMockExpectWithArrayAndReturn(__LINE__, ucIPAddress, ucIPAddress_Depth, ucNetMask, ucNetMask_Depth, ucGatewayAddress, ucGatewayAddress_Depth, ucDNSServerAddress, ucDNSServerAddress_Depth, ucMACAddress, ucMACAddress_Depth, cmock_retval)
void FreeRTOS_IPInit_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const uint8_t* ucIPAddress, int ucIPAddress_Depth, const uint8_t* ucNetMask, int ucNetMask_Depth, const uint8_t* ucGatewayAddress, int ucGatewayAddress_Depth, const uint8_t* ucDNSServerAddress, int ucDNSServerAddress_Depth, const uint8_t* ucMACAddress, int ucMACAddress_Depth, BaseType_t cmock_to_return);
#define FreeRTOS_IPInit_IgnoreArg_ucIPAddress() FreeRTOS_IPInit_CMockIgnoreArg_ucIPAddress(__LINE__)
void FreeRTOS_IPInit_CMockIgnoreArg_ucIPAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_IPInit_IgnoreArg_ucNetMask() FreeRTOS_IPInit_CMockIgnoreArg_ucNetMask(__LINE__)
void FreeRTOS_IPInit_CMockIgnoreArg_ucNetMask(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_IPInit_IgnoreArg_ucGatewayAddress() FreeRTOS_IPInit_CMockIgnoreArg_ucGatewayAddress(__LINE__)
void FreeRTOS_IPInit_CMockIgnoreArg_ucGatewayAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_IPInit_IgnoreArg_ucDNSServerAddress() FreeRTOS_IPInit_CMockIgnoreArg_ucDNSServerAddress(__LINE__)
void FreeRTOS_IPInit_CMockIgnoreArg_ucDNSServerAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_IPInit_IgnoreArg_ucMACAddress() FreeRTOS_IPInit_CMockIgnoreArg_ucMACAddress(__LINE__)
void FreeRTOS_IPInit_CMockIgnoreArg_ucMACAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetEndPointConfiguration_Ignore() FreeRTOS_GetEndPointConfiguration_CMockIgnore()
void FreeRTOS_GetEndPointConfiguration_CMockIgnore(void);
#define FreeRTOS_GetEndPointConfiguration_StopIgnore() FreeRTOS_GetEndPointConfiguration_CMockStopIgnore()
void FreeRTOS_GetEndPointConfiguration_CMockStopIgnore(void);
#define FreeRTOS_GetEndPointConfiguration_ExpectAnyArgs() FreeRTOS_GetEndPointConfiguration_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_GetEndPointConfiguration_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetEndPointConfiguration_Expect(pulIPAddress, pulNetMask, pulGatewayAddress, pulDNSServerAddress, pxEndPoint) FreeRTOS_GetEndPointConfiguration_CMockExpect(__LINE__, pulIPAddress, pulNetMask, pulGatewayAddress, pulDNSServerAddress, pxEndPoint)
void FreeRTOS_GetEndPointConfiguration_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t* pulIPAddress, uint32_t* pulNetMask, uint32_t* pulGatewayAddress, uint32_t* pulDNSServerAddress, struct xNetworkEndPoint* pxEndPoint);
typedef void (* CMOCK_FreeRTOS_GetEndPointConfiguration_CALLBACK)(uint32_t* pulIPAddress, uint32_t* pulNetMask, uint32_t* pulGatewayAddress, uint32_t* pulDNSServerAddress, struct xNetworkEndPoint* pxEndPoint, int cmock_num_calls);
void FreeRTOS_GetEndPointConfiguration_AddCallback(CMOCK_FreeRTOS_GetEndPointConfiguration_CALLBACK Callback);
void FreeRTOS_GetEndPointConfiguration_Stub(CMOCK_FreeRTOS_GetEndPointConfiguration_CALLBACK Callback);
#define FreeRTOS_GetEndPointConfiguration_StubWithCallback FreeRTOS_GetEndPointConfiguration_Stub
#define FreeRTOS_GetEndPointConfiguration_ExpectWithArray(pulIPAddress, pulIPAddress_Depth, pulNetMask, pulNetMask_Depth, pulGatewayAddress, pulGatewayAddress_Depth, pulDNSServerAddress, pulDNSServerAddress_Depth, pxEndPoint, pxEndPoint_Depth) FreeRTOS_GetEndPointConfiguration_CMockExpectWithArray(__LINE__, pulIPAddress, pulIPAddress_Depth, pulNetMask, pulNetMask_Depth, pulGatewayAddress, pulGatewayAddress_Depth, pulDNSServerAddress, pulDNSServerAddress_Depth, pxEndPoint, pxEndPoint_Depth)
void FreeRTOS_GetEndPointConfiguration_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, uint32_t* pulIPAddress, int pulIPAddress_Depth, uint32_t* pulNetMask, int pulNetMask_Depth, uint32_t* pulGatewayAddress, int pulGatewayAddress_Depth, uint32_t* pulDNSServerAddress, int pulDNSServerAddress_Depth, struct xNetworkEndPoint* pxEndPoint, int pxEndPoint_Depth);
#define FreeRTOS_GetEndPointConfiguration_ReturnThruPtr_pulIPAddress(pulIPAddress) FreeRTOS_GetEndPointConfiguration_CMockReturnMemThruPtr_pulIPAddress(__LINE__, pulIPAddress, sizeof(uint32_t))
#define FreeRTOS_GetEndPointConfiguration_ReturnArrayThruPtr_pulIPAddress(pulIPAddress, cmock_len) FreeRTOS_GetEndPointConfiguration_CMockReturnMemThruPtr_pulIPAddress(__LINE__, pulIPAddress, (int)(cmock_len * (int)sizeof(*pulIPAddress)))
#define FreeRTOS_GetEndPointConfiguration_ReturnMemThruPtr_pulIPAddress(pulIPAddress, cmock_size) FreeRTOS_GetEndPointConfiguration_CMockReturnMemThruPtr_pulIPAddress(__LINE__, pulIPAddress, cmock_size)
void FreeRTOS_GetEndPointConfiguration_CMockReturnMemThruPtr_pulIPAddress(UNITY_LINE_TYPE cmock_line, uint32_t* pulIPAddress, int cmock_size);
#define FreeRTOS_GetEndPointConfiguration_ReturnThruPtr_pulNetMask(pulNetMask) FreeRTOS_GetEndPointConfiguration_CMockReturnMemThruPtr_pulNetMask(__LINE__, pulNetMask, sizeof(uint32_t))
#define FreeRTOS_GetEndPointConfiguration_ReturnArrayThruPtr_pulNetMask(pulNetMask, cmock_len) FreeRTOS_GetEndPointConfiguration_CMockReturnMemThruPtr_pulNetMask(__LINE__, pulNetMask, (int)(cmock_len * (int)sizeof(*pulNetMask)))
#define FreeRTOS_GetEndPointConfiguration_ReturnMemThruPtr_pulNetMask(pulNetMask, cmock_size) FreeRTOS_GetEndPointConfiguration_CMockReturnMemThruPtr_pulNetMask(__LINE__, pulNetMask, cmock_size)
void FreeRTOS_GetEndPointConfiguration_CMockReturnMemThruPtr_pulNetMask(UNITY_LINE_TYPE cmock_line, uint32_t* pulNetMask, int cmock_size);
#define FreeRTOS_GetEndPointConfiguration_ReturnThruPtr_pulGatewayAddress(pulGatewayAddress) FreeRTOS_GetEndPointConfiguration_CMockReturnMemThruPtr_pulGatewayAddress(__LINE__, pulGatewayAddress, sizeof(uint32_t))
#define FreeRTOS_GetEndPointConfiguration_ReturnArrayThruPtr_pulGatewayAddress(pulGatewayAddress, cmock_len) FreeRTOS_GetEndPointConfiguration_CMockReturnMemThruPtr_pulGatewayAddress(__LINE__, pulGatewayAddress, (int)(cmock_len * (int)sizeof(*pulGatewayAddress)))
#define FreeRTOS_GetEndPointConfiguration_ReturnMemThruPtr_pulGatewayAddress(pulGatewayAddress, cmock_size) FreeRTOS_GetEndPointConfiguration_CMockReturnMemThruPtr_pulGatewayAddress(__LINE__, pulGatewayAddress, cmock_size)
void FreeRTOS_GetEndPointConfiguration_CMockReturnMemThruPtr_pulGatewayAddress(UNITY_LINE_TYPE cmock_line, uint32_t* pulGatewayAddress, int cmock_size);
#define FreeRTOS_GetEndPointConfiguration_ReturnThruPtr_pulDNSServerAddress(pulDNSServerAddress) FreeRTOS_GetEndPointConfiguration_CMockReturnMemThruPtr_pulDNSServerAddress(__LINE__, pulDNSServerAddress, sizeof(uint32_t))
#define FreeRTOS_GetEndPointConfiguration_ReturnArrayThruPtr_pulDNSServerAddress(pulDNSServerAddress, cmock_len) FreeRTOS_GetEndPointConfiguration_CMockReturnMemThruPtr_pulDNSServerAddress(__LINE__, pulDNSServerAddress, (int)(cmock_len * (int)sizeof(*pulDNSServerAddress)))
#define FreeRTOS_GetEndPointConfiguration_ReturnMemThruPtr_pulDNSServerAddress(pulDNSServerAddress, cmock_size) FreeRTOS_GetEndPointConfiguration_CMockReturnMemThruPtr_pulDNSServerAddress(__LINE__, pulDNSServerAddress, cmock_size)
void FreeRTOS_GetEndPointConfiguration_CMockReturnMemThruPtr_pulDNSServerAddress(UNITY_LINE_TYPE cmock_line, uint32_t* pulDNSServerAddress, int cmock_size);
#define FreeRTOS_GetEndPointConfiguration_ReturnThruPtr_pxEndPoint(pxEndPoint) FreeRTOS_GetEndPointConfiguration_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, sizeof(struct xNetworkEndPoint))
#define FreeRTOS_GetEndPointConfiguration_ReturnArrayThruPtr_pxEndPoint(pxEndPoint, cmock_len) FreeRTOS_GetEndPointConfiguration_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, (int)(cmock_len * (int)sizeof(*pxEndPoint)))
#define FreeRTOS_GetEndPointConfiguration_ReturnMemThruPtr_pxEndPoint(pxEndPoint, cmock_size) FreeRTOS_GetEndPointConfiguration_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, cmock_size)
void FreeRTOS_GetEndPointConfiguration_CMockReturnMemThruPtr_pxEndPoint(UNITY_LINE_TYPE cmock_line, struct xNetworkEndPoint* pxEndPoint, int cmock_size);
#define FreeRTOS_GetEndPointConfiguration_IgnoreArg_pulIPAddress() FreeRTOS_GetEndPointConfiguration_CMockIgnoreArg_pulIPAddress(__LINE__)
void FreeRTOS_GetEndPointConfiguration_CMockIgnoreArg_pulIPAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetEndPointConfiguration_IgnoreArg_pulNetMask() FreeRTOS_GetEndPointConfiguration_CMockIgnoreArg_pulNetMask(__LINE__)
void FreeRTOS_GetEndPointConfiguration_CMockIgnoreArg_pulNetMask(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetEndPointConfiguration_IgnoreArg_pulGatewayAddress() FreeRTOS_GetEndPointConfiguration_CMockIgnoreArg_pulGatewayAddress(__LINE__)
void FreeRTOS_GetEndPointConfiguration_CMockIgnoreArg_pulGatewayAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetEndPointConfiguration_IgnoreArg_pulDNSServerAddress() FreeRTOS_GetEndPointConfiguration_CMockIgnoreArg_pulDNSServerAddress(__LINE__)
void FreeRTOS_GetEndPointConfiguration_CMockIgnoreArg_pulDNSServerAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetEndPointConfiguration_IgnoreArg_pxEndPoint() FreeRTOS_GetEndPointConfiguration_CMockIgnoreArg_pxEndPoint(__LINE__)
void FreeRTOS_GetEndPointConfiguration_CMockIgnoreArg_pxEndPoint(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetEndPointConfiguration_Ignore() FreeRTOS_SetEndPointConfiguration_CMockIgnore()
void FreeRTOS_SetEndPointConfiguration_CMockIgnore(void);
#define FreeRTOS_SetEndPointConfiguration_StopIgnore() FreeRTOS_SetEndPointConfiguration_CMockStopIgnore()
void FreeRTOS_SetEndPointConfiguration_CMockStopIgnore(void);
#define FreeRTOS_SetEndPointConfiguration_ExpectAnyArgs() FreeRTOS_SetEndPointConfiguration_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_SetEndPointConfiguration_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetEndPointConfiguration_Expect(pulIPAddress, pulNetMask, pulGatewayAddress, pulDNSServerAddress, pxEndPoint) FreeRTOS_SetEndPointConfiguration_CMockExpect(__LINE__, pulIPAddress, pulNetMask, pulGatewayAddress, pulDNSServerAddress, pxEndPoint)
void FreeRTOS_SetEndPointConfiguration_CMockExpect(UNITY_LINE_TYPE cmock_line, const uint32_t* pulIPAddress, const uint32_t* pulNetMask, const uint32_t* pulGatewayAddress, const uint32_t* pulDNSServerAddress, struct xNetworkEndPoint* pxEndPoint);
typedef void (* CMOCK_FreeRTOS_SetEndPointConfiguration_CALLBACK)(const uint32_t* pulIPAddress, const uint32_t* pulNetMask, const uint32_t* pulGatewayAddress, const uint32_t* pulDNSServerAddress, struct xNetworkEndPoint* pxEndPoint, int cmock_num_calls);
void FreeRTOS_SetEndPointConfiguration_AddCallback(CMOCK_FreeRTOS_SetEndPointConfiguration_CALLBACK Callback);
void FreeRTOS_SetEndPointConfiguration_Stub(CMOCK_FreeRTOS_SetEndPointConfiguration_CALLBACK Callback);
#define FreeRTOS_SetEndPointConfiguration_StubWithCallback FreeRTOS_SetEndPointConfiguration_Stub
#define FreeRTOS_SetEndPointConfiguration_ExpectWithArray(pulIPAddress, pulIPAddress_Depth, pulNetMask, pulNetMask_Depth, pulGatewayAddress, pulGatewayAddress_Depth, pulDNSServerAddress, pulDNSServerAddress_Depth, pxEndPoint, pxEndPoint_Depth) FreeRTOS_SetEndPointConfiguration_CMockExpectWithArray(__LINE__, pulIPAddress, pulIPAddress_Depth, pulNetMask, pulNetMask_Depth, pulGatewayAddress, pulGatewayAddress_Depth, pulDNSServerAddress, pulDNSServerAddress_Depth, pxEndPoint, pxEndPoint_Depth)
void FreeRTOS_SetEndPointConfiguration_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, const uint32_t* pulIPAddress, int pulIPAddress_Depth, const uint32_t* pulNetMask, int pulNetMask_Depth, const uint32_t* pulGatewayAddress, int pulGatewayAddress_Depth, const uint32_t* pulDNSServerAddress, int pulDNSServerAddress_Depth, struct xNetworkEndPoint* pxEndPoint, int pxEndPoint_Depth);
#define FreeRTOS_SetEndPointConfiguration_ReturnThruPtr_pxEndPoint(pxEndPoint) FreeRTOS_SetEndPointConfiguration_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, sizeof(struct xNetworkEndPoint))
#define FreeRTOS_SetEndPointConfiguration_ReturnArrayThruPtr_pxEndPoint(pxEndPoint, cmock_len) FreeRTOS_SetEndPointConfiguration_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, (int)(cmock_len * (int)sizeof(*pxEndPoint)))
#define FreeRTOS_SetEndPointConfiguration_ReturnMemThruPtr_pxEndPoint(pxEndPoint, cmock_size) FreeRTOS_SetEndPointConfiguration_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, cmock_size)
void FreeRTOS_SetEndPointConfiguration_CMockReturnMemThruPtr_pxEndPoint(UNITY_LINE_TYPE cmock_line, struct xNetworkEndPoint* pxEndPoint, int cmock_size);
#define FreeRTOS_SetEndPointConfiguration_IgnoreArg_pulIPAddress() FreeRTOS_SetEndPointConfiguration_CMockIgnoreArg_pulIPAddress(__LINE__)
void FreeRTOS_SetEndPointConfiguration_CMockIgnoreArg_pulIPAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetEndPointConfiguration_IgnoreArg_pulNetMask() FreeRTOS_SetEndPointConfiguration_CMockIgnoreArg_pulNetMask(__LINE__)
void FreeRTOS_SetEndPointConfiguration_CMockIgnoreArg_pulNetMask(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetEndPointConfiguration_IgnoreArg_pulGatewayAddress() FreeRTOS_SetEndPointConfiguration_CMockIgnoreArg_pulGatewayAddress(__LINE__)
void FreeRTOS_SetEndPointConfiguration_CMockIgnoreArg_pulGatewayAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetEndPointConfiguration_IgnoreArg_pulDNSServerAddress() FreeRTOS_SetEndPointConfiguration_CMockIgnoreArg_pulDNSServerAddress(__LINE__)
void FreeRTOS_SetEndPointConfiguration_CMockIgnoreArg_pulDNSServerAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetEndPointConfiguration_IgnoreArg_pxEndPoint() FreeRTOS_SetEndPointConfiguration_CMockIgnoreArg_pxEndPoint(__LINE__)
void FreeRTOS_SetEndPointConfiguration_CMockIgnoreArg_pxEndPoint(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetIPTaskHandle_IgnoreAndReturn(cmock_retval) FreeRTOS_GetIPTaskHandle_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetIPTaskHandle_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t cmock_to_return);
#define FreeRTOS_GetIPTaskHandle_StopIgnore() FreeRTOS_GetIPTaskHandle_CMockStopIgnore()
void FreeRTOS_GetIPTaskHandle_CMockStopIgnore(void);
#define FreeRTOS_GetIPTaskHandle_ExpectAndReturn(cmock_retval) FreeRTOS_GetIPTaskHandle_CMockExpectAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetIPTaskHandle_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t cmock_to_return);
typedef TaskHandle_t (* CMOCK_FreeRTOS_GetIPTaskHandle_CALLBACK)(int cmock_num_calls);
void FreeRTOS_GetIPTaskHandle_AddCallback(CMOCK_FreeRTOS_GetIPTaskHandle_CALLBACK Callback);
void FreeRTOS_GetIPTaskHandle_Stub(CMOCK_FreeRTOS_GetIPTaskHandle_CALLBACK Callback);
#define FreeRTOS_GetIPTaskHandle_StubWithCallback FreeRTOS_GetIPTaskHandle_Stub
#define FreeRTOS_GetUDPPayloadBuffer_IgnoreAndReturn(cmock_retval) FreeRTOS_GetUDPPayloadBuffer_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetUDPPayloadBuffer_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define FreeRTOS_GetUDPPayloadBuffer_StopIgnore() FreeRTOS_GetUDPPayloadBuffer_CMockStopIgnore()
void FreeRTOS_GetUDPPayloadBuffer_CMockStopIgnore(void);
#define FreeRTOS_GetUDPPayloadBuffer_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_GetUDPPayloadBuffer_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetUDPPayloadBuffer_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define FreeRTOS_GetUDPPayloadBuffer_ExpectAndReturn(uxRequestedSizeBytes, uxBlockTimeTicks, ucIPType, cmock_retval) FreeRTOS_GetUDPPayloadBuffer_CMockExpectAndReturn(__LINE__, uxRequestedSizeBytes, uxBlockTimeTicks, ucIPType, cmock_retval)
void FreeRTOS_GetUDPPayloadBuffer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t uxRequestedSizeBytes, TickType_t uxBlockTimeTicks, uint8_t ucIPType, void* cmock_to_return);
typedef void* (* CMOCK_FreeRTOS_GetUDPPayloadBuffer_CALLBACK)(size_t uxRequestedSizeBytes, TickType_t uxBlockTimeTicks, uint8_t ucIPType, int cmock_num_calls);
void FreeRTOS_GetUDPPayloadBuffer_AddCallback(CMOCK_FreeRTOS_GetUDPPayloadBuffer_CALLBACK Callback);
void FreeRTOS_GetUDPPayloadBuffer_Stub(CMOCK_FreeRTOS_GetUDPPayloadBuffer_CALLBACK Callback);
#define FreeRTOS_GetUDPPayloadBuffer_StubWithCallback FreeRTOS_GetUDPPayloadBuffer_Stub
#define FreeRTOS_GetUDPPayloadBuffer_IgnoreArg_uxRequestedSizeBytes() FreeRTOS_GetUDPPayloadBuffer_CMockIgnoreArg_uxRequestedSizeBytes(__LINE__)
void FreeRTOS_GetUDPPayloadBuffer_CMockIgnoreArg_uxRequestedSizeBytes(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetUDPPayloadBuffer_IgnoreArg_uxBlockTimeTicks() FreeRTOS_GetUDPPayloadBuffer_CMockIgnoreArg_uxBlockTimeTicks(__LINE__)
void FreeRTOS_GetUDPPayloadBuffer_CMockIgnoreArg_uxBlockTimeTicks(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetUDPPayloadBuffer_IgnoreArg_ucIPType() FreeRTOS_GetUDPPayloadBuffer_CMockIgnoreArg_ucIPType(__LINE__)
void FreeRTOS_GetUDPPayloadBuffer_CMockIgnoreArg_ucIPType(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetAddressConfiguration_Ignore() FreeRTOS_GetAddressConfiguration_CMockIgnore()
void FreeRTOS_GetAddressConfiguration_CMockIgnore(void);
#define FreeRTOS_GetAddressConfiguration_StopIgnore() FreeRTOS_GetAddressConfiguration_CMockStopIgnore()
void FreeRTOS_GetAddressConfiguration_CMockStopIgnore(void);
#define FreeRTOS_GetAddressConfiguration_ExpectAnyArgs() FreeRTOS_GetAddressConfiguration_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_GetAddressConfiguration_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetAddressConfiguration_Expect(pulIPAddress, pulNetMask, pulGatewayAddress, pulDNSServerAddress) FreeRTOS_GetAddressConfiguration_CMockExpect(__LINE__, pulIPAddress, pulNetMask, pulGatewayAddress, pulDNSServerAddress)
void FreeRTOS_GetAddressConfiguration_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t* pulIPAddress, uint32_t* pulNetMask, uint32_t* pulGatewayAddress, uint32_t* pulDNSServerAddress);
typedef void (* CMOCK_FreeRTOS_GetAddressConfiguration_CALLBACK)(uint32_t* pulIPAddress, uint32_t* pulNetMask, uint32_t* pulGatewayAddress, uint32_t* pulDNSServerAddress, int cmock_num_calls);
void FreeRTOS_GetAddressConfiguration_AddCallback(CMOCK_FreeRTOS_GetAddressConfiguration_CALLBACK Callback);
void FreeRTOS_GetAddressConfiguration_Stub(CMOCK_FreeRTOS_GetAddressConfiguration_CALLBACK Callback);
#define FreeRTOS_GetAddressConfiguration_StubWithCallback FreeRTOS_GetAddressConfiguration_Stub
#define FreeRTOS_GetAddressConfiguration_ExpectWithArray(pulIPAddress, pulIPAddress_Depth, pulNetMask, pulNetMask_Depth, pulGatewayAddress, pulGatewayAddress_Depth, pulDNSServerAddress, pulDNSServerAddress_Depth) FreeRTOS_GetAddressConfiguration_CMockExpectWithArray(__LINE__, pulIPAddress, pulIPAddress_Depth, pulNetMask, pulNetMask_Depth, pulGatewayAddress, pulGatewayAddress_Depth, pulDNSServerAddress, pulDNSServerAddress_Depth)
void FreeRTOS_GetAddressConfiguration_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, uint32_t* pulIPAddress, int pulIPAddress_Depth, uint32_t* pulNetMask, int pulNetMask_Depth, uint32_t* pulGatewayAddress, int pulGatewayAddress_Depth, uint32_t* pulDNSServerAddress, int pulDNSServerAddress_Depth);
#define FreeRTOS_GetAddressConfiguration_ReturnThruPtr_pulIPAddress(pulIPAddress) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulIPAddress(__LINE__, pulIPAddress, sizeof(uint32_t))
#define FreeRTOS_GetAddressConfiguration_ReturnArrayThruPtr_pulIPAddress(pulIPAddress, cmock_len) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulIPAddress(__LINE__, pulIPAddress, (int)(cmock_len * (int)sizeof(*pulIPAddress)))
#define FreeRTOS_GetAddressConfiguration_ReturnMemThruPtr_pulIPAddress(pulIPAddress, cmock_size) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulIPAddress(__LINE__, pulIPAddress, cmock_size)
void FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulIPAddress(UNITY_LINE_TYPE cmock_line, uint32_t* pulIPAddress, int cmock_size);
#define FreeRTOS_GetAddressConfiguration_ReturnThruPtr_pulNetMask(pulNetMask) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulNetMask(__LINE__, pulNetMask, sizeof(uint32_t))
#define FreeRTOS_GetAddressConfiguration_ReturnArrayThruPtr_pulNetMask(pulNetMask, cmock_len) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulNetMask(__LINE__, pulNetMask, (int)(cmock_len * (int)sizeof(*pulNetMask)))
#define FreeRTOS_GetAddressConfiguration_ReturnMemThruPtr_pulNetMask(pulNetMask, cmock_size) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulNetMask(__LINE__, pulNetMask, cmock_size)
void FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulNetMask(UNITY_LINE_TYPE cmock_line, uint32_t* pulNetMask, int cmock_size);
#define FreeRTOS_GetAddressConfiguration_ReturnThruPtr_pulGatewayAddress(pulGatewayAddress) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulGatewayAddress(__LINE__, pulGatewayAddress, sizeof(uint32_t))
#define FreeRTOS_GetAddressConfiguration_ReturnArrayThruPtr_pulGatewayAddress(pulGatewayAddress, cmock_len) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulGatewayAddress(__LINE__, pulGatewayAddress, (int)(cmock_len * (int)sizeof(*pulGatewayAddress)))
#define FreeRTOS_GetAddressConfiguration_ReturnMemThruPtr_pulGatewayAddress(pulGatewayAddress, cmock_size) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulGatewayAddress(__LINE__, pulGatewayAddress, cmock_size)
void FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulGatewayAddress(UNITY_LINE_TYPE cmock_line, uint32_t* pulGatewayAddress, int cmock_size);
#define FreeRTOS_GetAddressConfiguration_ReturnThruPtr_pulDNSServerAddress(pulDNSServerAddress) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulDNSServerAddress(__LINE__, pulDNSServerAddress, sizeof(uint32_t))
#define FreeRTOS_GetAddressConfiguration_ReturnArrayThruPtr_pulDNSServerAddress(pulDNSServerAddress, cmock_len) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulDNSServerAddress(__LINE__, pulDNSServerAddress, (int)(cmock_len * (int)sizeof(*pulDNSServerAddress)))
#define FreeRTOS_GetAddressConfiguration_ReturnMemThruPtr_pulDNSServerAddress(pulDNSServerAddress, cmock_size) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulDNSServerAddress(__LINE__, pulDNSServerAddress, cmock_size)
void FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulDNSServerAddress(UNITY_LINE_TYPE cmock_line, uint32_t* pulDNSServerAddress, int cmock_size);
#define FreeRTOS_GetAddressConfiguration_IgnoreArg_pulIPAddress() FreeRTOS_GetAddressConfiguration_CMockIgnoreArg_pulIPAddress(__LINE__)
void FreeRTOS_GetAddressConfiguration_CMockIgnoreArg_pulIPAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetAddressConfiguration_IgnoreArg_pulNetMask() FreeRTOS_GetAddressConfiguration_CMockIgnoreArg_pulNetMask(__LINE__)
void FreeRTOS_GetAddressConfiguration_CMockIgnoreArg_pulNetMask(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetAddressConfiguration_IgnoreArg_pulGatewayAddress() FreeRTOS_GetAddressConfiguration_CMockIgnoreArg_pulGatewayAddress(__LINE__)
void FreeRTOS_GetAddressConfiguration_CMockIgnoreArg_pulGatewayAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetAddressConfiguration_IgnoreArg_pulDNSServerAddress() FreeRTOS_GetAddressConfiguration_CMockIgnoreArg_pulDNSServerAddress(__LINE__)
void FreeRTOS_GetAddressConfiguration_CMockIgnoreArg_pulDNSServerAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetAddressConfiguration_Ignore() FreeRTOS_SetAddressConfiguration_CMockIgnore()
void FreeRTOS_SetAddressConfiguration_CMockIgnore(void);
#define FreeRTOS_SetAddressConfiguration_StopIgnore() FreeRTOS_SetAddressConfiguration_CMockStopIgnore()
void FreeRTOS_SetAddressConfiguration_CMockStopIgnore(void);
#define FreeRTOS_SetAddressConfiguration_ExpectAnyArgs() FreeRTOS_SetAddressConfiguration_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_SetAddressConfiguration_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetAddressConfiguration_Expect(pulIPAddress, pulNetMask, pulGatewayAddress, pulDNSServerAddress) FreeRTOS_SetAddressConfiguration_CMockExpect(__LINE__, pulIPAddress, pulNetMask, pulGatewayAddress, pulDNSServerAddress)
void FreeRTOS_SetAddressConfiguration_CMockExpect(UNITY_LINE_TYPE cmock_line, const uint32_t* pulIPAddress, const uint32_t* pulNetMask, const uint32_t* pulGatewayAddress, const uint32_t* pulDNSServerAddress);
typedef void (* CMOCK_FreeRTOS_SetAddressConfiguration_CALLBACK)(const uint32_t* pulIPAddress, const uint32_t* pulNetMask, const uint32_t* pulGatewayAddress, const uint32_t* pulDNSServerAddress, int cmock_num_calls);
void FreeRTOS_SetAddressConfiguration_AddCallback(CMOCK_FreeRTOS_SetAddressConfiguration_CALLBACK Callback);
void FreeRTOS_SetAddressConfiguration_Stub(CMOCK_FreeRTOS_SetAddressConfiguration_CALLBACK Callback);
#define FreeRTOS_SetAddressConfiguration_StubWithCallback FreeRTOS_SetAddressConfiguration_Stub
#define FreeRTOS_SetAddressConfiguration_ExpectWithArray(pulIPAddress, pulIPAddress_Depth, pulNetMask, pulNetMask_Depth, pulGatewayAddress, pulGatewayAddress_Depth, pulDNSServerAddress, pulDNSServerAddress_Depth) FreeRTOS_SetAddressConfiguration_CMockExpectWithArray(__LINE__, pulIPAddress, pulIPAddress_Depth, pulNetMask, pulNetMask_Depth, pulGatewayAddress, pulGatewayAddress_Depth, pulDNSServerAddress, pulDNSServerAddress_Depth)
void FreeRTOS_SetAddressConfiguration_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, const uint32_t* pulIPAddress, int pulIPAddress_Depth, const uint32_t* pulNetMask, int pulNetMask_Depth, const uint32_t* pulGatewayAddress, int pulGatewayAddress_Depth, const uint32_t* pulDNSServerAddress, int pulDNSServerAddress_Depth);
#define FreeRTOS_SetAddressConfiguration_IgnoreArg_pulIPAddress() FreeRTOS_SetAddressConfiguration_CMockIgnoreArg_pulIPAddress(__LINE__)
void FreeRTOS_SetAddressConfiguration_CMockIgnoreArg_pulIPAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetAddressConfiguration_IgnoreArg_pulNetMask() FreeRTOS_SetAddressConfiguration_CMockIgnoreArg_pulNetMask(__LINE__)
void FreeRTOS_SetAddressConfiguration_CMockIgnoreArg_pulNetMask(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetAddressConfiguration_IgnoreArg_pulGatewayAddress() FreeRTOS_SetAddressConfiguration_CMockIgnoreArg_pulGatewayAddress(__LINE__)
void FreeRTOS_SetAddressConfiguration_CMockIgnoreArg_pulGatewayAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetAddressConfiguration_IgnoreArg_pulDNSServerAddress() FreeRTOS_SetAddressConfiguration_CMockIgnoreArg_pulDNSServerAddress(__LINE__)
void FreeRTOS_SetAddressConfiguration_CMockIgnoreArg_pulDNSServerAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SendPingRequest_IgnoreAndReturn(cmock_retval) FreeRTOS_SendPingRequest_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_SendPingRequest_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_SendPingRequest_StopIgnore() FreeRTOS_SendPingRequest_CMockStopIgnore()
void FreeRTOS_SendPingRequest_CMockStopIgnore(void);
#define FreeRTOS_SendPingRequest_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_SendPingRequest_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_SendPingRequest_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_SendPingRequest_ExpectAndReturn(ulIPAddress, uxNumberOfBytesToSend, uxBlockTimeTicks, cmock_retval) FreeRTOS_SendPingRequest_CMockExpectAndReturn(__LINE__, ulIPAddress, uxNumberOfBytesToSend, uxBlockTimeTicks, cmock_retval)
void FreeRTOS_SendPingRequest_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t ulIPAddress, size_t uxNumberOfBytesToSend, TickType_t uxBlockTimeTicks, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_SendPingRequest_CALLBACK)(uint32_t ulIPAddress, size_t uxNumberOfBytesToSend, TickType_t uxBlockTimeTicks, int cmock_num_calls);
void FreeRTOS_SendPingRequest_AddCallback(CMOCK_FreeRTOS_SendPingRequest_CALLBACK Callback);
void FreeRTOS_SendPingRequest_Stub(CMOCK_FreeRTOS_SendPingRequest_CALLBACK Callback);
#define FreeRTOS_SendPingRequest_StubWithCallback FreeRTOS_SendPingRequest_Stub
#define FreeRTOS_SendPingRequest_IgnoreArg_ulIPAddress() FreeRTOS_SendPingRequest_CMockIgnoreArg_ulIPAddress(__LINE__)
void FreeRTOS_SendPingRequest_CMockIgnoreArg_ulIPAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SendPingRequest_IgnoreArg_uxNumberOfBytesToSend() FreeRTOS_SendPingRequest_CMockIgnoreArg_uxNumberOfBytesToSend(__LINE__)
void FreeRTOS_SendPingRequest_CMockIgnoreArg_uxNumberOfBytesToSend(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SendPingRequest_IgnoreArg_uxBlockTimeTicks() FreeRTOS_SendPingRequest_CMockIgnoreArg_uxBlockTimeTicks(__LINE__)
void FreeRTOS_SendPingRequest_CMockIgnoreArg_uxBlockTimeTicks(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_ReleaseUDPPayloadBuffer_Ignore() FreeRTOS_ReleaseUDPPayloadBuffer_CMockIgnore()
void FreeRTOS_ReleaseUDPPayloadBuffer_CMockIgnore(void);
#define FreeRTOS_ReleaseUDPPayloadBuffer_StopIgnore() FreeRTOS_ReleaseUDPPayloadBuffer_CMockStopIgnore()
void FreeRTOS_ReleaseUDPPayloadBuffer_CMockStopIgnore(void);
#define FreeRTOS_ReleaseUDPPayloadBuffer_ExpectAnyArgs() FreeRTOS_ReleaseUDPPayloadBuffer_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_ReleaseUDPPayloadBuffer_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_ReleaseUDPPayloadBuffer_Expect(pvBuffer) FreeRTOS_ReleaseUDPPayloadBuffer_CMockExpect(__LINE__, pvBuffer)
void FreeRTOS_ReleaseUDPPayloadBuffer_CMockExpect(UNITY_LINE_TYPE cmock_line, void const* pvBuffer);
typedef void (* CMOCK_FreeRTOS_ReleaseUDPPayloadBuffer_CALLBACK)(void const* pvBuffer, int cmock_num_calls);
void FreeRTOS_ReleaseUDPPayloadBuffer_AddCallback(CMOCK_FreeRTOS_ReleaseUDPPayloadBuffer_CALLBACK Callback);
void FreeRTOS_ReleaseUDPPayloadBuffer_Stub(CMOCK_FreeRTOS_ReleaseUDPPayloadBuffer_CALLBACK Callback);
#define FreeRTOS_ReleaseUDPPayloadBuffer_StubWithCallback FreeRTOS_ReleaseUDPPayloadBuffer_Stub
#define FreeRTOS_ReleaseUDPPayloadBuffer_ExpectWithArray(pvBuffer, pvBuffer_Depth) FreeRTOS_ReleaseUDPPayloadBuffer_CMockExpectWithArray(__LINE__, pvBuffer, pvBuffer_Depth)
void FreeRTOS_ReleaseUDPPayloadBuffer_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void const* pvBuffer, int pvBuffer_Depth);
#define FreeRTOS_ReleaseUDPPayloadBuffer_IgnoreArg_pvBuffer() FreeRTOS_ReleaseUDPPayloadBuffer_CMockIgnoreArg_pvBuffer(__LINE__)
void FreeRTOS_ReleaseUDPPayloadBuffer_CMockIgnoreArg_pvBuffer(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetMACAddress_IgnoreAndReturn(cmock_retval) FreeRTOS_GetMACAddress_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetMACAddress_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const uint8_t* cmock_to_return);
#define FreeRTOS_GetMACAddress_StopIgnore() FreeRTOS_GetMACAddress_CMockStopIgnore()
void FreeRTOS_GetMACAddress_CMockStopIgnore(void);
#define FreeRTOS_GetMACAddress_ExpectAndReturn(cmock_retval) FreeRTOS_GetMACAddress_CMockExpectAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetMACAddress_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const uint8_t* cmock_to_return);
typedef const uint8_t* (* CMOCK_FreeRTOS_GetMACAddress_CALLBACK)(int cmock_num_calls);
void FreeRTOS_GetMACAddress_AddCallback(CMOCK_FreeRTOS_GetMACAddress_CALLBACK Callback);
void FreeRTOS_GetMACAddress_Stub(CMOCK_FreeRTOS_GetMACAddress_CALLBACK Callback);
#define FreeRTOS_GetMACAddress_StubWithCallback FreeRTOS_GetMACAddress_Stub
#define FreeRTOS_UpdateMACAddress_Ignore() FreeRTOS_UpdateMACAddress_CMockIgnore()
void FreeRTOS_UpdateMACAddress_CMockIgnore(void);
#define FreeRTOS_UpdateMACAddress_StopIgnore() FreeRTOS_UpdateMACAddress_CMockStopIgnore()
void FreeRTOS_UpdateMACAddress_CMockStopIgnore(void);
#define FreeRTOS_UpdateMACAddress_ExpectAnyArgs() FreeRTOS_UpdateMACAddress_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_UpdateMACAddress_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_UpdateMACAddress_Expect(ucMACAddress) FreeRTOS_UpdateMACAddress_CMockExpect(__LINE__, ucMACAddress)
void FreeRTOS_UpdateMACAddress_CMockExpect(UNITY_LINE_TYPE cmock_line, const uint8_t* ucMACAddress);
typedef void (* CMOCK_FreeRTOS_UpdateMACAddress_CALLBACK)(const uint8_t* ucMACAddress, int cmock_num_calls);
void FreeRTOS_UpdateMACAddress_AddCallback(CMOCK_FreeRTOS_UpdateMACAddress_CALLBACK Callback);
void FreeRTOS_UpdateMACAddress_Stub(CMOCK_FreeRTOS_UpdateMACAddress_CALLBACK Callback);
#define FreeRTOS_UpdateMACAddress_StubWithCallback FreeRTOS_UpdateMACAddress_Stub
#define FreeRTOS_UpdateMACAddress_ExpectWithArray(ucMACAddress, ucMACAddress_Depth) FreeRTOS_UpdateMACAddress_CMockExpectWithArray(__LINE__, ucMACAddress, ucMACAddress_Depth)
void FreeRTOS_UpdateMACAddress_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, const uint8_t* ucMACAddress, int ucMACAddress_Depth);
#define FreeRTOS_UpdateMACAddress_IgnoreArg_ucMACAddress() FreeRTOS_UpdateMACAddress_CMockIgnoreArg_ucMACAddress(__LINE__)
void FreeRTOS_UpdateMACAddress_CMockIgnoreArg_ucMACAddress(UNITY_LINE_TYPE cmock_line);
#define vApplicationIPNetworkEventHook_Ignore() vApplicationIPNetworkEventHook_CMockIgnore()
void vApplicationIPNetworkEventHook_CMockIgnore(void);
#define vApplicationIPNetworkEventHook_StopIgnore() vApplicationIPNetworkEventHook_CMockStopIgnore()
void vApplicationIPNetworkEventHook_CMockStopIgnore(void);
#define vApplicationIPNetworkEventHook_ExpectAnyArgs() vApplicationIPNetworkEventHook_CMockExpectAnyArgs(__LINE__)
void vApplicationIPNetworkEventHook_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vApplicationIPNetworkEventHook_Expect(eNetworkEvent, pxEndPoint) vApplicationIPNetworkEventHook_CMockExpect(__LINE__, eNetworkEvent, pxEndPoint)
void vApplicationIPNetworkEventHook_CMockExpect(UNITY_LINE_TYPE cmock_line, eIPCallbackEvent_t eNetworkEvent, struct xNetworkEndPoint* pxEndPoint);
typedef void (* CMOCK_vApplicationIPNetworkEventHook_CALLBACK)(eIPCallbackEvent_t eNetworkEvent, struct xNetworkEndPoint* pxEndPoint, int cmock_num_calls);
void vApplicationIPNetworkEventHook_AddCallback(CMOCK_vApplicationIPNetworkEventHook_CALLBACK Callback);
void vApplicationIPNetworkEventHook_Stub(CMOCK_vApplicationIPNetworkEventHook_CALLBACK Callback);
#define vApplicationIPNetworkEventHook_StubWithCallback vApplicationIPNetworkEventHook_Stub
#define vApplicationIPNetworkEventHook_ExpectWithArray(eNetworkEvent, pxEndPoint, pxEndPoint_Depth) vApplicationIPNetworkEventHook_CMockExpectWithArray(__LINE__, eNetworkEvent, pxEndPoint, pxEndPoint_Depth)
void vApplicationIPNetworkEventHook_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, eIPCallbackEvent_t eNetworkEvent, struct xNetworkEndPoint* pxEndPoint, int pxEndPoint_Depth);
#define vApplicationIPNetworkEventHook_ReturnThruPtr_pxEndPoint(pxEndPoint) vApplicationIPNetworkEventHook_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, sizeof(struct xNetworkEndPoint))
#define vApplicationIPNetworkEventHook_ReturnArrayThruPtr_pxEndPoint(pxEndPoint, cmock_len) vApplicationIPNetworkEventHook_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, (int)(cmock_len * (int)sizeof(*pxEndPoint)))
#define vApplicationIPNetworkEventHook_ReturnMemThruPtr_pxEndPoint(pxEndPoint, cmock_size) vApplicationIPNetworkEventHook_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, cmock_size)
void vApplicationIPNetworkEventHook_CMockReturnMemThruPtr_pxEndPoint(UNITY_LINE_TYPE cmock_line, struct xNetworkEndPoint* pxEndPoint, int cmock_size);
#define vApplicationIPNetworkEventHook_IgnoreArg_eNetworkEvent() vApplicationIPNetworkEventHook_CMockIgnoreArg_eNetworkEvent(__LINE__)
void vApplicationIPNetworkEventHook_CMockIgnoreArg_eNetworkEvent(UNITY_LINE_TYPE cmock_line);
#define vApplicationIPNetworkEventHook_IgnoreArg_pxEndPoint() vApplicationIPNetworkEventHook_CMockIgnoreArg_pxEndPoint(__LINE__)
void vApplicationIPNetworkEventHook_CMockIgnoreArg_pxEndPoint(UNITY_LINE_TYPE cmock_line);
#define vApplicationPingReplyHook_Ignore() vApplicationPingReplyHook_CMockIgnore()
void vApplicationPingReplyHook_CMockIgnore(void);
#define vApplicationPingReplyHook_StopIgnore() vApplicationPingReplyHook_CMockStopIgnore()
void vApplicationPingReplyHook_CMockStopIgnore(void);
#define vApplicationPingReplyHook_ExpectAnyArgs() vApplicationPingReplyHook_CMockExpectAnyArgs(__LINE__)
void vApplicationPingReplyHook_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vApplicationPingReplyHook_Expect(eStatus, usIdentifier) vApplicationPingReplyHook_CMockExpect(__LINE__, eStatus, usIdentifier)
void vApplicationPingReplyHook_CMockExpect(UNITY_LINE_TYPE cmock_line, ePingReplyStatus_t eStatus, uint16_t usIdentifier);
typedef void (* CMOCK_vApplicationPingReplyHook_CALLBACK)(ePingReplyStatus_t eStatus, uint16_t usIdentifier, int cmock_num_calls);
void vApplicationPingReplyHook_AddCallback(CMOCK_vApplicationPingReplyHook_CALLBACK Callback);
void vApplicationPingReplyHook_Stub(CMOCK_vApplicationPingReplyHook_CALLBACK Callback);
#define vApplicationPingReplyHook_StubWithCallback vApplicationPingReplyHook_Stub
#define vApplicationPingReplyHook_IgnoreArg_eStatus() vApplicationPingReplyHook_CMockIgnoreArg_eStatus(__LINE__)
void vApplicationPingReplyHook_CMockIgnoreArg_eStatus(UNITY_LINE_TYPE cmock_line);
#define vApplicationPingReplyHook_IgnoreArg_usIdentifier() vApplicationPingReplyHook_CMockIgnoreArg_usIdentifier(__LINE__)
void vApplicationPingReplyHook_CMockIgnoreArg_usIdentifier(UNITY_LINE_TYPE cmock_line);
#define xARPWaitResolution_IgnoreAndReturn(cmock_retval) xARPWaitResolution_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xARPWaitResolution_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xARPWaitResolution_StopIgnore() xARPWaitResolution_CMockStopIgnore()
void xARPWaitResolution_CMockStopIgnore(void);
#define xARPWaitResolution_ExpectAnyArgsAndReturn(cmock_retval) xARPWaitResolution_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xARPWaitResolution_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xARPWaitResolution_ExpectAndReturn(ulIPAddress, uxTicksToWait, cmock_retval) xARPWaitResolution_CMockExpectAndReturn(__LINE__, ulIPAddress, uxTicksToWait, cmock_retval)
void xARPWaitResolution_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t ulIPAddress, TickType_t uxTicksToWait, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xARPWaitResolution_CALLBACK)(uint32_t ulIPAddress, TickType_t uxTicksToWait, int cmock_num_calls);
void xARPWaitResolution_AddCallback(CMOCK_xARPWaitResolution_CALLBACK Callback);
void xARPWaitResolution_Stub(CMOCK_xARPWaitResolution_CALLBACK Callback);
#define xARPWaitResolution_StubWithCallback xARPWaitResolution_Stub
#define xARPWaitResolution_IgnoreArg_ulIPAddress() xARPWaitResolution_CMockIgnoreArg_ulIPAddress(__LINE__)
void xARPWaitResolution_CMockIgnoreArg_ulIPAddress(UNITY_LINE_TYPE cmock_line);
#define xARPWaitResolution_IgnoreArg_uxTicksToWait() xARPWaitResolution_CMockIgnoreArg_uxTicksToWait(__LINE__)
void xARPWaitResolution_CMockIgnoreArg_uxTicksToWait(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_IsNetworkUp_IgnoreAndReturn(cmock_retval) FreeRTOS_IsNetworkUp_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_IsNetworkUp_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_IsNetworkUp_StopIgnore() FreeRTOS_IsNetworkUp_CMockStopIgnore()
void FreeRTOS_IsNetworkUp_CMockStopIgnore(void);
#define FreeRTOS_IsNetworkUp_ExpectAndReturn(cmock_retval) FreeRTOS_IsNetworkUp_CMockExpectAndReturn(__LINE__, cmock_retval)
void FreeRTOS_IsNetworkUp_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_IsNetworkUp_CALLBACK)(int cmock_num_calls);
void FreeRTOS_IsNetworkUp_AddCallback(CMOCK_FreeRTOS_IsNetworkUp_CALLBACK Callback);
void FreeRTOS_IsNetworkUp_Stub(CMOCK_FreeRTOS_IsNetworkUp_CALLBACK Callback);
#define FreeRTOS_IsNetworkUp_StubWithCallback FreeRTOS_IsNetworkUp_Stub
#define xIsNetworkDownEventPending_IgnoreAndReturn(cmock_retval) xIsNetworkDownEventPending_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xIsNetworkDownEventPending_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xIsNetworkDownEventPending_StopIgnore() xIsNetworkDownEventPending_CMockStopIgnore()
void xIsNetworkDownEventPending_CMockStopIgnore(void);
#define xIsNetworkDownEventPending_ExpectAndReturn(cmock_retval) xIsNetworkDownEventPending_CMockExpectAndReturn(__LINE__, cmock_retval)
void xIsNetworkDownEventPending_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xIsNetworkDownEventPending_CALLBACK)(int cmock_num_calls);
void xIsNetworkDownEventPending_AddCallback(CMOCK_xIsNetworkDownEventPending_CALLBACK Callback);
void xIsNetworkDownEventPending_Stub(CMOCK_xIsNetworkDownEventPending_CALLBACK Callback);
#define xIsNetworkDownEventPending_StubWithCallback xIsNetworkDownEventPending_Stub
#define FreeRTOS_GetTCPStateName_IgnoreAndReturn(cmock_retval) FreeRTOS_GetTCPStateName_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetTCPStateName_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define FreeRTOS_GetTCPStateName_StopIgnore() FreeRTOS_GetTCPStateName_CMockStopIgnore()
void FreeRTOS_GetTCPStateName_CMockStopIgnore(void);
#define FreeRTOS_GetTCPStateName_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_GetTCPStateName_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetTCPStateName_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define FreeRTOS_GetTCPStateName_ExpectAndReturn(ulState, cmock_retval) FreeRTOS_GetTCPStateName_CMockExpectAndReturn(__LINE__, ulState, cmock_retval)
void FreeRTOS_GetTCPStateName_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t ulState, const char* cmock_to_return);
typedef const char* (* CMOCK_FreeRTOS_GetTCPStateName_CALLBACK)(UBaseType_t ulState, int cmock_num_calls);
void FreeRTOS_GetTCPStateName_AddCallback(CMOCK_FreeRTOS_GetTCPStateName_CALLBACK Callback);
void FreeRTOS_GetTCPStateName_Stub(CMOCK_FreeRTOS_GetTCPStateName_CALLBACK Callback);
#define FreeRTOS_GetTCPStateName_StubWithCallback FreeRTOS_GetTCPStateName_Stub
#define FreeRTOS_GetTCPStateName_IgnoreArg_ulState() FreeRTOS_GetTCPStateName_CMockIgnoreArg_ulState(__LINE__)
void FreeRTOS_GetTCPStateName_CMockIgnoreArg_ulState(UNITY_LINE_TYPE cmock_line);
#define pcApplicationHostnameHook_IgnoreAndReturn(cmock_retval) pcApplicationHostnameHook_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pcApplicationHostnameHook_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define pcApplicationHostnameHook_StopIgnore() pcApplicationHostnameHook_CMockStopIgnore()
void pcApplicationHostnameHook_CMockStopIgnore(void);
#define pcApplicationHostnameHook_ExpectAndReturn(cmock_retval) pcApplicationHostnameHook_CMockExpectAndReturn(__LINE__, cmock_retval)
void pcApplicationHostnameHook_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
typedef const char* (* CMOCK_pcApplicationHostnameHook_CALLBACK)(int cmock_num_calls);
void pcApplicationHostnameHook_AddCallback(CMOCK_pcApplicationHostnameHook_CALLBACK Callback);
void pcApplicationHostnameHook_Stub(CMOCK_pcApplicationHostnameHook_CALLBACK Callback);
#define pcApplicationHostnameHook_StubWithCallback pcApplicationHostnameHook_Stub
#define xApplicationGetRandomNumber_IgnoreAndReturn(cmock_retval) xApplicationGetRandomNumber_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xApplicationGetRandomNumber_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xApplicationGetRandomNumber_StopIgnore() xApplicationGetRandomNumber_CMockStopIgnore()
void xApplicationGetRandomNumber_CMockStopIgnore(void);
#define xApplicationGetRandomNumber_ExpectAnyArgsAndReturn(cmock_retval) xApplicationGetRandomNumber_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xApplicationGetRandomNumber_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xApplicationGetRandomNumber_ExpectAndReturn(pulNumber, cmock_retval) xApplicationGetRandomNumber_CMockExpectAndReturn(__LINE__, pulNumber, cmock_retval)
void xApplicationGetRandomNumber_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t* pulNumber, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xApplicationGetRandomNumber_CALLBACK)(uint32_t* pulNumber, int cmock_num_calls);
void xApplicationGetRandomNumber_AddCallback(CMOCK_xApplicationGetRandomNumber_CALLBACK Callback);
void xApplicationGetRandomNumber_Stub(CMOCK_xApplicationGetRandomNumber_CALLBACK Callback);
#define xApplicationGetRandomNumber_StubWithCallback xApplicationGetRandomNumber_Stub
#define xApplicationGetRandomNumber_ExpectWithArrayAndReturn(pulNumber, pulNumber_Depth, cmock_retval) xApplicationGetRandomNumber_CMockExpectWithArrayAndReturn(__LINE__, pulNumber, pulNumber_Depth, cmock_retval)
void xApplicationGetRandomNumber_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t* pulNumber, int pulNumber_Depth, BaseType_t cmock_to_return);
#define xApplicationGetRandomNumber_ReturnThruPtr_pulNumber(pulNumber) xApplicationGetRandomNumber_CMockReturnMemThruPtr_pulNumber(__LINE__, pulNumber, sizeof(uint32_t))
#define xApplicationGetRandomNumber_ReturnArrayThruPtr_pulNumber(pulNumber, cmock_len) xApplicationGetRandomNumber_CMockReturnMemThruPtr_pulNumber(__LINE__, pulNumber, (int)(cmock_len * (int)sizeof(*pulNumber)))
#define xApplicationGetRandomNumber_ReturnMemThruPtr_pulNumber(pulNumber, cmock_size) xApplicationGetRandomNumber_CMockReturnMemThruPtr_pulNumber(__LINE__, pulNumber, cmock_size)
void xApplicationGetRandomNumber_CMockReturnMemThruPtr_pulNumber(UNITY_LINE_TYPE cmock_line, uint32_t* pulNumber, int cmock_size);
#define xApplicationGetRandomNumber_IgnoreArg_pulNumber() xApplicationGetRandomNumber_CMockIgnoreArg_pulNumber(__LINE__)
void xApplicationGetRandomNumber_CMockIgnoreArg_pulNumber(UNITY_LINE_TYPE cmock_line);
#define xCheckSizeFields_IgnoreAndReturn(cmock_retval) xCheckSizeFields_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xCheckSizeFields_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xCheckSizeFields_StopIgnore() xCheckSizeFields_CMockStopIgnore()
void xCheckSizeFields_CMockStopIgnore(void);
#define xCheckSizeFields_ExpectAnyArgsAndReturn(cmock_retval) xCheckSizeFields_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xCheckSizeFields_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xCheckSizeFields_ExpectAndReturn(pucEthernetBuffer, uxBufferLength, cmock_retval) xCheckSizeFields_CMockExpectAndReturn(__LINE__, pucEthernetBuffer, uxBufferLength, cmock_retval)
void xCheckSizeFields_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const uint8_t* const pucEthernetBuffer, size_t uxBufferLength, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xCheckSizeFields_CALLBACK)(const uint8_t* const pucEthernetBuffer, size_t uxBufferLength, int cmock_num_calls);
void xCheckSizeFields_AddCallback(CMOCK_xCheckSizeFields_CALLBACK Callback);
void xCheckSizeFields_Stub(CMOCK_xCheckSizeFields_CALLBACK Callback);
#define xCheckSizeFields_StubWithCallback xCheckSizeFields_Stub
#define xCheckSizeFields_ExpectWithArrayAndReturn(pucEthernetBuffer, pucEthernetBuffer_Depth, uxBufferLength, cmock_retval) xCheckSizeFields_CMockExpectWithArrayAndReturn(__LINE__, pucEthernetBuffer, pucEthernetBuffer_Depth, uxBufferLength, cmock_retval)
void xCheckSizeFields_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const uint8_t* const pucEthernetBuffer, int pucEthernetBuffer_Depth, size_t uxBufferLength, BaseType_t cmock_to_return);
#define xCheckSizeFields_IgnoreArg_pucEthernetBuffer() xCheckSizeFields_CMockIgnoreArg_pucEthernetBuffer(__LINE__)
void xCheckSizeFields_CMockIgnoreArg_pucEthernetBuffer(UNITY_LINE_TYPE cmock_line);
#define xCheckSizeFields_IgnoreArg_uxBufferLength() xCheckSizeFields_CMockIgnoreArg_uxBufferLength(__LINE__)
void xCheckSizeFields_CMockIgnoreArg_uxBufferLength(UNITY_LINE_TYPE cmock_line);
#define vPrintResourceStats_Ignore() vPrintResourceStats_CMockIgnore()
void vPrintResourceStats_CMockIgnore(void);
#define vPrintResourceStats_StopIgnore() vPrintResourceStats_CMockStopIgnore()
void vPrintResourceStats_CMockStopIgnore(void);
#define vPrintResourceStats_Expect() vPrintResourceStats_CMockExpect(__LINE__)
void vPrintResourceStats_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_vPrintResourceStats_CALLBACK)(int cmock_num_calls);
void vPrintResourceStats_AddCallback(CMOCK_vPrintResourceStats_CALLBACK Callback);
void vPrintResourceStats_Stub(CMOCK_vPrintResourceStats_CALLBACK Callback);
#define vPrintResourceStats_StubWithCallback vPrintResourceStats_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
