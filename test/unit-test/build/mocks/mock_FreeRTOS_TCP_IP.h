/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_FREERTOS_TCP_IP_H
#define _MOCK_FREERTOS_TCP_IP_H

#include "unity.h"
#include <stdbool.h>
#include <stdint.h>
#include <fcntl.h>
#include <unity.h>
#include "FreeRTOS.h"
#include "FreeRTOS_IP.h"
#include "FreeRTOS_TCP_IP.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_FreeRTOS_TCP_IP_Init(void);
void mock_FreeRTOS_TCP_IP_Destroy(void);
void mock_FreeRTOS_TCP_IP_Verify(void);




#define xProcessReceivedTCPPacket_IgnoreAndReturn(cmock_retval) xProcessReceivedTCPPacket_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xProcessReceivedTCPPacket_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xProcessReceivedTCPPacket_StopIgnore() xProcessReceivedTCPPacket_CMockStopIgnore()
void xProcessReceivedTCPPacket_CMockStopIgnore(void);
#define xProcessReceivedTCPPacket_ExpectAnyArgsAndReturn(cmock_retval) xProcessReceivedTCPPacket_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xProcessReceivedTCPPacket_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xProcessReceivedTCPPacket_ExpectAndReturn(pxDescriptor, cmock_retval) xProcessReceivedTCPPacket_CMockExpectAndReturn(__LINE__, pxDescriptor, cmock_retval)
void xProcessReceivedTCPPacket_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxDescriptor, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xProcessReceivedTCPPacket_CALLBACK)(NetworkBufferDescriptor_t* pxDescriptor, int cmock_num_calls);
void xProcessReceivedTCPPacket_AddCallback(CMOCK_xProcessReceivedTCPPacket_CALLBACK Callback);
void xProcessReceivedTCPPacket_Stub(CMOCK_xProcessReceivedTCPPacket_CALLBACK Callback);
#define xProcessReceivedTCPPacket_StubWithCallback xProcessReceivedTCPPacket_Stub
#define xProcessReceivedTCPPacket_ExpectWithArrayAndReturn(pxDescriptor, pxDescriptor_Depth, cmock_retval) xProcessReceivedTCPPacket_CMockExpectWithArrayAndReturn(__LINE__, pxDescriptor, pxDescriptor_Depth, cmock_retval)
void xProcessReceivedTCPPacket_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxDescriptor, int pxDescriptor_Depth, BaseType_t cmock_to_return);
#define xProcessReceivedTCPPacket_ReturnThruPtr_pxDescriptor(pxDescriptor) xProcessReceivedTCPPacket_CMockReturnMemThruPtr_pxDescriptor(__LINE__, pxDescriptor, sizeof(NetworkBufferDescriptor_t))
#define xProcessReceivedTCPPacket_ReturnArrayThruPtr_pxDescriptor(pxDescriptor, cmock_len) xProcessReceivedTCPPacket_CMockReturnMemThruPtr_pxDescriptor(__LINE__, pxDescriptor, (int)(cmock_len * (int)sizeof(*pxDescriptor)))
#define xProcessReceivedTCPPacket_ReturnMemThruPtr_pxDescriptor(pxDescriptor, cmock_size) xProcessReceivedTCPPacket_CMockReturnMemThruPtr_pxDescriptor(__LINE__, pxDescriptor, cmock_size)
void xProcessReceivedTCPPacket_CMockReturnMemThruPtr_pxDescriptor(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxDescriptor, int cmock_size);
#define xProcessReceivedTCPPacket_IgnoreArg_pxDescriptor() xProcessReceivedTCPPacket_CMockIgnoreArg_pxDescriptor(__LINE__)
void xProcessReceivedTCPPacket_CMockIgnoreArg_pxDescriptor(UNITY_LINE_TYPE cmock_line);
#define xProcessReceivedTCPPacket_IPV4_IgnoreAndReturn(cmock_retval) xProcessReceivedTCPPacket_IPV4_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xProcessReceivedTCPPacket_IPV4_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xProcessReceivedTCPPacket_IPV4_StopIgnore() xProcessReceivedTCPPacket_IPV4_CMockStopIgnore()
void xProcessReceivedTCPPacket_IPV4_CMockStopIgnore(void);
#define xProcessReceivedTCPPacket_IPV4_ExpectAnyArgsAndReturn(cmock_retval) xProcessReceivedTCPPacket_IPV4_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xProcessReceivedTCPPacket_IPV4_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xProcessReceivedTCPPacket_IPV4_ExpectAndReturn(pxDescriptor, cmock_retval) xProcessReceivedTCPPacket_IPV4_CMockExpectAndReturn(__LINE__, pxDescriptor, cmock_retval)
void xProcessReceivedTCPPacket_IPV4_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxDescriptor, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xProcessReceivedTCPPacket_IPV4_CALLBACK)(NetworkBufferDescriptor_t* pxDescriptor, int cmock_num_calls);
void xProcessReceivedTCPPacket_IPV4_AddCallback(CMOCK_xProcessReceivedTCPPacket_IPV4_CALLBACK Callback);
void xProcessReceivedTCPPacket_IPV4_Stub(CMOCK_xProcessReceivedTCPPacket_IPV4_CALLBACK Callback);
#define xProcessReceivedTCPPacket_IPV4_StubWithCallback xProcessReceivedTCPPacket_IPV4_Stub
#define xProcessReceivedTCPPacket_IPV4_ExpectWithArrayAndReturn(pxDescriptor, pxDescriptor_Depth, cmock_retval) xProcessReceivedTCPPacket_IPV4_CMockExpectWithArrayAndReturn(__LINE__, pxDescriptor, pxDescriptor_Depth, cmock_retval)
void xProcessReceivedTCPPacket_IPV4_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxDescriptor, int pxDescriptor_Depth, BaseType_t cmock_to_return);
#define xProcessReceivedTCPPacket_IPV4_ReturnThruPtr_pxDescriptor(pxDescriptor) xProcessReceivedTCPPacket_IPV4_CMockReturnMemThruPtr_pxDescriptor(__LINE__, pxDescriptor, sizeof(NetworkBufferDescriptor_t))
#define xProcessReceivedTCPPacket_IPV4_ReturnArrayThruPtr_pxDescriptor(pxDescriptor, cmock_len) xProcessReceivedTCPPacket_IPV4_CMockReturnMemThruPtr_pxDescriptor(__LINE__, pxDescriptor, (int)(cmock_len * (int)sizeof(*pxDescriptor)))
#define xProcessReceivedTCPPacket_IPV4_ReturnMemThruPtr_pxDescriptor(pxDescriptor, cmock_size) xProcessReceivedTCPPacket_IPV4_CMockReturnMemThruPtr_pxDescriptor(__LINE__, pxDescriptor, cmock_size)
void xProcessReceivedTCPPacket_IPV4_CMockReturnMemThruPtr_pxDescriptor(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxDescriptor, int cmock_size);
#define xProcessReceivedTCPPacket_IPV4_IgnoreArg_pxDescriptor() xProcessReceivedTCPPacket_IPV4_CMockIgnoreArg_pxDescriptor(__LINE__)
void xProcessReceivedTCPPacket_IPV4_CMockIgnoreArg_pxDescriptor(UNITY_LINE_TYPE cmock_line);
#define xProcessReceivedTCPPacket_IPV6_IgnoreAndReturn(cmock_retval) xProcessReceivedTCPPacket_IPV6_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xProcessReceivedTCPPacket_IPV6_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xProcessReceivedTCPPacket_IPV6_StopIgnore() xProcessReceivedTCPPacket_IPV6_CMockStopIgnore()
void xProcessReceivedTCPPacket_IPV6_CMockStopIgnore(void);
#define xProcessReceivedTCPPacket_IPV6_ExpectAnyArgsAndReturn(cmock_retval) xProcessReceivedTCPPacket_IPV6_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xProcessReceivedTCPPacket_IPV6_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xProcessReceivedTCPPacket_IPV6_ExpectAndReturn(pxDescriptor, cmock_retval) xProcessReceivedTCPPacket_IPV6_CMockExpectAndReturn(__LINE__, pxDescriptor, cmock_retval)
void xProcessReceivedTCPPacket_IPV6_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxDescriptor, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xProcessReceivedTCPPacket_IPV6_CALLBACK)(NetworkBufferDescriptor_t* pxDescriptor, int cmock_num_calls);
void xProcessReceivedTCPPacket_IPV6_AddCallback(CMOCK_xProcessReceivedTCPPacket_IPV6_CALLBACK Callback);
void xProcessReceivedTCPPacket_IPV6_Stub(CMOCK_xProcessReceivedTCPPacket_IPV6_CALLBACK Callback);
#define xProcessReceivedTCPPacket_IPV6_StubWithCallback xProcessReceivedTCPPacket_IPV6_Stub
#define xProcessReceivedTCPPacket_IPV6_ExpectWithArrayAndReturn(pxDescriptor, pxDescriptor_Depth, cmock_retval) xProcessReceivedTCPPacket_IPV6_CMockExpectWithArrayAndReturn(__LINE__, pxDescriptor, pxDescriptor_Depth, cmock_retval)
void xProcessReceivedTCPPacket_IPV6_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxDescriptor, int pxDescriptor_Depth, BaseType_t cmock_to_return);
#define xProcessReceivedTCPPacket_IPV6_ReturnThruPtr_pxDescriptor(pxDescriptor) xProcessReceivedTCPPacket_IPV6_CMockReturnMemThruPtr_pxDescriptor(__LINE__, pxDescriptor, sizeof(NetworkBufferDescriptor_t))
#define xProcessReceivedTCPPacket_IPV6_ReturnArrayThruPtr_pxDescriptor(pxDescriptor, cmock_len) xProcessReceivedTCPPacket_IPV6_CMockReturnMemThruPtr_pxDescriptor(__LINE__, pxDescriptor, (int)(cmock_len * (int)sizeof(*pxDescriptor)))
#define xProcessReceivedTCPPacket_IPV6_ReturnMemThruPtr_pxDescriptor(pxDescriptor, cmock_size) xProcessReceivedTCPPacket_IPV6_CMockReturnMemThruPtr_pxDescriptor(__LINE__, pxDescriptor, cmock_size)
void xProcessReceivedTCPPacket_IPV6_CMockReturnMemThruPtr_pxDescriptor(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxDescriptor, int cmock_size);
#define xProcessReceivedTCPPacket_IPV6_IgnoreArg_pxDescriptor() xProcessReceivedTCPPacket_IPV6_CMockIgnoreArg_pxDescriptor(__LINE__)
void xProcessReceivedTCPPacket_IPV6_CMockIgnoreArg_pxDescriptor(UNITY_LINE_TYPE cmock_line);
#define prvTCPTouchSocket_Ignore() prvTCPTouchSocket_CMockIgnore()
void prvTCPTouchSocket_CMockIgnore(void);
#define prvTCPTouchSocket_StopIgnore() prvTCPTouchSocket_CMockStopIgnore()
void prvTCPTouchSocket_CMockStopIgnore(void);
#define prvTCPTouchSocket_ExpectAnyArgs() prvTCPTouchSocket_CMockExpectAnyArgs(__LINE__)
void prvTCPTouchSocket_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define prvTCPTouchSocket_Expect(pxSocket) prvTCPTouchSocket_CMockExpect(__LINE__, pxSocket)
void prvTCPTouchSocket_CMockExpect(UNITY_LINE_TYPE cmock_line, struct xSOCKET* pxSocket);
typedef void (* CMOCK_prvTCPTouchSocket_CALLBACK)(struct xSOCKET* pxSocket, int cmock_num_calls);
void prvTCPTouchSocket_AddCallback(CMOCK_prvTCPTouchSocket_CALLBACK Callback);
void prvTCPTouchSocket_Stub(CMOCK_prvTCPTouchSocket_CALLBACK Callback);
#define prvTCPTouchSocket_StubWithCallback prvTCPTouchSocket_Stub
#define prvTCPTouchSocket_ExpectWithArray(pxSocket, pxSocket_Depth) prvTCPTouchSocket_CMockExpectWithArray(__LINE__, pxSocket, pxSocket_Depth)
void prvTCPTouchSocket_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct xSOCKET* pxSocket, int pxSocket_Depth);
#define prvTCPTouchSocket_ReturnThruPtr_pxSocket(pxSocket) prvTCPTouchSocket_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, sizeof(struct xSOCKET))
#define prvTCPTouchSocket_ReturnArrayThruPtr_pxSocket(pxSocket, cmock_len) prvTCPTouchSocket_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, (int)(cmock_len * (int)sizeof(*pxSocket)))
#define prvTCPTouchSocket_ReturnMemThruPtr_pxSocket(pxSocket, cmock_size) prvTCPTouchSocket_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, cmock_size)
void prvTCPTouchSocket_CMockReturnMemThruPtr_pxSocket(UNITY_LINE_TYPE cmock_line, struct xSOCKET* pxSocket, int cmock_size);
#define prvTCPTouchSocket_IgnoreArg_pxSocket() prvTCPTouchSocket_CMockIgnoreArg_pxSocket(__LINE__)
void prvTCPTouchSocket_CMockIgnoreArg_pxSocket(UNITY_LINE_TYPE cmock_line);
#define prvTCPNextTimeout_IgnoreAndReturn(cmock_retval) prvTCPNextTimeout_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void prvTCPNextTimeout_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TickType_t cmock_to_return);
#define prvTCPNextTimeout_StopIgnore() prvTCPNextTimeout_CMockStopIgnore()
void prvTCPNextTimeout_CMockStopIgnore(void);
#define prvTCPNextTimeout_ExpectAnyArgsAndReturn(cmock_retval) prvTCPNextTimeout_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void prvTCPNextTimeout_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, TickType_t cmock_to_return);
#define prvTCPNextTimeout_ExpectAndReturn(pxSocket, cmock_retval) prvTCPNextTimeout_CMockExpectAndReturn(__LINE__, pxSocket, cmock_retval)
void prvTCPNextTimeout_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct xSOCKET* pxSocket, TickType_t cmock_to_return);
typedef TickType_t (* CMOCK_prvTCPNextTimeout_CALLBACK)(struct xSOCKET* pxSocket, int cmock_num_calls);
void prvTCPNextTimeout_AddCallback(CMOCK_prvTCPNextTimeout_CALLBACK Callback);
void prvTCPNextTimeout_Stub(CMOCK_prvTCPNextTimeout_CALLBACK Callback);
#define prvTCPNextTimeout_StubWithCallback prvTCPNextTimeout_Stub
#define prvTCPNextTimeout_ExpectWithArrayAndReturn(pxSocket, pxSocket_Depth, cmock_retval) prvTCPNextTimeout_CMockExpectWithArrayAndReturn(__LINE__, pxSocket, pxSocket_Depth, cmock_retval)
void prvTCPNextTimeout_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct xSOCKET* pxSocket, int pxSocket_Depth, TickType_t cmock_to_return);
#define prvTCPNextTimeout_ReturnThruPtr_pxSocket(pxSocket) prvTCPNextTimeout_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, sizeof(struct xSOCKET))
#define prvTCPNextTimeout_ReturnArrayThruPtr_pxSocket(pxSocket, cmock_len) prvTCPNextTimeout_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, (int)(cmock_len * (int)sizeof(*pxSocket)))
#define prvTCPNextTimeout_ReturnMemThruPtr_pxSocket(pxSocket, cmock_size) prvTCPNextTimeout_CMockReturnMemThruPtr_pxSocket(__LINE__, pxSocket, cmock_size)
void prvTCPNextTimeout_CMockReturnMemThruPtr_pxSocket(UNITY_LINE_TYPE cmock_line, struct xSOCKET* pxSocket, int cmock_size);
#define prvTCPNextTimeout_IgnoreArg_pxSocket() prvTCPNextTimeout_CMockIgnoreArg_pxSocket(__LINE__)
void prvTCPNextTimeout_CMockIgnoreArg_pxSocket(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
