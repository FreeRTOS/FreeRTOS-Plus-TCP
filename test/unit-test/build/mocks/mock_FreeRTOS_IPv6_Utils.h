/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_FREERTOS_IPV6_UTILS_H
#define _MOCK_FREERTOS_IPV6_UTILS_H

#include "unity.h"
#include <stdbool.h>
#include <stdint.h>
#include <fcntl.h>
#include <unity.h>
#include "FreeRTOS.h"
#include "FreeRTOS_IP.h"
#include "FreeRTOS_IPv6_Utils.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_FreeRTOS_IPv6_Utils_Init(void);
void mock_FreeRTOS_IPv6_Utils_Destroy(void);
void mock_FreeRTOS_IPv6_Utils_Verify(void);




#define vSetMultiCastIPv6MacAddress_Ignore() vSetMultiCastIPv6MacAddress_CMockIgnore()
void vSetMultiCastIPv6MacAddress_CMockIgnore(void);
#define vSetMultiCastIPv6MacAddress_StopIgnore() vSetMultiCastIPv6MacAddress_CMockStopIgnore()
void vSetMultiCastIPv6MacAddress_CMockStopIgnore(void);
#define vSetMultiCastIPv6MacAddress_ExpectAnyArgs() vSetMultiCastIPv6MacAddress_CMockExpectAnyArgs(__LINE__)
void vSetMultiCastIPv6MacAddress_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vSetMultiCastIPv6MacAddress_Expect(pxAddress, pxMACAddress) vSetMultiCastIPv6MacAddress_CMockExpect(__LINE__, pxAddress, pxMACAddress)
void vSetMultiCastIPv6MacAddress_CMockExpect(UNITY_LINE_TYPE cmock_line, const IPv6_Address_t* pxAddress, MACAddress_t* pxMACAddress);
typedef void (* CMOCK_vSetMultiCastIPv6MacAddress_CALLBACK)(const IPv6_Address_t* pxAddress, MACAddress_t* pxMACAddress, int cmock_num_calls);
void vSetMultiCastIPv6MacAddress_AddCallback(CMOCK_vSetMultiCastIPv6MacAddress_CALLBACK Callback);
void vSetMultiCastIPv6MacAddress_Stub(CMOCK_vSetMultiCastIPv6MacAddress_CALLBACK Callback);
#define vSetMultiCastIPv6MacAddress_StubWithCallback vSetMultiCastIPv6MacAddress_Stub
#define vSetMultiCastIPv6MacAddress_ExpectWithArray(pxAddress, pxAddress_Depth, pxMACAddress, pxMACAddress_Depth) vSetMultiCastIPv6MacAddress_CMockExpectWithArray(__LINE__, pxAddress, pxAddress_Depth, pxMACAddress, pxMACAddress_Depth)
void vSetMultiCastIPv6MacAddress_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, const IPv6_Address_t* pxAddress, int pxAddress_Depth, MACAddress_t* pxMACAddress, int pxMACAddress_Depth);
#define vSetMultiCastIPv6MacAddress_ReturnThruPtr_pxMACAddress(pxMACAddress) vSetMultiCastIPv6MacAddress_CMockReturnMemThruPtr_pxMACAddress(__LINE__, pxMACAddress, sizeof(MACAddress_t))
#define vSetMultiCastIPv6MacAddress_ReturnArrayThruPtr_pxMACAddress(pxMACAddress, cmock_len) vSetMultiCastIPv6MacAddress_CMockReturnMemThruPtr_pxMACAddress(__LINE__, pxMACAddress, (int)(cmock_len * (int)sizeof(*pxMACAddress)))
#define vSetMultiCastIPv6MacAddress_ReturnMemThruPtr_pxMACAddress(pxMACAddress, cmock_size) vSetMultiCastIPv6MacAddress_CMockReturnMemThruPtr_pxMACAddress(__LINE__, pxMACAddress, cmock_size)
void vSetMultiCastIPv6MacAddress_CMockReturnMemThruPtr_pxMACAddress(UNITY_LINE_TYPE cmock_line, MACAddress_t* pxMACAddress, int cmock_size);
#define vSetMultiCastIPv6MacAddress_IgnoreArg_pxAddress() vSetMultiCastIPv6MacAddress_CMockIgnoreArg_pxAddress(__LINE__)
void vSetMultiCastIPv6MacAddress_CMockIgnoreArg_pxAddress(UNITY_LINE_TYPE cmock_line);
#define vSetMultiCastIPv6MacAddress_IgnoreArg_pxMACAddress() vSetMultiCastIPv6MacAddress_CMockIgnoreArg_pxMACAddress(__LINE__)
void vSetMultiCastIPv6MacAddress_CMockIgnoreArg_pxMACAddress(UNITY_LINE_TYPE cmock_line);
#define prvChecksumIPv6Checks_IgnoreAndReturn(cmock_retval) prvChecksumIPv6Checks_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void prvChecksumIPv6Checks_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define prvChecksumIPv6Checks_StopIgnore() prvChecksumIPv6Checks_CMockStopIgnore()
void prvChecksumIPv6Checks_CMockStopIgnore(void);
#define prvChecksumIPv6Checks_ExpectAnyArgsAndReturn(cmock_retval) prvChecksumIPv6Checks_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void prvChecksumIPv6Checks_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define prvChecksumIPv6Checks_ExpectAndReturn(pucEthernetBuffer, uxBufferLength, pxSet, cmock_retval) prvChecksumIPv6Checks_CMockExpectAndReturn(__LINE__, pucEthernetBuffer, uxBufferLength, pxSet, cmock_retval)
void prvChecksumIPv6Checks_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* pucEthernetBuffer, size_t uxBufferLength, struct xPacketSummary* pxSet, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_prvChecksumIPv6Checks_CALLBACK)(uint8_t* pucEthernetBuffer, size_t uxBufferLength, struct xPacketSummary* pxSet, int cmock_num_calls);
void prvChecksumIPv6Checks_AddCallback(CMOCK_prvChecksumIPv6Checks_CALLBACK Callback);
void prvChecksumIPv6Checks_Stub(CMOCK_prvChecksumIPv6Checks_CALLBACK Callback);
#define prvChecksumIPv6Checks_StubWithCallback prvChecksumIPv6Checks_Stub
#define prvChecksumIPv6Checks_ExpectWithArrayAndReturn(pucEthernetBuffer, pucEthernetBuffer_Depth, uxBufferLength, pxSet, pxSet_Depth, cmock_retval) prvChecksumIPv6Checks_CMockExpectWithArrayAndReturn(__LINE__, pucEthernetBuffer, pucEthernetBuffer_Depth, uxBufferLength, pxSet, pxSet_Depth, cmock_retval)
void prvChecksumIPv6Checks_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* pucEthernetBuffer, int pucEthernetBuffer_Depth, size_t uxBufferLength, struct xPacketSummary* pxSet, int pxSet_Depth, BaseType_t cmock_to_return);
#define prvChecksumIPv6Checks_ReturnThruPtr_pucEthernetBuffer(pucEthernetBuffer) prvChecksumIPv6Checks_CMockReturnMemThruPtr_pucEthernetBuffer(__LINE__, pucEthernetBuffer, sizeof(uint8_t))
#define prvChecksumIPv6Checks_ReturnArrayThruPtr_pucEthernetBuffer(pucEthernetBuffer, cmock_len) prvChecksumIPv6Checks_CMockReturnMemThruPtr_pucEthernetBuffer(__LINE__, pucEthernetBuffer, (int)(cmock_len * (int)sizeof(*pucEthernetBuffer)))
#define prvChecksumIPv6Checks_ReturnMemThruPtr_pucEthernetBuffer(pucEthernetBuffer, cmock_size) prvChecksumIPv6Checks_CMockReturnMemThruPtr_pucEthernetBuffer(__LINE__, pucEthernetBuffer, cmock_size)
void prvChecksumIPv6Checks_CMockReturnMemThruPtr_pucEthernetBuffer(UNITY_LINE_TYPE cmock_line, uint8_t* pucEthernetBuffer, int cmock_size);
#define prvChecksumIPv6Checks_ReturnThruPtr_pxSet(pxSet) prvChecksumIPv6Checks_CMockReturnMemThruPtr_pxSet(__LINE__, pxSet, sizeof(struct xPacketSummary))
#define prvChecksumIPv6Checks_ReturnArrayThruPtr_pxSet(pxSet, cmock_len) prvChecksumIPv6Checks_CMockReturnMemThruPtr_pxSet(__LINE__, pxSet, (int)(cmock_len * (int)sizeof(*pxSet)))
#define prvChecksumIPv6Checks_ReturnMemThruPtr_pxSet(pxSet, cmock_size) prvChecksumIPv6Checks_CMockReturnMemThruPtr_pxSet(__LINE__, pxSet, cmock_size)
void prvChecksumIPv6Checks_CMockReturnMemThruPtr_pxSet(UNITY_LINE_TYPE cmock_line, struct xPacketSummary* pxSet, int cmock_size);
#define prvChecksumIPv6Checks_IgnoreArg_pucEthernetBuffer() prvChecksumIPv6Checks_CMockIgnoreArg_pucEthernetBuffer(__LINE__)
void prvChecksumIPv6Checks_CMockIgnoreArg_pucEthernetBuffer(UNITY_LINE_TYPE cmock_line);
#define prvChecksumIPv6Checks_IgnoreArg_uxBufferLength() prvChecksumIPv6Checks_CMockIgnoreArg_uxBufferLength(__LINE__)
void prvChecksumIPv6Checks_CMockIgnoreArg_uxBufferLength(UNITY_LINE_TYPE cmock_line);
#define prvChecksumIPv6Checks_IgnoreArg_pxSet() prvChecksumIPv6Checks_CMockIgnoreArg_pxSet(__LINE__)
void prvChecksumIPv6Checks_CMockIgnoreArg_pxSet(UNITY_LINE_TYPE cmock_line);
#define prvChecksumICMPv6Checks_IgnoreAndReturn(cmock_retval) prvChecksumICMPv6Checks_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void prvChecksumICMPv6Checks_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define prvChecksumICMPv6Checks_StopIgnore() prvChecksumICMPv6Checks_CMockStopIgnore()
void prvChecksumICMPv6Checks_CMockStopIgnore(void);
#define prvChecksumICMPv6Checks_ExpectAnyArgsAndReturn(cmock_retval) prvChecksumICMPv6Checks_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void prvChecksumICMPv6Checks_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define prvChecksumICMPv6Checks_ExpectAndReturn(uxBufferLength, pxSet, cmock_retval) prvChecksumICMPv6Checks_CMockExpectAndReturn(__LINE__, uxBufferLength, pxSet, cmock_retval)
void prvChecksumICMPv6Checks_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t uxBufferLength, struct xPacketSummary* pxSet, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_prvChecksumICMPv6Checks_CALLBACK)(size_t uxBufferLength, struct xPacketSummary* pxSet, int cmock_num_calls);
void prvChecksumICMPv6Checks_AddCallback(CMOCK_prvChecksumICMPv6Checks_CALLBACK Callback);
void prvChecksumICMPv6Checks_Stub(CMOCK_prvChecksumICMPv6Checks_CALLBACK Callback);
#define prvChecksumICMPv6Checks_StubWithCallback prvChecksumICMPv6Checks_Stub
#define prvChecksumICMPv6Checks_ExpectWithArrayAndReturn(uxBufferLength, pxSet, pxSet_Depth, cmock_retval) prvChecksumICMPv6Checks_CMockExpectWithArrayAndReturn(__LINE__, uxBufferLength, pxSet, pxSet_Depth, cmock_retval)
void prvChecksumICMPv6Checks_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, size_t uxBufferLength, struct xPacketSummary* pxSet, int pxSet_Depth, BaseType_t cmock_to_return);
#define prvChecksumICMPv6Checks_ReturnThruPtr_pxSet(pxSet) prvChecksumICMPv6Checks_CMockReturnMemThruPtr_pxSet(__LINE__, pxSet, sizeof(struct xPacketSummary))
#define prvChecksumICMPv6Checks_ReturnArrayThruPtr_pxSet(pxSet, cmock_len) prvChecksumICMPv6Checks_CMockReturnMemThruPtr_pxSet(__LINE__, pxSet, (int)(cmock_len * (int)sizeof(*pxSet)))
#define prvChecksumICMPv6Checks_ReturnMemThruPtr_pxSet(pxSet, cmock_size) prvChecksumICMPv6Checks_CMockReturnMemThruPtr_pxSet(__LINE__, pxSet, cmock_size)
void prvChecksumICMPv6Checks_CMockReturnMemThruPtr_pxSet(UNITY_LINE_TYPE cmock_line, struct xPacketSummary* pxSet, int cmock_size);
#define prvChecksumICMPv6Checks_IgnoreArg_uxBufferLength() prvChecksumICMPv6Checks_CMockIgnoreArg_uxBufferLength(__LINE__)
void prvChecksumICMPv6Checks_CMockIgnoreArg_uxBufferLength(UNITY_LINE_TYPE cmock_line);
#define prvChecksumICMPv6Checks_IgnoreArg_pxSet() prvChecksumICMPv6Checks_CMockIgnoreArg_pxSet(__LINE__)
void prvChecksumICMPv6Checks_CMockIgnoreArg_pxSet(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
