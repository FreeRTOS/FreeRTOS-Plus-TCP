/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_FREERTOS_ROUTING_H
#define _MOCK_FREERTOS_ROUTING_H

#include "unity.h"
#include <stdbool.h>
#include <stdint.h>
#include <fcntl.h>
#include <unity.h>
#include "FreeRTOS.h"
#include "FreeRTOS_IP.h"
#include "FreeRTOS_Routing.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_FreeRTOS_Routing_Init(void);
void mock_FreeRTOS_Routing_Destroy(void);
void mock_FreeRTOS_Routing_Verify(void);




#define FreeRTOS_AddNetworkInterface_IgnoreAndReturn(cmock_retval) FreeRTOS_AddNetworkInterface_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_AddNetworkInterface_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, NetworkInterface_t* cmock_to_return);
#define FreeRTOS_AddNetworkInterface_StopIgnore() FreeRTOS_AddNetworkInterface_CMockStopIgnore()
void FreeRTOS_AddNetworkInterface_CMockStopIgnore(void);
#define FreeRTOS_AddNetworkInterface_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_AddNetworkInterface_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_AddNetworkInterface_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, NetworkInterface_t* cmock_to_return);
#define FreeRTOS_AddNetworkInterface_ExpectAndReturn(pxInterface, cmock_retval) FreeRTOS_AddNetworkInterface_CMockExpectAndReturn(__LINE__, pxInterface, cmock_retval)
void FreeRTOS_AddNetworkInterface_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, NetworkInterface_t* pxInterface, NetworkInterface_t* cmock_to_return);
typedef NetworkInterface_t* (* CMOCK_FreeRTOS_AddNetworkInterface_CALLBACK)(NetworkInterface_t* pxInterface, int cmock_num_calls);
void FreeRTOS_AddNetworkInterface_AddCallback(CMOCK_FreeRTOS_AddNetworkInterface_CALLBACK Callback);
void FreeRTOS_AddNetworkInterface_Stub(CMOCK_FreeRTOS_AddNetworkInterface_CALLBACK Callback);
#define FreeRTOS_AddNetworkInterface_StubWithCallback FreeRTOS_AddNetworkInterface_Stub
#define FreeRTOS_AddNetworkInterface_ExpectWithArrayAndReturn(pxInterface, pxInterface_Depth, cmock_retval) FreeRTOS_AddNetworkInterface_CMockExpectWithArrayAndReturn(__LINE__, pxInterface, pxInterface_Depth, cmock_retval)
void FreeRTOS_AddNetworkInterface_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, NetworkInterface_t* pxInterface, int pxInterface_Depth, NetworkInterface_t* cmock_to_return);
#define FreeRTOS_AddNetworkInterface_ReturnThruPtr_pxInterface(pxInterface) FreeRTOS_AddNetworkInterface_CMockReturnMemThruPtr_pxInterface(__LINE__, pxInterface, sizeof(NetworkInterface_t))
#define FreeRTOS_AddNetworkInterface_ReturnArrayThruPtr_pxInterface(pxInterface, cmock_len) FreeRTOS_AddNetworkInterface_CMockReturnMemThruPtr_pxInterface(__LINE__, pxInterface, (int)(cmock_len * (int)sizeof(*pxInterface)))
#define FreeRTOS_AddNetworkInterface_ReturnMemThruPtr_pxInterface(pxInterface, cmock_size) FreeRTOS_AddNetworkInterface_CMockReturnMemThruPtr_pxInterface(__LINE__, pxInterface, cmock_size)
void FreeRTOS_AddNetworkInterface_CMockReturnMemThruPtr_pxInterface(UNITY_LINE_TYPE cmock_line, NetworkInterface_t* pxInterface, int cmock_size);
#define FreeRTOS_AddNetworkInterface_IgnoreArg_pxInterface() FreeRTOS_AddNetworkInterface_CMockIgnoreArg_pxInterface(__LINE__)
void FreeRTOS_AddNetworkInterface_CMockIgnoreArg_pxInterface(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FirstNetworkInterface_IgnoreAndReturn(cmock_retval) FreeRTOS_FirstNetworkInterface_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_FirstNetworkInterface_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, NetworkInterface_t* cmock_to_return);
#define FreeRTOS_FirstNetworkInterface_StopIgnore() FreeRTOS_FirstNetworkInterface_CMockStopIgnore()
void FreeRTOS_FirstNetworkInterface_CMockStopIgnore(void);
#define FreeRTOS_FirstNetworkInterface_ExpectAndReturn(cmock_retval) FreeRTOS_FirstNetworkInterface_CMockExpectAndReturn(__LINE__, cmock_retval)
void FreeRTOS_FirstNetworkInterface_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, NetworkInterface_t* cmock_to_return);
typedef NetworkInterface_t* (* CMOCK_FreeRTOS_FirstNetworkInterface_CALLBACK)(int cmock_num_calls);
void FreeRTOS_FirstNetworkInterface_AddCallback(CMOCK_FreeRTOS_FirstNetworkInterface_CALLBACK Callback);
void FreeRTOS_FirstNetworkInterface_Stub(CMOCK_FreeRTOS_FirstNetworkInterface_CALLBACK Callback);
#define FreeRTOS_FirstNetworkInterface_StubWithCallback FreeRTOS_FirstNetworkInterface_Stub
#define FreeRTOS_NextNetworkInterface_IgnoreAndReturn(cmock_retval) FreeRTOS_NextNetworkInterface_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_NextNetworkInterface_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, NetworkInterface_t* cmock_to_return);
#define FreeRTOS_NextNetworkInterface_StopIgnore() FreeRTOS_NextNetworkInterface_CMockStopIgnore()
void FreeRTOS_NextNetworkInterface_CMockStopIgnore(void);
#define FreeRTOS_NextNetworkInterface_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_NextNetworkInterface_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_NextNetworkInterface_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, NetworkInterface_t* cmock_to_return);
#define FreeRTOS_NextNetworkInterface_ExpectAndReturn(pxInterface, cmock_retval) FreeRTOS_NextNetworkInterface_CMockExpectAndReturn(__LINE__, pxInterface, cmock_retval)
void FreeRTOS_NextNetworkInterface_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkInterface_t* pxInterface, NetworkInterface_t* cmock_to_return);
typedef NetworkInterface_t* (* CMOCK_FreeRTOS_NextNetworkInterface_CALLBACK)(const NetworkInterface_t* pxInterface, int cmock_num_calls);
void FreeRTOS_NextNetworkInterface_AddCallback(CMOCK_FreeRTOS_NextNetworkInterface_CALLBACK Callback);
void FreeRTOS_NextNetworkInterface_Stub(CMOCK_FreeRTOS_NextNetworkInterface_CALLBACK Callback);
#define FreeRTOS_NextNetworkInterface_StubWithCallback FreeRTOS_NextNetworkInterface_Stub
#define FreeRTOS_NextNetworkInterface_ExpectWithArrayAndReturn(pxInterface, pxInterface_Depth, cmock_retval) FreeRTOS_NextNetworkInterface_CMockExpectWithArrayAndReturn(__LINE__, pxInterface, pxInterface_Depth, cmock_retval)
void FreeRTOS_NextNetworkInterface_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkInterface_t* pxInterface, int pxInterface_Depth, NetworkInterface_t* cmock_to_return);
#define FreeRTOS_NextNetworkInterface_IgnoreArg_pxInterface() FreeRTOS_NextNetworkInterface_CMockIgnoreArg_pxInterface(__LINE__)
void FreeRTOS_NextNetworkInterface_CMockIgnoreArg_pxInterface(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FirstEndPoint_IgnoreAndReturn(cmock_retval) FreeRTOS_FirstEndPoint_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_FirstEndPoint_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FirstEndPoint_StopIgnore() FreeRTOS_FirstEndPoint_CMockStopIgnore()
void FreeRTOS_FirstEndPoint_CMockStopIgnore(void);
#define FreeRTOS_FirstEndPoint_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_FirstEndPoint_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_FirstEndPoint_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FirstEndPoint_ExpectAndReturn(pxInterface, cmock_retval) FreeRTOS_FirstEndPoint_CMockExpectAndReturn(__LINE__, pxInterface, cmock_retval)
void FreeRTOS_FirstEndPoint_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkInterface_t* pxInterface, NetworkEndPoint_t* cmock_to_return);
typedef NetworkEndPoint_t* (* CMOCK_FreeRTOS_FirstEndPoint_CALLBACK)(const NetworkInterface_t* pxInterface, int cmock_num_calls);
void FreeRTOS_FirstEndPoint_AddCallback(CMOCK_FreeRTOS_FirstEndPoint_CALLBACK Callback);
void FreeRTOS_FirstEndPoint_Stub(CMOCK_FreeRTOS_FirstEndPoint_CALLBACK Callback);
#define FreeRTOS_FirstEndPoint_StubWithCallback FreeRTOS_FirstEndPoint_Stub
#define FreeRTOS_FirstEndPoint_ExpectWithArrayAndReturn(pxInterface, pxInterface_Depth, cmock_retval) FreeRTOS_FirstEndPoint_CMockExpectWithArrayAndReturn(__LINE__, pxInterface, pxInterface_Depth, cmock_retval)
void FreeRTOS_FirstEndPoint_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkInterface_t* pxInterface, int pxInterface_Depth, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FirstEndPoint_IgnoreArg_pxInterface() FreeRTOS_FirstEndPoint_CMockIgnoreArg_pxInterface(__LINE__)
void FreeRTOS_FirstEndPoint_CMockIgnoreArg_pxInterface(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_NextEndPoint_IgnoreAndReturn(cmock_retval) FreeRTOS_NextEndPoint_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_NextEndPoint_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_NextEndPoint_StopIgnore() FreeRTOS_NextEndPoint_CMockStopIgnore()
void FreeRTOS_NextEndPoint_CMockStopIgnore(void);
#define FreeRTOS_NextEndPoint_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_NextEndPoint_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_NextEndPoint_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_NextEndPoint_ExpectAndReturn(pxInterface, pxEndPoint, cmock_retval) FreeRTOS_NextEndPoint_CMockExpectAndReturn(__LINE__, pxInterface, pxEndPoint, cmock_retval)
void FreeRTOS_NextEndPoint_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkInterface_t* pxInterface, NetworkEndPoint_t* pxEndPoint, NetworkEndPoint_t* cmock_to_return);
typedef NetworkEndPoint_t* (* CMOCK_FreeRTOS_NextEndPoint_CALLBACK)(const NetworkInterface_t* pxInterface, NetworkEndPoint_t* pxEndPoint, int cmock_num_calls);
void FreeRTOS_NextEndPoint_AddCallback(CMOCK_FreeRTOS_NextEndPoint_CALLBACK Callback);
void FreeRTOS_NextEndPoint_Stub(CMOCK_FreeRTOS_NextEndPoint_CALLBACK Callback);
#define FreeRTOS_NextEndPoint_StubWithCallback FreeRTOS_NextEndPoint_Stub
#define FreeRTOS_NextEndPoint_ExpectWithArrayAndReturn(pxInterface, pxInterface_Depth, pxEndPoint, pxEndPoint_Depth, cmock_retval) FreeRTOS_NextEndPoint_CMockExpectWithArrayAndReturn(__LINE__, pxInterface, pxInterface_Depth, pxEndPoint, pxEndPoint_Depth, cmock_retval)
void FreeRTOS_NextEndPoint_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkInterface_t* pxInterface, int pxInterface_Depth, NetworkEndPoint_t* pxEndPoint, int pxEndPoint_Depth, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_NextEndPoint_ReturnThruPtr_pxEndPoint(pxEndPoint) FreeRTOS_NextEndPoint_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, sizeof(NetworkEndPoint_t))
#define FreeRTOS_NextEndPoint_ReturnArrayThruPtr_pxEndPoint(pxEndPoint, cmock_len) FreeRTOS_NextEndPoint_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, (int)(cmock_len * (int)sizeof(*pxEndPoint)))
#define FreeRTOS_NextEndPoint_ReturnMemThruPtr_pxEndPoint(pxEndPoint, cmock_size) FreeRTOS_NextEndPoint_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, cmock_size)
void FreeRTOS_NextEndPoint_CMockReturnMemThruPtr_pxEndPoint(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* pxEndPoint, int cmock_size);
#define FreeRTOS_NextEndPoint_IgnoreArg_pxInterface() FreeRTOS_NextEndPoint_CMockIgnoreArg_pxInterface(__LINE__)
void FreeRTOS_NextEndPoint_CMockIgnoreArg_pxInterface(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_NextEndPoint_IgnoreArg_pxEndPoint() FreeRTOS_NextEndPoint_CMockIgnoreArg_pxEndPoint(__LINE__)
void FreeRTOS_NextEndPoint_CMockIgnoreArg_pxEndPoint(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FindEndPointOnIP_IPv4_IgnoreAndReturn(cmock_retval) FreeRTOS_FindEndPointOnIP_IPv4_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_FindEndPointOnIP_IPv4_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FindEndPointOnIP_IPv4_StopIgnore() FreeRTOS_FindEndPointOnIP_IPv4_CMockStopIgnore()
void FreeRTOS_FindEndPointOnIP_IPv4_CMockStopIgnore(void);
#define FreeRTOS_FindEndPointOnIP_IPv4_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_FindEndPointOnIP_IPv4_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_FindEndPointOnIP_IPv4_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FindEndPointOnIP_IPv4_ExpectAndReturn(ulIPAddress, ulWhere, cmock_retval) FreeRTOS_FindEndPointOnIP_IPv4_CMockExpectAndReturn(__LINE__, ulIPAddress, ulWhere, cmock_retval)
void FreeRTOS_FindEndPointOnIP_IPv4_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t ulIPAddress, uint32_t ulWhere, NetworkEndPoint_t* cmock_to_return);
typedef NetworkEndPoint_t* (* CMOCK_FreeRTOS_FindEndPointOnIP_IPv4_CALLBACK)(uint32_t ulIPAddress, uint32_t ulWhere, int cmock_num_calls);
void FreeRTOS_FindEndPointOnIP_IPv4_AddCallback(CMOCK_FreeRTOS_FindEndPointOnIP_IPv4_CALLBACK Callback);
void FreeRTOS_FindEndPointOnIP_IPv4_Stub(CMOCK_FreeRTOS_FindEndPointOnIP_IPv4_CALLBACK Callback);
#define FreeRTOS_FindEndPointOnIP_IPv4_StubWithCallback FreeRTOS_FindEndPointOnIP_IPv4_Stub
#define FreeRTOS_FindEndPointOnIP_IPv4_IgnoreArg_ulIPAddress() FreeRTOS_FindEndPointOnIP_IPv4_CMockIgnoreArg_ulIPAddress(__LINE__)
void FreeRTOS_FindEndPointOnIP_IPv4_CMockIgnoreArg_ulIPAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FindEndPointOnIP_IPv4_IgnoreArg_ulWhere() FreeRTOS_FindEndPointOnIP_IPv4_CMockIgnoreArg_ulWhere(__LINE__)
void FreeRTOS_FindEndPointOnIP_IPv4_CMockIgnoreArg_ulWhere(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FindEndPointOnIP_IPv6_IgnoreAndReturn(cmock_retval) FreeRTOS_FindEndPointOnIP_IPv6_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_FindEndPointOnIP_IPv6_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FindEndPointOnIP_IPv6_StopIgnore() FreeRTOS_FindEndPointOnIP_IPv6_CMockStopIgnore()
void FreeRTOS_FindEndPointOnIP_IPv6_CMockStopIgnore(void);
#define FreeRTOS_FindEndPointOnIP_IPv6_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_FindEndPointOnIP_IPv6_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_FindEndPointOnIP_IPv6_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FindEndPointOnIP_IPv6_ExpectAndReturn(pxIPAddress, cmock_retval) FreeRTOS_FindEndPointOnIP_IPv6_CMockExpectAndReturn(__LINE__, pxIPAddress, cmock_retval)
void FreeRTOS_FindEndPointOnIP_IPv6_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const IPv6_Address_t* pxIPAddress, NetworkEndPoint_t* cmock_to_return);
typedef NetworkEndPoint_t* (* CMOCK_FreeRTOS_FindEndPointOnIP_IPv6_CALLBACK)(const IPv6_Address_t* pxIPAddress, int cmock_num_calls);
void FreeRTOS_FindEndPointOnIP_IPv6_AddCallback(CMOCK_FreeRTOS_FindEndPointOnIP_IPv6_CALLBACK Callback);
void FreeRTOS_FindEndPointOnIP_IPv6_Stub(CMOCK_FreeRTOS_FindEndPointOnIP_IPv6_CALLBACK Callback);
#define FreeRTOS_FindEndPointOnIP_IPv6_StubWithCallback FreeRTOS_FindEndPointOnIP_IPv6_Stub
#define FreeRTOS_FindEndPointOnIP_IPv6_ExpectWithArrayAndReturn(pxIPAddress, pxIPAddress_Depth, cmock_retval) FreeRTOS_FindEndPointOnIP_IPv6_CMockExpectWithArrayAndReturn(__LINE__, pxIPAddress, pxIPAddress_Depth, cmock_retval)
void FreeRTOS_FindEndPointOnIP_IPv6_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const IPv6_Address_t* pxIPAddress, int pxIPAddress_Depth, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FindEndPointOnIP_IPv6_IgnoreArg_pxIPAddress() FreeRTOS_FindEndPointOnIP_IPv6_CMockIgnoreArg_pxIPAddress(__LINE__)
void FreeRTOS_FindEndPointOnIP_IPv6_CMockIgnoreArg_pxIPAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FindEndPointOnMAC_IgnoreAndReturn(cmock_retval) FreeRTOS_FindEndPointOnMAC_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_FindEndPointOnMAC_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FindEndPointOnMAC_StopIgnore() FreeRTOS_FindEndPointOnMAC_CMockStopIgnore()
void FreeRTOS_FindEndPointOnMAC_CMockStopIgnore(void);
#define FreeRTOS_FindEndPointOnMAC_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_FindEndPointOnMAC_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_FindEndPointOnMAC_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FindEndPointOnMAC_ExpectAndReturn(pxMACAddress, pxInterface, cmock_retval) FreeRTOS_FindEndPointOnMAC_CMockExpectAndReturn(__LINE__, pxMACAddress, pxInterface, cmock_retval)
void FreeRTOS_FindEndPointOnMAC_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const MACAddress_t* pxMACAddress, const NetworkInterface_t* pxInterface, NetworkEndPoint_t* cmock_to_return);
typedef NetworkEndPoint_t* (* CMOCK_FreeRTOS_FindEndPointOnMAC_CALLBACK)(const MACAddress_t* pxMACAddress, const NetworkInterface_t* pxInterface, int cmock_num_calls);
void FreeRTOS_FindEndPointOnMAC_AddCallback(CMOCK_FreeRTOS_FindEndPointOnMAC_CALLBACK Callback);
void FreeRTOS_FindEndPointOnMAC_Stub(CMOCK_FreeRTOS_FindEndPointOnMAC_CALLBACK Callback);
#define FreeRTOS_FindEndPointOnMAC_StubWithCallback FreeRTOS_FindEndPointOnMAC_Stub
#define FreeRTOS_FindEndPointOnMAC_ExpectWithArrayAndReturn(pxMACAddress, pxMACAddress_Depth, pxInterface, pxInterface_Depth, cmock_retval) FreeRTOS_FindEndPointOnMAC_CMockExpectWithArrayAndReturn(__LINE__, pxMACAddress, pxMACAddress_Depth, pxInterface, pxInterface_Depth, cmock_retval)
void FreeRTOS_FindEndPointOnMAC_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const MACAddress_t* pxMACAddress, int pxMACAddress_Depth, const NetworkInterface_t* pxInterface, int pxInterface_Depth, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FindEndPointOnMAC_IgnoreArg_pxMACAddress() FreeRTOS_FindEndPointOnMAC_CMockIgnoreArg_pxMACAddress(__LINE__)
void FreeRTOS_FindEndPointOnMAC_CMockIgnoreArg_pxMACAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FindEndPointOnMAC_IgnoreArg_pxInterface() FreeRTOS_FindEndPointOnMAC_CMockIgnoreArg_pxInterface(__LINE__)
void FreeRTOS_FindEndPointOnMAC_CMockIgnoreArg_pxInterface(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FindEndPointOnNetMask_IgnoreAndReturn(cmock_retval) FreeRTOS_FindEndPointOnNetMask_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_FindEndPointOnNetMask_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FindEndPointOnNetMask_StopIgnore() FreeRTOS_FindEndPointOnNetMask_CMockStopIgnore()
void FreeRTOS_FindEndPointOnNetMask_CMockStopIgnore(void);
#define FreeRTOS_FindEndPointOnNetMask_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_FindEndPointOnNetMask_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_FindEndPointOnNetMask_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FindEndPointOnNetMask_ExpectAndReturn(ulIPAddress, ulWhere, cmock_retval) FreeRTOS_FindEndPointOnNetMask_CMockExpectAndReturn(__LINE__, ulIPAddress, ulWhere, cmock_retval)
void FreeRTOS_FindEndPointOnNetMask_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t ulIPAddress, uint32_t ulWhere, NetworkEndPoint_t* cmock_to_return);
typedef NetworkEndPoint_t* (* CMOCK_FreeRTOS_FindEndPointOnNetMask_CALLBACK)(uint32_t ulIPAddress, uint32_t ulWhere, int cmock_num_calls);
void FreeRTOS_FindEndPointOnNetMask_AddCallback(CMOCK_FreeRTOS_FindEndPointOnNetMask_CALLBACK Callback);
void FreeRTOS_FindEndPointOnNetMask_Stub(CMOCK_FreeRTOS_FindEndPointOnNetMask_CALLBACK Callback);
#define FreeRTOS_FindEndPointOnNetMask_StubWithCallback FreeRTOS_FindEndPointOnNetMask_Stub
#define FreeRTOS_FindEndPointOnNetMask_IgnoreArg_ulIPAddress() FreeRTOS_FindEndPointOnNetMask_CMockIgnoreArg_ulIPAddress(__LINE__)
void FreeRTOS_FindEndPointOnNetMask_CMockIgnoreArg_ulIPAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FindEndPointOnNetMask_IgnoreArg_ulWhere() FreeRTOS_FindEndPointOnNetMask_CMockIgnoreArg_ulWhere(__LINE__)
void FreeRTOS_FindEndPointOnNetMask_CMockIgnoreArg_ulWhere(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_InterfaceEndPointOnNetMask_IgnoreAndReturn(cmock_retval) FreeRTOS_InterfaceEndPointOnNetMask_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_InterfaceEndPointOnNetMask_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_InterfaceEndPointOnNetMask_StopIgnore() FreeRTOS_InterfaceEndPointOnNetMask_CMockStopIgnore()
void FreeRTOS_InterfaceEndPointOnNetMask_CMockStopIgnore(void);
#define FreeRTOS_InterfaceEndPointOnNetMask_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_InterfaceEndPointOnNetMask_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_InterfaceEndPointOnNetMask_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_InterfaceEndPointOnNetMask_ExpectAndReturn(pxInterface, ulIPAddress, ulWhere, cmock_retval) FreeRTOS_InterfaceEndPointOnNetMask_CMockExpectAndReturn(__LINE__, pxInterface, ulIPAddress, ulWhere, cmock_retval)
void FreeRTOS_InterfaceEndPointOnNetMask_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkInterface_t* pxInterface, uint32_t ulIPAddress, uint32_t ulWhere, NetworkEndPoint_t* cmock_to_return);
typedef NetworkEndPoint_t* (* CMOCK_FreeRTOS_InterfaceEndPointOnNetMask_CALLBACK)(const NetworkInterface_t* pxInterface, uint32_t ulIPAddress, uint32_t ulWhere, int cmock_num_calls);
void FreeRTOS_InterfaceEndPointOnNetMask_AddCallback(CMOCK_FreeRTOS_InterfaceEndPointOnNetMask_CALLBACK Callback);
void FreeRTOS_InterfaceEndPointOnNetMask_Stub(CMOCK_FreeRTOS_InterfaceEndPointOnNetMask_CALLBACK Callback);
#define FreeRTOS_InterfaceEndPointOnNetMask_StubWithCallback FreeRTOS_InterfaceEndPointOnNetMask_Stub
#define FreeRTOS_InterfaceEndPointOnNetMask_ExpectWithArrayAndReturn(pxInterface, pxInterface_Depth, ulIPAddress, ulWhere, cmock_retval) FreeRTOS_InterfaceEndPointOnNetMask_CMockExpectWithArrayAndReturn(__LINE__, pxInterface, pxInterface_Depth, ulIPAddress, ulWhere, cmock_retval)
void FreeRTOS_InterfaceEndPointOnNetMask_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkInterface_t* pxInterface, int pxInterface_Depth, uint32_t ulIPAddress, uint32_t ulWhere, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_InterfaceEndPointOnNetMask_IgnoreArg_pxInterface() FreeRTOS_InterfaceEndPointOnNetMask_CMockIgnoreArg_pxInterface(__LINE__)
void FreeRTOS_InterfaceEndPointOnNetMask_CMockIgnoreArg_pxInterface(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_InterfaceEndPointOnNetMask_IgnoreArg_ulIPAddress() FreeRTOS_InterfaceEndPointOnNetMask_CMockIgnoreArg_ulIPAddress(__LINE__)
void FreeRTOS_InterfaceEndPointOnNetMask_CMockIgnoreArg_ulIPAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_InterfaceEndPointOnNetMask_IgnoreArg_ulWhere() FreeRTOS_InterfaceEndPointOnNetMask_CMockIgnoreArg_ulWhere(__LINE__)
void FreeRTOS_InterfaceEndPointOnNetMask_CMockIgnoreArg_ulWhere(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FindEndPointOnNetMask_IPv6_IgnoreAndReturn(cmock_retval) FreeRTOS_FindEndPointOnNetMask_IPv6_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_FindEndPointOnNetMask_IPv6_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FindEndPointOnNetMask_IPv6_StopIgnore() FreeRTOS_FindEndPointOnNetMask_IPv6_CMockStopIgnore()
void FreeRTOS_FindEndPointOnNetMask_IPv6_CMockStopIgnore(void);
#define FreeRTOS_FindEndPointOnNetMask_IPv6_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_FindEndPointOnNetMask_IPv6_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_FindEndPointOnNetMask_IPv6_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FindEndPointOnNetMask_IPv6_ExpectAndReturn(pxIPv6Address, cmock_retval) FreeRTOS_FindEndPointOnNetMask_IPv6_CMockExpectAndReturn(__LINE__, pxIPv6Address, cmock_retval)
void FreeRTOS_FindEndPointOnNetMask_IPv6_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const IPv6_Address_t* pxIPv6Address, NetworkEndPoint_t* cmock_to_return);
typedef NetworkEndPoint_t* (* CMOCK_FreeRTOS_FindEndPointOnNetMask_IPv6_CALLBACK)(const IPv6_Address_t* pxIPv6Address, int cmock_num_calls);
void FreeRTOS_FindEndPointOnNetMask_IPv6_AddCallback(CMOCK_FreeRTOS_FindEndPointOnNetMask_IPv6_CALLBACK Callback);
void FreeRTOS_FindEndPointOnNetMask_IPv6_Stub(CMOCK_FreeRTOS_FindEndPointOnNetMask_IPv6_CALLBACK Callback);
#define FreeRTOS_FindEndPointOnNetMask_IPv6_StubWithCallback FreeRTOS_FindEndPointOnNetMask_IPv6_Stub
#define FreeRTOS_FindEndPointOnNetMask_IPv6_ExpectWithArrayAndReturn(pxIPv6Address, pxIPv6Address_Depth, cmock_retval) FreeRTOS_FindEndPointOnNetMask_IPv6_CMockExpectWithArrayAndReturn(__LINE__, pxIPv6Address, pxIPv6Address_Depth, cmock_retval)
void FreeRTOS_FindEndPointOnNetMask_IPv6_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const IPv6_Address_t* pxIPv6Address, int pxIPv6Address_Depth, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FindEndPointOnNetMask_IPv6_IgnoreArg_pxIPv6Address() FreeRTOS_FindEndPointOnNetMask_IPv6_CMockIgnoreArg_pxIPv6Address(__LINE__)
void FreeRTOS_FindEndPointOnNetMask_IPv6_CMockIgnoreArg_pxIPv6Address(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FirstEndPoint_IPv6_IgnoreAndReturn(cmock_retval) FreeRTOS_FirstEndPoint_IPv6_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_FirstEndPoint_IPv6_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FirstEndPoint_IPv6_StopIgnore() FreeRTOS_FirstEndPoint_IPv6_CMockStopIgnore()
void FreeRTOS_FirstEndPoint_IPv6_CMockStopIgnore(void);
#define FreeRTOS_FirstEndPoint_IPv6_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_FirstEndPoint_IPv6_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_FirstEndPoint_IPv6_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FirstEndPoint_IPv6_ExpectAndReturn(pxInterface, cmock_retval) FreeRTOS_FirstEndPoint_IPv6_CMockExpectAndReturn(__LINE__, pxInterface, cmock_retval)
void FreeRTOS_FirstEndPoint_IPv6_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkInterface_t* pxInterface, NetworkEndPoint_t* cmock_to_return);
typedef NetworkEndPoint_t* (* CMOCK_FreeRTOS_FirstEndPoint_IPv6_CALLBACK)(const NetworkInterface_t* pxInterface, int cmock_num_calls);
void FreeRTOS_FirstEndPoint_IPv6_AddCallback(CMOCK_FreeRTOS_FirstEndPoint_IPv6_CALLBACK Callback);
void FreeRTOS_FirstEndPoint_IPv6_Stub(CMOCK_FreeRTOS_FirstEndPoint_IPv6_CALLBACK Callback);
#define FreeRTOS_FirstEndPoint_IPv6_StubWithCallback FreeRTOS_FirstEndPoint_IPv6_Stub
#define FreeRTOS_FirstEndPoint_IPv6_ExpectWithArrayAndReturn(pxInterface, pxInterface_Depth, cmock_retval) FreeRTOS_FirstEndPoint_IPv6_CMockExpectWithArrayAndReturn(__LINE__, pxInterface, pxInterface_Depth, cmock_retval)
void FreeRTOS_FirstEndPoint_IPv6_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkInterface_t* pxInterface, int pxInterface_Depth, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FirstEndPoint_IPv6_IgnoreArg_pxInterface() FreeRTOS_FirstEndPoint_IPv6_CMockIgnoreArg_pxInterface(__LINE__)
void FreeRTOS_FirstEndPoint_IPv6_CMockIgnoreArg_pxInterface(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_MatchingEndpoint_IgnoreAndReturn(cmock_retval) FreeRTOS_MatchingEndpoint_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_MatchingEndpoint_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_MatchingEndpoint_StopIgnore() FreeRTOS_MatchingEndpoint_CMockStopIgnore()
void FreeRTOS_MatchingEndpoint_CMockStopIgnore(void);
#define FreeRTOS_MatchingEndpoint_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_MatchingEndpoint_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_MatchingEndpoint_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_MatchingEndpoint_ExpectAndReturn(pxNetworkInterface, pucEthernetBuffer, cmock_retval) FreeRTOS_MatchingEndpoint_CMockExpectAndReturn(__LINE__, pxNetworkInterface, pucEthernetBuffer, cmock_retval)
void FreeRTOS_MatchingEndpoint_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkInterface_t* pxNetworkInterface, const uint8_t* pucEthernetBuffer, NetworkEndPoint_t* cmock_to_return);
typedef NetworkEndPoint_t* (* CMOCK_FreeRTOS_MatchingEndpoint_CALLBACK)(const NetworkInterface_t* pxNetworkInterface, const uint8_t* pucEthernetBuffer, int cmock_num_calls);
void FreeRTOS_MatchingEndpoint_AddCallback(CMOCK_FreeRTOS_MatchingEndpoint_CALLBACK Callback);
void FreeRTOS_MatchingEndpoint_Stub(CMOCK_FreeRTOS_MatchingEndpoint_CALLBACK Callback);
#define FreeRTOS_MatchingEndpoint_StubWithCallback FreeRTOS_MatchingEndpoint_Stub
#define FreeRTOS_MatchingEndpoint_ExpectWithArrayAndReturn(pxNetworkInterface, pxNetworkInterface_Depth, pucEthernetBuffer, pucEthernetBuffer_Depth, cmock_retval) FreeRTOS_MatchingEndpoint_CMockExpectWithArrayAndReturn(__LINE__, pxNetworkInterface, pxNetworkInterface_Depth, pucEthernetBuffer, pucEthernetBuffer_Depth, cmock_retval)
void FreeRTOS_MatchingEndpoint_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkInterface_t* pxNetworkInterface, int pxNetworkInterface_Depth, const uint8_t* pucEthernetBuffer, int pucEthernetBuffer_Depth, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_MatchingEndpoint_IgnoreArg_pxNetworkInterface() FreeRTOS_MatchingEndpoint_CMockIgnoreArg_pxNetworkInterface(__LINE__)
void FreeRTOS_MatchingEndpoint_CMockIgnoreArg_pxNetworkInterface(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_MatchingEndpoint_IgnoreArg_pucEthernetBuffer() FreeRTOS_MatchingEndpoint_CMockIgnoreArg_pucEthernetBuffer(__LINE__)
void FreeRTOS_MatchingEndpoint_CMockIgnoreArg_pucEthernetBuffer(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FindGateWay_IgnoreAndReturn(cmock_retval) FreeRTOS_FindGateWay_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_FindGateWay_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FindGateWay_StopIgnore() FreeRTOS_FindGateWay_CMockStopIgnore()
void FreeRTOS_FindGateWay_CMockStopIgnore(void);
#define FreeRTOS_FindGateWay_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_FindGateWay_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_FindGateWay_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define FreeRTOS_FindGateWay_ExpectAndReturn(xIPType, cmock_retval) FreeRTOS_FindGateWay_CMockExpectAndReturn(__LINE__, xIPType, cmock_retval)
void FreeRTOS_FindGateWay_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t xIPType, NetworkEndPoint_t* cmock_to_return);
typedef NetworkEndPoint_t* (* CMOCK_FreeRTOS_FindGateWay_CALLBACK)(BaseType_t xIPType, int cmock_num_calls);
void FreeRTOS_FindGateWay_AddCallback(CMOCK_FreeRTOS_FindGateWay_CALLBACK Callback);
void FreeRTOS_FindGateWay_Stub(CMOCK_FreeRTOS_FindGateWay_CALLBACK Callback);
#define FreeRTOS_FindGateWay_StubWithCallback FreeRTOS_FindGateWay_Stub
#define FreeRTOS_FindGateWay_IgnoreArg_xIPType() FreeRTOS_FindGateWay_CMockIgnoreArg_xIPType(__LINE__)
void FreeRTOS_FindGateWay_CMockIgnoreArg_xIPType(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FillEndPoint_Ignore() FreeRTOS_FillEndPoint_CMockIgnore()
void FreeRTOS_FillEndPoint_CMockIgnore(void);
#define FreeRTOS_FillEndPoint_StopIgnore() FreeRTOS_FillEndPoint_CMockStopIgnore()
void FreeRTOS_FillEndPoint_CMockStopIgnore(void);
#define FreeRTOS_FillEndPoint_ExpectAnyArgs() FreeRTOS_FillEndPoint_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_FillEndPoint_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FillEndPoint_Expect(pxNetworkInterface, pxEndPoint, ucIPAddress, ucNetMask, ucGatewayAddress, ucDNSServerAddress, ucMACAddress) FreeRTOS_FillEndPoint_CMockExpect(__LINE__, pxNetworkInterface, pxEndPoint, ucIPAddress, ucNetMask, ucGatewayAddress, ucDNSServerAddress, ucMACAddress)
void FreeRTOS_FillEndPoint_CMockExpect(UNITY_LINE_TYPE cmock_line, NetworkInterface_t* pxNetworkInterface, NetworkEndPoint_t* pxEndPoint, const uint8_t* ucIPAddress, const uint8_t* ucNetMask, const uint8_t* ucGatewayAddress, const uint8_t* ucDNSServerAddress, const uint8_t* ucMACAddress);
typedef void (* CMOCK_FreeRTOS_FillEndPoint_CALLBACK)(NetworkInterface_t* pxNetworkInterface, NetworkEndPoint_t* pxEndPoint, const uint8_t* ucIPAddress, const uint8_t* ucNetMask, const uint8_t* ucGatewayAddress, const uint8_t* ucDNSServerAddress, const uint8_t* ucMACAddress, int cmock_num_calls);
void FreeRTOS_FillEndPoint_AddCallback(CMOCK_FreeRTOS_FillEndPoint_CALLBACK Callback);
void FreeRTOS_FillEndPoint_Stub(CMOCK_FreeRTOS_FillEndPoint_CALLBACK Callback);
#define FreeRTOS_FillEndPoint_StubWithCallback FreeRTOS_FillEndPoint_Stub
#define FreeRTOS_FillEndPoint_ExpectWithArray(pxNetworkInterface, pxNetworkInterface_Depth, pxEndPoint, pxEndPoint_Depth, ucIPAddress, ucIPAddress_Depth, ucNetMask, ucNetMask_Depth, ucGatewayAddress, ucGatewayAddress_Depth, ucDNSServerAddress, ucDNSServerAddress_Depth, ucMACAddress, ucMACAddress_Depth) FreeRTOS_FillEndPoint_CMockExpectWithArray(__LINE__, pxNetworkInterface, pxNetworkInterface_Depth, pxEndPoint, pxEndPoint_Depth, ucIPAddress, ucIPAddress_Depth, ucNetMask, ucNetMask_Depth, ucGatewayAddress, ucGatewayAddress_Depth, ucDNSServerAddress, ucDNSServerAddress_Depth, ucMACAddress, ucMACAddress_Depth)
void FreeRTOS_FillEndPoint_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, NetworkInterface_t* pxNetworkInterface, int pxNetworkInterface_Depth, NetworkEndPoint_t* pxEndPoint, int pxEndPoint_Depth, const uint8_t* ucIPAddress, int ucIPAddress_Depth, const uint8_t* ucNetMask, int ucNetMask_Depth, const uint8_t* ucGatewayAddress, int ucGatewayAddress_Depth, const uint8_t* ucDNSServerAddress, int ucDNSServerAddress_Depth, const uint8_t* ucMACAddress, int ucMACAddress_Depth);
#define FreeRTOS_FillEndPoint_ReturnThruPtr_pxNetworkInterface(pxNetworkInterface) FreeRTOS_FillEndPoint_CMockReturnMemThruPtr_pxNetworkInterface(__LINE__, pxNetworkInterface, sizeof(NetworkInterface_t))
#define FreeRTOS_FillEndPoint_ReturnArrayThruPtr_pxNetworkInterface(pxNetworkInterface, cmock_len) FreeRTOS_FillEndPoint_CMockReturnMemThruPtr_pxNetworkInterface(__LINE__, pxNetworkInterface, (int)(cmock_len * (int)sizeof(*pxNetworkInterface)))
#define FreeRTOS_FillEndPoint_ReturnMemThruPtr_pxNetworkInterface(pxNetworkInterface, cmock_size) FreeRTOS_FillEndPoint_CMockReturnMemThruPtr_pxNetworkInterface(__LINE__, pxNetworkInterface, cmock_size)
void FreeRTOS_FillEndPoint_CMockReturnMemThruPtr_pxNetworkInterface(UNITY_LINE_TYPE cmock_line, NetworkInterface_t* pxNetworkInterface, int cmock_size);
#define FreeRTOS_FillEndPoint_ReturnThruPtr_pxEndPoint(pxEndPoint) FreeRTOS_FillEndPoint_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, sizeof(NetworkEndPoint_t))
#define FreeRTOS_FillEndPoint_ReturnArrayThruPtr_pxEndPoint(pxEndPoint, cmock_len) FreeRTOS_FillEndPoint_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, (int)(cmock_len * (int)sizeof(*pxEndPoint)))
#define FreeRTOS_FillEndPoint_ReturnMemThruPtr_pxEndPoint(pxEndPoint, cmock_size) FreeRTOS_FillEndPoint_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, cmock_size)
void FreeRTOS_FillEndPoint_CMockReturnMemThruPtr_pxEndPoint(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* pxEndPoint, int cmock_size);
#define FreeRTOS_FillEndPoint_IgnoreArg_pxNetworkInterface() FreeRTOS_FillEndPoint_CMockIgnoreArg_pxNetworkInterface(__LINE__)
void FreeRTOS_FillEndPoint_CMockIgnoreArg_pxNetworkInterface(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FillEndPoint_IgnoreArg_pxEndPoint() FreeRTOS_FillEndPoint_CMockIgnoreArg_pxEndPoint(__LINE__)
void FreeRTOS_FillEndPoint_CMockIgnoreArg_pxEndPoint(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FillEndPoint_IgnoreArg_ucIPAddress() FreeRTOS_FillEndPoint_CMockIgnoreArg_ucIPAddress(__LINE__)
void FreeRTOS_FillEndPoint_CMockIgnoreArg_ucIPAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FillEndPoint_IgnoreArg_ucNetMask() FreeRTOS_FillEndPoint_CMockIgnoreArg_ucNetMask(__LINE__)
void FreeRTOS_FillEndPoint_CMockIgnoreArg_ucNetMask(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FillEndPoint_IgnoreArg_ucGatewayAddress() FreeRTOS_FillEndPoint_CMockIgnoreArg_ucGatewayAddress(__LINE__)
void FreeRTOS_FillEndPoint_CMockIgnoreArg_ucGatewayAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FillEndPoint_IgnoreArg_ucDNSServerAddress() FreeRTOS_FillEndPoint_CMockIgnoreArg_ucDNSServerAddress(__LINE__)
void FreeRTOS_FillEndPoint_CMockIgnoreArg_ucDNSServerAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FillEndPoint_IgnoreArg_ucMACAddress() FreeRTOS_FillEndPoint_CMockIgnoreArg_ucMACAddress(__LINE__)
void FreeRTOS_FillEndPoint_CMockIgnoreArg_ucMACAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FillEndPoint_IPv6_Ignore() FreeRTOS_FillEndPoint_IPv6_CMockIgnore()
void FreeRTOS_FillEndPoint_IPv6_CMockIgnore(void);
#define FreeRTOS_FillEndPoint_IPv6_StopIgnore() FreeRTOS_FillEndPoint_IPv6_CMockStopIgnore()
void FreeRTOS_FillEndPoint_IPv6_CMockStopIgnore(void);
#define FreeRTOS_FillEndPoint_IPv6_ExpectAnyArgs() FreeRTOS_FillEndPoint_IPv6_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_FillEndPoint_IPv6_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FillEndPoint_IPv6_Expect(pxNetworkInterface, pxEndPoint, pxIPAddress, pxNetPrefix, uxPrefixLength, pxGatewayAddress, pxDNSServerAddress, ucMACAddress) FreeRTOS_FillEndPoint_IPv6_CMockExpect(__LINE__, pxNetworkInterface, pxEndPoint, pxIPAddress, pxNetPrefix, uxPrefixLength, pxGatewayAddress, pxDNSServerAddress, ucMACAddress)
void FreeRTOS_FillEndPoint_IPv6_CMockExpect(UNITY_LINE_TYPE cmock_line, NetworkInterface_t* pxNetworkInterface, NetworkEndPoint_t* pxEndPoint, const IPv6_Address_t* pxIPAddress, const IPv6_Address_t* pxNetPrefix, size_t uxPrefixLength, const IPv6_Address_t* pxGatewayAddress, const IPv6_Address_t* pxDNSServerAddress, const uint8_t* ucMACAddress);
typedef void (* CMOCK_FreeRTOS_FillEndPoint_IPv6_CALLBACK)(NetworkInterface_t* pxNetworkInterface, NetworkEndPoint_t* pxEndPoint, const IPv6_Address_t* pxIPAddress, const IPv6_Address_t* pxNetPrefix, size_t uxPrefixLength, const IPv6_Address_t* pxGatewayAddress, const IPv6_Address_t* pxDNSServerAddress, const uint8_t* ucMACAddress, int cmock_num_calls);
void FreeRTOS_FillEndPoint_IPv6_AddCallback(CMOCK_FreeRTOS_FillEndPoint_IPv6_CALLBACK Callback);
void FreeRTOS_FillEndPoint_IPv6_Stub(CMOCK_FreeRTOS_FillEndPoint_IPv6_CALLBACK Callback);
#define FreeRTOS_FillEndPoint_IPv6_StubWithCallback FreeRTOS_FillEndPoint_IPv6_Stub
#define FreeRTOS_FillEndPoint_IPv6_ExpectWithArray(pxNetworkInterface, pxNetworkInterface_Depth, pxEndPoint, pxEndPoint_Depth, pxIPAddress, pxIPAddress_Depth, pxNetPrefix, pxNetPrefix_Depth, uxPrefixLength, pxGatewayAddress, pxGatewayAddress_Depth, pxDNSServerAddress, pxDNSServerAddress_Depth, ucMACAddress, ucMACAddress_Depth) FreeRTOS_FillEndPoint_IPv6_CMockExpectWithArray(__LINE__, pxNetworkInterface, pxNetworkInterface_Depth, pxEndPoint, pxEndPoint_Depth, pxIPAddress, pxIPAddress_Depth, pxNetPrefix, pxNetPrefix_Depth, uxPrefixLength, pxGatewayAddress, pxGatewayAddress_Depth, pxDNSServerAddress, pxDNSServerAddress_Depth, ucMACAddress, ucMACAddress_Depth)
void FreeRTOS_FillEndPoint_IPv6_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, NetworkInterface_t* pxNetworkInterface, int pxNetworkInterface_Depth, NetworkEndPoint_t* pxEndPoint, int pxEndPoint_Depth, const IPv6_Address_t* pxIPAddress, int pxIPAddress_Depth, const IPv6_Address_t* pxNetPrefix, int pxNetPrefix_Depth, size_t uxPrefixLength, const IPv6_Address_t* pxGatewayAddress, int pxGatewayAddress_Depth, const IPv6_Address_t* pxDNSServerAddress, int pxDNSServerAddress_Depth, const uint8_t* ucMACAddress, int ucMACAddress_Depth);
#define FreeRTOS_FillEndPoint_IPv6_ReturnThruPtr_pxNetworkInterface(pxNetworkInterface) FreeRTOS_FillEndPoint_IPv6_CMockReturnMemThruPtr_pxNetworkInterface(__LINE__, pxNetworkInterface, sizeof(NetworkInterface_t))
#define FreeRTOS_FillEndPoint_IPv6_ReturnArrayThruPtr_pxNetworkInterface(pxNetworkInterface, cmock_len) FreeRTOS_FillEndPoint_IPv6_CMockReturnMemThruPtr_pxNetworkInterface(__LINE__, pxNetworkInterface, (int)(cmock_len * (int)sizeof(*pxNetworkInterface)))
#define FreeRTOS_FillEndPoint_IPv6_ReturnMemThruPtr_pxNetworkInterface(pxNetworkInterface, cmock_size) FreeRTOS_FillEndPoint_IPv6_CMockReturnMemThruPtr_pxNetworkInterface(__LINE__, pxNetworkInterface, cmock_size)
void FreeRTOS_FillEndPoint_IPv6_CMockReturnMemThruPtr_pxNetworkInterface(UNITY_LINE_TYPE cmock_line, NetworkInterface_t* pxNetworkInterface, int cmock_size);
#define FreeRTOS_FillEndPoint_IPv6_ReturnThruPtr_pxEndPoint(pxEndPoint) FreeRTOS_FillEndPoint_IPv6_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, sizeof(NetworkEndPoint_t))
#define FreeRTOS_FillEndPoint_IPv6_ReturnArrayThruPtr_pxEndPoint(pxEndPoint, cmock_len) FreeRTOS_FillEndPoint_IPv6_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, (int)(cmock_len * (int)sizeof(*pxEndPoint)))
#define FreeRTOS_FillEndPoint_IPv6_ReturnMemThruPtr_pxEndPoint(pxEndPoint, cmock_size) FreeRTOS_FillEndPoint_IPv6_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, cmock_size)
void FreeRTOS_FillEndPoint_IPv6_CMockReturnMemThruPtr_pxEndPoint(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* pxEndPoint, int cmock_size);
#define FreeRTOS_FillEndPoint_IPv6_IgnoreArg_pxNetworkInterface() FreeRTOS_FillEndPoint_IPv6_CMockIgnoreArg_pxNetworkInterface(__LINE__)
void FreeRTOS_FillEndPoint_IPv6_CMockIgnoreArg_pxNetworkInterface(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FillEndPoint_IPv6_IgnoreArg_pxEndPoint() FreeRTOS_FillEndPoint_IPv6_CMockIgnoreArg_pxEndPoint(__LINE__)
void FreeRTOS_FillEndPoint_IPv6_CMockIgnoreArg_pxEndPoint(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FillEndPoint_IPv6_IgnoreArg_pxIPAddress() FreeRTOS_FillEndPoint_IPv6_CMockIgnoreArg_pxIPAddress(__LINE__)
void FreeRTOS_FillEndPoint_IPv6_CMockIgnoreArg_pxIPAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FillEndPoint_IPv6_IgnoreArg_pxNetPrefix() FreeRTOS_FillEndPoint_IPv6_CMockIgnoreArg_pxNetPrefix(__LINE__)
void FreeRTOS_FillEndPoint_IPv6_CMockIgnoreArg_pxNetPrefix(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FillEndPoint_IPv6_IgnoreArg_uxPrefixLength() FreeRTOS_FillEndPoint_IPv6_CMockIgnoreArg_uxPrefixLength(__LINE__)
void FreeRTOS_FillEndPoint_IPv6_CMockIgnoreArg_uxPrefixLength(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FillEndPoint_IPv6_IgnoreArg_pxGatewayAddress() FreeRTOS_FillEndPoint_IPv6_CMockIgnoreArg_pxGatewayAddress(__LINE__)
void FreeRTOS_FillEndPoint_IPv6_CMockIgnoreArg_pxGatewayAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FillEndPoint_IPv6_IgnoreArg_pxDNSServerAddress() FreeRTOS_FillEndPoint_IPv6_CMockIgnoreArg_pxDNSServerAddress(__LINE__)
void FreeRTOS_FillEndPoint_IPv6_CMockIgnoreArg_pxDNSServerAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FillEndPoint_IPv6_IgnoreArg_ucMACAddress() FreeRTOS_FillEndPoint_IPv6_CMockIgnoreArg_ucMACAddress(__LINE__)
void FreeRTOS_FillEndPoint_IPv6_CMockIgnoreArg_ucMACAddress(UNITY_LINE_TYPE cmock_line);
#define pxGetSocketEndpoint_IgnoreAndReturn(cmock_retval) pxGetSocketEndpoint_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pxGetSocketEndpoint_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define pxGetSocketEndpoint_StopIgnore() pxGetSocketEndpoint_CMockStopIgnore()
void pxGetSocketEndpoint_CMockStopIgnore(void);
#define pxGetSocketEndpoint_ExpectAnyArgsAndReturn(cmock_retval) pxGetSocketEndpoint_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void pxGetSocketEndpoint_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* cmock_to_return);
#define pxGetSocketEndpoint_ExpectAndReturn(xSocket, cmock_retval) pxGetSocketEndpoint_CMockExpectAndReturn(__LINE__, xSocket, cmock_retval)
void pxGetSocketEndpoint_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ConstSocket_t xSocket, NetworkEndPoint_t* cmock_to_return);
typedef NetworkEndPoint_t* (* CMOCK_pxGetSocketEndpoint_CALLBACK)(ConstSocket_t xSocket, int cmock_num_calls);
void pxGetSocketEndpoint_AddCallback(CMOCK_pxGetSocketEndpoint_CALLBACK Callback);
void pxGetSocketEndpoint_Stub(CMOCK_pxGetSocketEndpoint_CALLBACK Callback);
#define pxGetSocketEndpoint_StubWithCallback pxGetSocketEndpoint_Stub
#define pxGetSocketEndpoint_IgnoreArg_xSocket() pxGetSocketEndpoint_CMockIgnoreArg_xSocket(__LINE__)
void pxGetSocketEndpoint_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define vSetSocketEndpoint_Ignore() vSetSocketEndpoint_CMockIgnore()
void vSetSocketEndpoint_CMockIgnore(void);
#define vSetSocketEndpoint_StopIgnore() vSetSocketEndpoint_CMockStopIgnore()
void vSetSocketEndpoint_CMockStopIgnore(void);
#define vSetSocketEndpoint_ExpectAnyArgs() vSetSocketEndpoint_CMockExpectAnyArgs(__LINE__)
void vSetSocketEndpoint_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vSetSocketEndpoint_Expect(xSocket, pxEndPoint) vSetSocketEndpoint_CMockExpect(__LINE__, xSocket, pxEndPoint)
void vSetSocketEndpoint_CMockExpect(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, NetworkEndPoint_t* pxEndPoint);
typedef void (* CMOCK_vSetSocketEndpoint_CALLBACK)(Socket_t xSocket, NetworkEndPoint_t* pxEndPoint, int cmock_num_calls);
void vSetSocketEndpoint_AddCallback(CMOCK_vSetSocketEndpoint_CALLBACK Callback);
void vSetSocketEndpoint_Stub(CMOCK_vSetSocketEndpoint_CALLBACK Callback);
#define vSetSocketEndpoint_StubWithCallback vSetSocketEndpoint_Stub
#define vSetSocketEndpoint_ExpectWithArray(xSocket, pxEndPoint, pxEndPoint_Depth) vSetSocketEndpoint_CMockExpectWithArray(__LINE__, xSocket, pxEndPoint, pxEndPoint_Depth)
void vSetSocketEndpoint_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, NetworkEndPoint_t* pxEndPoint, int pxEndPoint_Depth);
#define vSetSocketEndpoint_ReturnThruPtr_pxEndPoint(pxEndPoint) vSetSocketEndpoint_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, sizeof(NetworkEndPoint_t))
#define vSetSocketEndpoint_ReturnArrayThruPtr_pxEndPoint(pxEndPoint, cmock_len) vSetSocketEndpoint_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, (int)(cmock_len * (int)sizeof(*pxEndPoint)))
#define vSetSocketEndpoint_ReturnMemThruPtr_pxEndPoint(pxEndPoint, cmock_size) vSetSocketEndpoint_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, cmock_size)
void vSetSocketEndpoint_CMockReturnMemThruPtr_pxEndPoint(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* pxEndPoint, int cmock_size);
#define vSetSocketEndpoint_IgnoreArg_xSocket() vSetSocketEndpoint_CMockIgnoreArg_xSocket(__LINE__)
void vSetSocketEndpoint_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define vSetSocketEndpoint_IgnoreArg_pxEndPoint() vSetSocketEndpoint_CMockIgnoreArg_pxEndPoint(__LINE__)
void vSetSocketEndpoint_CMockIgnoreArg_pxEndPoint(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
