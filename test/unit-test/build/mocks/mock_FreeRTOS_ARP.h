/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_FREERTOS_ARP_H
#define _MOCK_FREERTOS_ARP_H

#include "unity.h"
#include <stdbool.h>
#include <stdint.h>
#include <fcntl.h>
#include <unity.h>
#include "FreeRTOS.h"
#include "FreeRTOS_IP.h"
#include "FreeRTOS_ARP.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_FreeRTOS_ARP_Init(void);
void mock_FreeRTOS_ARP_Destroy(void);
void mock_FreeRTOS_ARP_Verify(void);




#define vARPRefreshCacheEntry_Ignore() vARPRefreshCacheEntry_CMockIgnore()
void vARPRefreshCacheEntry_CMockIgnore(void);
#define vARPRefreshCacheEntry_StopIgnore() vARPRefreshCacheEntry_CMockStopIgnore()
void vARPRefreshCacheEntry_CMockStopIgnore(void);
#define vARPRefreshCacheEntry_ExpectAnyArgs() vARPRefreshCacheEntry_CMockExpectAnyArgs(__LINE__)
void vARPRefreshCacheEntry_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vARPRefreshCacheEntry_Expect(pxMACAddress, ulIPAddress, pxEndPoint) vARPRefreshCacheEntry_CMockExpect(__LINE__, pxMACAddress, ulIPAddress, pxEndPoint)
void vARPRefreshCacheEntry_CMockExpect(UNITY_LINE_TYPE cmock_line, const MACAddress_t* pxMACAddress, const uint32_t ulIPAddress, struct xNetworkEndPoint* pxEndPoint);
typedef void (* CMOCK_vARPRefreshCacheEntry_CALLBACK)(const MACAddress_t* pxMACAddress, const uint32_t ulIPAddress, struct xNetworkEndPoint* pxEndPoint, int cmock_num_calls);
void vARPRefreshCacheEntry_AddCallback(CMOCK_vARPRefreshCacheEntry_CALLBACK Callback);
void vARPRefreshCacheEntry_Stub(CMOCK_vARPRefreshCacheEntry_CALLBACK Callback);
#define vARPRefreshCacheEntry_StubWithCallback vARPRefreshCacheEntry_Stub
#define vARPRefreshCacheEntry_ExpectWithArray(pxMACAddress, pxMACAddress_Depth, ulIPAddress, pxEndPoint, pxEndPoint_Depth) vARPRefreshCacheEntry_CMockExpectWithArray(__LINE__, pxMACAddress, pxMACAddress_Depth, ulIPAddress, pxEndPoint, pxEndPoint_Depth)
void vARPRefreshCacheEntry_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, const MACAddress_t* pxMACAddress, int pxMACAddress_Depth, const uint32_t ulIPAddress, struct xNetworkEndPoint* pxEndPoint, int pxEndPoint_Depth);
#define vARPRefreshCacheEntry_ReturnThruPtr_pxEndPoint(pxEndPoint) vARPRefreshCacheEntry_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, sizeof(struct xNetworkEndPoint))
#define vARPRefreshCacheEntry_ReturnArrayThruPtr_pxEndPoint(pxEndPoint, cmock_len) vARPRefreshCacheEntry_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, (int)(cmock_len * (int)sizeof(*pxEndPoint)))
#define vARPRefreshCacheEntry_ReturnMemThruPtr_pxEndPoint(pxEndPoint, cmock_size) vARPRefreshCacheEntry_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, cmock_size)
void vARPRefreshCacheEntry_CMockReturnMemThruPtr_pxEndPoint(UNITY_LINE_TYPE cmock_line, struct xNetworkEndPoint* pxEndPoint, int cmock_size);
#define vARPRefreshCacheEntry_IgnoreArg_pxMACAddress() vARPRefreshCacheEntry_CMockIgnoreArg_pxMACAddress(__LINE__)
void vARPRefreshCacheEntry_CMockIgnoreArg_pxMACAddress(UNITY_LINE_TYPE cmock_line);
#define vARPRefreshCacheEntry_IgnoreArg_ulIPAddress() vARPRefreshCacheEntry_CMockIgnoreArg_ulIPAddress(__LINE__)
void vARPRefreshCacheEntry_CMockIgnoreArg_ulIPAddress(UNITY_LINE_TYPE cmock_line);
#define vARPRefreshCacheEntry_IgnoreArg_pxEndPoint() vARPRefreshCacheEntry_CMockIgnoreArg_pxEndPoint(__LINE__)
void vARPRefreshCacheEntry_CMockIgnoreArg_pxEndPoint(UNITY_LINE_TYPE cmock_line);
#define ulARPRemoveCacheEntryByMac_IgnoreAndReturn(cmock_retval) ulARPRemoveCacheEntryByMac_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ulARPRemoveCacheEntryByMac_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulARPRemoveCacheEntryByMac_StopIgnore() ulARPRemoveCacheEntryByMac_CMockStopIgnore()
void ulARPRemoveCacheEntryByMac_CMockStopIgnore(void);
#define ulARPRemoveCacheEntryByMac_ExpectAnyArgsAndReturn(cmock_retval) ulARPRemoveCacheEntryByMac_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ulARPRemoveCacheEntryByMac_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulARPRemoveCacheEntryByMac_ExpectAndReturn(pxMACAddress, cmock_retval) ulARPRemoveCacheEntryByMac_CMockExpectAndReturn(__LINE__, pxMACAddress, cmock_retval)
void ulARPRemoveCacheEntryByMac_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const MACAddress_t* pxMACAddress, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_ulARPRemoveCacheEntryByMac_CALLBACK)(const MACAddress_t* pxMACAddress, int cmock_num_calls);
void ulARPRemoveCacheEntryByMac_AddCallback(CMOCK_ulARPRemoveCacheEntryByMac_CALLBACK Callback);
void ulARPRemoveCacheEntryByMac_Stub(CMOCK_ulARPRemoveCacheEntryByMac_CALLBACK Callback);
#define ulARPRemoveCacheEntryByMac_StubWithCallback ulARPRemoveCacheEntryByMac_Stub
#define ulARPRemoveCacheEntryByMac_ExpectWithArrayAndReturn(pxMACAddress, pxMACAddress_Depth, cmock_retval) ulARPRemoveCacheEntryByMac_CMockExpectWithArrayAndReturn(__LINE__, pxMACAddress, pxMACAddress_Depth, cmock_retval)
void ulARPRemoveCacheEntryByMac_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const MACAddress_t* pxMACAddress, int pxMACAddress_Depth, uint32_t cmock_to_return);
#define ulARPRemoveCacheEntryByMac_IgnoreArg_pxMACAddress() ulARPRemoveCacheEntryByMac_CMockIgnoreArg_pxMACAddress(__LINE__)
void ulARPRemoveCacheEntryByMac_CMockIgnoreArg_pxMACAddress(UNITY_LINE_TYPE cmock_line);
#define xIsIPInARPCache_IgnoreAndReturn(cmock_retval) xIsIPInARPCache_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xIsIPInARPCache_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xIsIPInARPCache_StopIgnore() xIsIPInARPCache_CMockStopIgnore()
void xIsIPInARPCache_CMockStopIgnore(void);
#define xIsIPInARPCache_ExpectAnyArgsAndReturn(cmock_retval) xIsIPInARPCache_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xIsIPInARPCache_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xIsIPInARPCache_ExpectAndReturn(ulAddressToLookup, cmock_retval) xIsIPInARPCache_CMockExpectAndReturn(__LINE__, ulAddressToLookup, cmock_retval)
void xIsIPInARPCache_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t ulAddressToLookup, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xIsIPInARPCache_CALLBACK)(uint32_t ulAddressToLookup, int cmock_num_calls);
void xIsIPInARPCache_AddCallback(CMOCK_xIsIPInARPCache_CALLBACK Callback);
void xIsIPInARPCache_Stub(CMOCK_xIsIPInARPCache_CALLBACK Callback);
#define xIsIPInARPCache_StubWithCallback xIsIPInARPCache_Stub
#define xIsIPInARPCache_IgnoreArg_ulAddressToLookup() xIsIPInARPCache_CMockIgnoreArg_ulAddressToLookup(__LINE__)
void xIsIPInARPCache_CMockIgnoreArg_ulAddressToLookup(UNITY_LINE_TYPE cmock_line);
#define xCheckRequiresARPResolution_IgnoreAndReturn(cmock_retval) xCheckRequiresARPResolution_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xCheckRequiresARPResolution_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xCheckRequiresARPResolution_StopIgnore() xCheckRequiresARPResolution_CMockStopIgnore()
void xCheckRequiresARPResolution_CMockStopIgnore(void);
#define xCheckRequiresARPResolution_ExpectAnyArgsAndReturn(cmock_retval) xCheckRequiresARPResolution_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xCheckRequiresARPResolution_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xCheckRequiresARPResolution_ExpectAndReturn(pxNetworkBuffer, cmock_retval) xCheckRequiresARPResolution_CMockExpectAndReturn(__LINE__, pxNetworkBuffer, cmock_retval)
void xCheckRequiresARPResolution_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkBufferDescriptor_t* pxNetworkBuffer, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xCheckRequiresARPResolution_CALLBACK)(const NetworkBufferDescriptor_t* pxNetworkBuffer, int cmock_num_calls);
void xCheckRequiresARPResolution_AddCallback(CMOCK_xCheckRequiresARPResolution_CALLBACK Callback);
void xCheckRequiresARPResolution_Stub(CMOCK_xCheckRequiresARPResolution_CALLBACK Callback);
#define xCheckRequiresARPResolution_StubWithCallback xCheckRequiresARPResolution_Stub
#define xCheckRequiresARPResolution_ExpectWithArrayAndReturn(pxNetworkBuffer, pxNetworkBuffer_Depth, cmock_retval) xCheckRequiresARPResolution_CMockExpectWithArrayAndReturn(__LINE__, pxNetworkBuffer, pxNetworkBuffer_Depth, cmock_retval)
void xCheckRequiresARPResolution_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkBufferDescriptor_t* pxNetworkBuffer, int pxNetworkBuffer_Depth, BaseType_t cmock_to_return);
#define xCheckRequiresARPResolution_IgnoreArg_pxNetworkBuffer() xCheckRequiresARPResolution_CMockIgnoreArg_pxNetworkBuffer(__LINE__)
void xCheckRequiresARPResolution_CMockIgnoreArg_pxNetworkBuffer(UNITY_LINE_TYPE cmock_line);
#define eARPGetCacheEntry_IgnoreAndReturn(cmock_retval) eARPGetCacheEntry_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eARPGetCacheEntry_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eARPLookupResult_t cmock_to_return);
#define eARPGetCacheEntry_StopIgnore() eARPGetCacheEntry_CMockStopIgnore()
void eARPGetCacheEntry_CMockStopIgnore(void);
#define eARPGetCacheEntry_ExpectAnyArgsAndReturn(cmock_retval) eARPGetCacheEntry_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eARPGetCacheEntry_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eARPLookupResult_t cmock_to_return);
#define eARPGetCacheEntry_ExpectAndReturn(pulIPAddress, pxMACAddress, ppxEndPoint, cmock_retval) eARPGetCacheEntry_CMockExpectAndReturn(__LINE__, pulIPAddress, pxMACAddress, ppxEndPoint, cmock_retval)
void eARPGetCacheEntry_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t* pulIPAddress, MACAddress_t* const pxMACAddress, struct xNetworkEndPoint** ppxEndPoint, eARPLookupResult_t cmock_to_return);
typedef eARPLookupResult_t (* CMOCK_eARPGetCacheEntry_CALLBACK)(uint32_t* pulIPAddress, MACAddress_t* const pxMACAddress, struct xNetworkEndPoint** ppxEndPoint, int cmock_num_calls);
void eARPGetCacheEntry_AddCallback(CMOCK_eARPGetCacheEntry_CALLBACK Callback);
void eARPGetCacheEntry_Stub(CMOCK_eARPGetCacheEntry_CALLBACK Callback);
#define eARPGetCacheEntry_StubWithCallback eARPGetCacheEntry_Stub
#define eARPGetCacheEntry_ExpectWithArrayAndReturn(pulIPAddress, pulIPAddress_Depth, pxMACAddress, pxMACAddress_Depth, ppxEndPoint, ppxEndPoint_Depth, cmock_retval) eARPGetCacheEntry_CMockExpectWithArrayAndReturn(__LINE__, pulIPAddress, pulIPAddress_Depth, pxMACAddress, pxMACAddress_Depth, ppxEndPoint, ppxEndPoint_Depth, cmock_retval)
void eARPGetCacheEntry_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t* pulIPAddress, int pulIPAddress_Depth, MACAddress_t* const pxMACAddress, int pxMACAddress_Depth, struct xNetworkEndPoint** ppxEndPoint, int ppxEndPoint_Depth, eARPLookupResult_t cmock_to_return);
#define eARPGetCacheEntry_ReturnThruPtr_pulIPAddress(pulIPAddress) eARPGetCacheEntry_CMockReturnMemThruPtr_pulIPAddress(__LINE__, pulIPAddress, sizeof(uint32_t))
#define eARPGetCacheEntry_ReturnArrayThruPtr_pulIPAddress(pulIPAddress, cmock_len) eARPGetCacheEntry_CMockReturnMemThruPtr_pulIPAddress(__LINE__, pulIPAddress, (int)(cmock_len * (int)sizeof(*pulIPAddress)))
#define eARPGetCacheEntry_ReturnMemThruPtr_pulIPAddress(pulIPAddress, cmock_size) eARPGetCacheEntry_CMockReturnMemThruPtr_pulIPAddress(__LINE__, pulIPAddress, cmock_size)
void eARPGetCacheEntry_CMockReturnMemThruPtr_pulIPAddress(UNITY_LINE_TYPE cmock_line, uint32_t* pulIPAddress, int cmock_size);
#define eARPGetCacheEntry_ReturnThruPtr_pxMACAddress(pxMACAddress) eARPGetCacheEntry_CMockReturnMemThruPtr_pxMACAddress(__LINE__, pxMACAddress, sizeof(MACAddress_t))
#define eARPGetCacheEntry_ReturnArrayThruPtr_pxMACAddress(pxMACAddress, cmock_len) eARPGetCacheEntry_CMockReturnMemThruPtr_pxMACAddress(__LINE__, pxMACAddress, (int)(cmock_len * (int)sizeof(*pxMACAddress)))
#define eARPGetCacheEntry_ReturnMemThruPtr_pxMACAddress(pxMACAddress, cmock_size) eARPGetCacheEntry_CMockReturnMemThruPtr_pxMACAddress(__LINE__, pxMACAddress, cmock_size)
void eARPGetCacheEntry_CMockReturnMemThruPtr_pxMACAddress(UNITY_LINE_TYPE cmock_line, MACAddress_t* pxMACAddress, int cmock_size);
#define eARPGetCacheEntry_ReturnThruPtr_ppxEndPoint(ppxEndPoint) eARPGetCacheEntry_CMockReturnMemThruPtr_ppxEndPoint(__LINE__, ppxEndPoint, sizeof(struct xNetworkEndPoint*))
#define eARPGetCacheEntry_ReturnArrayThruPtr_ppxEndPoint(ppxEndPoint, cmock_len) eARPGetCacheEntry_CMockReturnMemThruPtr_ppxEndPoint(__LINE__, ppxEndPoint, (int)(cmock_len * (int)sizeof(*ppxEndPoint)))
#define eARPGetCacheEntry_ReturnMemThruPtr_ppxEndPoint(ppxEndPoint, cmock_size) eARPGetCacheEntry_CMockReturnMemThruPtr_ppxEndPoint(__LINE__, ppxEndPoint, cmock_size)
void eARPGetCacheEntry_CMockReturnMemThruPtr_ppxEndPoint(UNITY_LINE_TYPE cmock_line, struct xNetworkEndPoint** ppxEndPoint, int cmock_size);
#define eARPGetCacheEntry_IgnoreArg_pulIPAddress() eARPGetCacheEntry_CMockIgnoreArg_pulIPAddress(__LINE__)
void eARPGetCacheEntry_CMockIgnoreArg_pulIPAddress(UNITY_LINE_TYPE cmock_line);
#define eARPGetCacheEntry_IgnoreArg_pxMACAddress() eARPGetCacheEntry_CMockIgnoreArg_pxMACAddress(__LINE__)
void eARPGetCacheEntry_CMockIgnoreArg_pxMACAddress(UNITY_LINE_TYPE cmock_line);
#define eARPGetCacheEntry_IgnoreArg_ppxEndPoint() eARPGetCacheEntry_CMockIgnoreArg_ppxEndPoint(__LINE__)
void eARPGetCacheEntry_CMockIgnoreArg_ppxEndPoint(UNITY_LINE_TYPE cmock_line);
#define eARPGetCacheEntryByMac_IgnoreAndReturn(cmock_retval) eARPGetCacheEntryByMac_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eARPGetCacheEntryByMac_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eARPLookupResult_t cmock_to_return);
#define eARPGetCacheEntryByMac_StopIgnore() eARPGetCacheEntryByMac_CMockStopIgnore()
void eARPGetCacheEntryByMac_CMockStopIgnore(void);
#define eARPGetCacheEntryByMac_ExpectAnyArgsAndReturn(cmock_retval) eARPGetCacheEntryByMac_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eARPGetCacheEntryByMac_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eARPLookupResult_t cmock_to_return);
#define eARPGetCacheEntryByMac_ExpectAndReturn(pxMACAddress, pulIPAddress, ppxInterface, cmock_retval) eARPGetCacheEntryByMac_CMockExpectAndReturn(__LINE__, pxMACAddress, pulIPAddress, ppxInterface, cmock_retval)
void eARPGetCacheEntryByMac_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const MACAddress_t* const pxMACAddress, uint32_t* pulIPAddress, struct xNetworkInterface** ppxInterface, eARPLookupResult_t cmock_to_return);
typedef eARPLookupResult_t (* CMOCK_eARPGetCacheEntryByMac_CALLBACK)(const MACAddress_t* const pxMACAddress, uint32_t* pulIPAddress, struct xNetworkInterface** ppxInterface, int cmock_num_calls);
void eARPGetCacheEntryByMac_AddCallback(CMOCK_eARPGetCacheEntryByMac_CALLBACK Callback);
void eARPGetCacheEntryByMac_Stub(CMOCK_eARPGetCacheEntryByMac_CALLBACK Callback);
#define eARPGetCacheEntryByMac_StubWithCallback eARPGetCacheEntryByMac_Stub
#define eARPGetCacheEntryByMac_ExpectWithArrayAndReturn(pxMACAddress, pxMACAddress_Depth, pulIPAddress, pulIPAddress_Depth, ppxInterface, ppxInterface_Depth, cmock_retval) eARPGetCacheEntryByMac_CMockExpectWithArrayAndReturn(__LINE__, pxMACAddress, pxMACAddress_Depth, pulIPAddress, pulIPAddress_Depth, ppxInterface, ppxInterface_Depth, cmock_retval)
void eARPGetCacheEntryByMac_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const MACAddress_t* const pxMACAddress, int pxMACAddress_Depth, uint32_t* pulIPAddress, int pulIPAddress_Depth, struct xNetworkInterface** ppxInterface, int ppxInterface_Depth, eARPLookupResult_t cmock_to_return);
#define eARPGetCacheEntryByMac_ReturnThruPtr_pulIPAddress(pulIPAddress) eARPGetCacheEntryByMac_CMockReturnMemThruPtr_pulIPAddress(__LINE__, pulIPAddress, sizeof(uint32_t))
#define eARPGetCacheEntryByMac_ReturnArrayThruPtr_pulIPAddress(pulIPAddress, cmock_len) eARPGetCacheEntryByMac_CMockReturnMemThruPtr_pulIPAddress(__LINE__, pulIPAddress, (int)(cmock_len * (int)sizeof(*pulIPAddress)))
#define eARPGetCacheEntryByMac_ReturnMemThruPtr_pulIPAddress(pulIPAddress, cmock_size) eARPGetCacheEntryByMac_CMockReturnMemThruPtr_pulIPAddress(__LINE__, pulIPAddress, cmock_size)
void eARPGetCacheEntryByMac_CMockReturnMemThruPtr_pulIPAddress(UNITY_LINE_TYPE cmock_line, uint32_t* pulIPAddress, int cmock_size);
#define eARPGetCacheEntryByMac_ReturnThruPtr_ppxInterface(ppxInterface) eARPGetCacheEntryByMac_CMockReturnMemThruPtr_ppxInterface(__LINE__, ppxInterface, sizeof(struct xNetworkInterface*))
#define eARPGetCacheEntryByMac_ReturnArrayThruPtr_ppxInterface(ppxInterface, cmock_len) eARPGetCacheEntryByMac_CMockReturnMemThruPtr_ppxInterface(__LINE__, ppxInterface, (int)(cmock_len * (int)sizeof(*ppxInterface)))
#define eARPGetCacheEntryByMac_ReturnMemThruPtr_ppxInterface(ppxInterface, cmock_size) eARPGetCacheEntryByMac_CMockReturnMemThruPtr_ppxInterface(__LINE__, ppxInterface, cmock_size)
void eARPGetCacheEntryByMac_CMockReturnMemThruPtr_ppxInterface(UNITY_LINE_TYPE cmock_line, struct xNetworkInterface** ppxInterface, int cmock_size);
#define eARPGetCacheEntryByMac_IgnoreArg_pxMACAddress() eARPGetCacheEntryByMac_CMockIgnoreArg_pxMACAddress(__LINE__)
void eARPGetCacheEntryByMac_CMockIgnoreArg_pxMACAddress(UNITY_LINE_TYPE cmock_line);
#define eARPGetCacheEntryByMac_IgnoreArg_pulIPAddress() eARPGetCacheEntryByMac_CMockIgnoreArg_pulIPAddress(__LINE__)
void eARPGetCacheEntryByMac_CMockIgnoreArg_pulIPAddress(UNITY_LINE_TYPE cmock_line);
#define eARPGetCacheEntryByMac_IgnoreArg_ppxInterface() eARPGetCacheEntryByMac_CMockIgnoreArg_ppxInterface(__LINE__)
void eARPGetCacheEntryByMac_CMockIgnoreArg_ppxInterface(UNITY_LINE_TYPE cmock_line);
#define vARPAgeCache_Ignore() vARPAgeCache_CMockIgnore()
void vARPAgeCache_CMockIgnore(void);
#define vARPAgeCache_StopIgnore() vARPAgeCache_CMockStopIgnore()
void vARPAgeCache_CMockStopIgnore(void);
#define vARPAgeCache_Expect() vARPAgeCache_CMockExpect(__LINE__)
void vARPAgeCache_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_vARPAgeCache_CALLBACK)(int cmock_num_calls);
void vARPAgeCache_AddCallback(CMOCK_vARPAgeCache_CALLBACK Callback);
void vARPAgeCache_Stub(CMOCK_vARPAgeCache_CALLBACK Callback);
#define vARPAgeCache_StubWithCallback vARPAgeCache_Stub
#define vARPGenerateRequestPacket_Ignore() vARPGenerateRequestPacket_CMockIgnore()
void vARPGenerateRequestPacket_CMockIgnore(void);
#define vARPGenerateRequestPacket_StopIgnore() vARPGenerateRequestPacket_CMockStopIgnore()
void vARPGenerateRequestPacket_CMockStopIgnore(void);
#define vARPGenerateRequestPacket_ExpectAnyArgs() vARPGenerateRequestPacket_CMockExpectAnyArgs(__LINE__)
void vARPGenerateRequestPacket_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vARPGenerateRequestPacket_Expect(pxNetworkBuffer) vARPGenerateRequestPacket_CMockExpect(__LINE__, pxNetworkBuffer)
void vARPGenerateRequestPacket_CMockExpect(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* const pxNetworkBuffer);
typedef void (* CMOCK_vARPGenerateRequestPacket_CALLBACK)(NetworkBufferDescriptor_t* const pxNetworkBuffer, int cmock_num_calls);
void vARPGenerateRequestPacket_AddCallback(CMOCK_vARPGenerateRequestPacket_CALLBACK Callback);
void vARPGenerateRequestPacket_Stub(CMOCK_vARPGenerateRequestPacket_CALLBACK Callback);
#define vARPGenerateRequestPacket_StubWithCallback vARPGenerateRequestPacket_Stub
#define vARPGenerateRequestPacket_ExpectWithArray(pxNetworkBuffer, pxNetworkBuffer_Depth) vARPGenerateRequestPacket_CMockExpectWithArray(__LINE__, pxNetworkBuffer, pxNetworkBuffer_Depth)
void vARPGenerateRequestPacket_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* const pxNetworkBuffer, int pxNetworkBuffer_Depth);
#define vARPGenerateRequestPacket_ReturnThruPtr_pxNetworkBuffer(pxNetworkBuffer) vARPGenerateRequestPacket_CMockReturnMemThruPtr_pxNetworkBuffer(__LINE__, pxNetworkBuffer, sizeof(NetworkBufferDescriptor_t))
#define vARPGenerateRequestPacket_ReturnArrayThruPtr_pxNetworkBuffer(pxNetworkBuffer, cmock_len) vARPGenerateRequestPacket_CMockReturnMemThruPtr_pxNetworkBuffer(__LINE__, pxNetworkBuffer, (int)(cmock_len * (int)sizeof(*pxNetworkBuffer)))
#define vARPGenerateRequestPacket_ReturnMemThruPtr_pxNetworkBuffer(pxNetworkBuffer, cmock_size) vARPGenerateRequestPacket_CMockReturnMemThruPtr_pxNetworkBuffer(__LINE__, pxNetworkBuffer, cmock_size)
void vARPGenerateRequestPacket_CMockReturnMemThruPtr_pxNetworkBuffer(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxNetworkBuffer, int cmock_size);
#define vARPGenerateRequestPacket_IgnoreArg_pxNetworkBuffer() vARPGenerateRequestPacket_CMockIgnoreArg_pxNetworkBuffer(__LINE__)
void vARPGenerateRequestPacket_CMockIgnoreArg_pxNetworkBuffer(UNITY_LINE_TYPE cmock_line);
#define vARPSendGratuitous_Ignore() vARPSendGratuitous_CMockIgnore()
void vARPSendGratuitous_CMockIgnore(void);
#define vARPSendGratuitous_StopIgnore() vARPSendGratuitous_CMockStopIgnore()
void vARPSendGratuitous_CMockStopIgnore(void);
#define vARPSendGratuitous_Expect() vARPSendGratuitous_CMockExpect(__LINE__)
void vARPSendGratuitous_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_vARPSendGratuitous_CALLBACK)(int cmock_num_calls);
void vARPSendGratuitous_AddCallback(CMOCK_vARPSendGratuitous_CALLBACK Callback);
void vARPSendGratuitous_Stub(CMOCK_vARPSendGratuitous_CALLBACK Callback);
#define vARPSendGratuitous_StubWithCallback vARPSendGratuitous_Stub
#define xCheckLoopback_IgnoreAndReturn(cmock_retval) xCheckLoopback_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xCheckLoopback_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xCheckLoopback_StopIgnore() xCheckLoopback_CMockStopIgnore()
void xCheckLoopback_CMockStopIgnore(void);
#define xCheckLoopback_ExpectAnyArgsAndReturn(cmock_retval) xCheckLoopback_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xCheckLoopback_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xCheckLoopback_ExpectAndReturn(pxDescriptor, bReleaseAfterSend, cmock_retval) xCheckLoopback_CMockExpectAndReturn(__LINE__, pxDescriptor, bReleaseAfterSend, cmock_retval)
void xCheckLoopback_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* const pxDescriptor, BaseType_t bReleaseAfterSend, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xCheckLoopback_CALLBACK)(NetworkBufferDescriptor_t* const pxDescriptor, BaseType_t bReleaseAfterSend, int cmock_num_calls);
void xCheckLoopback_AddCallback(CMOCK_xCheckLoopback_CALLBACK Callback);
void xCheckLoopback_Stub(CMOCK_xCheckLoopback_CALLBACK Callback);
#define xCheckLoopback_StubWithCallback xCheckLoopback_Stub
#define xCheckLoopback_ExpectWithArrayAndReturn(pxDescriptor, pxDescriptor_Depth, bReleaseAfterSend, cmock_retval) xCheckLoopback_CMockExpectWithArrayAndReturn(__LINE__, pxDescriptor, pxDescriptor_Depth, bReleaseAfterSend, cmock_retval)
void xCheckLoopback_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* const pxDescriptor, int pxDescriptor_Depth, BaseType_t bReleaseAfterSend, BaseType_t cmock_to_return);
#define xCheckLoopback_ReturnThruPtr_pxDescriptor(pxDescriptor) xCheckLoopback_CMockReturnMemThruPtr_pxDescriptor(__LINE__, pxDescriptor, sizeof(NetworkBufferDescriptor_t))
#define xCheckLoopback_ReturnArrayThruPtr_pxDescriptor(pxDescriptor, cmock_len) xCheckLoopback_CMockReturnMemThruPtr_pxDescriptor(__LINE__, pxDescriptor, (int)(cmock_len * (int)sizeof(*pxDescriptor)))
#define xCheckLoopback_ReturnMemThruPtr_pxDescriptor(pxDescriptor, cmock_size) xCheckLoopback_CMockReturnMemThruPtr_pxDescriptor(__LINE__, pxDescriptor, cmock_size)
void xCheckLoopback_CMockReturnMemThruPtr_pxDescriptor(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxDescriptor, int cmock_size);
#define xCheckLoopback_IgnoreArg_pxDescriptor() xCheckLoopback_CMockIgnoreArg_pxDescriptor(__LINE__)
void xCheckLoopback_CMockIgnoreArg_pxDescriptor(UNITY_LINE_TYPE cmock_line);
#define xCheckLoopback_IgnoreArg_bReleaseAfterSend() xCheckLoopback_CMockIgnoreArg_bReleaseAfterSend(__LINE__)
void xCheckLoopback_CMockIgnoreArg_bReleaseAfterSend(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_OutputARPRequest_Ignore() FreeRTOS_OutputARPRequest_CMockIgnore()
void FreeRTOS_OutputARPRequest_CMockIgnore(void);
#define FreeRTOS_OutputARPRequest_StopIgnore() FreeRTOS_OutputARPRequest_CMockStopIgnore()
void FreeRTOS_OutputARPRequest_CMockStopIgnore(void);
#define FreeRTOS_OutputARPRequest_ExpectAnyArgs() FreeRTOS_OutputARPRequest_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_OutputARPRequest_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_OutputARPRequest_Expect(ulIPAddress) FreeRTOS_OutputARPRequest_CMockExpect(__LINE__, ulIPAddress)
void FreeRTOS_OutputARPRequest_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ulIPAddress);
typedef void (* CMOCK_FreeRTOS_OutputARPRequest_CALLBACK)(uint32_t ulIPAddress, int cmock_num_calls);
void FreeRTOS_OutputARPRequest_AddCallback(CMOCK_FreeRTOS_OutputARPRequest_CALLBACK Callback);
void FreeRTOS_OutputARPRequest_Stub(CMOCK_FreeRTOS_OutputARPRequest_CALLBACK Callback);
#define FreeRTOS_OutputARPRequest_StubWithCallback FreeRTOS_OutputARPRequest_Stub
#define FreeRTOS_OutputARPRequest_IgnoreArg_ulIPAddress() FreeRTOS_OutputARPRequest_CMockIgnoreArg_ulIPAddress(__LINE__)
void FreeRTOS_OutputARPRequest_CMockIgnoreArg_ulIPAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_ClearARP_Ignore() FreeRTOS_ClearARP_CMockIgnore()
void FreeRTOS_ClearARP_CMockIgnore(void);
#define FreeRTOS_ClearARP_StopIgnore() FreeRTOS_ClearARP_CMockStopIgnore()
void FreeRTOS_ClearARP_CMockStopIgnore(void);
#define FreeRTOS_ClearARP_ExpectAnyArgs() FreeRTOS_ClearARP_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_ClearARP_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_ClearARP_Expect(pxEndPoint) FreeRTOS_ClearARP_CMockExpect(__LINE__, pxEndPoint)
void FreeRTOS_ClearARP_CMockExpect(UNITY_LINE_TYPE cmock_line, const struct xNetworkEndPoint* pxEndPoint);
typedef void (* CMOCK_FreeRTOS_ClearARP_CALLBACK)(const struct xNetworkEndPoint* pxEndPoint, int cmock_num_calls);
void FreeRTOS_ClearARP_AddCallback(CMOCK_FreeRTOS_ClearARP_CALLBACK Callback);
void FreeRTOS_ClearARP_Stub(CMOCK_FreeRTOS_ClearARP_CALLBACK Callback);
#define FreeRTOS_ClearARP_StubWithCallback FreeRTOS_ClearARP_Stub
#define FreeRTOS_ClearARP_ExpectWithArray(pxEndPoint, pxEndPoint_Depth) FreeRTOS_ClearARP_CMockExpectWithArray(__LINE__, pxEndPoint, pxEndPoint_Depth)
void FreeRTOS_ClearARP_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, const struct xNetworkEndPoint* pxEndPoint, int pxEndPoint_Depth);
#define FreeRTOS_ClearARP_IgnoreArg_pxEndPoint() FreeRTOS_ClearARP_CMockIgnoreArg_pxEndPoint(__LINE__)
void FreeRTOS_ClearARP_CMockIgnoreArg_pxEndPoint(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
