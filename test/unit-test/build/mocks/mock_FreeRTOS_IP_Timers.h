/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_FREERTOS_IP_TIMERS_H
#define _MOCK_FREERTOS_IP_TIMERS_H

#include "unity.h"
#include <stdbool.h>
#include <stdint.h>
#include <fcntl.h>
#include <unity.h>
#include "FreeRTOS.h"
#include "FreeRTOS_IP.h"
#include "FreeRTOS_IP_Timers.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_FreeRTOS_IP_Timers_Init(void);
void mock_FreeRTOS_IP_Timers_Destroy(void);
void mock_FreeRTOS_IP_Timers_Verify(void);




#define vCheckNetworkTimers_Ignore() vCheckNetworkTimers_CMockIgnore()
void vCheckNetworkTimers_CMockIgnore(void);
#define vCheckNetworkTimers_StopIgnore() vCheckNetworkTimers_CMockStopIgnore()
void vCheckNetworkTimers_CMockStopIgnore(void);
#define vCheckNetworkTimers_Expect() vCheckNetworkTimers_CMockExpect(__LINE__)
void vCheckNetworkTimers_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_vCheckNetworkTimers_CALLBACK)(int cmock_num_calls);
void vCheckNetworkTimers_AddCallback(CMOCK_vCheckNetworkTimers_CALLBACK Callback);
void vCheckNetworkTimers_Stub(CMOCK_vCheckNetworkTimers_CALLBACK Callback);
#define vCheckNetworkTimers_StubWithCallback vCheckNetworkTimers_Stub
#define xCalculateSleepTime_IgnoreAndReturn(cmock_retval) xCalculateSleepTime_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xCalculateSleepTime_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TickType_t cmock_to_return);
#define xCalculateSleepTime_StopIgnore() xCalculateSleepTime_CMockStopIgnore()
void xCalculateSleepTime_CMockStopIgnore(void);
#define xCalculateSleepTime_ExpectAndReturn(cmock_retval) xCalculateSleepTime_CMockExpectAndReturn(__LINE__, cmock_retval)
void xCalculateSleepTime_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TickType_t cmock_to_return);
typedef TickType_t (* CMOCK_xCalculateSleepTime_CALLBACK)(int cmock_num_calls);
void xCalculateSleepTime_AddCallback(CMOCK_xCalculateSleepTime_CALLBACK Callback);
void xCalculateSleepTime_Stub(CMOCK_xCalculateSleepTime_CALLBACK Callback);
#define xCalculateSleepTime_StubWithCallback xCalculateSleepTime_Stub
#define vIPTimerStartARPResolution_Ignore() vIPTimerStartARPResolution_CMockIgnore()
void vIPTimerStartARPResolution_CMockIgnore(void);
#define vIPTimerStartARPResolution_StopIgnore() vIPTimerStartARPResolution_CMockStopIgnore()
void vIPTimerStartARPResolution_CMockStopIgnore(void);
#define vIPTimerStartARPResolution_ExpectAnyArgs() vIPTimerStartARPResolution_CMockExpectAnyArgs(__LINE__)
void vIPTimerStartARPResolution_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vIPTimerStartARPResolution_Expect(xTime) vIPTimerStartARPResolution_CMockExpect(__LINE__, xTime)
void vIPTimerStartARPResolution_CMockExpect(UNITY_LINE_TYPE cmock_line, TickType_t xTime);
typedef void (* CMOCK_vIPTimerStartARPResolution_CALLBACK)(TickType_t xTime, int cmock_num_calls);
void vIPTimerStartARPResolution_AddCallback(CMOCK_vIPTimerStartARPResolution_CALLBACK Callback);
void vIPTimerStartARPResolution_Stub(CMOCK_vIPTimerStartARPResolution_CALLBACK Callback);
#define vIPTimerStartARPResolution_StubWithCallback vIPTimerStartARPResolution_Stub
#define vIPTimerStartARPResolution_IgnoreArg_xTime() vIPTimerStartARPResolution_CMockIgnoreArg_xTime(__LINE__)
void vIPTimerStartARPResolution_CMockIgnoreArg_xTime(UNITY_LINE_TYPE cmock_line);
#define vIPSetTCPTimerExpiredState_Ignore() vIPSetTCPTimerExpiredState_CMockIgnore()
void vIPSetTCPTimerExpiredState_CMockIgnore(void);
#define vIPSetTCPTimerExpiredState_StopIgnore() vIPSetTCPTimerExpiredState_CMockStopIgnore()
void vIPSetTCPTimerExpiredState_CMockStopIgnore(void);
#define vIPSetTCPTimerExpiredState_ExpectAnyArgs() vIPSetTCPTimerExpiredState_CMockExpectAnyArgs(__LINE__)
void vIPSetTCPTimerExpiredState_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vIPSetTCPTimerExpiredState_Expect(xExpiredState) vIPSetTCPTimerExpiredState_CMockExpect(__LINE__, xExpiredState)
void vIPSetTCPTimerExpiredState_CMockExpect(UNITY_LINE_TYPE cmock_line, BaseType_t xExpiredState);
typedef void (* CMOCK_vIPSetTCPTimerExpiredState_CALLBACK)(BaseType_t xExpiredState, int cmock_num_calls);
void vIPSetTCPTimerExpiredState_AddCallback(CMOCK_vIPSetTCPTimerExpiredState_CALLBACK Callback);
void vIPSetTCPTimerExpiredState_Stub(CMOCK_vIPSetTCPTimerExpiredState_CALLBACK Callback);
#define vIPSetTCPTimerExpiredState_StubWithCallback vIPSetTCPTimerExpiredState_Stub
#define vIPSetTCPTimerExpiredState_IgnoreArg_xExpiredState() vIPSetTCPTimerExpiredState_CMockIgnoreArg_xExpiredState(__LINE__)
void vIPSetTCPTimerExpiredState_CMockIgnoreArg_xExpiredState(UNITY_LINE_TYPE cmock_line);
#define vIPSetARPTimerEnableState_Ignore() vIPSetARPTimerEnableState_CMockIgnore()
void vIPSetARPTimerEnableState_CMockIgnore(void);
#define vIPSetARPTimerEnableState_StopIgnore() vIPSetARPTimerEnableState_CMockStopIgnore()
void vIPSetARPTimerEnableState_CMockStopIgnore(void);
#define vIPSetARPTimerEnableState_ExpectAnyArgs() vIPSetARPTimerEnableState_CMockExpectAnyArgs(__LINE__)
void vIPSetARPTimerEnableState_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vIPSetARPTimerEnableState_Expect(xEnableState) vIPSetARPTimerEnableState_CMockExpect(__LINE__, xEnableState)
void vIPSetARPTimerEnableState_CMockExpect(UNITY_LINE_TYPE cmock_line, BaseType_t xEnableState);
typedef void (* CMOCK_vIPSetARPTimerEnableState_CALLBACK)(BaseType_t xEnableState, int cmock_num_calls);
void vIPSetARPTimerEnableState_AddCallback(CMOCK_vIPSetARPTimerEnableState_CALLBACK Callback);
void vIPSetARPTimerEnableState_Stub(CMOCK_vIPSetARPTimerEnableState_CALLBACK Callback);
#define vIPSetARPTimerEnableState_StubWithCallback vIPSetARPTimerEnableState_Stub
#define vIPSetARPTimerEnableState_IgnoreArg_xEnableState() vIPSetARPTimerEnableState_CMockIgnoreArg_xEnableState(__LINE__)
void vIPSetARPTimerEnableState_CMockIgnoreArg_xEnableState(UNITY_LINE_TYPE cmock_line);
#define vIPSetARPResolutionTimerEnableState_Ignore() vIPSetARPResolutionTimerEnableState_CMockIgnore()
void vIPSetARPResolutionTimerEnableState_CMockIgnore(void);
#define vIPSetARPResolutionTimerEnableState_StopIgnore() vIPSetARPResolutionTimerEnableState_CMockStopIgnore()
void vIPSetARPResolutionTimerEnableState_CMockStopIgnore(void);
#define vIPSetARPResolutionTimerEnableState_ExpectAnyArgs() vIPSetARPResolutionTimerEnableState_CMockExpectAnyArgs(__LINE__)
void vIPSetARPResolutionTimerEnableState_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vIPSetARPResolutionTimerEnableState_Expect(xEnableState) vIPSetARPResolutionTimerEnableState_CMockExpect(__LINE__, xEnableState)
void vIPSetARPResolutionTimerEnableState_CMockExpect(UNITY_LINE_TYPE cmock_line, BaseType_t xEnableState);
typedef void (* CMOCK_vIPSetARPResolutionTimerEnableState_CALLBACK)(BaseType_t xEnableState, int cmock_num_calls);
void vIPSetARPResolutionTimerEnableState_AddCallback(CMOCK_vIPSetARPResolutionTimerEnableState_CALLBACK Callback);
void vIPSetARPResolutionTimerEnableState_Stub(CMOCK_vIPSetARPResolutionTimerEnableState_CALLBACK Callback);
#define vIPSetARPResolutionTimerEnableState_StubWithCallback vIPSetARPResolutionTimerEnableState_Stub
#define vIPSetARPResolutionTimerEnableState_IgnoreArg_xEnableState() vIPSetARPResolutionTimerEnableState_CMockIgnoreArg_xEnableState(__LINE__)
void vIPSetARPResolutionTimerEnableState_CMockIgnoreArg_xEnableState(UNITY_LINE_TYPE cmock_line);
#define vIPSetDHCP_RATimerEnableState_Ignore() vIPSetDHCP_RATimerEnableState_CMockIgnore()
void vIPSetDHCP_RATimerEnableState_CMockIgnore(void);
#define vIPSetDHCP_RATimerEnableState_StopIgnore() vIPSetDHCP_RATimerEnableState_CMockStopIgnore()
void vIPSetDHCP_RATimerEnableState_CMockStopIgnore(void);
#define vIPSetDHCP_RATimerEnableState_ExpectAnyArgs() vIPSetDHCP_RATimerEnableState_CMockExpectAnyArgs(__LINE__)
void vIPSetDHCP_RATimerEnableState_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vIPSetDHCP_RATimerEnableState_Expect(pxEndPoint, xEnableState) vIPSetDHCP_RATimerEnableState_CMockExpect(__LINE__, pxEndPoint, xEnableState)
void vIPSetDHCP_RATimerEnableState_CMockExpect(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* pxEndPoint, BaseType_t xEnableState);
typedef void (* CMOCK_vIPSetDHCP_RATimerEnableState_CALLBACK)(NetworkEndPoint_t* pxEndPoint, BaseType_t xEnableState, int cmock_num_calls);
void vIPSetDHCP_RATimerEnableState_AddCallback(CMOCK_vIPSetDHCP_RATimerEnableState_CALLBACK Callback);
void vIPSetDHCP_RATimerEnableState_Stub(CMOCK_vIPSetDHCP_RATimerEnableState_CALLBACK Callback);
#define vIPSetDHCP_RATimerEnableState_StubWithCallback vIPSetDHCP_RATimerEnableState_Stub
#define vIPSetDHCP_RATimerEnableState_ExpectWithArray(pxEndPoint, pxEndPoint_Depth, xEnableState) vIPSetDHCP_RATimerEnableState_CMockExpectWithArray(__LINE__, pxEndPoint, pxEndPoint_Depth, xEnableState)
void vIPSetDHCP_RATimerEnableState_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* pxEndPoint, int pxEndPoint_Depth, BaseType_t xEnableState);
#define vIPSetDHCP_RATimerEnableState_ReturnThruPtr_pxEndPoint(pxEndPoint) vIPSetDHCP_RATimerEnableState_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, sizeof(NetworkEndPoint_t))
#define vIPSetDHCP_RATimerEnableState_ReturnArrayThruPtr_pxEndPoint(pxEndPoint, cmock_len) vIPSetDHCP_RATimerEnableState_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, (int)(cmock_len * (int)sizeof(*pxEndPoint)))
#define vIPSetDHCP_RATimerEnableState_ReturnMemThruPtr_pxEndPoint(pxEndPoint, cmock_size) vIPSetDHCP_RATimerEnableState_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, cmock_size)
void vIPSetDHCP_RATimerEnableState_CMockReturnMemThruPtr_pxEndPoint(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* pxEndPoint, int cmock_size);
#define vIPSetDHCP_RATimerEnableState_IgnoreArg_pxEndPoint() vIPSetDHCP_RATimerEnableState_CMockIgnoreArg_pxEndPoint(__LINE__)
void vIPSetDHCP_RATimerEnableState_CMockIgnoreArg_pxEndPoint(UNITY_LINE_TYPE cmock_line);
#define vIPSetDHCP_RATimerEnableState_IgnoreArg_xEnableState() vIPSetDHCP_RATimerEnableState_CMockIgnoreArg_xEnableState(__LINE__)
void vIPSetDHCP_RATimerEnableState_CMockIgnoreArg_xEnableState(UNITY_LINE_TYPE cmock_line);
#define vIPSetDNSTimerEnableState_Ignore() vIPSetDNSTimerEnableState_CMockIgnore()
void vIPSetDNSTimerEnableState_CMockIgnore(void);
#define vIPSetDNSTimerEnableState_StopIgnore() vIPSetDNSTimerEnableState_CMockStopIgnore()
void vIPSetDNSTimerEnableState_CMockStopIgnore(void);
#define vIPSetDNSTimerEnableState_ExpectAnyArgs() vIPSetDNSTimerEnableState_CMockExpectAnyArgs(__LINE__)
void vIPSetDNSTimerEnableState_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vIPSetDNSTimerEnableState_Expect(xEnableState) vIPSetDNSTimerEnableState_CMockExpect(__LINE__, xEnableState)
void vIPSetDNSTimerEnableState_CMockExpect(UNITY_LINE_TYPE cmock_line, BaseType_t xEnableState);
typedef void (* CMOCK_vIPSetDNSTimerEnableState_CALLBACK)(BaseType_t xEnableState, int cmock_num_calls);
void vIPSetDNSTimerEnableState_AddCallback(CMOCK_vIPSetDNSTimerEnableState_CALLBACK Callback);
void vIPSetDNSTimerEnableState_Stub(CMOCK_vIPSetDNSTimerEnableState_CALLBACK Callback);
#define vIPSetDNSTimerEnableState_StubWithCallback vIPSetDNSTimerEnableState_Stub
#define vIPSetDNSTimerEnableState_IgnoreArg_xEnableState() vIPSetDNSTimerEnableState_CMockIgnoreArg_xEnableState(__LINE__)
void vIPSetDNSTimerEnableState_CMockIgnoreArg_xEnableState(UNITY_LINE_TYPE cmock_line);
#define vARPTimerReload_Ignore() vARPTimerReload_CMockIgnore()
void vARPTimerReload_CMockIgnore(void);
#define vARPTimerReload_StopIgnore() vARPTimerReload_CMockStopIgnore()
void vARPTimerReload_CMockStopIgnore(void);
#define vARPTimerReload_ExpectAnyArgs() vARPTimerReload_CMockExpectAnyArgs(__LINE__)
void vARPTimerReload_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vARPTimerReload_Expect(xTime) vARPTimerReload_CMockExpect(__LINE__, xTime)
void vARPTimerReload_CMockExpect(UNITY_LINE_TYPE cmock_line, TickType_t xTime);
typedef void (* CMOCK_vARPTimerReload_CALLBACK)(TickType_t xTime, int cmock_num_calls);
void vARPTimerReload_AddCallback(CMOCK_vARPTimerReload_CALLBACK Callback);
void vARPTimerReload_Stub(CMOCK_vARPTimerReload_CALLBACK Callback);
#define vARPTimerReload_StubWithCallback vARPTimerReload_Stub
#define vARPTimerReload_IgnoreArg_xTime() vARPTimerReload_CMockIgnoreArg_xTime(__LINE__)
void vARPTimerReload_CMockIgnoreArg_xTime(UNITY_LINE_TYPE cmock_line);
#define vTCPTimerReload_Ignore() vTCPTimerReload_CMockIgnore()
void vTCPTimerReload_CMockIgnore(void);
#define vTCPTimerReload_StopIgnore() vTCPTimerReload_CMockStopIgnore()
void vTCPTimerReload_CMockStopIgnore(void);
#define vTCPTimerReload_ExpectAnyArgs() vTCPTimerReload_CMockExpectAnyArgs(__LINE__)
void vTCPTimerReload_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTCPTimerReload_Expect(xTime) vTCPTimerReload_CMockExpect(__LINE__, xTime)
void vTCPTimerReload_CMockExpect(UNITY_LINE_TYPE cmock_line, TickType_t xTime);
typedef void (* CMOCK_vTCPTimerReload_CALLBACK)(TickType_t xTime, int cmock_num_calls);
void vTCPTimerReload_AddCallback(CMOCK_vTCPTimerReload_CALLBACK Callback);
void vTCPTimerReload_Stub(CMOCK_vTCPTimerReload_CALLBACK Callback);
#define vTCPTimerReload_StubWithCallback vTCPTimerReload_Stub
#define vTCPTimerReload_IgnoreArg_xTime() vTCPTimerReload_CMockIgnoreArg_xTime(__LINE__)
void vTCPTimerReload_CMockIgnoreArg_xTime(UNITY_LINE_TYPE cmock_line);
#define vDHCP_RATimerReload_Ignore() vDHCP_RATimerReload_CMockIgnore()
void vDHCP_RATimerReload_CMockIgnore(void);
#define vDHCP_RATimerReload_StopIgnore() vDHCP_RATimerReload_CMockStopIgnore()
void vDHCP_RATimerReload_CMockStopIgnore(void);
#define vDHCP_RATimerReload_ExpectAnyArgs() vDHCP_RATimerReload_CMockExpectAnyArgs(__LINE__)
void vDHCP_RATimerReload_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vDHCP_RATimerReload_Expect(pxEndPoint, uxClockTicks) vDHCP_RATimerReload_CMockExpect(__LINE__, pxEndPoint, uxClockTicks)
void vDHCP_RATimerReload_CMockExpect(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* pxEndPoint, TickType_t uxClockTicks);
typedef void (* CMOCK_vDHCP_RATimerReload_CALLBACK)(NetworkEndPoint_t* pxEndPoint, TickType_t uxClockTicks, int cmock_num_calls);
void vDHCP_RATimerReload_AddCallback(CMOCK_vDHCP_RATimerReload_CALLBACK Callback);
void vDHCP_RATimerReload_Stub(CMOCK_vDHCP_RATimerReload_CALLBACK Callback);
#define vDHCP_RATimerReload_StubWithCallback vDHCP_RATimerReload_Stub
#define vDHCP_RATimerReload_ExpectWithArray(pxEndPoint, pxEndPoint_Depth, uxClockTicks) vDHCP_RATimerReload_CMockExpectWithArray(__LINE__, pxEndPoint, pxEndPoint_Depth, uxClockTicks)
void vDHCP_RATimerReload_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* pxEndPoint, int pxEndPoint_Depth, TickType_t uxClockTicks);
#define vDHCP_RATimerReload_ReturnThruPtr_pxEndPoint(pxEndPoint) vDHCP_RATimerReload_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, sizeof(NetworkEndPoint_t))
#define vDHCP_RATimerReload_ReturnArrayThruPtr_pxEndPoint(pxEndPoint, cmock_len) vDHCP_RATimerReload_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, (int)(cmock_len * (int)sizeof(*pxEndPoint)))
#define vDHCP_RATimerReload_ReturnMemThruPtr_pxEndPoint(pxEndPoint, cmock_size) vDHCP_RATimerReload_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, cmock_size)
void vDHCP_RATimerReload_CMockReturnMemThruPtr_pxEndPoint(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* pxEndPoint, int cmock_size);
#define vDHCP_RATimerReload_IgnoreArg_pxEndPoint() vDHCP_RATimerReload_CMockIgnoreArg_pxEndPoint(__LINE__)
void vDHCP_RATimerReload_CMockIgnoreArg_pxEndPoint(UNITY_LINE_TYPE cmock_line);
#define vDHCP_RATimerReload_IgnoreArg_uxClockTicks() vDHCP_RATimerReload_CMockIgnoreArg_uxClockTicks(__LINE__)
void vDHCP_RATimerReload_CMockIgnoreArg_uxClockTicks(UNITY_LINE_TYPE cmock_line);
#define vDNSTimerReload_Ignore() vDNSTimerReload_CMockIgnore()
void vDNSTimerReload_CMockIgnore(void);
#define vDNSTimerReload_StopIgnore() vDNSTimerReload_CMockStopIgnore()
void vDNSTimerReload_CMockStopIgnore(void);
#define vDNSTimerReload_ExpectAnyArgs() vDNSTimerReload_CMockExpectAnyArgs(__LINE__)
void vDNSTimerReload_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vDNSTimerReload_Expect(ulCheckTime) vDNSTimerReload_CMockExpect(__LINE__, ulCheckTime)
void vDNSTimerReload_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ulCheckTime);
typedef void (* CMOCK_vDNSTimerReload_CALLBACK)(uint32_t ulCheckTime, int cmock_num_calls);
void vDNSTimerReload_AddCallback(CMOCK_vDNSTimerReload_CALLBACK Callback);
void vDNSTimerReload_Stub(CMOCK_vDNSTimerReload_CALLBACK Callback);
#define vDNSTimerReload_StubWithCallback vDNSTimerReload_Stub
#define vDNSTimerReload_IgnoreArg_ulCheckTime() vDNSTimerReload_CMockIgnoreArg_ulCheckTime(__LINE__)
void vDNSTimerReload_CMockIgnoreArg_ulCheckTime(UNITY_LINE_TYPE cmock_line);
#define vNetworkTimerReload_Ignore() vNetworkTimerReload_CMockIgnore()
void vNetworkTimerReload_CMockIgnore(void);
#define vNetworkTimerReload_StopIgnore() vNetworkTimerReload_CMockStopIgnore()
void vNetworkTimerReload_CMockStopIgnore(void);
#define vNetworkTimerReload_ExpectAnyArgs() vNetworkTimerReload_CMockExpectAnyArgs(__LINE__)
void vNetworkTimerReload_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vNetworkTimerReload_Expect(xTime) vNetworkTimerReload_CMockExpect(__LINE__, xTime)
void vNetworkTimerReload_CMockExpect(UNITY_LINE_TYPE cmock_line, TickType_t xTime);
typedef void (* CMOCK_vNetworkTimerReload_CALLBACK)(TickType_t xTime, int cmock_num_calls);
void vNetworkTimerReload_AddCallback(CMOCK_vNetworkTimerReload_CALLBACK Callback);
void vNetworkTimerReload_Stub(CMOCK_vNetworkTimerReload_CALLBACK Callback);
#define vNetworkTimerReload_StubWithCallback vNetworkTimerReload_Stub
#define vNetworkTimerReload_IgnoreArg_xTime() vNetworkTimerReload_CMockIgnoreArg_xTime(__LINE__)
void vNetworkTimerReload_CMockIgnoreArg_xTime(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
