/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_FREERTOS_DNS_H
#define _MOCK_FREERTOS_DNS_H

#include "unity.h"
#include <stdbool.h>
#include <stdint.h>
#include <fcntl.h>
#include <unity.h>
#include "FreeRTOS.h"
#include "FreeRTOS_IP.h"
#include "FreeRTOS_DNS.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_FreeRTOS_DNS_Init(void);
void mock_FreeRTOS_DNS_Destroy(void);
void mock_FreeRTOS_DNS_Verify(void);




#define ulDNSHandlePacket_IgnoreAndReturn(cmock_retval) ulDNSHandlePacket_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ulDNSHandlePacket_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulDNSHandlePacket_StopIgnore() ulDNSHandlePacket_CMockStopIgnore()
void ulDNSHandlePacket_CMockStopIgnore(void);
#define ulDNSHandlePacket_ExpectAnyArgsAndReturn(cmock_retval) ulDNSHandlePacket_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ulDNSHandlePacket_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulDNSHandlePacket_ExpectAndReturn(pxNetworkBuffer, cmock_retval) ulDNSHandlePacket_CMockExpectAndReturn(__LINE__, pxNetworkBuffer, cmock_retval)
void ulDNSHandlePacket_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkBufferDescriptor_t* pxNetworkBuffer, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_ulDNSHandlePacket_CALLBACK)(const NetworkBufferDescriptor_t* pxNetworkBuffer, int cmock_num_calls);
void ulDNSHandlePacket_AddCallback(CMOCK_ulDNSHandlePacket_CALLBACK Callback);
void ulDNSHandlePacket_Stub(CMOCK_ulDNSHandlePacket_CALLBACK Callback);
#define ulDNSHandlePacket_StubWithCallback ulDNSHandlePacket_Stub
#define ulDNSHandlePacket_ExpectWithArrayAndReturn(pxNetworkBuffer, pxNetworkBuffer_Depth, cmock_retval) ulDNSHandlePacket_CMockExpectWithArrayAndReturn(__LINE__, pxNetworkBuffer, pxNetworkBuffer_Depth, cmock_retval)
void ulDNSHandlePacket_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkBufferDescriptor_t* pxNetworkBuffer, int pxNetworkBuffer_Depth, uint32_t cmock_to_return);
#define ulDNSHandlePacket_IgnoreArg_pxNetworkBuffer() ulDNSHandlePacket_CMockIgnoreArg_pxNetworkBuffer(__LINE__)
void ulDNSHandlePacket_CMockIgnoreArg_pxNetworkBuffer(UNITY_LINE_TYPE cmock_line);
#define ulNBNSHandlePacket_IgnoreAndReturn(cmock_retval) ulNBNSHandlePacket_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ulNBNSHandlePacket_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulNBNSHandlePacket_StopIgnore() ulNBNSHandlePacket_CMockStopIgnore()
void ulNBNSHandlePacket_CMockStopIgnore(void);
#define ulNBNSHandlePacket_ExpectAnyArgsAndReturn(cmock_retval) ulNBNSHandlePacket_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ulNBNSHandlePacket_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulNBNSHandlePacket_ExpectAndReturn(pxNetworkBuffer, cmock_retval) ulNBNSHandlePacket_CMockExpectAndReturn(__LINE__, pxNetworkBuffer, cmock_retval)
void ulNBNSHandlePacket_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxNetworkBuffer, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_ulNBNSHandlePacket_CALLBACK)(NetworkBufferDescriptor_t* pxNetworkBuffer, int cmock_num_calls);
void ulNBNSHandlePacket_AddCallback(CMOCK_ulNBNSHandlePacket_CALLBACK Callback);
void ulNBNSHandlePacket_Stub(CMOCK_ulNBNSHandlePacket_CALLBACK Callback);
#define ulNBNSHandlePacket_StubWithCallback ulNBNSHandlePacket_Stub
#define ulNBNSHandlePacket_ExpectWithArrayAndReturn(pxNetworkBuffer, pxNetworkBuffer_Depth, cmock_retval) ulNBNSHandlePacket_CMockExpectWithArrayAndReturn(__LINE__, pxNetworkBuffer, pxNetworkBuffer_Depth, cmock_retval)
void ulNBNSHandlePacket_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxNetworkBuffer, int pxNetworkBuffer_Depth, uint32_t cmock_to_return);
#define ulNBNSHandlePacket_ReturnThruPtr_pxNetworkBuffer(pxNetworkBuffer) ulNBNSHandlePacket_CMockReturnMemThruPtr_pxNetworkBuffer(__LINE__, pxNetworkBuffer, sizeof(NetworkBufferDescriptor_t))
#define ulNBNSHandlePacket_ReturnArrayThruPtr_pxNetworkBuffer(pxNetworkBuffer, cmock_len) ulNBNSHandlePacket_CMockReturnMemThruPtr_pxNetworkBuffer(__LINE__, pxNetworkBuffer, (int)(cmock_len * (int)sizeof(*pxNetworkBuffer)))
#define ulNBNSHandlePacket_ReturnMemThruPtr_pxNetworkBuffer(pxNetworkBuffer, cmock_size) ulNBNSHandlePacket_CMockReturnMemThruPtr_pxNetworkBuffer(__LINE__, pxNetworkBuffer, cmock_size)
void ulNBNSHandlePacket_CMockReturnMemThruPtr_pxNetworkBuffer(UNITY_LINE_TYPE cmock_line, NetworkBufferDescriptor_t* pxNetworkBuffer, int cmock_size);
#define ulNBNSHandlePacket_IgnoreArg_pxNetworkBuffer() ulNBNSHandlePacket_CMockIgnoreArg_pxNetworkBuffer(__LINE__)
void ulNBNSHandlePacket_CMockIgnoreArg_pxNetworkBuffer(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_gethostbyname_a_IgnoreAndReturn(cmock_retval) FreeRTOS_gethostbyname_a_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_gethostbyname_a_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define FreeRTOS_gethostbyname_a_StopIgnore() FreeRTOS_gethostbyname_a_CMockStopIgnore()
void FreeRTOS_gethostbyname_a_CMockStopIgnore(void);
#define FreeRTOS_gethostbyname_a_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_gethostbyname_a_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_gethostbyname_a_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define FreeRTOS_gethostbyname_a_ExpectAndReturn(pcHostName, pCallback, pvSearchID, uxTimeout, cmock_retval) FreeRTOS_gethostbyname_a_CMockExpectAndReturn(__LINE__, pcHostName, pCallback, pvSearchID, uxTimeout, cmock_retval)
void FreeRTOS_gethostbyname_a_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* pcHostName, FOnDNSEvent pCallback, void* pvSearchID, TickType_t uxTimeout, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_FreeRTOS_gethostbyname_a_CALLBACK)(const char* pcHostName, FOnDNSEvent pCallback, void* pvSearchID, TickType_t uxTimeout, int cmock_num_calls);
void FreeRTOS_gethostbyname_a_AddCallback(CMOCK_FreeRTOS_gethostbyname_a_CALLBACK Callback);
void FreeRTOS_gethostbyname_a_Stub(CMOCK_FreeRTOS_gethostbyname_a_CALLBACK Callback);
#define FreeRTOS_gethostbyname_a_StubWithCallback FreeRTOS_gethostbyname_a_Stub
#define FreeRTOS_gethostbyname_a_ExpectWithArrayAndReturn(pcHostName, pCallback, pvSearchID, pvSearchID_Depth, uxTimeout, cmock_retval) FreeRTOS_gethostbyname_a_CMockExpectWithArrayAndReturn(__LINE__, pcHostName, pCallback, pvSearchID, pvSearchID_Depth, uxTimeout, cmock_retval)
void FreeRTOS_gethostbyname_a_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const char* pcHostName, FOnDNSEvent pCallback, void* pvSearchID, int pvSearchID_Depth, TickType_t uxTimeout, uint32_t cmock_to_return);
#define FreeRTOS_gethostbyname_a_ReturnThruPtr_pvSearchID(pvSearchID) FreeRTOS_gethostbyname_a_CMockReturnMemThruPtr_pvSearchID(__LINE__, pvSearchID, sizeof(void))
#define FreeRTOS_gethostbyname_a_ReturnArrayThruPtr_pvSearchID(pvSearchID, cmock_len) FreeRTOS_gethostbyname_a_CMockReturnMemThruPtr_pvSearchID(__LINE__, pvSearchID, (int)(cmock_len * (int)sizeof(*pvSearchID)))
#define FreeRTOS_gethostbyname_a_ReturnMemThruPtr_pvSearchID(pvSearchID, cmock_size) FreeRTOS_gethostbyname_a_CMockReturnMemThruPtr_pvSearchID(__LINE__, pvSearchID, cmock_size)
void FreeRTOS_gethostbyname_a_CMockReturnMemThruPtr_pvSearchID(UNITY_LINE_TYPE cmock_line, void* pvSearchID, int cmock_size);
#define FreeRTOS_gethostbyname_a_IgnoreArg_pcHostName() FreeRTOS_gethostbyname_a_CMockIgnoreArg_pcHostName(__LINE__)
void FreeRTOS_gethostbyname_a_CMockIgnoreArg_pcHostName(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_gethostbyname_a_IgnoreArg_pCallback() FreeRTOS_gethostbyname_a_CMockIgnoreArg_pCallback(__LINE__)
void FreeRTOS_gethostbyname_a_CMockIgnoreArg_pCallback(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_gethostbyname_a_IgnoreArg_pvSearchID() FreeRTOS_gethostbyname_a_CMockIgnoreArg_pvSearchID(__LINE__)
void FreeRTOS_gethostbyname_a_CMockIgnoreArg_pvSearchID(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_gethostbyname_a_IgnoreArg_uxTimeout() FreeRTOS_gethostbyname_a_CMockIgnoreArg_uxTimeout(__LINE__)
void FreeRTOS_gethostbyname_a_CMockIgnoreArg_uxTimeout(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_gethostbyname_cancel_Ignore() FreeRTOS_gethostbyname_cancel_CMockIgnore()
void FreeRTOS_gethostbyname_cancel_CMockIgnore(void);
#define FreeRTOS_gethostbyname_cancel_StopIgnore() FreeRTOS_gethostbyname_cancel_CMockStopIgnore()
void FreeRTOS_gethostbyname_cancel_CMockStopIgnore(void);
#define FreeRTOS_gethostbyname_cancel_ExpectAnyArgs() FreeRTOS_gethostbyname_cancel_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_gethostbyname_cancel_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_gethostbyname_cancel_Expect(pvSearchID) FreeRTOS_gethostbyname_cancel_CMockExpect(__LINE__, pvSearchID)
void FreeRTOS_gethostbyname_cancel_CMockExpect(UNITY_LINE_TYPE cmock_line, void* pvSearchID);
typedef void (* CMOCK_FreeRTOS_gethostbyname_cancel_CALLBACK)(void* pvSearchID, int cmock_num_calls);
void FreeRTOS_gethostbyname_cancel_AddCallback(CMOCK_FreeRTOS_gethostbyname_cancel_CALLBACK Callback);
void FreeRTOS_gethostbyname_cancel_Stub(CMOCK_FreeRTOS_gethostbyname_cancel_CALLBACK Callback);
#define FreeRTOS_gethostbyname_cancel_StubWithCallback FreeRTOS_gethostbyname_cancel_Stub
#define FreeRTOS_gethostbyname_cancel_ExpectWithArray(pvSearchID, pvSearchID_Depth) FreeRTOS_gethostbyname_cancel_CMockExpectWithArray(__LINE__, pvSearchID, pvSearchID_Depth)
void FreeRTOS_gethostbyname_cancel_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void* pvSearchID, int pvSearchID_Depth);
#define FreeRTOS_gethostbyname_cancel_ReturnThruPtr_pvSearchID(pvSearchID) FreeRTOS_gethostbyname_cancel_CMockReturnMemThruPtr_pvSearchID(__LINE__, pvSearchID, sizeof(void))
#define FreeRTOS_gethostbyname_cancel_ReturnArrayThruPtr_pvSearchID(pvSearchID, cmock_len) FreeRTOS_gethostbyname_cancel_CMockReturnMemThruPtr_pvSearchID(__LINE__, pvSearchID, (int)(cmock_len * (int)sizeof(*pvSearchID)))
#define FreeRTOS_gethostbyname_cancel_ReturnMemThruPtr_pvSearchID(pvSearchID, cmock_size) FreeRTOS_gethostbyname_cancel_CMockReturnMemThruPtr_pvSearchID(__LINE__, pvSearchID, cmock_size)
void FreeRTOS_gethostbyname_cancel_CMockReturnMemThruPtr_pvSearchID(UNITY_LINE_TYPE cmock_line, void* pvSearchID, int cmock_size);
#define FreeRTOS_gethostbyname_cancel_IgnoreArg_pvSearchID() FreeRTOS_gethostbyname_cancel_CMockIgnoreArg_pvSearchID(__LINE__)
void FreeRTOS_gethostbyname_cancel_CMockIgnoreArg_pvSearchID(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_gethostbyname_IgnoreAndReturn(cmock_retval) FreeRTOS_gethostbyname_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_gethostbyname_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define FreeRTOS_gethostbyname_StopIgnore() FreeRTOS_gethostbyname_CMockStopIgnore()
void FreeRTOS_gethostbyname_CMockStopIgnore(void);
#define FreeRTOS_gethostbyname_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_gethostbyname_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_gethostbyname_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define FreeRTOS_gethostbyname_ExpectAndReturn(pcHostName, cmock_retval) FreeRTOS_gethostbyname_CMockExpectAndReturn(__LINE__, pcHostName, cmock_retval)
void FreeRTOS_gethostbyname_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* pcHostName, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_FreeRTOS_gethostbyname_CALLBACK)(const char* pcHostName, int cmock_num_calls);
void FreeRTOS_gethostbyname_AddCallback(CMOCK_FreeRTOS_gethostbyname_CALLBACK Callback);
void FreeRTOS_gethostbyname_Stub(CMOCK_FreeRTOS_gethostbyname_CALLBACK Callback);
#define FreeRTOS_gethostbyname_StubWithCallback FreeRTOS_gethostbyname_Stub
#define FreeRTOS_gethostbyname_IgnoreArg_pcHostName() FreeRTOS_gethostbyname_CMockIgnoreArg_pcHostName(__LINE__)
void FreeRTOS_gethostbyname_CMockIgnoreArg_pcHostName(UNITY_LINE_TYPE cmock_line);
#define vDNSInitialise_Ignore() vDNSInitialise_CMockIgnore()
void vDNSInitialise_CMockIgnore(void);
#define vDNSInitialise_StopIgnore() vDNSInitialise_CMockStopIgnore()
void vDNSInitialise_CMockStopIgnore(void);
#define vDNSInitialise_Expect() vDNSInitialise_CMockExpect(__LINE__)
void vDNSInitialise_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_vDNSInitialise_CALLBACK)(int cmock_num_calls);
void vDNSInitialise_AddCallback(CMOCK_vDNSInitialise_CALLBACK Callback);
void vDNSInitialise_Stub(CMOCK_vDNSInitialise_CALLBACK Callback);
#define vDNSInitialise_StubWithCallback vDNSInitialise_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
