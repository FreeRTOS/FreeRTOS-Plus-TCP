/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_IP_UTILS_LIST_MACROS_H
#define _MOCK_IP_UTILS_LIST_MACROS_H

#include "unity.h"
#include <stdbool.h>
#include <stdint.h>
#include <fcntl.h>
#include <unity.h>
#include "FreeRTOS.h"
#include "FreeRTOS_IP.h"
#include "IP_Utils_list_macros.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_IP_Utils_list_macros_Init(void);
void mock_IP_Utils_list_macros_Destroy(void);
void mock_IP_Utils_list_macros_Verify(void);




#define listSET_LIST_ITEM_OWNER_Ignore() listSET_LIST_ITEM_OWNER_CMockIgnore()
void listSET_LIST_ITEM_OWNER_CMockIgnore(void);
#define listSET_LIST_ITEM_OWNER_StopIgnore() listSET_LIST_ITEM_OWNER_CMockStopIgnore()
void listSET_LIST_ITEM_OWNER_CMockStopIgnore(void);
#define listSET_LIST_ITEM_OWNER_ExpectAnyArgs() listSET_LIST_ITEM_OWNER_CMockExpectAnyArgs(__LINE__)
void listSET_LIST_ITEM_OWNER_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define listSET_LIST_ITEM_OWNER_Expect(pxListItem, owner) listSET_LIST_ITEM_OWNER_CMockExpect(__LINE__, pxListItem, owner)
void listSET_LIST_ITEM_OWNER_CMockExpect(UNITY_LINE_TYPE cmock_line, ListItem_t* pxListItem, void* owner);
typedef void (* CMOCK_listSET_LIST_ITEM_OWNER_CALLBACK)(ListItem_t* pxListItem, void* owner, int cmock_num_calls);
void listSET_LIST_ITEM_OWNER_AddCallback(CMOCK_listSET_LIST_ITEM_OWNER_CALLBACK Callback);
void listSET_LIST_ITEM_OWNER_Stub(CMOCK_listSET_LIST_ITEM_OWNER_CALLBACK Callback);
#define listSET_LIST_ITEM_OWNER_StubWithCallback listSET_LIST_ITEM_OWNER_Stub
#define listSET_LIST_ITEM_OWNER_ExpectWithArray(pxListItem, pxListItem_Depth, owner, owner_Depth) listSET_LIST_ITEM_OWNER_CMockExpectWithArray(__LINE__, pxListItem, pxListItem_Depth, owner, owner_Depth)
void listSET_LIST_ITEM_OWNER_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, ListItem_t* pxListItem, int pxListItem_Depth, void* owner, int owner_Depth);
#define listSET_LIST_ITEM_OWNER_ReturnThruPtr_pxListItem(pxListItem) listSET_LIST_ITEM_OWNER_CMockReturnMemThruPtr_pxListItem(__LINE__, pxListItem, sizeof(ListItem_t))
#define listSET_LIST_ITEM_OWNER_ReturnArrayThruPtr_pxListItem(pxListItem, cmock_len) listSET_LIST_ITEM_OWNER_CMockReturnMemThruPtr_pxListItem(__LINE__, pxListItem, (int)(cmock_len * (int)sizeof(*pxListItem)))
#define listSET_LIST_ITEM_OWNER_ReturnMemThruPtr_pxListItem(pxListItem, cmock_size) listSET_LIST_ITEM_OWNER_CMockReturnMemThruPtr_pxListItem(__LINE__, pxListItem, cmock_size)
void listSET_LIST_ITEM_OWNER_CMockReturnMemThruPtr_pxListItem(UNITY_LINE_TYPE cmock_line, ListItem_t* pxListItem, int cmock_size);
#define listSET_LIST_ITEM_OWNER_ReturnThruPtr_owner(owner) listSET_LIST_ITEM_OWNER_CMockReturnMemThruPtr_owner(__LINE__, owner, sizeof(void))
#define listSET_LIST_ITEM_OWNER_ReturnArrayThruPtr_owner(owner, cmock_len) listSET_LIST_ITEM_OWNER_CMockReturnMemThruPtr_owner(__LINE__, owner, (int)(cmock_len * (int)sizeof(*owner)))
#define listSET_LIST_ITEM_OWNER_ReturnMemThruPtr_owner(owner, cmock_size) listSET_LIST_ITEM_OWNER_CMockReturnMemThruPtr_owner(__LINE__, owner, cmock_size)
void listSET_LIST_ITEM_OWNER_CMockReturnMemThruPtr_owner(UNITY_LINE_TYPE cmock_line, void* owner, int cmock_size);
#define listSET_LIST_ITEM_OWNER_IgnoreArg_pxListItem() listSET_LIST_ITEM_OWNER_CMockIgnoreArg_pxListItem(__LINE__)
void listSET_LIST_ITEM_OWNER_CMockIgnoreArg_pxListItem(UNITY_LINE_TYPE cmock_line);
#define listSET_LIST_ITEM_OWNER_IgnoreArg_owner() listSET_LIST_ITEM_OWNER_CMockIgnoreArg_owner(__LINE__)
void listSET_LIST_ITEM_OWNER_CMockIgnoreArg_owner(UNITY_LINE_TYPE cmock_line);
#define listGET_END_MARKER_IgnoreAndReturn(cmock_retval) listGET_END_MARKER_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void listGET_END_MARKER_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ListItem_t* cmock_to_return);
#define listGET_END_MARKER_StopIgnore() listGET_END_MARKER_CMockStopIgnore()
void listGET_END_MARKER_CMockStopIgnore(void);
#define listGET_END_MARKER_ExpectAnyArgsAndReturn(cmock_retval) listGET_END_MARKER_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void listGET_END_MARKER_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, ListItem_t* cmock_to_return);
#define listGET_END_MARKER_ExpectAndReturn(pxList, cmock_retval) listGET_END_MARKER_CMockExpectAndReturn(__LINE__, pxList, cmock_retval)
void listGET_END_MARKER_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, List_t* pxList, ListItem_t* cmock_to_return);
typedef ListItem_t* (* CMOCK_listGET_END_MARKER_CALLBACK)(List_t* pxList, int cmock_num_calls);
void listGET_END_MARKER_AddCallback(CMOCK_listGET_END_MARKER_CALLBACK Callback);
void listGET_END_MARKER_Stub(CMOCK_listGET_END_MARKER_CALLBACK Callback);
#define listGET_END_MARKER_StubWithCallback listGET_END_MARKER_Stub
#define listGET_END_MARKER_ExpectWithArrayAndReturn(pxList, pxList_Depth, cmock_retval) listGET_END_MARKER_CMockExpectWithArrayAndReturn(__LINE__, pxList, pxList_Depth, cmock_retval)
void listGET_END_MARKER_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, List_t* pxList, int pxList_Depth, ListItem_t* cmock_to_return);
#define listGET_END_MARKER_ReturnThruPtr_pxList(pxList) listGET_END_MARKER_CMockReturnMemThruPtr_pxList(__LINE__, pxList, sizeof(List_t))
#define listGET_END_MARKER_ReturnArrayThruPtr_pxList(pxList, cmock_len) listGET_END_MARKER_CMockReturnMemThruPtr_pxList(__LINE__, pxList, (int)(cmock_len * (int)sizeof(*pxList)))
#define listGET_END_MARKER_ReturnMemThruPtr_pxList(pxList, cmock_size) listGET_END_MARKER_CMockReturnMemThruPtr_pxList(__LINE__, pxList, cmock_size)
void listGET_END_MARKER_CMockReturnMemThruPtr_pxList(UNITY_LINE_TYPE cmock_line, List_t* pxList, int cmock_size);
#define listGET_END_MARKER_IgnoreArg_pxList() listGET_END_MARKER_CMockIgnoreArg_pxList(__LINE__)
void listGET_END_MARKER_CMockIgnoreArg_pxList(UNITY_LINE_TYPE cmock_line);
#define listGET_NEXT_IgnoreAndReturn(cmock_retval) listGET_NEXT_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void listGET_NEXT_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ListItem_t* cmock_to_return);
#define listGET_NEXT_StopIgnore() listGET_NEXT_CMockStopIgnore()
void listGET_NEXT_CMockStopIgnore(void);
#define listGET_NEXT_ExpectAnyArgsAndReturn(cmock_retval) listGET_NEXT_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void listGET_NEXT_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, ListItem_t* cmock_to_return);
#define listGET_NEXT_ExpectAndReturn(pxListItem, cmock_retval) listGET_NEXT_CMockExpectAndReturn(__LINE__, pxListItem, cmock_retval)
void listGET_NEXT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const ListItem_t* pxListItem, ListItem_t* cmock_to_return);
typedef ListItem_t* (* CMOCK_listGET_NEXT_CALLBACK)(const ListItem_t* pxListItem, int cmock_num_calls);
void listGET_NEXT_AddCallback(CMOCK_listGET_NEXT_CALLBACK Callback);
void listGET_NEXT_Stub(CMOCK_listGET_NEXT_CALLBACK Callback);
#define listGET_NEXT_StubWithCallback listGET_NEXT_Stub
#define listGET_NEXT_ExpectWithArrayAndReturn(pxListItem, pxListItem_Depth, cmock_retval) listGET_NEXT_CMockExpectWithArrayAndReturn(__LINE__, pxListItem, pxListItem_Depth, cmock_retval)
void listGET_NEXT_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const ListItem_t* pxListItem, int pxListItem_Depth, ListItem_t* cmock_to_return);
#define listGET_NEXT_IgnoreArg_pxListItem() listGET_NEXT_CMockIgnoreArg_pxListItem(__LINE__)
void listGET_NEXT_CMockIgnoreArg_pxListItem(UNITY_LINE_TYPE cmock_line);
#define listLIST_IS_EMPTY_IgnoreAndReturn(cmock_retval) listLIST_IS_EMPTY_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void listLIST_IS_EMPTY_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define listLIST_IS_EMPTY_StopIgnore() listLIST_IS_EMPTY_CMockStopIgnore()
void listLIST_IS_EMPTY_CMockStopIgnore(void);
#define listLIST_IS_EMPTY_ExpectAnyArgsAndReturn(cmock_retval) listLIST_IS_EMPTY_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void listLIST_IS_EMPTY_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define listLIST_IS_EMPTY_ExpectAndReturn(pxList, cmock_retval) listLIST_IS_EMPTY_CMockExpectAndReturn(__LINE__, pxList, cmock_retval)
void listLIST_IS_EMPTY_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const List_t* pxList, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_listLIST_IS_EMPTY_CALLBACK)(const List_t* pxList, int cmock_num_calls);
void listLIST_IS_EMPTY_AddCallback(CMOCK_listLIST_IS_EMPTY_CALLBACK Callback);
void listLIST_IS_EMPTY_Stub(CMOCK_listLIST_IS_EMPTY_CALLBACK Callback);
#define listLIST_IS_EMPTY_StubWithCallback listLIST_IS_EMPTY_Stub
#define listLIST_IS_EMPTY_ExpectWithArrayAndReturn(pxList, pxList_Depth, cmock_retval) listLIST_IS_EMPTY_CMockExpectWithArrayAndReturn(__LINE__, pxList, pxList_Depth, cmock_retval)
void listLIST_IS_EMPTY_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const List_t* pxList, int pxList_Depth, BaseType_t cmock_to_return);
#define listLIST_IS_EMPTY_IgnoreArg_pxList() listLIST_IS_EMPTY_CMockIgnoreArg_pxList(__LINE__)
void listLIST_IS_EMPTY_CMockIgnoreArg_pxList(UNITY_LINE_TYPE cmock_line);
#define listGET_OWNER_OF_HEAD_ENTRY_IgnoreAndReturn(cmock_retval) listGET_OWNER_OF_HEAD_ENTRY_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void listGET_OWNER_OF_HEAD_ENTRY_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define listGET_OWNER_OF_HEAD_ENTRY_StopIgnore() listGET_OWNER_OF_HEAD_ENTRY_CMockStopIgnore()
void listGET_OWNER_OF_HEAD_ENTRY_CMockStopIgnore(void);
#define listGET_OWNER_OF_HEAD_ENTRY_ExpectAnyArgsAndReturn(cmock_retval) listGET_OWNER_OF_HEAD_ENTRY_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void listGET_OWNER_OF_HEAD_ENTRY_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define listGET_OWNER_OF_HEAD_ENTRY_ExpectAndReturn(pxList, cmock_retval) listGET_OWNER_OF_HEAD_ENTRY_CMockExpectAndReturn(__LINE__, pxList, cmock_retval)
void listGET_OWNER_OF_HEAD_ENTRY_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const List_t* pxList, void* cmock_to_return);
typedef void* (* CMOCK_listGET_OWNER_OF_HEAD_ENTRY_CALLBACK)(const List_t* pxList, int cmock_num_calls);
void listGET_OWNER_OF_HEAD_ENTRY_AddCallback(CMOCK_listGET_OWNER_OF_HEAD_ENTRY_CALLBACK Callback);
void listGET_OWNER_OF_HEAD_ENTRY_Stub(CMOCK_listGET_OWNER_OF_HEAD_ENTRY_CALLBACK Callback);
#define listGET_OWNER_OF_HEAD_ENTRY_StubWithCallback listGET_OWNER_OF_HEAD_ENTRY_Stub
#define listGET_OWNER_OF_HEAD_ENTRY_ExpectWithArrayAndReturn(pxList, pxList_Depth, cmock_retval) listGET_OWNER_OF_HEAD_ENTRY_CMockExpectWithArrayAndReturn(__LINE__, pxList, pxList_Depth, cmock_retval)
void listGET_OWNER_OF_HEAD_ENTRY_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const List_t* pxList, int pxList_Depth, void* cmock_to_return);
#define listGET_OWNER_OF_HEAD_ENTRY_IgnoreArg_pxList() listGET_OWNER_OF_HEAD_ENTRY_CMockIgnoreArg_pxList(__LINE__)
void listGET_OWNER_OF_HEAD_ENTRY_CMockIgnoreArg_pxList(UNITY_LINE_TYPE cmock_line);
#define listIS_CONTAINED_WITHIN_IgnoreAndReturn(cmock_retval) listIS_CONTAINED_WITHIN_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void listIS_CONTAINED_WITHIN_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define listIS_CONTAINED_WITHIN_StopIgnore() listIS_CONTAINED_WITHIN_CMockStopIgnore()
void listIS_CONTAINED_WITHIN_CMockStopIgnore(void);
#define listIS_CONTAINED_WITHIN_ExpectAnyArgsAndReturn(cmock_retval) listIS_CONTAINED_WITHIN_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void listIS_CONTAINED_WITHIN_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define listIS_CONTAINED_WITHIN_ExpectAndReturn(list, listItem, cmock_retval) listIS_CONTAINED_WITHIN_CMockExpectAndReturn(__LINE__, list, listItem, cmock_retval)
void listIS_CONTAINED_WITHIN_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, List_t* list, const ListItem_t* listItem, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_listIS_CONTAINED_WITHIN_CALLBACK)(List_t* list, const ListItem_t* listItem, int cmock_num_calls);
void listIS_CONTAINED_WITHIN_AddCallback(CMOCK_listIS_CONTAINED_WITHIN_CALLBACK Callback);
void listIS_CONTAINED_WITHIN_Stub(CMOCK_listIS_CONTAINED_WITHIN_CALLBACK Callback);
#define listIS_CONTAINED_WITHIN_StubWithCallback listIS_CONTAINED_WITHIN_Stub
#define listIS_CONTAINED_WITHIN_ExpectWithArrayAndReturn(list, list_Depth, listItem, listItem_Depth, cmock_retval) listIS_CONTAINED_WITHIN_CMockExpectWithArrayAndReturn(__LINE__, list, list_Depth, listItem, listItem_Depth, cmock_retval)
void listIS_CONTAINED_WITHIN_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, List_t* list, int list_Depth, const ListItem_t* listItem, int listItem_Depth, BaseType_t cmock_to_return);
#define listIS_CONTAINED_WITHIN_ReturnThruPtr_list(list) listIS_CONTAINED_WITHIN_CMockReturnMemThruPtr_list(__LINE__, list, sizeof(List_t))
#define listIS_CONTAINED_WITHIN_ReturnArrayThruPtr_list(list, cmock_len) listIS_CONTAINED_WITHIN_CMockReturnMemThruPtr_list(__LINE__, list, (int)(cmock_len * (int)sizeof(*list)))
#define listIS_CONTAINED_WITHIN_ReturnMemThruPtr_list(list, cmock_size) listIS_CONTAINED_WITHIN_CMockReturnMemThruPtr_list(__LINE__, list, cmock_size)
void listIS_CONTAINED_WITHIN_CMockReturnMemThruPtr_list(UNITY_LINE_TYPE cmock_line, List_t* list, int cmock_size);
#define listIS_CONTAINED_WITHIN_IgnoreArg_list() listIS_CONTAINED_WITHIN_CMockIgnoreArg_list(__LINE__)
void listIS_CONTAINED_WITHIN_CMockIgnoreArg_list(UNITY_LINE_TYPE cmock_line);
#define listIS_CONTAINED_WITHIN_IgnoreArg_listItem() listIS_CONTAINED_WITHIN_CMockIgnoreArg_listItem(__LINE__)
void listIS_CONTAINED_WITHIN_CMockIgnoreArg_listItem(UNITY_LINE_TYPE cmock_line);
#define listGET_LIST_ITEM_VALUE_IgnoreAndReturn(cmock_retval) listGET_LIST_ITEM_VALUE_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void listGET_LIST_ITEM_VALUE_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TickType_t cmock_to_return);
#define listGET_LIST_ITEM_VALUE_StopIgnore() listGET_LIST_ITEM_VALUE_CMockStopIgnore()
void listGET_LIST_ITEM_VALUE_CMockStopIgnore(void);
#define listGET_LIST_ITEM_VALUE_ExpectAnyArgsAndReturn(cmock_retval) listGET_LIST_ITEM_VALUE_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void listGET_LIST_ITEM_VALUE_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, TickType_t cmock_to_return);
#define listGET_LIST_ITEM_VALUE_ExpectAndReturn(listItem, cmock_retval) listGET_LIST_ITEM_VALUE_CMockExpectAndReturn(__LINE__, listItem, cmock_retval)
void listGET_LIST_ITEM_VALUE_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const ListItem_t* listItem, TickType_t cmock_to_return);
typedef TickType_t (* CMOCK_listGET_LIST_ITEM_VALUE_CALLBACK)(const ListItem_t* listItem, int cmock_num_calls);
void listGET_LIST_ITEM_VALUE_AddCallback(CMOCK_listGET_LIST_ITEM_VALUE_CALLBACK Callback);
void listGET_LIST_ITEM_VALUE_Stub(CMOCK_listGET_LIST_ITEM_VALUE_CALLBACK Callback);
#define listGET_LIST_ITEM_VALUE_StubWithCallback listGET_LIST_ITEM_VALUE_Stub
#define listGET_LIST_ITEM_VALUE_ExpectWithArrayAndReturn(listItem, listItem_Depth, cmock_retval) listGET_LIST_ITEM_VALUE_CMockExpectWithArrayAndReturn(__LINE__, listItem, listItem_Depth, cmock_retval)
void listGET_LIST_ITEM_VALUE_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const ListItem_t* listItem, int listItem_Depth, TickType_t cmock_to_return);
#define listGET_LIST_ITEM_VALUE_IgnoreArg_listItem() listGET_LIST_ITEM_VALUE_CMockIgnoreArg_listItem(__LINE__)
void listGET_LIST_ITEM_VALUE_CMockIgnoreArg_listItem(UNITY_LINE_TYPE cmock_line);
#define listSET_LIST_ITEM_VALUE_Ignore() listSET_LIST_ITEM_VALUE_CMockIgnore()
void listSET_LIST_ITEM_VALUE_CMockIgnore(void);
#define listSET_LIST_ITEM_VALUE_StopIgnore() listSET_LIST_ITEM_VALUE_CMockStopIgnore()
void listSET_LIST_ITEM_VALUE_CMockStopIgnore(void);
#define listSET_LIST_ITEM_VALUE_ExpectAnyArgs() listSET_LIST_ITEM_VALUE_CMockExpectAnyArgs(__LINE__)
void listSET_LIST_ITEM_VALUE_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define listSET_LIST_ITEM_VALUE_Expect(listItem, itemValue) listSET_LIST_ITEM_VALUE_CMockExpect(__LINE__, listItem, itemValue)
void listSET_LIST_ITEM_VALUE_CMockExpect(UNITY_LINE_TYPE cmock_line, ListItem_t* listItem, TickType_t itemValue);
typedef void (* CMOCK_listSET_LIST_ITEM_VALUE_CALLBACK)(ListItem_t* listItem, TickType_t itemValue, int cmock_num_calls);
void listSET_LIST_ITEM_VALUE_AddCallback(CMOCK_listSET_LIST_ITEM_VALUE_CALLBACK Callback);
void listSET_LIST_ITEM_VALUE_Stub(CMOCK_listSET_LIST_ITEM_VALUE_CALLBACK Callback);
#define listSET_LIST_ITEM_VALUE_StubWithCallback listSET_LIST_ITEM_VALUE_Stub
#define listSET_LIST_ITEM_VALUE_ExpectWithArray(listItem, listItem_Depth, itemValue) listSET_LIST_ITEM_VALUE_CMockExpectWithArray(__LINE__, listItem, listItem_Depth, itemValue)
void listSET_LIST_ITEM_VALUE_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, ListItem_t* listItem, int listItem_Depth, TickType_t itemValue);
#define listSET_LIST_ITEM_VALUE_ReturnThruPtr_listItem(listItem) listSET_LIST_ITEM_VALUE_CMockReturnMemThruPtr_listItem(__LINE__, listItem, sizeof(ListItem_t))
#define listSET_LIST_ITEM_VALUE_ReturnArrayThruPtr_listItem(listItem, cmock_len) listSET_LIST_ITEM_VALUE_CMockReturnMemThruPtr_listItem(__LINE__, listItem, (int)(cmock_len * (int)sizeof(*listItem)))
#define listSET_LIST_ITEM_VALUE_ReturnMemThruPtr_listItem(listItem, cmock_size) listSET_LIST_ITEM_VALUE_CMockReturnMemThruPtr_listItem(__LINE__, listItem, cmock_size)
void listSET_LIST_ITEM_VALUE_CMockReturnMemThruPtr_listItem(UNITY_LINE_TYPE cmock_line, ListItem_t* listItem, int cmock_size);
#define listSET_LIST_ITEM_VALUE_IgnoreArg_listItem() listSET_LIST_ITEM_VALUE_CMockIgnoreArg_listItem(__LINE__)
void listSET_LIST_ITEM_VALUE_CMockIgnoreArg_listItem(UNITY_LINE_TYPE cmock_line);
#define listSET_LIST_ITEM_VALUE_IgnoreArg_itemValue() listSET_LIST_ITEM_VALUE_CMockIgnoreArg_itemValue(__LINE__)
void listSET_LIST_ITEM_VALUE_CMockIgnoreArg_itemValue(UNITY_LINE_TYPE cmock_line);
#define listLIST_ITEM_CONTAINER_IgnoreAndReturn(cmock_retval) listLIST_ITEM_CONTAINER_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void listLIST_ITEM_CONTAINER_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, List_t* cmock_to_return);
#define listLIST_ITEM_CONTAINER_StopIgnore() listLIST_ITEM_CONTAINER_CMockStopIgnore()
void listLIST_ITEM_CONTAINER_CMockStopIgnore(void);
#define listLIST_ITEM_CONTAINER_ExpectAnyArgsAndReturn(cmock_retval) listLIST_ITEM_CONTAINER_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void listLIST_ITEM_CONTAINER_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, List_t* cmock_to_return);
#define listLIST_ITEM_CONTAINER_ExpectAndReturn(listItem, cmock_retval) listLIST_ITEM_CONTAINER_CMockExpectAndReturn(__LINE__, listItem, cmock_retval)
void listLIST_ITEM_CONTAINER_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const ListItem_t* listItem, List_t* cmock_to_return);
typedef List_t* (* CMOCK_listLIST_ITEM_CONTAINER_CALLBACK)(const ListItem_t* listItem, int cmock_num_calls);
void listLIST_ITEM_CONTAINER_AddCallback(CMOCK_listLIST_ITEM_CONTAINER_CALLBACK Callback);
void listLIST_ITEM_CONTAINER_Stub(CMOCK_listLIST_ITEM_CONTAINER_CALLBACK Callback);
#define listLIST_ITEM_CONTAINER_StubWithCallback listLIST_ITEM_CONTAINER_Stub
#define listLIST_ITEM_CONTAINER_ExpectWithArrayAndReturn(listItem, listItem_Depth, cmock_retval) listLIST_ITEM_CONTAINER_CMockExpectWithArrayAndReturn(__LINE__, listItem, listItem_Depth, cmock_retval)
void listLIST_ITEM_CONTAINER_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const ListItem_t* listItem, int listItem_Depth, List_t* cmock_to_return);
#define listLIST_ITEM_CONTAINER_IgnoreArg_listItem() listLIST_ITEM_CONTAINER_CMockIgnoreArg_listItem(__LINE__)
void listLIST_ITEM_CONTAINER_CMockIgnoreArg_listItem(UNITY_LINE_TYPE cmock_line);
#define listCURRENT_LIST_LENGTH_IgnoreAndReturn(cmock_retval) listCURRENT_LIST_LENGTH_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void listCURRENT_LIST_LENGTH_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
#define listCURRENT_LIST_LENGTH_StopIgnore() listCURRENT_LIST_LENGTH_CMockStopIgnore()
void listCURRENT_LIST_LENGTH_CMockStopIgnore(void);
#define listCURRENT_LIST_LENGTH_ExpectAnyArgsAndReturn(cmock_retval) listCURRENT_LIST_LENGTH_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void listCURRENT_LIST_LENGTH_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
#define listCURRENT_LIST_LENGTH_ExpectAndReturn(list, cmock_retval) listCURRENT_LIST_LENGTH_CMockExpectAndReturn(__LINE__, list, cmock_retval)
void listCURRENT_LIST_LENGTH_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, List_t* list, UBaseType_t cmock_to_return);
typedef UBaseType_t (* CMOCK_listCURRENT_LIST_LENGTH_CALLBACK)(List_t* list, int cmock_num_calls);
void listCURRENT_LIST_LENGTH_AddCallback(CMOCK_listCURRENT_LIST_LENGTH_CALLBACK Callback);
void listCURRENT_LIST_LENGTH_Stub(CMOCK_listCURRENT_LIST_LENGTH_CALLBACK Callback);
#define listCURRENT_LIST_LENGTH_StubWithCallback listCURRENT_LIST_LENGTH_Stub
#define listCURRENT_LIST_LENGTH_ExpectWithArrayAndReturn(list, list_Depth, cmock_retval) listCURRENT_LIST_LENGTH_CMockExpectWithArrayAndReturn(__LINE__, list, list_Depth, cmock_retval)
void listCURRENT_LIST_LENGTH_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, List_t* list, int list_Depth, UBaseType_t cmock_to_return);
#define listCURRENT_LIST_LENGTH_ReturnThruPtr_list(list) listCURRENT_LIST_LENGTH_CMockReturnMemThruPtr_list(__LINE__, list, sizeof(List_t))
#define listCURRENT_LIST_LENGTH_ReturnArrayThruPtr_list(list, cmock_len) listCURRENT_LIST_LENGTH_CMockReturnMemThruPtr_list(__LINE__, list, (int)(cmock_len * (int)sizeof(*list)))
#define listCURRENT_LIST_LENGTH_ReturnMemThruPtr_list(list, cmock_size) listCURRENT_LIST_LENGTH_CMockReturnMemThruPtr_list(__LINE__, list, cmock_size)
void listCURRENT_LIST_LENGTH_CMockReturnMemThruPtr_list(UNITY_LINE_TYPE cmock_line, List_t* list, int cmock_size);
#define listCURRENT_LIST_LENGTH_IgnoreArg_list() listCURRENT_LIST_LENGTH_CMockIgnoreArg_list(__LINE__)
void listCURRENT_LIST_LENGTH_CMockIgnoreArg_list(UNITY_LINE_TYPE cmock_line);
#define listGET_ITEM_VALUE_OF_HEAD_ENTRY_IgnoreAndReturn(cmock_retval) listGET_ITEM_VALUE_OF_HEAD_ENTRY_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void listGET_ITEM_VALUE_OF_HEAD_ENTRY_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TickType_t cmock_to_return);
#define listGET_ITEM_VALUE_OF_HEAD_ENTRY_StopIgnore() listGET_ITEM_VALUE_OF_HEAD_ENTRY_CMockStopIgnore()
void listGET_ITEM_VALUE_OF_HEAD_ENTRY_CMockStopIgnore(void);
#define listGET_ITEM_VALUE_OF_HEAD_ENTRY_ExpectAnyArgsAndReturn(cmock_retval) listGET_ITEM_VALUE_OF_HEAD_ENTRY_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void listGET_ITEM_VALUE_OF_HEAD_ENTRY_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, TickType_t cmock_to_return);
#define listGET_ITEM_VALUE_OF_HEAD_ENTRY_ExpectAndReturn(list, cmock_retval) listGET_ITEM_VALUE_OF_HEAD_ENTRY_CMockExpectAndReturn(__LINE__, list, cmock_retval)
void listGET_ITEM_VALUE_OF_HEAD_ENTRY_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, List_t* list, TickType_t cmock_to_return);
typedef TickType_t (* CMOCK_listGET_ITEM_VALUE_OF_HEAD_ENTRY_CALLBACK)(List_t* list, int cmock_num_calls);
void listGET_ITEM_VALUE_OF_HEAD_ENTRY_AddCallback(CMOCK_listGET_ITEM_VALUE_OF_HEAD_ENTRY_CALLBACK Callback);
void listGET_ITEM_VALUE_OF_HEAD_ENTRY_Stub(CMOCK_listGET_ITEM_VALUE_OF_HEAD_ENTRY_CALLBACK Callback);
#define listGET_ITEM_VALUE_OF_HEAD_ENTRY_StubWithCallback listGET_ITEM_VALUE_OF_HEAD_ENTRY_Stub
#define listGET_ITEM_VALUE_OF_HEAD_ENTRY_ExpectWithArrayAndReturn(list, list_Depth, cmock_retval) listGET_ITEM_VALUE_OF_HEAD_ENTRY_CMockExpectWithArrayAndReturn(__LINE__, list, list_Depth, cmock_retval)
void listGET_ITEM_VALUE_OF_HEAD_ENTRY_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, List_t* list, int list_Depth, TickType_t cmock_to_return);
#define listGET_ITEM_VALUE_OF_HEAD_ENTRY_ReturnThruPtr_list(list) listGET_ITEM_VALUE_OF_HEAD_ENTRY_CMockReturnMemThruPtr_list(__LINE__, list, sizeof(List_t))
#define listGET_ITEM_VALUE_OF_HEAD_ENTRY_ReturnArrayThruPtr_list(list, cmock_len) listGET_ITEM_VALUE_OF_HEAD_ENTRY_CMockReturnMemThruPtr_list(__LINE__, list, (int)(cmock_len * (int)sizeof(*list)))
#define listGET_ITEM_VALUE_OF_HEAD_ENTRY_ReturnMemThruPtr_list(list, cmock_size) listGET_ITEM_VALUE_OF_HEAD_ENTRY_CMockReturnMemThruPtr_list(__LINE__, list, cmock_size)
void listGET_ITEM_VALUE_OF_HEAD_ENTRY_CMockReturnMemThruPtr_list(UNITY_LINE_TYPE cmock_line, List_t* list, int cmock_size);
#define listGET_ITEM_VALUE_OF_HEAD_ENTRY_IgnoreArg_list() listGET_ITEM_VALUE_OF_HEAD_ENTRY_CMockIgnoreArg_list(__LINE__)
void listGET_ITEM_VALUE_OF_HEAD_ENTRY_CMockIgnoreArg_list(UNITY_LINE_TYPE cmock_line);
#define listGET_LIST_ITEM_OWNER_IgnoreAndReturn(cmock_retval) listGET_LIST_ITEM_OWNER_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void listGET_LIST_ITEM_OWNER_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define listGET_LIST_ITEM_OWNER_StopIgnore() listGET_LIST_ITEM_OWNER_CMockStopIgnore()
void listGET_LIST_ITEM_OWNER_CMockStopIgnore(void);
#define listGET_LIST_ITEM_OWNER_ExpectAnyArgsAndReturn(cmock_retval) listGET_LIST_ITEM_OWNER_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void listGET_LIST_ITEM_OWNER_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define listGET_LIST_ITEM_OWNER_ExpectAndReturn(listItem, cmock_retval) listGET_LIST_ITEM_OWNER_CMockExpectAndReturn(__LINE__, listItem, cmock_retval)
void listGET_LIST_ITEM_OWNER_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const ListItem_t* listItem, void* cmock_to_return);
typedef void* (* CMOCK_listGET_LIST_ITEM_OWNER_CALLBACK)(const ListItem_t* listItem, int cmock_num_calls);
void listGET_LIST_ITEM_OWNER_AddCallback(CMOCK_listGET_LIST_ITEM_OWNER_CALLBACK Callback);
void listGET_LIST_ITEM_OWNER_Stub(CMOCK_listGET_LIST_ITEM_OWNER_CALLBACK Callback);
#define listGET_LIST_ITEM_OWNER_StubWithCallback listGET_LIST_ITEM_OWNER_Stub
#define listGET_LIST_ITEM_OWNER_ExpectWithArrayAndReturn(listItem, listItem_Depth, cmock_retval) listGET_LIST_ITEM_OWNER_CMockExpectWithArrayAndReturn(__LINE__, listItem, listItem_Depth, cmock_retval)
void listGET_LIST_ITEM_OWNER_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const ListItem_t* listItem, int listItem_Depth, void* cmock_to_return);
#define listGET_LIST_ITEM_OWNER_IgnoreArg_listItem() listGET_LIST_ITEM_OWNER_CMockIgnoreArg_listItem(__LINE__)
void listGET_LIST_ITEM_OWNER_CMockIgnoreArg_listItem(UNITY_LINE_TYPE cmock_line);
#define xPortGetMinimumEverFreeHeapSize_IgnoreAndReturn(cmock_retval) xPortGetMinimumEverFreeHeapSize_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xPortGetMinimumEverFreeHeapSize_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define xPortGetMinimumEverFreeHeapSize_StopIgnore() xPortGetMinimumEverFreeHeapSize_CMockStopIgnore()
void xPortGetMinimumEverFreeHeapSize_CMockStopIgnore(void);
#define xPortGetMinimumEverFreeHeapSize_ExpectAndReturn(cmock_retval) xPortGetMinimumEverFreeHeapSize_CMockExpectAndReturn(__LINE__, cmock_retval)
void xPortGetMinimumEverFreeHeapSize_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
typedef size_t (* CMOCK_xPortGetMinimumEverFreeHeapSize_CALLBACK)(int cmock_num_calls);
void xPortGetMinimumEverFreeHeapSize_AddCallback(CMOCK_xPortGetMinimumEverFreeHeapSize_CALLBACK Callback);
void xPortGetMinimumEverFreeHeapSize_Stub(CMOCK_xPortGetMinimumEverFreeHeapSize_CALLBACK Callback);
#define xPortGetMinimumEverFreeHeapSize_StubWithCallback xPortGetMinimumEverFreeHeapSize_Stub
#define vRAProcess_Ignore() vRAProcess_CMockIgnore()
void vRAProcess_CMockIgnore(void);
#define vRAProcess_StopIgnore() vRAProcess_CMockStopIgnore()
void vRAProcess_CMockStopIgnore(void);
#define vRAProcess_ExpectAnyArgs() vRAProcess_CMockExpectAnyArgs(__LINE__)
void vRAProcess_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vRAProcess_Expect(xDoReset, pxEndPoint) vRAProcess_CMockExpect(__LINE__, xDoReset, pxEndPoint)
void vRAProcess_CMockExpect(UNITY_LINE_TYPE cmock_line, BaseType_t xDoReset, NetworkEndPoint_t* pxEndPoint);
typedef void (* CMOCK_vRAProcess_CALLBACK)(BaseType_t xDoReset, NetworkEndPoint_t* pxEndPoint, int cmock_num_calls);
void vRAProcess_AddCallback(CMOCK_vRAProcess_CALLBACK Callback);
void vRAProcess_Stub(CMOCK_vRAProcess_CALLBACK Callback);
#define vRAProcess_StubWithCallback vRAProcess_Stub
#define vRAProcess_ExpectWithArray(xDoReset, pxEndPoint, pxEndPoint_Depth) vRAProcess_CMockExpectWithArray(__LINE__, xDoReset, pxEndPoint, pxEndPoint_Depth)
void vRAProcess_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, BaseType_t xDoReset, NetworkEndPoint_t* pxEndPoint, int pxEndPoint_Depth);
#define vRAProcess_ReturnThruPtr_pxEndPoint(pxEndPoint) vRAProcess_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, sizeof(NetworkEndPoint_t))
#define vRAProcess_ReturnArrayThruPtr_pxEndPoint(pxEndPoint, cmock_len) vRAProcess_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, (int)(cmock_len * (int)sizeof(*pxEndPoint)))
#define vRAProcess_ReturnMemThruPtr_pxEndPoint(pxEndPoint, cmock_size) vRAProcess_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, cmock_size)
void vRAProcess_CMockReturnMemThruPtr_pxEndPoint(UNITY_LINE_TYPE cmock_line, NetworkEndPoint_t* pxEndPoint, int cmock_size);
#define vRAProcess_IgnoreArg_xDoReset() vRAProcess_CMockIgnoreArg_xDoReset(__LINE__)
void vRAProcess_CMockIgnoreArg_xDoReset(UNITY_LINE_TYPE cmock_line);
#define vRAProcess_IgnoreArg_pxEndPoint() vRAProcess_CMockIgnoreArg_pxEndPoint(__LINE__)
void vRAProcess_CMockIgnoreArg_pxEndPoint(UNITY_LINE_TYPE cmock_line);
#define xNetworkInterfaceInitialise_IgnoreAndReturn(cmock_retval) xNetworkInterfaceInitialise_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xNetworkInterfaceInitialise_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xNetworkInterfaceInitialise_StopIgnore() xNetworkInterfaceInitialise_CMockStopIgnore()
void xNetworkInterfaceInitialise_CMockStopIgnore(void);
#define xNetworkInterfaceInitialise_ExpectAnyArgsAndReturn(cmock_retval) xNetworkInterfaceInitialise_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xNetworkInterfaceInitialise_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xNetworkInterfaceInitialise_ExpectAndReturn(pxInterface, cmock_retval) xNetworkInterfaceInitialise_CMockExpectAndReturn(__LINE__, pxInterface, cmock_retval)
void xNetworkInterfaceInitialise_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct xNetworkInterface* pxInterface, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xNetworkInterfaceInitialise_CALLBACK)(struct xNetworkInterface* pxInterface, int cmock_num_calls);
void xNetworkInterfaceInitialise_AddCallback(CMOCK_xNetworkInterfaceInitialise_CALLBACK Callback);
void xNetworkInterfaceInitialise_Stub(CMOCK_xNetworkInterfaceInitialise_CALLBACK Callback);
#define xNetworkInterfaceInitialise_StubWithCallback xNetworkInterfaceInitialise_Stub
#define xNetworkInterfaceInitialise_ExpectWithArrayAndReturn(pxInterface, pxInterface_Depth, cmock_retval) xNetworkInterfaceInitialise_CMockExpectWithArrayAndReturn(__LINE__, pxInterface, pxInterface_Depth, cmock_retval)
void xNetworkInterfaceInitialise_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct xNetworkInterface* pxInterface, int pxInterface_Depth, BaseType_t cmock_to_return);
#define xNetworkInterfaceInitialise_ReturnThruPtr_pxInterface(pxInterface) xNetworkInterfaceInitialise_CMockReturnMemThruPtr_pxInterface(__LINE__, pxInterface, sizeof(struct xNetworkInterface))
#define xNetworkInterfaceInitialise_ReturnArrayThruPtr_pxInterface(pxInterface, cmock_len) xNetworkInterfaceInitialise_CMockReturnMemThruPtr_pxInterface(__LINE__, pxInterface, (int)(cmock_len * (int)sizeof(*pxInterface)))
#define xNetworkInterfaceInitialise_ReturnMemThruPtr_pxInterface(pxInterface, cmock_size) xNetworkInterfaceInitialise_CMockReturnMemThruPtr_pxInterface(__LINE__, pxInterface, cmock_size)
void xNetworkInterfaceInitialise_CMockReturnMemThruPtr_pxInterface(UNITY_LINE_TYPE cmock_line, struct xNetworkInterface* pxInterface, int cmock_size);
#define xNetworkInterfaceInitialise_IgnoreArg_pxInterface() xNetworkInterfaceInitialise_CMockIgnoreArg_pxInterface(__LINE__)
void xNetworkInterfaceInitialise_CMockIgnoreArg_pxInterface(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
