/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_FREERTOS_ICMP_H
#define _MOCK_FREERTOS_ICMP_H

#include "unity.h"
#include <stdbool.h>
#include <stdint.h>
#include <fcntl.h>
#include <unity.h>
#include "FreeRTOS.h"
#include "FreeRTOS_IP.h"
#include "FreeRTOS_ICMP.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_FreeRTOS_ICMP_Init(void);
void mock_FreeRTOS_ICMP_Destroy(void);
void mock_FreeRTOS_ICMP_Verify(void);




#define ProcessICMPPacket_IgnoreAndReturn(cmock_retval) ProcessICMPPacket_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ProcessICMPPacket_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eFrameProcessingResult_t cmock_to_return);
#define ProcessICMPPacket_StopIgnore() ProcessICMPPacket_CMockStopIgnore()
void ProcessICMPPacket_CMockStopIgnore(void);
#define ProcessICMPPacket_ExpectAnyArgsAndReturn(cmock_retval) ProcessICMPPacket_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ProcessICMPPacket_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eFrameProcessingResult_t cmock_to_return);
#define ProcessICMPPacket_ExpectAndReturn(pxNetworkBuffer, cmock_retval) ProcessICMPPacket_CMockExpectAndReturn(__LINE__, pxNetworkBuffer, cmock_retval)
void ProcessICMPPacket_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkBufferDescriptor_t* const pxNetworkBuffer, eFrameProcessingResult_t cmock_to_return);
typedef eFrameProcessingResult_t (* CMOCK_ProcessICMPPacket_CALLBACK)(const NetworkBufferDescriptor_t* const pxNetworkBuffer, int cmock_num_calls);
void ProcessICMPPacket_AddCallback(CMOCK_ProcessICMPPacket_CALLBACK Callback);
void ProcessICMPPacket_Stub(CMOCK_ProcessICMPPacket_CALLBACK Callback);
#define ProcessICMPPacket_StubWithCallback ProcessICMPPacket_Stub
#define ProcessICMPPacket_ExpectWithArrayAndReturn(pxNetworkBuffer, pxNetworkBuffer_Depth, cmock_retval) ProcessICMPPacket_CMockExpectWithArrayAndReturn(__LINE__, pxNetworkBuffer, pxNetworkBuffer_Depth, cmock_retval)
void ProcessICMPPacket_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const NetworkBufferDescriptor_t* const pxNetworkBuffer, int pxNetworkBuffer_Depth, eFrameProcessingResult_t cmock_to_return);
#define ProcessICMPPacket_IgnoreArg_pxNetworkBuffer() ProcessICMPPacket_CMockIgnoreArg_pxNetworkBuffer(__LINE__)
void ProcessICMPPacket_CMockIgnoreArg_pxNetworkBuffer(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
