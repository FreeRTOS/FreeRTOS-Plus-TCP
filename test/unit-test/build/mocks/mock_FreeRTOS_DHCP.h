/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_FREERTOS_DHCP_H
#define _MOCK_FREERTOS_DHCP_H

#include "unity.h"
#include <stdbool.h>
#include <stdint.h>
#include <fcntl.h>
#include <unity.h>
#include "FreeRTOS.h"
#include "FreeRTOS_IP.h"
#include "FreeRTOS_DHCP.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_FreeRTOS_DHCP_Init(void);
void mock_FreeRTOS_DHCP_Destroy(void);
void mock_FreeRTOS_DHCP_Verify(void);




#define eGetDHCPState_IgnoreAndReturn(cmock_retval) eGetDHCPState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eGetDHCPState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eDHCPState_t cmock_to_return);
#define eGetDHCPState_StopIgnore() eGetDHCPState_CMockStopIgnore()
void eGetDHCPState_CMockStopIgnore(void);
#define eGetDHCPState_ExpectAnyArgsAndReturn(cmock_retval) eGetDHCPState_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eGetDHCPState_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eDHCPState_t cmock_to_return);
#define eGetDHCPState_ExpectAndReturn(pxEndPoint, cmock_retval) eGetDHCPState_CMockExpectAndReturn(__LINE__, pxEndPoint, cmock_retval)
void eGetDHCPState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const struct xNetworkEndPoint* pxEndPoint, eDHCPState_t cmock_to_return);
typedef eDHCPState_t (* CMOCK_eGetDHCPState_CALLBACK)(const struct xNetworkEndPoint* pxEndPoint, int cmock_num_calls);
void eGetDHCPState_AddCallback(CMOCK_eGetDHCPState_CALLBACK Callback);
void eGetDHCPState_Stub(CMOCK_eGetDHCPState_CALLBACK Callback);
#define eGetDHCPState_StubWithCallback eGetDHCPState_Stub
#define eGetDHCPState_ExpectWithArrayAndReturn(pxEndPoint, pxEndPoint_Depth, cmock_retval) eGetDHCPState_CMockExpectWithArrayAndReturn(__LINE__, pxEndPoint, pxEndPoint_Depth, cmock_retval)
void eGetDHCPState_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const struct xNetworkEndPoint* pxEndPoint, int pxEndPoint_Depth, eDHCPState_t cmock_to_return);
#define eGetDHCPState_IgnoreArg_pxEndPoint() eGetDHCPState_CMockIgnoreArg_pxEndPoint(__LINE__)
void eGetDHCPState_CMockIgnoreArg_pxEndPoint(UNITY_LINE_TYPE cmock_line);
#define vDHCPProcess_Ignore() vDHCPProcess_CMockIgnore()
void vDHCPProcess_CMockIgnore(void);
#define vDHCPProcess_StopIgnore() vDHCPProcess_CMockStopIgnore()
void vDHCPProcess_CMockStopIgnore(void);
#define vDHCPProcess_ExpectAnyArgs() vDHCPProcess_CMockExpectAnyArgs(__LINE__)
void vDHCPProcess_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vDHCPProcess_Expect(xReset, pxEndPoint) vDHCPProcess_CMockExpect(__LINE__, xReset, pxEndPoint)
void vDHCPProcess_CMockExpect(UNITY_LINE_TYPE cmock_line, BaseType_t xReset, struct xNetworkEndPoint* pxEndPoint);
typedef void (* CMOCK_vDHCPProcess_CALLBACK)(BaseType_t xReset, struct xNetworkEndPoint* pxEndPoint, int cmock_num_calls);
void vDHCPProcess_AddCallback(CMOCK_vDHCPProcess_CALLBACK Callback);
void vDHCPProcess_Stub(CMOCK_vDHCPProcess_CALLBACK Callback);
#define vDHCPProcess_StubWithCallback vDHCPProcess_Stub
#define vDHCPProcess_ExpectWithArray(xReset, pxEndPoint, pxEndPoint_Depth) vDHCPProcess_CMockExpectWithArray(__LINE__, xReset, pxEndPoint, pxEndPoint_Depth)
void vDHCPProcess_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, BaseType_t xReset, struct xNetworkEndPoint* pxEndPoint, int pxEndPoint_Depth);
#define vDHCPProcess_ReturnThruPtr_pxEndPoint(pxEndPoint) vDHCPProcess_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, sizeof(struct xNetworkEndPoint))
#define vDHCPProcess_ReturnArrayThruPtr_pxEndPoint(pxEndPoint, cmock_len) vDHCPProcess_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, (int)(cmock_len * (int)sizeof(*pxEndPoint)))
#define vDHCPProcess_ReturnMemThruPtr_pxEndPoint(pxEndPoint, cmock_size) vDHCPProcess_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, cmock_size)
void vDHCPProcess_CMockReturnMemThruPtr_pxEndPoint(UNITY_LINE_TYPE cmock_line, struct xNetworkEndPoint* pxEndPoint, int cmock_size);
#define vDHCPProcess_IgnoreArg_xReset() vDHCPProcess_CMockIgnoreArg_xReset(__LINE__)
void vDHCPProcess_CMockIgnoreArg_xReset(UNITY_LINE_TYPE cmock_line);
#define vDHCPProcess_IgnoreArg_pxEndPoint() vDHCPProcess_CMockIgnoreArg_pxEndPoint(__LINE__)
void vDHCPProcess_CMockIgnoreArg_pxEndPoint(UNITY_LINE_TYPE cmock_line);
#define xIsDHCPSocket_IgnoreAndReturn(cmock_retval) xIsDHCPSocket_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xIsDHCPSocket_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xIsDHCPSocket_StopIgnore() xIsDHCPSocket_CMockStopIgnore()
void xIsDHCPSocket_CMockStopIgnore(void);
#define xIsDHCPSocket_ExpectAnyArgsAndReturn(cmock_retval) xIsDHCPSocket_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xIsDHCPSocket_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xIsDHCPSocket_ExpectAndReturn(xSocket, cmock_retval) xIsDHCPSocket_CMockExpectAndReturn(__LINE__, xSocket, cmock_retval)
void xIsDHCPSocket_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const ConstSocket_t xSocket, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xIsDHCPSocket_CALLBACK)(const ConstSocket_t xSocket, int cmock_num_calls);
void xIsDHCPSocket_AddCallback(CMOCK_xIsDHCPSocket_CALLBACK Callback);
void xIsDHCPSocket_Stub(CMOCK_xIsDHCPSocket_CALLBACK Callback);
#define xIsDHCPSocket_StubWithCallback xIsDHCPSocket_Stub
#define xIsDHCPSocket_IgnoreArg_xSocket() xIsDHCPSocket_CMockIgnoreArg_xSocket(__LINE__)
void xIsDHCPSocket_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define xApplicationDHCPHook_IgnoreAndReturn(cmock_retval) xApplicationDHCPHook_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xApplicationDHCPHook_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eDHCPCallbackAnswer_t cmock_to_return);
#define xApplicationDHCPHook_StopIgnore() xApplicationDHCPHook_CMockStopIgnore()
void xApplicationDHCPHook_CMockStopIgnore(void);
#define xApplicationDHCPHook_ExpectAnyArgsAndReturn(cmock_retval) xApplicationDHCPHook_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xApplicationDHCPHook_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eDHCPCallbackAnswer_t cmock_to_return);
#define xApplicationDHCPHook_ExpectAndReturn(eDHCPPhase, ulIPAddress, cmock_retval) xApplicationDHCPHook_CMockExpectAndReturn(__LINE__, eDHCPPhase, ulIPAddress, cmock_retval)
void xApplicationDHCPHook_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, eDHCPCallbackPhase_t eDHCPPhase, uint32_t ulIPAddress, eDHCPCallbackAnswer_t cmock_to_return);
typedef eDHCPCallbackAnswer_t (* CMOCK_xApplicationDHCPHook_CALLBACK)(eDHCPCallbackPhase_t eDHCPPhase, uint32_t ulIPAddress, int cmock_num_calls);
void xApplicationDHCPHook_AddCallback(CMOCK_xApplicationDHCPHook_CALLBACK Callback);
void xApplicationDHCPHook_Stub(CMOCK_xApplicationDHCPHook_CALLBACK Callback);
#define xApplicationDHCPHook_StubWithCallback xApplicationDHCPHook_Stub
#define xApplicationDHCPHook_IgnoreArg_eDHCPPhase() xApplicationDHCPHook_CMockIgnoreArg_eDHCPPhase(__LINE__)
void xApplicationDHCPHook_CMockIgnoreArg_eDHCPPhase(UNITY_LINE_TYPE cmock_line);
#define xApplicationDHCPHook_IgnoreArg_ulIPAddress() xApplicationDHCPHook_CMockIgnoreArg_ulIPAddress(__LINE__)
void xApplicationDHCPHook_CMockIgnoreArg_ulIPAddress(UNITY_LINE_TYPE cmock_line);
#define prvPrepareLinkLayerIPLookUp_Ignore() prvPrepareLinkLayerIPLookUp_CMockIgnore()
void prvPrepareLinkLayerIPLookUp_CMockIgnore(void);
#define prvPrepareLinkLayerIPLookUp_StopIgnore() prvPrepareLinkLayerIPLookUp_CMockStopIgnore()
void prvPrepareLinkLayerIPLookUp_CMockStopIgnore(void);
#define prvPrepareLinkLayerIPLookUp_ExpectAnyArgs() prvPrepareLinkLayerIPLookUp_CMockExpectAnyArgs(__LINE__)
void prvPrepareLinkLayerIPLookUp_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define prvPrepareLinkLayerIPLookUp_Expect(pxEndPoint) prvPrepareLinkLayerIPLookUp_CMockExpect(__LINE__, pxEndPoint)
void prvPrepareLinkLayerIPLookUp_CMockExpect(UNITY_LINE_TYPE cmock_line, struct xNetworkEndPoint* pxEndPoint);
typedef void (* CMOCK_prvPrepareLinkLayerIPLookUp_CALLBACK)(struct xNetworkEndPoint* pxEndPoint, int cmock_num_calls);
void prvPrepareLinkLayerIPLookUp_AddCallback(CMOCK_prvPrepareLinkLayerIPLookUp_CALLBACK Callback);
void prvPrepareLinkLayerIPLookUp_Stub(CMOCK_prvPrepareLinkLayerIPLookUp_CALLBACK Callback);
#define prvPrepareLinkLayerIPLookUp_StubWithCallback prvPrepareLinkLayerIPLookUp_Stub
#define prvPrepareLinkLayerIPLookUp_ExpectWithArray(pxEndPoint, pxEndPoint_Depth) prvPrepareLinkLayerIPLookUp_CMockExpectWithArray(__LINE__, pxEndPoint, pxEndPoint_Depth)
void prvPrepareLinkLayerIPLookUp_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct xNetworkEndPoint* pxEndPoint, int pxEndPoint_Depth);
#define prvPrepareLinkLayerIPLookUp_ReturnThruPtr_pxEndPoint(pxEndPoint) prvPrepareLinkLayerIPLookUp_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, sizeof(struct xNetworkEndPoint))
#define prvPrepareLinkLayerIPLookUp_ReturnArrayThruPtr_pxEndPoint(pxEndPoint, cmock_len) prvPrepareLinkLayerIPLookUp_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, (int)(cmock_len * (int)sizeof(*pxEndPoint)))
#define prvPrepareLinkLayerIPLookUp_ReturnMemThruPtr_pxEndPoint(pxEndPoint, cmock_size) prvPrepareLinkLayerIPLookUp_CMockReturnMemThruPtr_pxEndPoint(__LINE__, pxEndPoint, cmock_size)
void prvPrepareLinkLayerIPLookUp_CMockReturnMemThruPtr_pxEndPoint(UNITY_LINE_TYPE cmock_line, struct xNetworkEndPoint* pxEndPoint, int cmock_size);
#define prvPrepareLinkLayerIPLookUp_IgnoreArg_pxEndPoint() prvPrepareLinkLayerIPLookUp_CMockIgnoreArg_pxEndPoint(__LINE__)
void prvPrepareLinkLayerIPLookUp_CMockIgnoreArg_pxEndPoint(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
