[1;32m############################################################################[39m
[1;32m#[39m
[1;32m#  Unknown word(s) found.  Please either correct the spelling or add them[39m
[1;32m#  to the lexicon file './lexicon.txt'.[39m
[1;32m#[39m
[1;32m############################################################################[39m

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1555[m[K						  aaaaaaa [01;31m[Kaaaa[m[K    << sent */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1554[m[K						  [01;31m[KAAAAAAA[m[K BBBBBBB << acked
[01;32m[K  1555[m[K						  [01;31m[Kaaaaaaa[m[K aaaa    << sent */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1266[m[K	    /* Set the [01;31m[KAAL[m[K bit according to ETH AddressAlignedBeats value */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   839[m[K	 * @param [in] [01;31m[KaBuflen[m[K length of pcBuffer

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   945[m[K					/* The packet is [01;31m[Kacepted[m[K and a new Network Buffer was created,

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K    64[m[K		/* The code to send a single Selective [01;31m[KACK[m[K (SACK):
[01;32m[K   474[m[K			  - the highest Rx sequence number has been [01;31m[KACK[m[K'ed */
[01;32m[K   813[m[K			/* For Selective [01;31m[KAck[m[K (SACK), used when out-of-sequence data come in. */
[01;32m[K   904[m[K				Prepare a SACK (Selective [01;31m[KACK[m[K). */
[01;32m[K   914[m[K					Selective [01;31m[KACK[m[K (SACK). */
[01;32m[K  1271[m[K					'1 * lSRTT' ms for an [01;31m[KACK[m[K. A second time it will wait '2 * lSRTT' ms,
[01;32m[K  1501[m[K			/* An acknowledgement or a selective [01;31m[KACK[m[K (SACK) was received.  See if some outstanding data
[01;32m[K  1532[m[K				/* Continue if this segment does not fall within the [01;31m[KACK[m[K'd range. */
[01;32m[K  1570[m[K					/* This segment is fully [01;31m[KACK[m[K'd, set the flag. */
[01;32m[K  1574[m[K					first time and if this is the last [01;31m[KACK[m[K'd segment in a range. */
[01;32m[K  1710[m[K			/* Receive a normal [01;31m[KACK[m[K. */
[01;32m[K  1987[m[K			/* Receive a normal [01;31m[KACK[m[K */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   106[m[K	 * to prevent that the socket will be deleted before the last [01;31m[KACK[m[K has been
[01;32m[K   218[m[K		 * Skip past TCP header options when doing Selective [01;31m[KACK[m[K, until there are no
[01;32m[K   295[m[K	 * If ipconfigUSE_TCP_WIN is defined, and if only an [01;31m[KACK[m[K must be sent, it will
[01;32m[K   315[m[K	 * A "challenge [01;31m[KACK[m[K" is as per https://tools.ietf.org/html/rfc5961#section-3.2,
[01;32m[K   315[m[K	 * A "challenge [01;31m[KACK[m[K" is as per https://tools.ietf.org/html/rfc5961#section-3.2,
[01;32m[K   475[m[K	 * It can send a delayed [01;31m[KACK[m[K or new data
[01;32m[K   479[m[K	 *		xTCPSocketCheck()				// Either send a delayed [01;31m[KACK[m[K or call prvTCPSendPacket()
[01;32m[K   479[m[K	 *		xTCPSocketCheck()				// Either send a delayed [01;31m[KACK[m[K or call prvTCPSendPacket()
[01;32m[K   502[m[K				[01;31m[KACK[m[K's. */
[01;32m[K   507[m[K					[01;31m[KACK[m[K may be sent now. */
[01;32m[K   539[m[K					the	delayed	[01;31m[KACK[m[K.  The function prvTCPSendPacket() will send the
[01;32m[K   540[m[K					FIN	along with the [01;31m[KACK[m[K's. */
[01;32m[K   810[m[K				/* Later on, when deciding to delay an [01;31m[KACK[m[K, a precise estimate is needed
[01;32m[K  1108[m[K			first wait for a SYN+[01;31m[KACK[m[K reply. */
[01;32m[K  1333[m[K					/* Selective [01;31m[KACK[m[K: the peer has received a packet but it is missing
[01;32m[K  1444[m[K		/* We send out the TCP Maximum Segment Size option with our SYN[+[01;31m[KACK[m[K]. */
[01;32m[K  2025[m[K			keep-alive/delayed-[01;31m[KACK[m[K mechanism). */
[01;32m[K  2097[m[K			/* We did send a FIN already, see if it's [01;31m[KACK[m[K'd. */
[01;32m[K  2109[m[K			/* And wait for the final [01;31m[KACK[m[K. */
[01;32m[K  2114[m[K			/* Our FIN has been [01;31m[KACK[m[K'd, the outgoing sequence number is now fixed. */
[01;32m[K  2127[m[K					[01;31m[KACK[m[K. */
[01;32m[K  2133[m[K					last [01;31m[KACK[m[K. */
[01;32m[K  2265[m[K			[01;31m[Kack[m[K (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
[01;32m[K  2398[m[K		/* Either expect a [01;31m[KACK[m[K or a SYN+[01;31m[KACK[m[K. */
[01;32m[K  2410[m[K			/* eSYN_RECEIVED: flags [01;31m[KACK[m[K  expected, not SYN. */
[01;32m[K  2415[m[K			/* Send RST with the expected sequence and [01;31m[KACK[m[K numbers,
[01;32m[K  2457[m[K			/* The SYN+[01;31m[KACK[m[K has been confirmed, increase the next sequence number by
[01;32m[K  2489[m[K			/* This was the third step of connecting: SYN, SYN+[01;31m[KACK[m[K, [01;31m[KACK[m[K	so now the
[01;32m[K  2502[m[K	 * earlier.  Here the [01;31m[KACK[m[K's from peer will be checked, and if a FIN is received,
[01;32m[K  2667[m[K	 * ipconfigUSE_TCP_WIN is defined, and if only an [01;31m[KACK[m[K must be sent, it will be
[01;32m[K  2702[m[K			an [01;31m[KACK[m[K to gain performance. */
[01;32m[K  2709[m[K				( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )		/* There are no other flags than an [01;31m[KACK[m[K. */
[01;32m[K  2728[m[K					/* Normally a delayed [01;31m[KACK[m[K should wait 200 ms for a next incoming
[01;32m[K  2729[m[K					packet.  Only wait 20 ms here to gain performance.  A slow [01;31m[KACK[m[K
[01;32m[K  2750[m[K				/* As an [01;31m[KACK[m[K is not being delayed, remove any earlier delayed [01;31m[KACK[m[K
[01;32m[K  2761[m[K				/* The [01;31m[Kack[m[K will not be postponed, and there was no stored [01;31m[Kack[m[K ( in 'pxAckMessage' ). */
[01;32m[K  2830[m[K		2. in case of a SACK, Selective [01;31m[KACK[m[K, [01;31m[Kack[m[K a segment which comes in
[01;32m[K  2846[m[K				here to force sending an immediate [01;31m[KACK[m[K. */
[01;32m[K  2871[m[K				/* In eSYN_RECEIVED a simple [01;31m[KACK[m[K is expected, but apparently the
[01;32m[K  2872[m[K				'SYN+[01;31m[KACK[m[K' didn't arrive.  Step back to the previous state in which
[01;32m[K  2888[m[K					/* If so, don't send the-last-[01;31m[KACK[m[K. */
[01;32m[K  2909[m[K					/* A new socket has been created, reply with a SYN+[01;31m[KACK[m[K.
[01;32m[K  2931[m[K								SYN, expect	a SYN+[01;31m[KACK[m[K and send a [01;31m[KACK[m[K now. */
[01;32m[K  2934[m[K								expect a [01;31m[KACK[m[K and do nothing. */
[01;32m[K  3111[m[K				2) A packet that only has the [01;31m[KACK[m[K flag set.
[01;32m[K  3112[m[K				A packet with only the [01;31m[KACK[m[K flag set might be the last [01;31m[KACK[m[K in
[01;32m[K  3174[m[K							acceptable if the [01;31m[KACK[m[K field acknowledges the SYN." */
[01;32m[K  3192[m[K								/* Send a challenge [01;31m[KACK[m[K. */
[01;32m[K  3250[m[K					/* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,[01;31m[KACK[m[K>)
[01;32m[K  3276[m[K					socket might keep a reference to it in case a delayed [01;31m[KACK[m[K must be
[01;32m[K  3310[m[K		/* A pure SYN (without [01;31m[KACK[m[K) has come in, create a new socket to answer

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   371[m[K							/* Only use a fake [01;31m[KAck[m[K if the default IP address == 0x00
[01;32m[K   799[m[K										/* The [01;31m[Kack[m[K must come from the expected server. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3049[m[K		 * - Send a delayed [01;31m[KACK[m[K
[01;32m[K  3094[m[K					[01;31m[Kack[m[K or send out data or whatever it needs to do. */

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K   326[m[K	        // [01;31m[Kack[m[K of tx done, no-op in this stage

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   305[m[K	    // FIX ME: for rx-event, to [01;31m[Kack[m[K rx_isr into event queue

[1;34m./portable/NetworkInterface/M487/m480_eth.h[39m

[01;32m[K    87[m[K	#define ADVERTISE_LPACK         0x4000  /* [01;31m[KAck[m[K link partners response  */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   355[m[K	/* Sequence and [01;31m[KACK[m[K numbers are essentially unsigned (uint32_t). But when
[01;32m[K   541[m[K					bFinLast : 1,		/* The last [01;31m[KACK[m[K (after FIN and FIN+[01;31m[KACK[m[K) has been sent or will be sent by the peer */

[1;34m./include/FreeRTOS_TCP_IP.h[39m

[01;32m[K    44[m[K		eSYN_FIRST,		/* 3 (server) Just created, must [01;31m[KACK[m[K the SYN request. */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    57[m[K					ucDupAckCount : 8,	/* Counts the number of times that a higher segment was [01;31m[KACK[m[K'd. After 3 times a Fast Retransmission takes place */
[01;32m[K    58[m[K					bOutstanding : 1,	/* It the peer's turn, we're just waiting for an [01;31m[KACK[m[K */
[01;32m[K   194[m[K	/* Receive a normal [01;31m[KACK[m[K */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   483[m[K				that has been received has been [01;31m[KACKed[m[K. */
[01;32m[K  1554[m[K						  AAAAAAA BBBBBBB << [01;31m[Kacked[m[K

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1369[m[K			/* ulTCPWindowTxSack( ) returns the number of bytes which have been [01;31m[Kacked[m[K
[01;32m[K  1840[m[K					when the packets are [01;31m[Kacked[m[K, the tail marker will be updated. */
[01;32m[K  2534[m[K			/* ulTCPWindowTxAck() returns the number of bytes which have been [01;31m[Kacked[m[K,

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   540[m[K					bFinAcked : 1,		/* Our FIN packet has been [01;31m[Kacked[m[K */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   166[m[K	 * But pxWindow->[01;31m[Kackno[m[K should always be used to set "BUF->[01;31m[Kackno[m[K" */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   302[m[K	 * The heart of all: check incoming packet for valid data and [01;31m[Kacks[m[K and do what

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   396[m[K				/* Look for [01;31m[Kacks[m[K coming in. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3834[m[K								[01;31m[Kaconnected[m[K socket. Set the READ event, so that accept() will be called. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3300[m[K			/* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, [01;31m[KaCount[m[K )

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1134[m[K	  /* Set the [01;31m[KACS[m[K bit according to ETH AutomaticPadCRCStrip value */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   161[m[K		} [01;31m[Kaddr[m[K; /**< Address, Wrap & Ownership */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   162[m[K		} [01;31m[Kaddr[m[K; /**< Address, Wrap & Ownership */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   112[m[K			/* SCB_CleanInvalidateDCache_by_Addr( ( uint32_t * )[01;31m[Kaddr[m[K, size); */
[01;32m[K   120[m[K			/* SCB_InvalidateDCache_by_Addr( ( uint32_t * )[01;31m[Kaddr[m[K, size); */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   185[m[K		} [01;31m[Kaddr[m[K; /**< Address, Wrap & Ownership */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   470[m[K	//	if((pxHead->[01;31m[Kaddr[m[K.val & GMAC_RXD_OWNERSHIP) != 0)
[01;32m[K   887[m[K					xTxCallback(ul_tx_status_flag, (void*)p_tx_td->[01;31m[Kaddr[m[K); // Function call prvTxCallback

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1308[m[K	  * @param  [01;31m[KAddr[m[K: Pointer to MAC address buffer data (6 bytes)

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   707[m[K	#define ETH_HEADER               ((uint32_t)14U)    /*!< 6 byte Dest [01;31m[Kaddr[m[K, 6 byte Src [01;31m[Kaddr[m[K, 2 byte length/type */
[01;32m[K  1122[m[K	/** @defgroup ETH_Source_Addr_Filter ETH Source [01;31m[KAddr[m[K Filter
[01;32m[K  1151[m[K	/** @defgroup ETH_Destination_Addr_Filter ETH Destination [01;31m[KAddr[m[K Filter

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1266[m[K	    /* Set the AAL bit according to ETH [01;31m[KAddressAlignedBeats[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   603[m[K	  uint32_t             [01;31m[KAddressAlignedBeats[m[K;         /*!< Enables or disables the Address Aligned Beats.

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K    89[m[K	 * \brief Find a valid PHY Address ( from [01;31m[KaddrStart[m[K to 31 ).

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K    48[m[K	/** \[01;31m[Kaddtogroup[m[K SAM4E_GMAC Gigabit Ethernet MAC */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   118[m[K	/** @[01;31m[Kaddtogroup[m[K STM32F4xx_HAL_Driver
[01;32m[K  1055[m[K	/** @[01;31m[Kaddtogroup[m[K ETH_Private_Functions

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K    59[m[K	/** @[01;31m[Kaddtogroup[m[K STM32Fxx_HAL_Driver
[01;32m[K    63[m[K	/** @[01;31m[Kaddtogroup[m[K ETH
[01;32m[K    67[m[K	/** @[01;31m[Kaddtogroup[m[K ETH_Private_Macros
[01;32m[K   328[m[K	/** @[01;31m[Kaddtogroup[m[K ETH_Private_Defines
[01;32m[K  2180[m[K	/** @[01;31m[Kaddtogroup[m[K ETH_Exported_Functions
[01;32m[K  2186[m[K	/** @[01;31m[Kaddtogroup[m[K ETH_Exported_Functions_Group1
[01;32m[K  2201[m[K	/** @[01;31m[Kaddtogroup[m[K ETH_Exported_Functions_Group2
[01;32m[K  2222[m[K	/** @[01;31m[Kaddtogroup[m[K ETH_Exported_Functions_Group3
[01;32m[K  2236[m[K	/** @[01;31m[Kaddtogroup[m[K ETH_Exported_Functions_Group4

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K    87[m[K	#define tcpTCP_OPT_SACK_P			4U   /* [01;31m[KAdvertize[m[K that SACK is permitted */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   224[m[K	 * Note: it is [01;31m[Kadviced[m[K to define both
[01;32m[K   232[m[K	 * It is [01;31m[Kadviced[m[K to define ETH_TXBUFNB at least 4. Note that no

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K    65[m[K	#define GMII_AFECR1        0x11   // [01;31m[KAFE[m[K Control 1

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K   192[m[K			packets from the receiver packet buffer memory when no [01;31m[KAHB[m[K resource is available. */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   552[m[K			// 1xxxx: Attempt to use INCR16 [01;31m[KAHB[m[K bursts

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif.h[39m

[01;32m[K    64[m[K	 * buffer memory when no [01;31m[KAHB[m[K resource is
[01;32m[K    68[m[K	 * [01;31m[KAHB[m[K buffer resource next becomes available.

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   238[m[K	#define   GMAC_DCFGR_FBLDO_SINGLE (0x1u << 0) /**< \brief (GMAC_DCFGR) 00001: Always use SINGLE [01;31m[KAHB[m[K bursts */
[01;32m[K   239[m[K	#define   GMAC_DCFGR_FBLDO_INCR4 (0x4u << 0) /**< \brief (GMAC_DCFGR) 001xx: Attempt to use INCR4 [01;31m[KAHB[m[K bursts (Default) */
[01;32m[K   240[m[K	#define   GMAC_DCFGR_FBLDO_INCR8 (0x8u << 0) /**< \brief (GMAC_DCFGR) 01xxx: Attempt to use INCR8 [01;31m[KAHB[m[K bursts */
[01;32m[K   241[m[K	#define   GMAC_DCFGR_FBLDO_INCR16 (0x10u << 0) /**< \brief (GMAC_DCFGR) 1xxxx: Attempt to use INCR16 [01;31m[KAHB[m[K bursts */
[01;32m[K   261[m[K	#define GMAC_TSR_TFC (0x1u << 4) /**< \brief (GMAC_TSR) Transmit Frame Corruption due to [01;31m[KAHB[m[K error */
[01;32m[K   286[m[K	#define GMAC_ISR_TFC (0x1u << 6) /**< \brief (GMAC_ISR) Transmit Frame Corruption due to [01;31m[KAHB[m[K error */
[01;32m[K   311[m[K	#define GMAC_IER_TFC (0x1u << 6) /**< \brief (GMAC_IER) Transmit Frame Corruption due to [01;31m[KAHB[m[K error */
[01;32m[K   336[m[K	#define GMAC_IDR_TFC (0x1u << 6) /**< \brief (GMAC_IDR) Transmit Frame Corruption due to [01;31m[KAHB[m[K error */
[01;32m[K   361[m[K	#define GMAC_IMR_TFC (0x1u << 6) /**< \brief (GMAC_IMR) Transmit Frame Corruption due to [01;31m[KAHB[m[K error */
[01;32m[K   682[m[K	#define GMAC_ISRPQ_TFC (0x1u << 6) /**< \brief (GMAC_ISRPQ[7]) Transmit Frame Corruption due to [01;31m[KAHB[m[K error */
[01;32m[K   722[m[K	#define GMAC_IERPQ_TFC (0x1u << 6) /**< \brief (GMAC_IERPQ[7]) Transmit Frame Corruption due to [01;31m[KAHB[m[K error */
[01;32m[K   730[m[K	#define GMAC_IDRPQ_TFC (0x1u << 6) /**< \brief (GMAC_IDRPQ[7]) Transmit Frame Corruption due to [01;31m[KAHB[m[K error */
[01;32m[K   738[m[K	#define GMAC_IMRPQ_AHB (0x1u << 6) /**< \brief (GMAC_IMRPQ[7]) [01;31m[KAHB[m[K Error */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   451[m[K	/* Handle GMAC underrun or [01;31m[KAHB[m[K errors. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   606[m[K	  uint32_t             FixedBurst;                  /*!< Enables or disables the [01;31m[KAHB[m[K Master interface fixed burst transfers.

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   237[m[K		 * Section 3.6 of [01;31m[KAMBA[m[K 2.0 spec states that burst should not cross

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   240[m[K		 * Section 3.6 of [01;31m[KAMBA[m[K 2.0 spec states that burst should not cross

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K    98[m[K		/** Send Buffer. Section 3.6 of [01;31m[KAMBA[m[K 2.0 spec states that burst should not cross the

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   259[m[K		 * Section 3.6 of [01;31m[KAMBA[m[K 2.0 spec states that burst should not cross

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   136[m[K		/** Send Buffer. Section 3.6 of [01;31m[KAMBA[m[K 2.0 spec states that burst should not cross the

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   750[m[K							/* It is useless to [01;31m[Kanalyse[m[K the unexpected reply

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1766[m[K			/* Thanks to [01;31m[KAndrey[m[K Ivanov from swissEmbedded for reporting that the

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1301[m[K		/* [01;31m[KAnf[m[K finally, after all resources have been freed, free the socket space */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   727[m[K	 * if they are not being used [01;31m[Kanywhwere[m[K. But their use depends on the

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_wifi.c[39m

[01;32m[K    85[m[K	        /* Connect to the [01;31m[KAP[m[K */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   419[m[K			/* _HT_ Should better become a new [01;31m[KAPI[m[K call to have the IP-task remove the callback */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   252[m[K	 * The [01;31m[KAPI[m[K FreeRTOS_send() adds data to the TX stream.  Add
[01;32m[K   492[m[K			/* The [01;31m[KAPI[m[K FreeRTOS_send() might have added data to the TX stream.  Add
[01;32m[K  3523[m[K	 * In the [01;31m[KAPI[m[K accept(), the user asks is there is a new client?  As [01;31m[KAPI[m[K's can

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   605[m[K		/* Check for random number generator [01;31m[KAPI[m[K failure. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K    40[m[K	 * FreeRTOS [01;31m[KAPI[m[K DOCUMENTATION AVAILABLE ON THE FreeRTOS.org WEB SITE.  See
[01;32m[K    95[m[K	/* Set the following definitions to 1 to include the [01;31m[KAPI[m[K function, or zero
[01;32m[K    96[m[K	to exclude the [01;31m[KAPI[m[K function.  In most cases the linker will remove unused

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K    64[m[K	/* Several [01;31m[KAPI[m[K's will block until the result is known, or the action has been
[01;32m[K    83[m[K	 * use of its services through the published sockets [01;31m[KAPI[m[K). ipconfigUDP_TASK_PRIORITY
[01;32m[K   111[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/[01;31m[KAPI[m[K/vApplicationIPNetworkEventHook.shtml.
[01;32m[K   111[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/[01;31m[KAPI[m[K/vApplicationIPNetworkEventHook.shtml.
[01;32m[K   236[m[K	 * through the FreeRTOS_gethostbyname() [01;31m[KAPI[m[K function. */
[01;32m[K   244[m[K	 * FreeRTOS_SendPingRequest() [01;31m[KAPI[m[K function is available. */
[01;32m[K   248[m[K	 * (and associated) [01;31m[KAPI[m[K function is available. */

[1;34m./test/unit-test/ConfigFiles/NetworkInterface.h[39m

[01;32m[K    33[m[K	/* NOTE PUBLIC [01;31m[KAPI[m[K FUNCTIONS. */

[1;34m./test/unit-test/ConfigFiles/NetworkBufferManagement.h[39m

[01;32m[K    33[m[K	/* NOTE PUBLIC [01;31m[KAPI[m[K FUNCTIONS. */

[1;34m./test/cbmc/proofs/ARP/ulARPRemoveCacheEntryByMac/ulARPRemoveCacheEntryByMac_harness.c[39m

[01;32m[K    17[m[K		 * (see the [01;31m[KAPI[m[K definition). */

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName/DNSgetHostByName_harness.c[39m

[01;32m[K    29[m[K	 *   Many methods in the FreeRTOS TCP [01;31m[KAPI[m[K in stubs/freertos_api.c

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_a/DNSgetHostByName_a_harness.c[39m

[01;32m[K    29[m[K	 *   Many methods in the FreeRTOS TCP [01;31m[KAPI[m[K in stubs/freertos_api.c

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K    36[m[K	* FreeRTOS [01;31m[KAPI[m[K DOCUMENTATION AVAILABLE ON THE FreeRTOS.org WEB SITE.
[01;32m[K    97[m[K	/* Set the following definitions to 1 to include the [01;31m[KAPI[m[K function, or zero
[01;32m[K    98[m[K	 * to exclude the [01;31m[KAPI[m[K function. */

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K    63[m[K	/* Several [01;31m[KAPI[m[K's will block until the result is known, or the action has been
[01;32m[K    82[m[K	 * use of its services through the published sockets [01;31m[KAPI[m[K). ipconfigUDP_TASK_PRIORITY
[01;32m[K   110[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/[01;31m[KAPI[m[K/vApplicationIPNetworkEventHook.shtml.
[01;32m[K   110[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/[01;31m[KAPI[m[K/vApplicationIPNetworkEventHook.shtml.
[01;32m[K   243[m[K	 * through the FreeRTOS_gethostbyname() [01;31m[KAPI[m[K function. */
[01;32m[K   251[m[K	 * FreeRTOS_SendPingRequest() [01;31m[KAPI[m[K function is available. */
[01;32m[K   257[m[K	 * (and associated) [01;31m[KAPI[m[K function is available. */

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K    23[m[K	 * [01;31m[KAPI[m[K.  The abstractions simply perform minimal validation of
[01;32m[K    30[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/socket.html
[01;32m[K    30[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/socket.html
[01;32m[K    46[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/setsockopt.html
[01;32m[K    46[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/setsockopt.html
[01;32m[K    64[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/close.html
[01;32m[K    64[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/close.html
[01;32m[K    76[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/bind.html
[01;32m[K    76[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/bind.html
[01;32m[K    92[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/inet_addr.html
[01;32m[K    92[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/inet_addr.html
[01;32m[K   104[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/recvfrom.html
[01;32m[K   104[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/recvfrom.html
[01;32m[K   177[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/sendto.html
[01;32m[K   177[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/sendto.html
[01;32m[K   198[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/[01;31m[KAPI[m[K/FreeRTOS_GetUDPPayloadBuffer.html
[01;32m[K   198[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/[01;31m[KAPI[m[K/FreeRTOS_GetUDPPayloadBuffer.html
[01;32m[K   219[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/FreeRTOS_ReleaseUDPPayloadBuffer.html
[01;32m[K   219[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/FreeRTOS_ReleaseUDPPayloadBuffer.html
[01;32m[K   235[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/pxGetNetworkBufferWithDescriptor.html
[01;32m[K   235[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/pxGetNetworkBufferWithDescriptor.html
[01;32m[K   306[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/vReleaseNetworkBufferAndDescriptor.html
[01;32m[K   306[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/vReleaseNetworkBufferAndDescriptor.html
[01;32m[K   324[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/FreeRTOS_GetAddressConfiguration.html
[01;32m[K   324[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/FreeRTOS_GetAddressConfiguration.html
[01;32m[K   357[m[K	 * application but are invoked by the FreeRTOS [01;31m[KAPI[m[K.
[01;32m[K   362[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/vApplicationIPNetworkEventHook.html
[01;32m[K   362[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/[01;31m[KAPI[m[K/vApplicationIPNetworkEventHook.html

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   601[m[K				/* while the IP-task works on the request, the [01;31m[KAPI[m[K will block on
[01;32m[K   617[m[K				wakeup the calling [01;31m[KAPI[m[K */
[01;32m[K   695[m[K				socket, thus unblocking this [01;31m[KAPI[m[K call. */
[01;32m[K  1087[m[K				/* If vSocketBind() is called from the [01;31m[KAPI[m[K FreeRTOS_bind() it has been

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K   257[m[K		/* This is a Windows thread, not a FreeRTOS task. FreeRTOS [01;31m[KAPI[m[K's may not be called. */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K    96[m[K	/* ======================= [01;31m[KAPI[m[K Function definitions ========================= */
[01;32m[K    99[m[K	 * @brief [01;31m[KAPI[m[K call, called from reeRTOS_IP.c to initialize the capture device
[01;32m[K   140[m[K	 * @brief [01;31m[KAPI[m[K call, called from reeRTOS_IP.c to send a network packet over the

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   598[m[K	 * It is called at regular intervals through the [01;31m[KAPI[m[K xemacpsif_resetrx_on_no_rxdata

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif.h[39m

[01;32m[K    39[m[K	#include "xemacps.h"		/* defines XEmacPs [01;31m[KAPI[m[K */

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K    46[m[K	/**  SOFTWARE [01;31m[KAPI[m[K DEFINITION FOR Gigabit Ethernet MAC */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K     4[m[K	 * \brief [01;31m[KAPI[m[K driver for KSZ8051MNL PHY component.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K    25[m[K	      (#)Call HAL_ETH_Init() [01;31m[KAPI[m[K to initialize the Ethernet peripheral (MAC, DMA, ...)
[01;32m[K    27[m[K	      (#)Initialize the ETH low level resources through the HAL_ETH_MspInit() [01;31m[KAPI[m[K:

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   414[m[K					/* FreeRTOS_bind (a user [01;31m[KAPI[m[K) wants the IP-task to bind a socket
[01;32m[K   417[m[K					[01;31m[KAPI[m[K will unblock as soon as the eSOCKET_BOUND event is
[01;32m[K   433[m[K					/* The user [01;31m[KAPI[m[K FreeRTOS_closesocket() has sent a message to the
[01;32m[K   436[m[K					report back to the [01;31m[KAPI[m[K, so the [01;31m[KAPI[m[K won't wait for the result */
[01;32m[K   499[m[K					/* The [01;31m[KAPI[m[K FreeRTOS_accept() was called, the IP-task will now

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   239[m[K		eTCPAcceptEvent,		/* 7: Client [01;31m[KAPI[m[K FreeRTOS_accept() waiting for client connections. */

[1;34m./include/NetworkInterface.h[39m

[01;32m[K    33[m[K	/* INTERNAL [01;31m[KAPI[m[K FUNCTIONS. */

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   312[m[K	 * //_RB_ Don't think this comment is correct.  If this is for internal use only it should appear after all the public [01;31m[KAPI[m[K functions and not start with FreeRTOS_.
[01;32m[K   312[m[K	 * //_RB_ Don't think this comment is correct.  If this is for internal use only it should appear after all the public [01;31m[KAPI[m[K functions and not start with FreeRTOS_.

[1;34m./include/NetworkBufferManagement.h[39m

[01;32m[K    33[m[K	/* NOTE PUBLIC [01;31m[KAPI[m[K FUNCTIONS. */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K    60[m[K	/* [01;31m[KAPI[m[K function error values.  As errno is supported, the FreeRTOS sockets
[01;32m[K    64[m[K	In case of an error, [01;31m[KAPI[m[K's will still return negative numbers, e.g.
[01;32m[K   210[m[K		Berkeley [01;31m[KAPI[m[K. */

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    86[m[K	 * NOT A PUBLIC [01;31m[KAPI[m[K FUNCTION.

[1;34m./test/cbmc/proofs/UDP/vProcessGeneratedUDPPacket/vProcessGeneratedUDPPacket_harness.c[39m

[01;32m[K    18[m[K	/* Include the stubs for [01;31m[KAPIs[m[K. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   130[m[K	 * \brief Return codes for GMAC [01;31m[KAPIs[m[K.

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   131[m[K	 * \brief Return codes for GMAC [01;31m[KAPIs[m[K.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   136[m[K	 * \brief Return codes for GMAC [01;31m[KAPIs[m[K.

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   191[m[K	 * [01;31m[KapPos[m[K will point to a location with the circular data buffer: txStream */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K     6[m[K	  * @date    14-[01;31m[KApril[m[K-2017

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1304[m[K	  *             @[01;31m[Karg[m[K ETH_MAC_Address0: MAC Address0
[01;32m[K  1305[m[K	  *             @[01;31m[Karg[m[K ETH_MAC_Address1: MAC Address1
[01;32m[K  1306[m[K	  *             @[01;31m[Karg[m[K ETH_MAC_Address2: MAC Address2
[01;32m[K  1307[m[K	  *             @[01;31m[Karg[m[K ETH_MAC_Address3: MAC Address3

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K  1752[m[K	  *     @[01;31m[Karg[m[K ETH_DMATXDESC_CHECKSUMBYPASS : Checksum bypass
[01;32m[K  1753[m[K	  *     @[01;31m[Karg[m[K ETH_DMATXDESC_CHECKSUMIPV4HEADER : IPv4 header checksum
[01;32m[K  1754[m[K	  *     @[01;31m[Karg[m[K ETH_DMATXDESC_CHECKSUMTCPUDPICMPSEGMENT : TCP/UDP/ICMP checksum. Pseudo header checksum is assumed to be present
[01;32m[K  1755[m[K	  *     @[01;31m[Karg[m[K ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL : TCP/UDP/ICMP checksum fully in hardware including pseudo header
[01;32m[K  1794[m[K	  *     @[01;31m[Karg[m[K ETH_MAC_IT_TST : Time stamp trigger interrupt
[01;32m[K  1795[m[K	  *     @[01;31m[Karg[m[K ETH_MAC_IT_PMT : PMT interrupt
[01;32m[K  1806[m[K	  *     @[01;31m[Karg[m[K ETH_MAC_IT_TST : Time stamp trigger interrupt
[01;32m[K  1807[m[K	  *     @[01;31m[Karg[m[K ETH_MAC_IT_PMT : PMT interrupt
[01;32m[K  1845[m[K	  *     @[01;31m[Karg[m[K ETH_MAC_FLAG_TST  : Time stamp trigger flag
[01;32m[K  1846[m[K	  *     @[01;31m[Karg[m[K ETH_MAC_FLAG_MMCT : MMC transmit flag
[01;32m[K  1847[m[K	  *     @[01;31m[Karg[m[K ETH_MAC_FLAG_MMCR : MMC receive flag
[01;32m[K  1848[m[K	  *     @[01;31m[Karg[m[K ETH_MAC_FLAG_MMC  : MMC flag
[01;32m[K  1849[m[K	  *     @[01;31m[Karg[m[K ETH_MAC_FLAG_PMT  : PMT flag
[01;32m[K  1901[m[K	  *     @[01;31m[Karg[m[K ETH_DMA_OVERFLOW_RXFIFOCOUNTER : Overflow for FIFO Overflows Counter
[01;32m[K  1902[m[K	  *     @[01;31m[Karg[m[K ETH_DMA_OVERFLOW_MISSEDFRAMECOUNTER : Overflow for Buffer Unavailable Missed Frame Counter
[01;32m[K  1978[m[K	  *     @[01;31m[Karg[m[K ETH_PMT_FLAG_WUFFRPR : Wake-Up Frame Filter Register Pointer Reset
[01;32m[K  1979[m[K	  *     @[01;31m[Karg[m[K ETH_PMT_FLAG_WUFR    : Wake-Up Frame Received
[01;32m[K  1980[m[K	  *     @[01;31m[Karg[m[K ETH_PMT_FLAG_MPR     : Magic Packet Received
[01;32m[K  2054[m[K	  *     @[01;31m[Karg[m[K ETH_MMC_IT_RGUF  : When Rx good unicast frames counter reaches half the maximum value
[01;32m[K  2055[m[K	  *     @[01;31m[Karg[m[K ETH_MMC_IT_RFAE  : When Rx alignment error counter reaches half the maximum value
[01;32m[K  2056[m[K	  *     @[01;31m[Karg[m[K ETH_MMC_IT_RFCE  : When Rx crc error counter reaches half the maximum value
[01;32m[K  2065[m[K	  *     @[01;31m[Karg[m[K ETH_MMC_IT_RGUF  : When Rx good unicast frames counter reaches half the maximum value
[01;32m[K  2066[m[K	  *     @[01;31m[Karg[m[K ETH_MMC_IT_RFAE  : When Rx alignment error counter reaches half the maximum value
[01;32m[K  2067[m[K	  *     @[01;31m[Karg[m[K ETH_MMC_IT_RFCE  : When Rx crc error counter reaches half the maximum value
[01;32m[K  2076[m[K	  *     @[01;31m[Karg[m[K ETH_MMC_IT_TGF   : When Tx good frame counter reaches half the maximum value
[01;32m[K  2077[m[K	  *     @[01;31m[Karg[m[K ETH_MMC_IT_TGFMSC: When Tx good multi col counter reaches half the maximum value
[01;32m[K  2078[m[K	  *     @[01;31m[Karg[m[K ETH_MMC_IT_TGFSC : When Tx good single col counter reaches half the maximum value
[01;32m[K  2088[m[K	  *     @[01;31m[Karg[m[K ETH_MMC_IT_TGF   : When Tx good frame counter reaches half the maximum value
[01;32m[K  2089[m[K	  *     @[01;31m[Karg[m[K ETH_MMC_IT_TGFMSC: When Tx good multi col counter reaches half the maximum value
[01;32m[K  2090[m[K	  *     @[01;31m[Karg[m[K ETH_MMC_IT_TGFSC : When Tx good single col counter reaches half the maximum value

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   213[m[K			uint32_t ulIPAddresses[ ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY ]; /* The IP address(es) of an [01;31m[KARP[m[K cache entry. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   189[m[K	 * Let [01;31m[KARP[m[K look-up the MAC-address of the peer and initialise the first SYN
[01;32m[K   979[m[K	 * the Ethernet address of the target will be found using [01;31m[KARP[m[K.  In case the
[01;32m[K  1002[m[K		/* Determine the [01;31m[KARP[m[K cache status for the requested IP address. */
[01;32m[K  1007[m[K		case eARPCacheHit:		/* An [01;31m[KARP[m[K table lookup found a valid entry. */
[01;32m[K  1009[m[K		case eARPCacheMiss:		/* An [01;31m[KARP[m[K table lookup did not find a valid entry. */
[01;32m[K  1010[m[K		case eCantSendPacket:	/* There is no IP address, or an [01;31m[KARP[m[K is still in progress. */
[01;32m[K  1012[m[K			/* Count the number of times it couldn't find the [01;31m[KARP[m[K address. */
[01;32m[K  1026[m[K			/* And issue a (new) [01;31m[KARP[m[K request */
[01;32m[K  1992[m[K				/* Still in the [01;31m[KARP[m[K phase: check every half second. */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K    50[m[K	/* When the age of an entry in the [01;31m[KARP[m[K table reaches this value (it counts down
[01;32m[K    51[m[K	to zero, so this is an old entry) an [01;31m[KARP[m[K request will be sent to see if the
[01;32m[K    63[m[K	 * Lookup an MAC address in the [01;31m[KARP[m[K cache from the IP address.
[01;32m[K    69[m[K	/* The [01;31m[KARP[m[K cache. */
[01;32m[K    72[m[K	/* The time at which the last gratuitous [01;31m[KARP[m[K was sent.  Gratuitous ARPs are used
[01;32m[K    73[m[K	to ensure [01;31m[KARP[m[K tables are up to date and to detect IP address conflicts. */
[01;32m[K    79[m[K	 * gratuitos [01;31m[KARP[m[K message and, after a period of time, check the variables here below:
[01;32m[K    82[m[K		/* Becomes non-zero if another device responded to a gratuitos [01;31m[KARP[m[K message. */
[01;32m[K   112[m[K					/* The packet contained an [01;31m[KARP[m[K request.  Was it for the IP
[01;32m[K   119[m[K						entry into the [01;31m[KARP[m[K cache, or refresh the entry if it
[01;32m[K   148[m[K					/* Process received [01;31m[KARP[m[K frame to see if there is a clash. */
[01;32m[K   180[m[K			/* For each entry in the [01;31m[KARP[m[K cache table. */
[01;32m[K   225[m[K			/* For each entry in the [01;31m[KARP[m[K cache table. */
[01;32m[K   252[m[K						indicate that there is an outstanding [01;31m[KARP[m[K request, This entry will have
[01;32m[K   272[m[K					for an [01;31m[KARP[m[K reply.  Still want to see if there is match with the
[01;32m[K   283[m[K					/* If [01;31m[KARP[m[K stores the MAC address of IP addresses outside the
[01;32m[K   370[m[K			/* Loop through each entry in the [01;31m[KARP[m[K cache. */
[01;32m[K   373[m[K				/* Does this row in the [01;31m[KARP[m[K cache table hold an entry for the MAC
[01;32m[K   480[m[K						/* It might be that the [01;31m[KARP[m[K has to go to the gateway. */
[01;32m[K   497[m[K		/* Loop through each entry in the [01;31m[KARP[m[K cache. */
[01;32m[K   500[m[K			/* Does this row in the [01;31m[KARP[m[K cache table hold an entry for the IP address
[01;32m[K   507[m[K					/* This entry is waiting an [01;31m[KARP[m[K reply, so is not valid. */
[01;32m[K   529[m[K		/* Loop through each entry in the [01;31m[KARP[m[K cache. */
[01;32m[K   535[m[K				/* Decrement the age value of the entry in this [01;31m[KARP[m[K cache table row.
[01;32m[K   539[m[K				/* If the entry is not yet valid, then it is waiting an [01;31m[KARP[m[K
[01;32m[K   540[m[K				reply, and the [01;31m[KARP[m[K request should be retransmitted. */
[01;32m[K   578[m[K		/* Setting xLastGratuitousARPTime to 0 will force a gratuitous [01;31m[KARP[m[K the next
[01;32m[K   624[m[K				/* Send a message to the IP-task to send this [01;31m[KARP[m[K packet. */
[01;32m[K   638[m[K	/* Part of the Ethernet and [01;31m[KARP[m[K headers are always constant when sending an IPv4
[01;32m[K   639[m[K	[01;31m[KARP[m[K packet.  This array defines the constant parts, allowing this part of the
[01;32m[K   659[m[K		for an [01;31m[KARP[m[K packet. See buffer allocation implementations 1
[01;32m[K   747[m[K			/* Loop through each entry in the [01;31m[KARP[m[K cache. */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   216[m[K	 * a gratuitous [01;31m[KARP[m[K request and wait if another device responds to it.
[01;32m[K   414[m[K					start the [01;31m[KARP[m[K timer. */
[01;32m[K   466[m[K						/* [01;31m[KARP[m[K OK. proceed. */
[01;32m[K   471[m[K						network-up event and start the [01;31m[KARP[m[K timer. */
[01;32m[K   477[m[K						/* [01;31m[KARP[m[K clashed - try another IP address. */
[01;32m[K   542[m[K			call vIPNetworkUpCalls() to send the network-up event and start the [01;31m[KARP[m[K
[01;32m[K  1056[m[K			/* Close socket to ensure packets don't queue on it. not needed anymore as DHCP failed. but still need timer for [01;31m[KARP[m[K testing. */
[01;32m[K  1060[m[K			EP_DHCPData.xDHCPTxPeriod = pdMS_TO_TICKS( 3000UL + ( ulNumbers[ 0 ] & 0x3ffUL ) ); /*  do [01;31m[KARP[m[K test every (3 + 0-1024mS) seconds. */
[01;32m[K  1062[m[K			xARPHadIPClash = pdFALSE;	   /* reset flag that shows if have [01;31m[KARP[m[K clash. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K   155[m[K	/* The [01;31m[KARP[m[K cache is a table that maps IP addresses to MAC addresses.  The IP
[01;32m[K   159[m[K	 * address the MAC address and IP address are added to the [01;31m[KARP[m[K cache.  When a UDP
[01;32m[K   160[m[K	 * message is sent to a remote IP address that does not already appear in the [01;31m[KARP[m[K
[01;32m[K   161[m[K	 * cache then the UDP message is replaced by a [01;31m[KARP[m[K message that solicits the
[01;32m[K   163[m[K	 * number of entries that can exist in the [01;31m[KARP[m[K table at any one time. */
[01;32m[K   166[m[K	/* [01;31m[KARP[m[K requests that do not result in an [01;31m[KARP[m[K response will be re-transmitted a
[01;32m[K   167[m[K	 * maximum of ipconfigMAX_ARP_RETRANSMISSIONS times before the [01;31m[KARP[m[K request is
[01;32m[K   171[m[K	/* ipconfigMAX_ARP_AGE defines the maximum time between an entry in the [01;31m[KARP[m[K
[01;32m[K   173[m[K	 * New [01;31m[KARP[m[K requests are sent for [01;31m[KARP[m[K cache entries that are nearing their maximum

[1;34m./test/cbmc/proofs/prvProcessEthernetPacket/prvProcessEthernetPacket_harness.c[39m

[01;32m[K    30[m[K	/* This function has been proved to be memory safe in another proof (in [01;31m[KARP[m[K/ARPRefreshCacheEntry). Hence we assume it to be correct here. */
[01;32m[K    36[m[K	/* This function has been proved to be memory safe in another proof (in [01;31m[KARP[m[K/ARPProcessPacket). Hence we assume it to be correct here. */

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K   154[m[K	/* The [01;31m[KARP[m[K cache is a table that maps IP addresses to MAC addresses.  The IP
[01;32m[K   158[m[K	 * address the MAC address and IP address are added to the [01;31m[KARP[m[K cache.  When a UDP
[01;32m[K   159[m[K	 * message is sent to a remote IP address that does not already appear in the [01;31m[KARP[m[K
[01;32m[K   160[m[K	 * cache then the UDP message is replaced by a [01;31m[KARP[m[K message that solicits the
[01;32m[K   162[m[K	 * number of entries that can exist in the [01;31m[KARP[m[K table at any one time. */
[01;32m[K   167[m[K	/* [01;31m[KARP[m[K requests that do not result in an [01;31m[KARP[m[K response will be re-transmitted a
[01;32m[K   168[m[K	 * maximum of ipconfigMAX_ARP_RETRANSMISSIONS times before the [01;31m[KARP[m[K request is
[01;32m[K   172[m[K	/* ipconfigMAX_ARP_AGE defines the maximum time between an entry in the [01;31m[KARP[m[K
[01;32m[K   174[m[K	 * New [01;31m[KARP[m[K requests are sent for [01;31m[KARP[m[K cache entries that are nearing their maximum

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K   453[m[K					/* The Ethernet frame contains an [01;31m[KARP[m[K packet. */

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K   165[m[K			headers, or an [01;31m[KARP[m[K packet, in case TCP is not included. */
[01;32m[K   217[m[K				/* [01;31m[KARP[m[K packets can replace application packets, so the storage must be
[01;32m[K   218[m[K				at least large enough to hold an [01;31m[KARP[m[K. */

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   355[m[K	         * headers, or an [01;31m[KARP[m[K packet, in case TCP is not included. */
[01;32m[K   419[m[K	        /* [01;31m[KARP[m[K packets can replace application packets, so the storage must be
[01;32m[K   420[m[K	         * at least large enough to hold an [01;31m[KARP[m[K. */

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   458[m[K	#define GMAC_WOL_IP_Msk (0xffffu << GMAC_WOL_IP_Pos) /**< \brief (GMAC_WOL) [01;31m[KARP[m[K Request IP Address */
[01;32m[K   461[m[K	#define GMAC_WOL_ARP (0x1u << 17) /**< \brief (GMAC_WOL) [01;31m[KARP[m[K Request IP Address */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K    98[m[K		/* Determine the [01;31m[KARP[m[K cache status for the requested IP address. */
[01;32m[K   204[m[K				/* Add an entry to the [01;31m[KARP[m[K table with a null hardware address.
[01;32m[K   205[m[K				This allows the [01;31m[KARP[m[K timer to know that an [01;31m[KARP[m[K reply is
[01;32m[K   209[m[K				/* Generate an [01;31m[KARP[m[K for the required IP address. */
[01;32m[K   216[m[K				/* The lookup indicated that an [01;31m[KARP[m[K request has already been
[01;32m[K   269[m[K			/* When refreshing the [01;31m[KARP[m[K cache with received UDP packets we must be
[01;32m[K   271[m[K			handling them, no use to fill the [01;31m[KARP[m[K cache with those IP addresses. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K    80[m[K	/* Defines how often the [01;31m[KARP[m[K timer callback function is executed.  The time is
[01;32m[K   209[m[K	 * Checks the [01;31m[KARP[m[K, DHCP and TCP timers to see if any periodic or timeout
[01;32m[K   289[m[K		1. [01;31m[KARP[m[K, to check its table entries
[01;32m[K   355[m[K			/* Check the [01;31m[KARP[m[K, DHCP and TCP timers to see if there is any periodic
[01;32m[K   409[m[K					/* The [01;31m[KARP[m[K timer has expired, process the [01;31m[KARP[m[K cache. */
[01;32m[K   655[m[K		/* Is it time for [01;31m[KARP[m[K processing? */
[01;32m[K  1026[m[K					/* Added to prevent [01;31m[KARP[m[K flood to gateway.  Ensure the
[01;32m[K  1343[m[K		/* Stop the [01;31m[KARP[m[K timer while there is no network. */
[01;32m[K  1361[m[K		/* Per the [01;31m[KARP[m[K Cache Validation section of https://tools.ietf.org/html/rfc1122, 
[01;32m[K  1361[m[K		/* Per the [01;31m[KARP[m[K Cache Validation section of https://tools.ietf.org/html/rfc1122, 
[01;32m[K  1362[m[K		treat network down as a "delivery problem" and flush the [01;31m[KARP[m[K cache for this
[01;32m[K  1444[m[K					/* The Ethernet frame contains an [01;31m[KARP[m[K packet. */
[01;32m[K  1480[m[K				an [01;31m[KARP[m[K request or a PING request?) and should be sent back to
[01;32m[K  1739[m[K					/* Add the IP and MAC addresses to the [01;31m[KARP[m[K table if they are not
[01;32m[K  1744[m[K						/* Refresh the [01;31m[KARP[m[K cache with the IP/MAC-address of the received
[01;32m[K  1747[m[K						will be handled.  This will prevent the [01;31m[KARP[m[K cache getting

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   225[m[K		eReturnEthernetFrame,	/* The Ethernet frame contains an [01;31m[KARP[m[K or ICMP packet that can be returned to its source. */
[01;32m[K   235[m[K		eARPTimerEvent,			/* 3: The [01;31m[KARP[m[K timer expired. */
[01;32m[K   277[m[K		/* [01;31m[KARP[m[K related definitions. */
[01;32m[K   289[m[K		/* [01;31m[KARP[m[K related definitions. */
[01;32m[K   432[m[K	 * Processes incoming [01;31m[KARP[m[K packets.
[01;32m[K   697[m[K	 * An Ethernet frame has been updated (maybe it was an [01;31m[KARP[m[K request or a PING
[01;32m[K   822[m[K	/* Send the network-up event and start the [01;31m[KARP[m[K timer. */

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    44[m[K		uint32_t ulIPAddress;		/* The IP address of an [01;31m[KARP[m[K cache entry. */
[01;32m[K    45[m[K		MACAddress_t xMACAddress;	/* The MAC address of an [01;31m[KARP[m[K cache entry. */
[01;32m[K    46[m[K		uint8_t ucAge;				/* A value that is periodically decremented but can also be refreshed by active communication.  The [01;31m[KARP[m[K cache entry is removed if the value reaches zero. */
[01;32m[K    47[m[K	    uint8_t ucValid;			/* pdTRUE: xMACAddress is valid, pdFALSE: waiting for [01;31m[KARP[m[K reply */
[01;32m[K    52[m[K		eARPCacheMiss = 0,			/* 0 An [01;31m[KARP[m[K table lookup did not find a valid entry. */
[01;32m[K    53[m[K		eARPCacheHit,				/* 1 An [01;31m[KARP[m[K table lookup found a valid entry. */
[01;32m[K    54[m[K		eCantSendPacket				/* 2 There is no IP address, or an [01;31m[KARP[m[K is still in progress, so the packet cannot be sent. */
[01;32m[K    58[m[K	 * If ulIPAddress is already in the [01;31m[KARP[m[K cache table then reset the age of the
[01;32m[K    59[m[K	 * entry back to its maximum value.  If ulIPAddress is not already in the [01;31m[KARP[m[K
[01;32m[K    66[m[K		/* Becomes non-zero if another device responded to a gratuitos [01;31m[KARP[m[K message. */
[01;32m[K    75[m[K		 * In some rare cases, it might be useful to remove a [01;31m[KARP[m[K cache entry of a
[01;32m[K    83[m[K	 * Look for ulIPAddress in the [01;31m[KARP[m[K cache.  If the IP address exists, copy the
[01;32m[K    84[m[K	 * associated MAC address into pxMACAddress, refresh the [01;31m[KARP[m[K cache entry's
[01;32m[K    85[m[K	 * age, and return eARPCacheHit.  If the IP address does not exist in the [01;31m[KARP[m[K
[01;32m[K    99[m[K	 * Reduce the age count in each entry within the [01;31m[KARP[m[K cache.  An entry is no
[01;32m[K   105[m[K	 * Send out an [01;31m[KARP[m[K request for the IP address contained in pxNetworkBuffer, and
[01;32m[K   106[m[K	 * add an entry into the [01;31m[KARP[m[K table that indicates that an [01;31m[KARP[m[K reply is

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   318[m[K	/* _HT_ Temporary: show all valid [01;31m[KARP[m[K entries

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_OutputARPRequest/OutputARPRequest_harness.c[39m

[01;32m[K    51[m[K	 * and writes a complete [01;31m[KARPPacket[m[K to it. Therefore the buffer has to be at least of the size
[01;32m[K    52[m[K	 * of an [01;31m[KARPPacket[m[K to gurantee memory safety.

[1;34m./test/cbmc/proofs/prvProcessEthernetPacket/prvProcessEthernetPacket_harness.c[39m

[01;32m[K    36[m[K	/* This function has been proved to be memory safe in another proof (in ARP/[01;31m[KARPProcessPacket[m[K). Hence we assume it to be correct here. */

[1;34m./test/cbmc/proofs/prvProcessEthernetPacket/prvProcessEthernetPacket_harness.c[39m

[01;32m[K    30[m[K	/* This function has been proved to be memory safe in another proof (in ARP/[01;31m[KARPRefreshCacheEntry[m[K). Hence we assume it to be correct here. */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K    55[m[K	/* The time between gratuitous [01;31m[KARPs[m[K. */
[01;32m[K    72[m[K	/* The time at which the last gratuitous ARP was sent.  Gratuitous [01;31m[KARPs[m[K are used

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   117[m[K	/* Define the [01;31m[KASCII[m[K value of '.' (Period/Full-stop). */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K    91[m[K	readable [01;31m[KASCII[m[K form.  See the notes in the implementation of vTaskList() within

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K   123[m[K	 * readable [01;31m[KASCII[m[K form.  See the notes in the implementation of vTaskList() within

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1991[m[K				/* Add the binary value of the [01;31m[Kascii[m[K character. */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   280[m[K	Declared in [01;31m[KASF[m[K\sam\components\ksz8851snl\ksz8851snl.c */
[01;32m[K   284[m[K	declared in [01;31m[KASF[m[K\sam\components\ksz8851snl\ksz8851snl.c */

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   104[m[K	 * Called from the [01;31m[KASF[m[K GMAC driver.
[01;32m[K   115[m[K	 * Initialise the [01;31m[KASF[m[K GMAC driver.
[01;32m[K   143[m[K	/* The GMAC object as defined by the [01;31m[KASF[m[K drivers. */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   151[m[K	 * Called from the [01;31m[KASF[m[K GMAC driver.
[01;32m[K   162[m[K	 * Initialise the [01;31m[KASF[m[K GMAC driver.
[01;32m[K   189[m[K	/* The GMAC object as defined by the [01;31m[KASF[m[K drivers. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K     7[m[K	 * Copyright (c) 2013-2015 [01;31m[KAtmel[m[K Corporation. All rights reserved.
[01;32m[K    23[m[K	 * 3. The name of [01;31m[KAtmel[m[K may not be used to endorse or promote products derived
[01;32m[K    27[m[K	 *    [01;31m[KAtmel[m[K microcontroller product.
[01;32m[K    29[m[K	 * THIS SOFTWARE IS PROVIDED BY [01;31m[KATMEL[m[K "AS IS" AND ANY EXPRESS OR IMPLIED
[01;32m[K    32[m[K	 * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL [01;31m[KATMEL[m[K BE LIABLE FOR
[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="http://www.[01;31m[Katmel[m[K.com/design-support/">[01;31m[KAtmel[m[K Support</a>
[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="http://www.[01;31m[Katmel[m[K.com/design-support/">[01;31m[KAtmel[m[K Support</a>

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K    51[m[K	/* Some files from the [01;31m[KAtmel[m[K Software Framework */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K     7[m[K	 * Copyright (c) 2013-2015 [01;31m[KAtmel[m[K Corporation. All rights reserved.
[01;32m[K    23[m[K	 * 3. The name of [01;31m[KAtmel[m[K may not be used to endorse or promote products derived
[01;32m[K    27[m[K	 *    [01;31m[KAtmel[m[K microcontroller product.
[01;32m[K    29[m[K	 * THIS SOFTWARE IS PROVIDED BY [01;31m[KATMEL[m[K "AS IS" AND ANY EXPRESS OR IMPLIED
[01;32m[K    32[m[K	 * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL [01;31m[KATMEL[m[K BE LIABLE FOR
[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="http://www.[01;31m[Katmel[m[K.com/design-support/">[01;31m[KAtmel[m[K Support</a>
[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="http://www.[01;31m[Katmel[m[K.com/design-support/">[01;31m[KAtmel[m[K Support</a>

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.h[39m

[01;32m[K     7[m[K	 * Copyright (c) 2013-2015 [01;31m[KAtmel[m[K Corporation. All rights reserved.
[01;32m[K    23[m[K	 * 3. The name of [01;31m[KAtmel[m[K may not be used to endorse or promote products derived
[01;32m[K    27[m[K	 *    [01;31m[KAtmel[m[K microcontroller product.
[01;32m[K    29[m[K	 * THIS SOFTWARE IS PROVIDED BY [01;31m[KATMEL[m[K "AS IS" AND ANY EXPRESS OR IMPLIED
[01;32m[K    32[m[K	 * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL [01;31m[KATMEL[m[K BE LIABLE FOR
[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="http://www.[01;31m[Katmel[m[K.com/design-support/">[01;31m[KAtmel[m[K Support</a>
[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="http://www.[01;31m[Katmel[m[K.com/design-support/">[01;31m[KAtmel[m[K Support</a>

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K     6[m[K	 * Copyright (c) 2013 [01;31m[KAtmel[m[K Corporation. All rights reserved.
[01;32m[K    22[m[K	 * 3. The name of [01;31m[KAtmel[m[K may not be used to endorse or promote products derived
[01;32m[K    26[m[K	 *    [01;31m[KAtmel[m[K microcontroller product.
[01;32m[K    28[m[K	 * THIS SOFTWARE IS PROVIDED BY [01;31m[KATMEL[m[K "AS IS" AND ANY EXPRESS OR IMPLIED
[01;32m[K    31[m[K	 * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL [01;31m[KATMEL[m[K BE LIABLE FOR

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K    44[m[K	/* Some files from the [01;31m[KAtmel[m[K Software Framework */
[01;32m[K   136[m[K	[01;31m[KAtmel[m[K was a bit ambiguous about it so the address will be stored

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K     6[m[K	 * Copyright (c) 2013 [01;31m[KAtmel[m[K Corporation. All rights reserved.
[01;32m[K    22[m[K	 * 3. The name of [01;31m[KAtmel[m[K may not be used to endorse or promote products derived
[01;32m[K    26[m[K	 *    [01;31m[KAtmel[m[K microcontroller product.
[01;32m[K    28[m[K	 * THIS SOFTWARE IS PROVIDED BY [01;31m[KATMEL[m[K "AS IS" AND ANY EXPRESS OR IMPLIED
[01;32m[K    31[m[K	 * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL [01;31m[KATMEL[m[K BE LIABLE FOR
[01;32m[K  1217[m[K	 * for [01;31m[KATMEL[m[K, application should always change this address to its' own.

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K     4[m[K	 * Copyright (c) 2012 [01;31m[KAtmel[m[K Corporation. All rights reserved.
[01;32m[K    20[m[K	 * 3. The name of [01;31m[KAtmel[m[K may not be used to endorse or promote products derived
[01;32m[K    24[m[K	 *    [01;31m[KAtmel[m[K microcontroller product.
[01;32m[K    26[m[K	 * THIS SOFTWARE IS PROVIDED BY [01;31m[KATMEL[m[K "AS IS" AND ANY EXPRESS OR IMPLIED
[01;32m[K    29[m[K	 * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL [01;31m[KATMEL[m[K BE LIABLE FOR

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K     6[m[K	 * Copyright (c) 2013 [01;31m[KAtmel[m[K Corporation. All rights reserved.
[01;32m[K    22[m[K	 * 3. The name of [01;31m[KAtmel[m[K may not be used to endorse or promote products derived
[01;32m[K    26[m[K	 *    [01;31m[KAtmel[m[K microcontroller product.
[01;32m[K    28[m[K	 * THIS SOFTWARE IS PROVIDED BY [01;31m[KATMEL[m[K "AS IS" AND ANY EXPRESS OR IMPLIED
[01;32m[K    31[m[K	 * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL [01;31m[KATMEL[m[K BE LIABLE FOR

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K     6[m[K	 * Copyright (c) 2013 [01;31m[KAtmel[m[K Corporation. All rights reserved.
[01;32m[K    22[m[K	 * 3. The name of [01;31m[KAtmel[m[K may not be used to endorse or promote products derived
[01;32m[K    26[m[K	 *    [01;31m[KAtmel[m[K microcontroller product.
[01;32m[K    28[m[K	 * THIS SOFTWARE IS PROVIDED BY [01;31m[KATMEL[m[K "AS IS" AND ANY EXPRESS OR IMPLIED
[01;32m[K    31[m[K	 * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL [01;31m[KATMEL[m[K BE LIABLE FOR
[01;32m[K  1220[m[K	 * for [01;31m[KATMEL[m[K, application should always change this address to its' own.

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K     6[m[K	 * Copyright (c) 2013 [01;31m[KAtmel[m[K Corporation. All rights reserved.
[01;32m[K    22[m[K	 * 3. The name of [01;31m[KAtmel[m[K may not be used to endorse or promote products derived
[01;32m[K    26[m[K	 *    [01;31m[KAtmel[m[K microcontroller product.
[01;32m[K    28[m[K	 * THIS SOFTWARE IS PROVIDED BY [01;31m[KATMEL[m[K "AS IS" AND ANY EXPRESS OR IMPLIED
[01;32m[K    31[m[K	 * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL [01;31m[KATMEL[m[K BE LIABLE FOR

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K    45[m[K	/* Some files from the [01;31m[KAtmel[m[K Software Framework */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K     6[m[K	 * Copyright (c) 2013-2016 [01;31m[KAtmel[m[K Corporation. All rights reserved.
[01;32m[K    22[m[K	 * 3. The name of [01;31m[KAtmel[m[K may not be used to endorse or promote products derived
[01;32m[K    26[m[K	 *    [01;31m[KAtmel[m[K microcontroller product.
[01;32m[K    28[m[K	 * THIS SOFTWARE IS PROVIDED BY [01;31m[KATMEL[m[K "AS IS" AND ANY EXPRESS OR IMPLIED
[01;32m[K    31[m[K	 * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL [01;31m[KATMEL[m[K BE LIABLE FOR
[01;32m[K    44[m[K	 * Support and FAQ: visit <a href="http://www.[01;31m[Katmel[m[K.com/design-support/">[01;31m[KAtmel[m[K Support</a>
[01;32m[K    44[m[K	 * Support and FAQ: visit <a href="http://www.[01;31m[Katmel[m[K.com/design-support/">[01;31m[KAtmel[m[K Support</a>

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K     6[m[K	 * Copyright (c) 2015-2016 [01;31m[KAtmel[m[K Corporation. All rights reserved.
[01;32m[K    22[m[K	 * 3. The name of [01;31m[KAtmel[m[K may not be used to endorse or promote products derived
[01;32m[K    26[m[K	 *    [01;31m[KAtmel[m[K microcontroller product.
[01;32m[K    28[m[K	 * THIS SOFTWARE IS PROVIDED BY [01;31m[KATMEL[m[K "AS IS" AND ANY EXPRESS OR IMPLIED
[01;32m[K    31[m[K	 * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL [01;31m[KATMEL[m[K BE LIABLE FOR
[01;32m[K    44[m[K	 * Support and FAQ: visit <a href="http://www.[01;31m[Katmel[m[K.com/design-support/">[01;31m[KAtmel[m[K Support</a>
[01;32m[K    44[m[K	 * Support and FAQ: visit <a href="http://www.[01;31m[Katmel[m[K.com/design-support/">[01;31m[KAtmel[m[K Support</a>
[01;32m[K   418[m[K		 * http://community.[01;31m[Katmel[m[K.com/forum/sam4e-gmac-transmit-checksum-offload-enablesolved
[01;32m[K   418[m[K		 * http://community.[01;31m[Katmel[m[K.com/forum/sam4e-gmac-transmit-checksum-offload-enablesolved

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1134[m[K	  /* Set the ACS bit according to ETH [01;31m[KAutomaticPadCRCStrip[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   498[m[K	  uint32_t             [01;31m[KAutomaticPadCRCStrip[m[K;      /*!< Selects or not the Automatic MAC Pad/CRC Stripping.

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K  1115[m[K			else /* [01;31m[KAutoNegotiation[m[K Disable */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   433[m[K	  uint32_t             [01;31m[KAutoNegotiation[m[K;           /*!< Selects or not the [01;31m[KAutoNegotiation[m[K mode for the external PHY
[01;32m[K   434[m[K	                                                           The [01;31m[KAutoNegotiation[m[K allows an automatic setting of the Speed (10/100Mbps)
[01;32m[K   953[m[K	 /** @defgroup ETH_AutoNegotiation ETH [01;31m[KAutoNegotiation[m[K

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./test/unit-test/ConfigFiles/pack_struct_start.h[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./test/unit-test/ConfigFiles/portmacro.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    23[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    23[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K    18[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    18[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./test/unit-test/ConfigFiles/pack_struct_end.h[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./test/unit-test/ConfigFiles/FreeRTOS_errno_TCP.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./test/unit-test/ConfigFiles/NetworkInterface.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./test/unit-test/ConfigFiles/NetworkBufferManagement.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./test/unit-test/ConfigFiles/IPTraceMacroDefaults.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    23[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_OutputARPRequest/OutputARPRequest_harness.c[39m

[01;32m[K    25[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    25[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./test/cbmc/proofs/IP/SendEventToIPTask/SendEventToIPTask_harness.c[39m

[01;32m[K    25[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    25[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./test/cbmc/proofs/TCP/prvTCPReturnPacket/TCPReturnPacket_harness.c[39m

[01;32m[K    25[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    25[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./test/cbmc/proofs/TCP/prvTCPPrepareSend/TCPPrepareSend_harness.c[39m

[01;32m[K    25[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    25[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K    25[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    25[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./test/cbmc/proofs/DHCP/IsDHCPSocket/IsDHCPSocket_harness.c[39m

[01;32m[K    25[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    25[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./test/cbmc/proofs/DHCP/DHCPProcess/DHCPProcess_harness.c[39m

[01;32m[K    25[m[K	  * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    25[m[K	  * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./test/cbmc/proofs/DNS/DNSHandlePacket/DNShandlePacket_harness.c[39m

[01;32m[K    11[m[K	The proof can be found here: https://github.com/[01;31m[Kaws[m[K/amazon-freertos/tree/master/tools/cbmc/proofs/ParseDNSReply */
[01;32m[K    11[m[K	The proof can be found here: https://github.com/[01;31m[Kaws[m[K/amazon-freertos/tree/master/tools/cbmc/proofs/ParseDNSReply */

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./tools/tcp_mem_stats.c[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./FreeRTOS_Stream_Buffer.c[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    23[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/NetworkInterface/SH2A/NetworkInterface.c[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.c[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/NetworkInterface/mw300_rd/NetworkInterface.c[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K    27[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    27[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/NetworkInterface/board_family/NetworkInterface.c[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/Compiler/Keil/pack_struct_start.h[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/Compiler/Keil/pack_struct_end.h[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/Compiler/Renesas/pack_struct_start.h[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/Compiler/Renesas/pack_struct_end.h[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/Compiler/GCC/pack_struct_start.h[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/Compiler/GCC/pack_struct_end.h[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/Compiler/MSVC/pack_struct_start.h[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/Compiler/MSVC/pack_struct_end.h[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/Compiler/CompilerName/pack_struct_start.h[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/Compiler/CompilerName/pack_struct_end.h[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/Compiler/IAR/pack_struct_start.h[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/Compiler/IAR/pack_struct_end.h[39m

[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./include/FreeRTOS_errno_TCP.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./include/NetworkInterface.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./include/NetworkBufferManagement.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./include/tcp_dump_packets.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./include/IPTraceMacroDefaults.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./include/FreeRTOS_TCP_IP.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./include/tcp_mem_stats.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./include/FreeRTOS_UDP_IP.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    23[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos
[01;32m[K    22[m[K	 * http://[01;31m[Kaws[m[K.amazon.com/freertos

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   501[m[K	  uint32_t             BackOffLimit;              /*!< Selects the [01;31m[KBackOff[m[K limit value.
[01;32m[K  1292[m[K		#define ETH_MAC_TRANSMITFRAMECONTROLLER_WAITING         ((uint32_t)0x00020000)  /* MAC transmit frame controller: Waiting for Status of previous frame or IFG/[01;31m[Kbackoff[m[K period to be over */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1135[m[K	  /* Set the BL bit according to ETH [01;31m[KBackOffLimit[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   501[m[K	  uint32_t             [01;31m[KBackOffLimit[m[K;              /*!< Selects the BackOff limit value.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K  1834[m[K	  * @brief  Disables the MAC [01;31m[KBackPressure[m[K operation activation (Half-duplex only).

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   165[m[K			[01;31m[KbActive[m[K : 1,	/* This timer is running and must be processed. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1516[m[K	BaseType_t [01;31m[KbAfter[m[K  = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );					/* Is it connected now ? */
[01;32m[K  1599[m[K			else  /* [01;31m[KbAfter[m[K == pdFALSE, connection is closed. */

[1;34m./test/cbmc/proofs/ARP/ARPAgeCache/ARPAgeCache_harness.c[39m

[01;32m[K    11[m[K	//This is the mock to mimic the correct expected [01;31m[Kbahvior[m[K. If this allocation fails, this might invalidate the proof.

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K     3[m[K	 * Authors include Hein Tibosch and Richard [01;31m[KBarry[m[K

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K   131[m[K		.[01;31m[KBaseAddress[m[K = XPAR_PS7_ETHERNET_0_BASEADDR /**< Physical base address of IPIF registers */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1554[m[K						  AAAAAAA [01;31m[KBBBBBBB[m[K << acked

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1515[m[K	BaseType_t [01;31m[KbBefore[m[K = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.ucTCPState ) );	/* Was it connected ? */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  2815[m[K						/* The flag '[01;31m[KbCloseAfterSend[m[K' can be set before sending data
[01;32m[K  2820[m[K						expected.  The use of '[01;31m[KbCloseAfterSend[m[K' is not mandatory, it

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   525[m[K					[01;31m[KbCloseAfterSend[m[K : 1,/* As soon as the last byte has been transmitted, finalise the connection

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  2826[m[K							setting [01;31m[KbCloseRequested[m[K must be done together */
[01;32m[K  2836[m[K							see	that [01;31m[KbCloseRequested[m[K is true and include the FIN

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   528[m[K					[01;31m[KbCloseRequested[m[K : 1,/* Request to finalise the connection */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   535[m[K						[01;31m[KbConnPassed[m[K : 1,	/* Connecting socket: Socket has been passed in a successful select()  */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   533[m[K					[01;31m[KbConnPrepared[m[K : 1,	/* Connecting socket: Message has been prepared */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   497[m[K		 * We allocate 65536 bytes for RX [01;31m[KBDs[m[K which can accommodate a
[01;32m[K   498[m[K		 * maximum of 8192 [01;31m[KBDs[m[K which is much more than any application

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   349[m[K			FOnDNSEvent pCallbackFunction;	/* Function to be called when the address has been found or when a timeout has [01;31m[Kbeeen[m[K reached */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   657[m[K			/* The function prototype is designed to maintain the expected [01;31m[KBerkeley[m[K
[01;32m[K   820[m[K		/* The function prototype is designed to maintain the expected [01;31m[KBerkeley[m[K
[01;32m[K  1023[m[K	BaseType_t xReturn = 0; /* In [01;31m[KBerkeley[m[K sockets, 0 means pass for bind(). */
[01;32m[K  1041[m[K		/* The function prototype is designed to maintain the expected [01;31m[KBerkeley[m[K
[01;32m[K  1391[m[K	/* The standard [01;31m[KBerkeley[m[K function returns 0 for success. */
[01;32m[K  1397[m[K		/* The function prototype is designed to maintain the expected [01;31m[KBerkeley[m[K

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K    79[m[K	/* Values for the parameters to FreeRTOS_socket(), inline with the [01;31m[KBerkeley[m[K
[01;32m[K   165[m[K	/* For compatibility with the expected [01;31m[KBerkeley[m[K sockets naming. */
[01;32m[K   169[m[K	[01;31m[KBerkeley[m[K style sockaddr structure. */
[01;32m[K   210[m[K		[01;31m[KBerkeley[m[K API. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    62[m[K	#define REG_BUS_ERROR_STATUS       (0x06)       /* [01;31m[KBESR[m[K */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   757[m[K			/* The timer might have set the [01;31m[KbExpired[m[K flag already, if not, check the

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   166[m[K			[01;31m[KbExpired[m[K : 1;	/* Timer has expired and a task must be processed. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   537[m[K					[01;31m[KbFinAccepted[m[K : 1,	/* This socket has received (or sent) a FIN and accepted it */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2977[m[K								'bFinSent', 'bFinRecv', and '[01;31m[KbFinAcked[m[K'. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   540[m[K					[01;31m[KbFinAcked[m[K : 1,		/* Our FIN packet has been acked */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   541[m[K					[01;31m[KbFinLast[m[K : 1,		/* The last ACK (after FIN and FIN+ACK) has been sent or will be sent by the peer */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2977[m[K								'bFinSent', '[01;31m[KbFinRecv[m[K', and 'bFinAcked'. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   539[m[K					[01;31m[KbFinRecv[m[K : 1,		/* We've received a FIN from our peer */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2706[m[K				( pxSocket->u.xTCP.bits.[01;31m[KbFinSent[m[K == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
[01;32m[K  2977[m[K								'[01;31m[KbFinSent[m[K', 'bFinRecv', and 'bFinAcked'. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   538[m[K					[01;31m[KbFinSent[m[K : 1,		/* We've sent out a FIN */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    98[m[K					[01;31m[KbHasInit[m[K : 1,		/* The window structure has been initialised */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    60[m[K					[01;31m[KbIsForRx[m[K : 1;		/* pdTRUE if segment is used for reception */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   111[m[K	#define   TX_MEM_TEST_FINISHED        (0x1000)    /* TX memeory [01;31m[KBIST[m[K test finish */
[01;32m[K   112[m[K	#define   TX_MEM_TEST_FAILED          (0x0800)    /* TX memory [01;31m[KBIST[m[K test fail */
[01;32m[K   113[m[K	#define   TX_MEM_TEST_FAILED_COUNT    (0x0700)    /* TX memory [01;31m[KBIST[m[K test fail count */
[01;32m[K   114[m[K	#define   RX_MEM_TEST_FINISHED        (0x0010)    /* RX memory [01;31m[KBIST[m[K test finish */
[01;32m[K   115[m[K	#define   RX_MEM_TEST_FAILED          (0x0008)    /* RX memory [01;31m[KBIST[m[K test fail */
[01;32m[K   116[m[K	#define   RX_MEM_TEST_FAILED_COUNT    (0x0003)    /* RX memory [01;31m[KBIST[m[K test fail count */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K    91[m[K		#define	PHY_REG_1B_CDCTRL1    0x1B	// 27	RW		CD Test Control Register and [01;31m[KBIST[m[K Extensions Register

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K    85[m[K	 * \brief Read register content, set [01;31m[Kbitmask[m[K and write back to register.
[01;32m[K    88[m[K	 * \param bits_to_set [01;31m[Kbitmask[m[K to apply.
[01;32m[K   100[m[K	 * \brief Read register content, clear [01;31m[Kbitmask[m[K and write back to register.
[01;32m[K   103[m[K	 * \param bits_to_set [01;31m[Kbitmask[m[K to apply.

[1;34m./portable/NetworkInterface/include/phyHandling.h[39m

[01;32m[K   110[m[K	/* Get the [01;31m[Kbitmask[m[K of a given 'EthernetPhy_t'. */

[1;34m./test/unit-test/ConfigFiles/portmacro.h[39m

[01;32m[K   124[m[K			/* [01;31m[KBitScanReverse[m[K returns the bit position of the most significant '1'

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1135[m[K	  /* Set the [01;31m[KBL[m[K bit according to ETH BackOffLimit value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   494[m[K	  uint32_t             RetryTransmission;         /*!< Selects or not the MAC attempt retries transmission, based on the settings of [01;31m[KBL[m[K,

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2283[m[K				In case the low-water mark is reached, [01;31m[KbLowWater[m[K will be set
[01;32m[K  2305[m[K				In case the low-water mark is reached, [01;31m[KbLowWater[m[K will be set. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  2649[m[K								pxSocket->u.xTCP.usTimeout = 1U; /* because [01;31m[KbLowWater[m[K is cleared. */
[01;32m[K  3389[m[K								/* [01;31m[KbLowWater[m[K was reached, send the changed window size. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   529[m[K					[01;31m[KbLowWater[m[K : 1,		/* high-water level has been reached. Cleared as soon as 'rx-count < lo-water' */
[01;32m[K   530[m[K					bWinChange : 1,		/* The value of [01;31m[KbLowWater[m[K has changed, must send a window update */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2292[m[K					[01;31m[KbMallocError[m[K has been set.  The socket now has the status

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   543[m[K					[01;31m[KbMallocError[m[K : 1,	/* There was an error allocating a stream */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  2239[m[K				xResult = [01;31m[KbMayConnect[m[K( pxSocket ); /* -EINPROGRESS, -EAGAIN, or 0 for OK */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   519[m[K					[01;31m[KbMssChange[m[K : 1,		/* This socket has seen a change in MSS */

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K   101[m[K	/* [01;31m[KBollean[m[K 'xDumpingReady' becomes true once all desired packet have been collected.

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K   100[m[K	    static [01;31m[Kbool[m[K macLinkStatus;              /* true if link is ON */
[01;32m[K   617[m[K	                [01;31m[Kbool[m[K linkCurr = ( macObject->TCPIP_MAC_LinkCheck )( macCliHandle ); /* check link status */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    58[m[K					[01;31m[KbOutstanding[m[K : 1,	/* It the peer's turn, we're just waiting for an ACK */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  3454[m[K			/* When [01;31m[KbPassAccept[m[K is true, this socket may be returned in a call to

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   520[m[K					[01;31m[KbPassAccept[m[K : 1,	/* when true, this socket may be returned in a call to accept() */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   447[m[K					/* When '[01;31m[KbPassQueued[m[K' true, this socket is an orphan until it
[01;32m[K  1530[m[K				/* if [01;31m[KbPassQueued[m[K is true, this socket is an orphan until it gets connected. */
[01;32m[K  3444[m[K			/* When [01;31m[KbPassQueued[m[K is true, the socket is an orphan until it gets

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   521[m[K					[01;31m[KbPassQueued[m[K : 1,	/* when true, this socket is an orphan until it gets connected

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   234[m[K	#define GMAC_UR_BPDG (0x1u << 7) /**< \brief (GMAC_UR) [01;31m[KBPDG[m[K Bypass Deglitchers */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   437[m[K					/* [01;31m[KbReleaseAfterSend[m[K should always be set when using the zero

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K   122[m[K		if( xCheckLoopback( pxDescriptor, [01;31m[KbReleaseAfterSend[m[K ) != 0 )

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   333[m[K	 * state (depends on the '[01;31m[KbReuseSocket[m[K' flag).
[01;32m[K  3152[m[K						(if [01;31m[KbReuseSocket[m[K is false), otherwise it returns the current
[01;32m[K  3316[m[K				/* The flag [01;31m[KbReuseSocket[m[K indicates that the same instance of the
[01;32m[K  3324[m[K				/* The socket does not have the [01;31m[KbReuseSocket[m[K flag set meaning create a

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  2993[m[K					/* Now set the [01;31m[KbReuseSocket[m[K flag again, because the bits have

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   524[m[K					[01;31m[KbReuseSocket[m[K : 1,	/* When a listening socket gets a connection, do not create a new instance but keep on using it */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1158[m[K	  /* Set the DBF bit according to ETH [01;31m[KBroadcastFramesReception[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   516[m[K	  uint32_t             [01;31m[KBroadcastFramesReception[m[K;  /*!< Selects or not the reception of Broadcast Frames.

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1717[m[K						pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear [01;31m[KbRxStopped[m[K */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   542[m[K					[01;31m[KbRxStopped[m[K : 1,		/* Application asked to temporarily stop reception */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3431[m[K				/* [01;31m[KBSD[m[K style sockets communicate IP and port addresses in network

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1301[m[K						/* '[01;31m[KbSendFullSize[m[K' is a special optimisation.  If true, the

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1694[m[K							pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear [01;31m[KbSendFullSize[m[K */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    99[m[K					[01;31m[KbSendFullSize[m[K : 1,	/* May only send packets with a size equal to MSS (for optimisation) */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   531[m[K					[01;31m[KbSendKeepAlive[m[K : 1,	/* When this flag is true, a TCP keep-alive message must be send */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   100[m[K					[01;31m[KbTimeStamps[m[K : 1;	/* Socket is supposed to use TCP time-stamps. This depends on the */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   294[m[K	 * \param [01;31m[Kbuf[m[K the buffer to store the data from the fifo buffer.
[01;32m[K   330[m[K	 * \param [01;31m[Kbuf[m[K the buffer to send to the fifo buffer.

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   166[m[K	 * But pxWindow->ackno should always be used to set "[01;31m[KBUF[m[K->ackno" */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   660[m[K		and 2 under portable/[01;31m[KBufferManagement[m[K. */

[1;34m./test/cbmc/proofs/ARP/ARP_OutputARPRequest_buffer_alloc2/OutputARPRequest_harness.c[39m

[01;32m[K     2[m[K	 * libraries/freertos_plus/standard/freertos_plus_tcp/source/portable/[01;31m[KBufferManagement[m[K/BufferAllocation_2.goto

[1;34m./test/cbmc/proofs/ARP/ARP_OutputARPRequest_buffer_alloc1/OutputARPRequest_harness.c[39m

[01;32m[K     2[m[K	 * libraries/freertos_plus/standard/freertos_plus_tcp/source/portable/[01;31m[KBufferManagement[m[K/BufferAllocation_1.goto

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   946[m[K					copy data to the Network [01;31m[KBufffer[m[K. */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   300[m[K		/* The driver has already cleared the FRAMERX, [01;31m[KBUFFNA[m[K and error bits

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   527[m[K					[01;31m[KbUserShutdown[m[K : 1,	/* User requesting a graceful shutdown */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   532[m[K					[01;31m[KbWaitKeepAlive[m[K : 1,	/* When this flag is true, a TCP keep-alive reply is expected */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2845[m[K				'[01;31m[KbWinChange[m[K' doesn't cause a window-size-change, the flag is used

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   530[m[K					[01;31m[KbWinChange[m[K : 1,		/* The value of bLowWater has changed, must send a window update */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   544[m[K					[01;31m[KbWinScaling[m[K : 1;	/* A TCP-Window Scaling option was offered and accepted in the SYN phase. */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   647[m[K	 *          sleep [01;31m[Kbyt[m[K the posix port

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   783[m[K	  TDES1 | Reserved[31:29] | Buffer2 [01;31m[KByteCount[m[K[28:16] | Reserved[15:13] | Buffer1 [01;31m[KByteCount[m[K[12:0] |
[01;32m[K   864[m[K	  RDES1 | CTRL(31) | Reserved[30:29] | Buffer2 [01;31m[KByteCount[m[K[28:16] | CTRL[15:14] | Reserved(13) | Buffer1 [01;31m[KByteCount[m[K[12:0] |

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_cancel/DNSgetHostByName_cancel_harness.c[39m

[01;32m[K    36[m[K		vDNSInitialise(); /* We initialize the [01;31m[Kcallbacklist[m[K in order to be able to check for functions that timed out. */ 

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K   173[m[K	    /* cannot use the system_init.c::tcpipHeapConfig because FreeRTOS does not have a [01;31m[Kcalloc[m[K function! */

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   276[m[K	    EMAC->[01;31m[KCAMEN[m[K = 1;    // Enable CAM entry 0    

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1127[m[K	  /* Set the DCRS bit according to ETH [01;31m[KCarrierSense[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   480[m[K	  uint32_t             [01;31m[KCarrierSense[m[K;              /*!< Selects or not the Carrier Sense.

[1;34m./test/cbmc/windows2/winbase.h[39m

[01;32m[K     1[m[K	/* Empty file for [01;31m[KCBMC[m[K. */

[1;34m./test/cbmc/proofs/CheckOptions/CheckOptions_harness.c[39m

[01;32m[K    46[m[K	    /* [01;31m[KCBMC[m[K model of pointers limits the size of the buffer */
[01;32m[K    90[m[K	    /* [01;31m[KCBMC[m[K model of pointers limits the size of the buffer */

[1;34m./test/cbmc/proofs/Socket/vSocketBind/DONT_ALLOW_SOCKET_SEND_WITHOUT_BIND/vSocketBind_harness.c[39m

[01;32m[K    29[m[K	/* Random number generator provided by the application. In our case, [01;31m[KCBMC[m[K provides

[1;34m./test/cbmc/proofs/Socket/vSocketBind/ALLOW_ETHERNET_DRIVER_FILTERS_PACKETS/vSocketBind_harness.c[39m

[01;32m[K    32[m[K	/* Random number generator provided by the application. In our case, [01;31m[KCBMC[m[K provides

[1;34m./test/cbmc/proofs/Socket/vSocketBind/ALLOW_SOCKET_SEND_WITHOUT_BIND/vSocketBind_harness.c[39m

[01;32m[K    29[m[K	/* Random number generator provided by the application. In our case, [01;31m[KCBMC[m[K provides

[1;34m./test/cbmc/proofs/CBMCStubLibrary/tasksStubs.c[39m

[01;32m[K    34[m[K	/* This is mostly called in a loop. For [01;31m[KCBMC[m[K, we have to bound the loop

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_OutputARPRequest/OutputARPRequest_harness.c[39m

[01;32m[K     2[m[K	 * FreeRTOS memory safety proofs with [01;31m[KCBMC[m[K.

[1;34m./test/cbmc/proofs/UDP/vProcessGeneratedUDPPacket/vProcessGeneratedUDPPacket_harness.c[39m

[01;32m[K    30[m[K		/* Return any random value of checksum since it does not matter for [01;31m[KCBMC[m[K checks. */
[01;32m[K    42[m[K		/* Return random value of checksum since it does not matter for [01;31m[KCBMC[m[K checks. */
[01;32m[K    80[m[K		/* Second parameter is not used from [01;31m[KCBMC[m[K's perspective. */

[1;34m./test/cbmc/proofs/IP/SendEventToIPTask/SendEventToIPTask_harness.c[39m

[01;32m[K     2[m[K	 * FreeRTOS memory safety proofs with [01;31m[KCBMC[m[K.

[1;34m./test/cbmc/proofs/TCP/prvTCPReturnPacket/TCPReturnPacket_harness.c[39m

[01;32m[K     2[m[K	 * FreeRTOS memory safety proofs with [01;31m[KCBMC[m[K.

[1;34m./test/cbmc/proofs/TCP/prvTCPPrepareSend/TCPPrepareSend_harness.c[39m

[01;32m[K     2[m[K	 * FreeRTOS memory safety proofs with [01;31m[KCBMC[m[K.

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K     2[m[K	 * FreeRTOS memory safety proofs with [01;31m[KCBMC[m[K.

[1;34m./test/cbmc/proofs/CheckOptionsOuter/CheckOptionsOuter_harness.c[39m

[01;32m[K    83[m[K	    /* [01;31m[KCBMC[m[K model of pointers limits the size of the buffer */

[1;34m./test/cbmc/proofs/DHCP/IsDHCPSocket/IsDHCPSocket_harness.c[39m

[01;32m[K     2[m[K	 * FreeRTOS memory safety proofs with [01;31m[KCBMC[m[K.

[1;34m./test/cbmc/proofs/DHCP/DHCPProcess/DHCPProcess_harness.c[39m

[01;32m[K     2[m[K	  * FreeRTOS memory safety proofs with [01;31m[KCBMC[m[K.

[1;34m./test/cbmc/proofs/DNS/DNSHandlePacket/DNShandlePacket_harness.c[39m

[01;32m[K    11[m[K	The proof can be found here: https://github.com/aws/amazon-freertos/tree/master/tools/[01;31m[Kcbmc[m[K/proofs/ParseDNSReply */
[01;32m[K    11[m[K	The proof can be found here: https://github.com/aws/amazon-freertos/tree/master/tools/[01;31m[Kcbmc[m[K/proofs/ParseDNSReply */

[1;34m./test/cbmc/proofs/CheckOptionsInner/CheckOptionsInner_harness.c[39m

[01;32m[K    79[m[K	    /* [01;31m[KCBMC[m[K model of pointers limits the size of the buffer */

[1;34m./test/cbmc/stubs/cbmc.c[39m

[01;32m[K     4[m[K	 * Model a malloc that can fail ([01;31m[KCBMC[m[K malloc does not fail) and
[01;32m[K     5[m[K	 * check that [01;31m[KCBMC[m[K can model an object of the requested size.

[1;34m./test/cbmc/include/queue_init.h[39m

[01;32m[K    51[m[K				   If it is false from the beginning, the [01;31m[KCBMC[m[K proofs are not able to succeed*/
[01;32m[K    60[m[K	   This is required for performance reasons in [01;31m[KCBMC[m[K at the moment. */
[01;32m[K    81[m[K			   If it is false from the beginning, the [01;31m[KCBMC[m[K proofs are not able to succeed*/
[01;32m[K   114[m[K			   If it is false from the beginning, the [01;31m[KCBMC[m[K proofs are not able to succeed*/
[01;32m[K   136[m[K			   If it is false from the beginning, the [01;31m[KCBMC[m[K proofs are not able to succeed*/

[1;34m./test/cbmc/include/cbmc.h[39m

[01;32m[K    21[m[K	  * [01;31m[KCBMC[m[K models a pointer as an object id and an offset into that
[01;32m[K    24[m[K	  * the maximum offset into an object in [01;31m[KCBMC[m[K, and hence a bound on the
[01;32m[K    25[m[K	  * size of objects in [01;31m[KCBMC[m[K.
[01;32m[K    49[m[K	/* [01;31m[KCBMC[m[K specification: capture old value for precondition and */
[01;32m[K    55[m[K	/* [01;31m[KCBMC[m[K specification: capture old value for values passed by */
[01;32m[K    62[m[K	/* [01;31m[KCBMC[m[K debugging: printfs for expressions */
[01;32m[K    67[m[K	/* [01;31m[KCBMC[m[K debugging: printfs for pointer expressions */

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K    39[m[K	/* These macros are used to define away static keyword for [01;31m[KCBMC[m[K proofs */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    66[m[K	#define REG_CHIP_CFG_STATUS        (0x08)       /* [01;31m[KCCFG[m[K */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_wifi.c[39m

[01;32m[K    77[m[K	        xNetworkParams.[01;31m[KcChannel[m[K = M2M_WIFI_CH_ALL; /* Scan all channels (255) */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K    91[m[K		#define	PHY_REG_1B_CDCTRL1    0x1B	// 27	RW		[01;31m[KCD[m[K Test Control Register and BIST Extensions Register

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   878[m[K	#define ETH_DMARXDESC_ES          ((uint32_t)0x00008000U)  /*!< Error summary: OR of the following bits: DE || OE || IPC || LC || RWT || RE || [01;31m[KCE[m[K */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1507[m[K	 * Changing to a new state. [01;31m[KCentralised[m[K here to do specific actions such as

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K   373[m[K		stack.  [01;31m[KcErrorBuffer[m[K is used for convenience to create the string.  Don't

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   338[m[K	#define REG_LED_CTRL               (0xC6)       /* [01;31m[KCGCR[m[K */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K    46[m[K	/* gmac_SAM.[[01;31m[Kch[m[K] is a combination of the gmac.[[01;31m[Kch[m[K] for both SAM4E and SAME70. */

[1;34m./test/cbmc/proofs/CheckOptions/CheckOptions_harness.c[39m

[01;32m[K    68[m[K	 * Proof of [01;31m[KCheckOptions[m[K
[01;32m[K    87[m[K	     * Specification and proof of [01;31m[KCheckOptions[m[K

[1;34m./test/cbmc/proofs/CheckOptionsOuter/CheckOptionsOuter_harness.c[39m

[01;32m[K    80[m[K	     * Specification and proof of [01;31m[KCheckOptions[m[K outer loop

[1;34m./test/cbmc/proofs/CheckOptionsInner/CheckOptionsInner_harness.c[39m

[01;32m[K    74[m[K	     * Specification and proof of [01;31m[KCheckOptions[m[K inner loop

[1;34m./test/cbmc/proofs/CheckOptionsOuter/CheckOptionsOuter_harness.c[39m

[01;32m[K    41[m[K	 * Function contract proved correct by [01;31m[KCheckOptionsInner[m[K

[1;34m./test/cbmc/proofs/CheckOptions/CheckOptions_harness.c[39m

[01;32m[K    38[m[K	 * Function contract proved correct by [01;31m[KCheckOptionsOuter[m[K

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   452[m[K	  uint32_t             [01;31m[KChecksumMode[m[K;              /*!< Selects if the checksum is check by hardware or by software.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1132[m[K	  /* Set the IPCO bit according to ETH [01;31m[KChecksumOffload[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   491[m[K	  uint32_t             [01;31m[KChecksumOffload[m[K;           /*!< Selects or not the IPv4 checksum checking for received frame payloads' TCP/UDP/ICMP headers.

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   912[m[K				/* Not an Ethernet frame-type or a [01;31m[Kchecmsum[m[K error. */

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K    29[m[K	 *	A [01;31m[Kcicular[m[K character buffer

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K   147[m[K	 * through the [01;31m[KCLI[m[K interface. */

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   245[m[K	    // init [01;31m[KCLK[m[K & pins

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   160[m[K			/* Move register address to [01;31m[Kcmd[m[K bits 9-2, make 32-bit address. */
[01;32m[K   232[m[K			/* Move register address to [01;31m[Kcmd[m[K bits 9-2, make 32-bit address. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K    85[m[K	/* [01;31m[KCo[m[K-routine related configuration options. */

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K    84[m[K	/* [01;31m[KCo[m[K-routine definitions. */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K   160[m[K	#define GMII_COLLISION_TEST    (1 << 7)  // 1 = Enable [01;31m[KCOL[m[K test; 0 = Disable [01;31m[KCOL[m[K test
[01;32m[K   219[m[K	 * The [01;31m[KCOL[m[K pin is used to select MII mode on reset (pulled up for Reduced MII).

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K   145[m[K	 * The [01;31m[KCOL[m[K pin is used to select MII mode on reset (pulled up for Reduced MII).

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K  1526[m[K	#define ETH_MMC_IT_TGFMSC    ((uint32_t)0x00008000U)  /*!< When Tx good multi [01;31m[Kcol[m[K counter reaches half the maximum value */
[01;32m[K  1527[m[K	#define ETH_MMC_IT_TGFSC     ((uint32_t)0x00004000U)  /*!< When Tx good single [01;31m[Kcol[m[K counter reaches half the maximum value */
[01;32m[K  2077[m[K	  *     @arg ETH_MMC_IT_TGFMSC: When Tx good multi [01;31m[Kcol[m[K counter reaches half the maximum value
[01;32m[K  2078[m[K	  *     @arg ETH_MMC_IT_TGFSC : When Tx good single [01;31m[Kcol[m[K counter reaches half the maximum value
[01;32m[K  2089[m[K	  *     @arg ETH_MMC_IT_TGFMSC: When Tx good multi [01;31m[Kcol[m[K counter reaches half the maximum value
[01;32m[K  2090[m[K	  *     @arg ETH_MMC_IT_TGFSC : When Tx good single [01;31m[Kcol[m[K counter reaches half the maximum value

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./test/unit-test/ConfigFiles/pack_struct_start.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./test/unit-test/ConfigFiles/portmacro.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2020 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    23[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    23[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2020 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    23[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    23[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    18[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    18[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./test/unit-test/ConfigFiles/pack_struct_end.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./test/unit-test/ConfigFiles/FreeRTOS_errno_TCP.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./test/unit-test/ConfigFiles/NetworkInterface.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./test/unit-test/ConfigFiles/NetworkBufferManagement.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./test/unit-test/ConfigFiles/IPTraceMacroDefaults.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    23[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    23[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_OutputARPRequest/OutputARPRequest_harness.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2019 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    25[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    25[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./test/cbmc/proofs/IP/SendEventToIPTask/SendEventToIPTask_harness.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2019 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    25[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    25[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./test/cbmc/proofs/TCP/prvTCPReturnPacket/TCPReturnPacket_harness.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2019 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    25[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    25[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./test/cbmc/proofs/TCP/prvTCPPrepareSend/TCPPrepareSend_harness.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2019 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    25[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    25[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2019 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    25[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    25[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./test/cbmc/proofs/DHCP/IsDHCPSocket/IsDHCPSocket_harness.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2019 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    25[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    25[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./test/cbmc/proofs/DHCP/DHCPProcess/DHCPProcess_harness.c[39m

[01;32m[K     3[m[K	  * Copyright (C) 2019 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    25[m[K	  * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    25[m[K	  * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./test/cbmc/proofs/DNS/DNSHandlePacket/DNShandlePacket_harness.c[39m

[01;32m[K    11[m[K	The proof can be found here: https://github.[01;31m[Kcom[m[K/aws/amazon-freertos/tree/master/tools/cbmc/proofs/ParseDNSReply */
[01;32m[K    11[m[K	The proof can be found here: https://github.[01;31m[Kcom[m[K/aws/amazon-freertos/tree/master/tools/cbmc/proofs/ParseDNSReply */

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./tools/tcp_mem_stats.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./FreeRTOS_Stream_Buffer.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    23[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    23[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/NetworkInterface/SH2A/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="http://www.atmel.[01;31m[Kcom[m[K/design-support/">Atmel Support</a>
[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="http://www.atmel.[01;31m[Kcom[m[K/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="http://www.atmel.[01;31m[Kcom[m[K/design-support/">Atmel Support</a>
[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="http://www.atmel.[01;31m[Kcom[m[K/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.h[39m

[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="http://www.atmel.[01;31m[Kcom[m[K/design-support/">Atmel Support</a>
[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="http://www.atmel.[01;31m[Kcom[m[K/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2020 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2020 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2020 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2020 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/NetworkInterface/mw300_rd/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2018 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K    44[m[K	 * Support and FAQ: visit <a href="http://www.atmel.[01;31m[Kcom[m[K/design-support/">Atmel Support</a>
[01;32m[K    44[m[K	 * Support and FAQ: visit <a href="http://www.atmel.[01;31m[Kcom[m[K/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K    44[m[K	 * Support and FAQ: visit <a href="http://www.atmel.[01;31m[Kcom[m[K/design-support/">Atmel Support</a>
[01;32m[K    44[m[K	 * Support and FAQ: visit <a href="http://www.atmel.[01;31m[Kcom[m[K/design-support/">Atmel Support</a>
[01;32m[K   418[m[K		 * http://community.atmel.[01;31m[Kcom[m[K/forum/sam4e-gmac-transmit-checksum-offload-enablesolved
[01;32m[K   418[m[K		 * http://community.atmel.[01;31m[Kcom[m[K/forum/sam4e-gmac-transmit-checksum-offload-enablesolved

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2018 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K     8[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    27[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    27[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/NetworkInterface/board_family/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2018 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K    15[m[K	* http://www.renesas.[01;31m[Kcom[m[K/disclaimer
[01;32m[K    15[m[K	* http://www.renesas.[01;31m[Kcom[m[K/disclaimer

[1;34m./portable/NetworkInterface/RX/ether_callback.c[39m

[01;32m[K    15[m[K	* http://www.renesas.[01;31m[Kcom[m[K/disclaimer
[01;32m[K    15[m[K	* http://www.renesas.[01;31m[Kcom[m[K/disclaimer

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/Compiler/Keil/pack_struct_start.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/Compiler/Keil/pack_struct_end.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/Compiler/Renesas/pack_struct_start.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/Compiler/Renesas/pack_struct_end.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/Compiler/GCC/pack_struct_start.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/Compiler/GCC/pack_struct_end.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/Compiler/MSVC/pack_struct_start.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/Compiler/MSVC/pack_struct_end.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/Compiler/CompilerName/pack_struct_start.h[39m

[01;32m[K     3[m[K	Copyright (C) 2018 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/Compiler/CompilerName/pack_struct_end.h[39m

[01;32m[K     3[m[K	Copyright (C) 2018 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/Compiler/IAR/pack_struct_start.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/Compiler/IAR/pack_struct_end.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./include/FreeRTOS_errno_TCP.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./include/NetworkInterface.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./include/NetworkBufferManagement.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./include/tcp_dump_packets.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2020 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./include/IPTraceMacroDefaults.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./include/FreeRTOS_TCP_IP.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./include/tcp_mem_stats.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2020 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./include/FreeRTOS_UDP_IP.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    23[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    23[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.[01;31m[Kcom[m[K, Inc. or its affiliates.  All Rights Reserved.
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos
[01;32m[K    22[m[K	 * http://aws.amazon.[01;31m[Kcom[m[K/freertos

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K    49[m[K	/// @[01;31m[Kcond[m[K 0
[01;32m[K  1089[m[K	/// @[01;31m[Kcond[m[K 0

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K    56[m[K	/// @[01;31m[Kcond[m[K 0
[01;32m[K   444[m[K	/// @[01;31m[Kcond[m[K 0

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K    50[m[K	/// @[01;31m[Kcond[m[K 0
[01;32m[K  1092[m[K	/// @[01;31m[Kcond[m[K 0

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K    60[m[K	/// @[01;31m[Kcond[m[K 0
[01;32m[K   938[m[K	/// @[01;31m[Kcond[m[K 0

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K    52[m[K	/// @[01;31m[Kcond[m[K 0
[01;32m[K  1355[m[K	/// @[01;31m[Kcond[m[K 0

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K    78[m[K	/// @[01;31m[Kcond[m[K 0
[01;32m[K   918[m[K	/// @[01;31m[Kcond[m[K 0

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K   529[m[K	        { /* use the [01;31m[Kconfig[m[K suggested one */

[1;34m./portable/NetworkInterface/M487/m480_eth.h[39m

[01;32m[K    49[m[K	#define MII_NCONFIG         0x1c        /* Network interface [01;31m[Kconfig[m[K    */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   279[m[K		/* [01;31m[KConfig[m[K MAC and DMA */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1763[m[K			[01;31m[KconfigASSERT[m[K( pxNetworkBuffer != NULL );	/* to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K   115[m[K	/* It is a good idea to define [01;31m[KconfigASSERT[m[K() while developing.  [01;31m[KconfigASSERT[m[K()

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   272[m[K		/* In case [01;31m[KconfigASSERT[m[K() is not used */
[01;32m[K   384[m[K		/* Remove compiler warnings in the case the [01;31m[KconfigASSERT[m[K() is not defined. */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   575[m[K				so it is safe to use [01;31m[KconfigASSERT[m[K().

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1226[m[K	 * -# Define the IP address [01;31m[Kconfigration[m[K used in the application. When DHCP

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1229[m[K	 * -# Define the IP address [01;31m[Kconfigration[m[K used in the application. When DHCP

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   635[m[K	 * In this library, the function can only be used with [01;31m[Kconnectionsless[m[K sockets

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   812[m[K		/* Copy in the [01;31m[Kconst[m[K part of the header. Intentionally using different

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   666[m[K		/* memcpy the [01;31m[Kconst[m[K part of the header information into the correct

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   634[m[K	[01;31m[Kconst[m[K uint32_t ulMandatoryOptions = 2UL; /* DHCP server address, and the correct DHCP message type must be present in the options. */
[01;32m[K   912[m[K		/* Copy in the [01;31m[Kconst[m[K part of the options options. */

[1;34m./test/unit-test/stubs/FreeRTOS_ARP_stubs.c[39m

[01;32m[K     5[m[K	/* For convenience, a MAC address of all 0xffs is defined [01;31m[Kconst[m[K for quick

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1544[m[K						/* The type cast of the pointer expression "A" to type "B" removes [01;31m[Kconst[m[K qualifier from the pointed to type. */

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K    70[m[K	/* Some [01;31m[Kconst[m[K values describing the 'flags' in a TCP packet. */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K    90[m[K	    static [01;31m[Kconst[m[K TCPIP_MAC_OBJECT * macObject; /* the one and only MAC object; */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   252[m[K	/* For convenience, a MAC address of all 0xffs is defined [01;31m[Kconst[m[K for quick
[01;32m[K   317[m[K	/* Coverity want to make pvParameters [01;31m[Kconst[m[K, which would make it incompatible. */
[01;32m[K  2434[m[K		/* The object pointer expression "pucNextData" of type "uint8_t [01;31m[Kconst[m[K *" is cast to an integer type "unsigned int". */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   299[m[K	defined [01;31m[Kconst[m[K for quick reference. */
[01;32m[K   300[m[K	extern [01;31m[Kconst[m[K MACAddress_t xBroadcastMACAddress; /* all 0xff's */
[01;32m[K   343[m[K	 * -emacro(9005,ipPOINTER_CAST)   // 9005: attempt to cast away [01;31m[Kconst[m[K/volatile from a pointer or reference [MISRA 2012 Rule 11.8, required]
[01;32m[K   343[m[K	 * -emacro(9005,ipPOINTER_CAST)   // 9005: attempt to cast away [01;31m[Kconst[m[K/volatile from a pointer or reference [MISRA 2012 Rule 11.8, required]

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   334[m[K		application	writer to return a [01;31m[Kconst[m[K string, denoting the device's name. */

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K   105[m[K		typedef void (* FOnDNSEvent ) ( [01;31m[Kconst[m[K char * /* pcName */, void * /* pvSearchID */, uint32_t /* ulIPAddress */ );

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K    47[m[K		size_t LENGTH;				/* [01;31m[Kconst[m[K value: number of reserved elements */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   634[m[K	  uint32_t   [01;31m[KControlBufferSize[m[K;     /*!< Control and Buffer1, Buffer2 lengths */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   215[m[K		/*  Enable/Disable [01;31m[KCopyAllFrame[m[K */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   216[m[K		/*  Enable/Disable [01;31m[KCopyAllFrame[m[K */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   239[m[K		/*  Enable/Disable [01;31m[KCopyAllFrame[m[K */

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   255[m[K	    numaker_set_mac_addr(mac_addr);  // need to reconfigure hardware address '[01;31m[Kcos[m[K we just RESET emc...

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1012[m[K			/* Count the number of times it [01;31m[Kcouldn[m[K't find the ARP address. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   625[m[K				/* The driver [01;31m[Kcouldn[m[K't not allocate a buffer to receive a packet.

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1541[m[K					/* [01;31m[Kcoverity[m[K[break_stmt] : Break statement terminating the loop */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   766[m[K								/* [01;31m[Kcoverity[m[K[break_stmt] : Break statement terminating the loop */
[01;32m[K   920[m[K							/* [01;31m[Kcoverity[m[K[break_stmt] : Break statement terminating the loop */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1192[m[K							/* [01;31m[Kcoverity[m[K[break_stmt] : Break statement terminating the loop */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   685[m[K							/* [01;31m[Kcoverity[m[K[break_stmt] : Break statement terminating the loop */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   261[m[K	/* [01;31m[Kcoverity[m[K[misra_c_2012_rule_8_9_violation] */
[01;32m[K   306[m[K	/* [01;31m[Kcoverity[m[K[misra_c_2012_rule_8_9_violation] */
[01;32m[K   317[m[K	/* [01;31m[KCoverity[m[K want to make pvParameters const, which would make it incompatible. */
[01;32m[K   318[m[K	/* [01;31m[Kcoverity[m[K[misra_c_2012_rule_8_13_violation] */
[01;32m[K  2433[m[K		/* [01;31m[Kcoverity[m[K[misra_c_2012_rule_11_4_violation] */
[01;32m[K  2504[m[K		/* [01;31m[KCoverity[m[K does not like Unions. Warning issued here: "The operator "<"
[01;32m[K  2522[m[K		[01;31m[KCoverity[m[K doesn't understand about union variables. */
[01;32m[K  2525[m[K		/* [01;31m[Kcoverity[m[K[value_overwrite] */

[1;34m./include/NetworkInterface.h[39m

[01;32m[K    36[m[K	/* [01;31m[Kcoverity[m[K[misra_c_2012_rule_8_6_violation] */
[01;32m[K    42[m[K	/* [01;31m[Kcoverity[m[K[misra_c_2012_rule_8_6_violation] */

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K    42[m[K		/* [01;31m[KCoverity[m[K static checks don't like inlined functions.
[01;32m[K    44[m[K		let [01;31m[KCoverity[m[K know about it. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   502[m[K				/* [01;31m[KCPU[m[K is not the owner (yet) */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   506[m[K					/* [01;31m[KCPU[m[K is not the owner (yet) */

[1;34m./portable/NetworkInterface/M487/m480_eth.h[39m

[01;32m[K   100[m[K	//#define OWNERSHIP_CPU 0x7fffffff  // 0 = [01;31m[KCPU[m[K

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2424[m[K		This function is optimised for 32-bit [01;31m[KCPUs[m[K; Each time it will try to fetch

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   240[m[K		/* Clear CSR Clock Range [01;31m[KCR[m[K[2:0] bits */
[01;32m[K   246[m[K		/* Set [01;31m[KCR[m[K bits depending on hclk value */
[01;32m[K   482[m[K			/* Keep only the CSR Clock Range [01;31m[KCR[m[K[2:0] bits value */
[01;32m[K   564[m[K			/* Keep only the CSR Clock Range [01;31m[KCR[m[K[2:0] bits value */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   178[m[K	#define   TX_CTRL_CRC_ENABLE          (0x0002)    /* Enable adding a [01;31m[KCRC[m[K to the end of transmit frame */
[01;32m[K   194[m[K	#define   RX_CTRL_BAD_PACKET          (0x0200)    /* Eanble receive [01;31m[KCRC[m[K error frames */
[01;32m[K   195[m[K	#define   RX_CTRL_MULTICAST           (0x0100)    /* Receive multicast frames that pass the [01;31m[KCRC[m[K hash filtering */
[01;32m[K   200[m[K	#define   RX_CTRL_STRIP_CRC           (0x0008)    /* Enable strip [01;31m[KCRC[m[K on the received frames */
[01;32m[K   236[m[K	#define   RX_BAD_CRC                  (0x0001)    /* Received frame has a [01;31m[KCRC[m[K error */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   218[m[K	/* Override this define because the KSZ8851 is programmed to set all outgoing [01;31m[KCRC[m[K's */
[01;32m[K   822[m[K							/* Remove [01;31m[KCRC[m[K and update buffer length. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K    89[m[K	#define GMAC_TXD_NOCRC        (1ul << 16) /**< No [01;31m[KCRC[m[K */
[01;32m[K   195[m[K				b_no_crc:1,          /** 16     No [01;31m[KCRC[m[K */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K    90[m[K	#define GMAC_TXD_NOCRC        (1ul << 16) /**< No [01;31m[KCRC[m[K */
[01;32m[K   196[m[K				b_no_crc:1,          /** 16     No [01;31m[KCRC[m[K */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K    92[m[K	#define GMAC_TXD_NOCRC        (1ul << 16) /**< No [01;31m[KCRC[m[K */
[01;32m[K   219[m[K				b_no_crc:1,          /** 16     No [01;31m[KCRC[m[K */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K    89[m[K		( RDES_CE  /* [01;31m[KCRC[m[K Error */                        | \
[01;32m[K   167[m[K	 * Generates a [01;31m[KCRC[m[K for a MAC address that is then used to generate a hash index.

[1;34m./portable/NetworkInterface/M487/m480_eth.h[39m

[01;32m[K   112[m[K	#define TXFD_CRCAPP   0x02    // Append [01;31m[KCRC[m[K

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   894[m[K			/* Get the Frame Length of the received packet: substruct 4 bytes of the [01;31m[KCRC[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   498[m[K	  uint32_t             AutomaticPadCRCStrip;      /*!< Selects or not the Automatic MAC Pad/[01;31m[KCRC[m[K Stripping.
[01;32m[K   593[m[K	                                                             and length less than 64 bytes) including pad-bytes and [01;31m[KCRC[m[K)
[01;32m[K   708[m[K	#define ETH_CRC                   ((uint32_t)4U)    /*!< Ethernet [01;31m[KCRC[m[K */
[01;32m[K   798[m[K	#define ETH_DMATXDESC_DC                      ((uint32_t)0x08000000U)  /*!< Disable [01;31m[KCRC[m[K */
[01;32m[K   892[m[K	#define ETH_DMARXDESC_CE          ((uint32_t)0x00000002U)  /*!< [01;31m[KCRC[m[K error */
[01;32m[K  1084[m[K	/** @defgroup ETH_Automatic_Pad_CRC_Strip ETH Automatic Pad [01;31m[KCRC[m[K Strip
[01;32m[K  1537[m[K	#define ETH_MMC_IT_RFCE      ((uint32_t)0x10000020U)  /*!< When Rx [01;31m[Kcrc[m[K error counter reaches half the maximum value */
[01;32m[K  1761[m[K	  * @brief  Enables the DMA Tx Desc [01;31m[KCRC[m[K.
[01;32m[K  1768[m[K	  * @brief  Disables the DMA Tx Desc [01;31m[KCRC[m[K.
[01;32m[K  2056[m[K	  *     @arg ETH_MMC_IT_RFCE  : When Rx [01;31m[Kcrc[m[K error counter reaches half the maximum value
[01;32m[K  2067[m[K	  *     @arg ETH_MMC_IT_RFCE  : When Rx [01;31m[Kcrc[m[K error counter reaches half the maximum value

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K   227[m[K				/* Obtain the length, minus the [01;31m[KCRC[m[K.  The [01;31m[KCRC[m[K is four bytes

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2301[m[K				/* ICMP/IGMP do not have a pseudo header for [01;31m[KCRC[m[K-calculation. */
[01;32m[K  2322[m[K				/* This is in incoming packet. If the [01;31m[KCRC[m[K is correct, it should be zero. */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K   218[m[K	 * The PHY address is the reset status of [01;31m[KCRS[m[K, RXD[3:0] (the GmacPins' pullups).

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K   144[m[K	 * The PHY address is the reset status of [01;31m[KCRS[m[K, RXD[3:0] (the emacPins' pullups).

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   520[m[K		/* Control RSTN and [01;31m[KCSN[m[K pin from the driver. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   240[m[K		/* Clear [01;31m[KCSR[m[K Clock Range CR[2:0] bits */
[01;32m[K   249[m[K			/* [01;31m[KCSR[m[K Clock Range between 20-35 MHz */
[01;32m[K   254[m[K		/* [01;31m[KCSR[m[K Clock Range between 35-60 MHz */
[01;32m[K   259[m[K			/* [01;31m[KCSR[m[K Clock Range between 60-100 MHz */
[01;32m[K   264[m[K			/* [01;31m[KCSR[m[K Clock Range between 100-150 MHz */
[01;32m[K   269[m[K			/* [01;31m[KCSR[m[K Clock Range between 150-183 MHz */
[01;32m[K   273[m[K		/* Write to ETHERNET MAC MIIAR: Configure the ETHERNET [01;31m[KCSR[m[K Clock Range */
[01;32m[K   482[m[K			/* Keep only the [01;31m[KCSR[m[K Clock Range CR[2:0] bits value */
[01;32m[K   564[m[K			/* Keep only the [01;31m[KCSR[m[K Clock Range CR[2:0] bits value */

[1;34m./tools/tcp_mem_stats.c[39m

[01;32m[K    27[m[K	 * Used to create a [01;31m[KCSV[m[K file with detaild information about the memory usage of FreeRTOS+TCP.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   781[m[K	  TDES0 | OWN(31) | [01;31m[KCTRL[m[K[30:26] | Reserved[25:24] | [01;31m[KCTRL[m[K[23:20] | Reserved[19:17] | Status[16:0] |
[01;32m[K   864[m[K	  RDES1 | [01;31m[KCTRL[m[K(31) | Reserved[30:29] | Buffer2 ByteCount[28:16] | [01;31m[KCTRL[m[K[15:14] | Reserved(13) | Buffer1 ByteCount[12:0] |

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K    64[m[K	#define configNUM_THREAD_LOCAL_STORAGE_POINTERS    3      /* FreeRTOS+FAT requires 2 pointers if a [01;31m[KCWD[m[K is supported. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   199[m[K	#define   RX_CTRL_PROMISCUOUS         (0x0010)    /* Receive all incoming frames, regardless of frame's [01;31m[KDA[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1272[m[K	    /* Set the PR and [01;31m[KDA[m[K bits according to ETH DMAArbitration value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   876[m[K	#define ETH_DMARXDESC_AFM         ((uint32_t)0x40000000U)  /*!< [01;31m[KDA[m[K Filter Fail for the rx frame  */
[01;32m[K  1257[m[K	/** @defgroup ETH_MAC_addresses_filter_SA_DA ETH MAC addresses filter SA [01;31m[KDA[m[K

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1159[m[K	  /* Set the [01;31m[KDAIF[m[K bit according to ETH DestinationAddrFilter value */

[1;34m./portable/NetworkInterface/mw300_rd/NetworkInterface.c[39m

[01;32m[K   122[m[K	    pxNetworkBuffer = pxGetNetworkBufferWithDescriptor(/*payload_len*/[01;31m[Kdatalen[m[K, xDescriptorWaitTime);

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K   136[m[K	//    FreeRTOS_printf(("<-- [01;31m[KdataLength[m[K=%d\n",pxDescriptor->xDataLength));
[01;32m[K   275[m[K	//                          FreeRTOS_printf(("--> [01;31m[KdataLength[m[K=%d\n",[01;31m[KdataLength[m[K));

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   528[m[K			/* Perform hardware reset with respect to the reset timing from the [01;31m[Kdatasheet[m[K. */
[01;32m[K   558[m[K			/* Perform hardware reset with respect to the reset timing from the [01;31m[Kdatasheet[m[K. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1158[m[K	  /* Set the [01;31m[KDBF[m[K bit according to ETH BroadcastFramesReception value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1136[m[K	  /* Set the [01;31m[KDC[m[K bit according to ETH DeferralCheck value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1127[m[K	  /* Set the [01;31m[KDCRS[m[K bit according to ETH CarrierSense value */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K    27[m[K	* History : [01;31m[KDD[m[K.MM.YYYY Version  Description

[1;34m./portable/NetworkInterface/RX/ether_callback.c[39m

[01;32m[K    25[m[K	* History : [01;31m[KDD[m[K.MM.YYYY Version  Description

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K    10[m[K	  *           + Initialization and [01;31m[Kde[m[K-initialization functions
[01;32m[K   171[m[K	/** @defgroup ETH_Exported_Functions_Group1 Initialization and [01;31m[Kde[m[K-initialization functions
[01;32m[K   176[m[K	            ##### Initialization and [01;31m[Kde[m[K-initialization functions #####
[01;32m[K   180[m[K	      (+) [01;31m[KDe[m[K-initialize the Ethernet peripheral
[01;32m[K   290[m[K	  * @brief  [01;31m[KDe[m[K-Initializes the ETH peripheral.
[01;32m[K   300[m[K		/* [01;31m[KDe[m[K-Init the low level hardware : GPIO, CLOCK, NVIC. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   878[m[K	#define ETH_DMARXDESC_ES          ((uint32_t)0x00008000U)  /*!< Error summary: OR of the following bits: [01;31m[KDE[m[K || OE || IPC || LC || RWT || RE || CE */
[01;32m[K  1297[m[K		#define ETH_MAC_RXFIFO_BELOW_THRESHOLD   ((uint32_t)0x00000100)  /* Rx FIFO fill level: fill-level below flow-control [01;31m[Kde[m[K-activate threshold */
[01;32m[K  2184[m[K	/* Initialization and [01;31m[Kde[m[K-initialization functions  ****************************/

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   125[m[K		/* Adjust PIO [01;31m[Kdebounce[m[K filter parameters, uses 10 Hz filter. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   155[m[K	 * For [01;31m[Kdebuging[m[K/logging: check if the port number is used for telnet

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   158[m[K	 * For [01;31m[Kdebuging[m[K/logging: check if the port number is used for telnet

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2797[m[K	 * string. [01;31m[KDecalartion[m[K in FreeRTOS_errno_TCP.h. */

[1;34m./portable/Compiler/CompilerName/pack_struct_start.h[39m

[01;32m[K    32[m[K	/* FIX ME. Update for the compiler specifier needed at the start of a struct [01;31m[Kdeclartion[m[K to pack the struct. */

[1;34m./portable/Compiler/CompilerName/pack_struct_end.h[39m

[01;32m[K    32[m[K	; /* FIX ME. Update for the compiler specifier needed at end of a struct [01;31m[Kdeclartion[m[K to pack the struct. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2381[m[K	 * The checksum algorithm is [01;31m[Kdecribed[m[K as:

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    87[m[K	#define   BUS_CLOCK_166               (0x0004)    /* 166 MHz on-chip bus clock ([01;31m[Kdefaul[m[K is 125MHz) */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   504[m[K	  uint32_t             DeferralCheck;             /*!< Selects or not the [01;31m[Kdeferral[m[K check function (Half-Duplex mode).
[01;32m[K   820[m[K	#define ETH_DMATXDESC_ED                      ((uint32_t)0x00000004U)  /*!< Excessive [01;31m[KDeferral[m[K */
[01;32m[K  1104[m[K	/** @defgroup ETH_Deferral_Check ETH [01;31m[KDeferral[m[K Check

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1136[m[K	  /* Set the DC bit according to ETH [01;31m[KDeferralCheck[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   504[m[K	  uint32_t             [01;31m[KDeferralCheck[m[K;             /*!< Selects or not the deferral check function (Half-Duplex mode).

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K    65[m[K	 * \[01;31m[Kdefgroup[m[K ksz8051mnl_ethernet_phy_group PHY component (KSZ8051MNL)

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K    72[m[K	 * \[01;31m[Kdefgroup[m[K gmac_group Ethernet Media Access Controller

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K    99[m[K	 * \[01;31m[Kdefgroup[m[K gmac_group Ethernet Media Access Controller

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   122[m[K	/** @[01;31m[Kdefgroup[m[K ETH ETH
[01;32m[K   137[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Private_Constants ETH Private Constants
[01;32m[K   147[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Private_Functions ETH Private Functions
[01;32m[K   167[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Exported_Functions ETH Exported Functions
[01;32m[K   171[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Exported_Functions_Group1 Initialization and de-initialization functions
[01;32m[K   345[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Exported_Functions_Group2 IO operation functions
[01;32m[K   614[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Exported_Functions_Group3 Peripheral Control functions
[01;32m[K  1017[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Exported_Functions_Group4 Peripheral State functions

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   406[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Exported_Types ETH Exported Types
[01;32m[K   699[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Exported_Constants ETH Exported Constants
[01;32m[K   703[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Buffers_setting ETH Buffers setting
[01;32m[K   774[m[K	/** @[01;31m[Kdefgroup[m[K ETH_DMA_TX_Descriptor ETH DMA TX Descriptor
[01;32m[K   855[m[K	/** @[01;31m[Kdefgroup[m[K ETH_DMA_RX_Descriptor ETH DMA RX Descriptor
[01;32m[K   953[m[K	 /** @[01;31m[Kdefgroup[m[K ETH_AutoNegotiation ETH AutoNegotiation
[01;32m[K   962[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Speed ETH Speed
[01;32m[K   971[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Duplex_Mode ETH Duplex Mode
[01;32m[K   979[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Rx_Mode ETH Rx Mode
[01;32m[K   988[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Checksum_Mode ETH Checksum Mode
[01;32m[K   997[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Media_Interface ETH Media Interface
[01;32m[K  1006[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Watchdog ETH Watchdog
[01;32m[K  1015[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Jabber ETH Jabber
[01;32m[K  1024[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Inter_Frame_Gap ETH Inter Frame Gap
[01;32m[K  1039[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Carrier_Sense ETH Carrier Sense
[01;32m[K  1048[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Receive_Own ETH Receive Own
[01;32m[K  1057[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Loop_Back_Mode ETH Loop Back Mode
[01;32m[K  1066[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Checksum_Offload ETH Checksum Offload
[01;32m[K  1075[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Retry_Transmission ETH Retry Transmission
[01;32m[K  1084[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Automatic_Pad_CRC_Strip ETH Automatic Pad CRC Strip
[01;32m[K  1093[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Back_Off_Limit ETH Back Off Limit
[01;32m[K  1104[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Deferral_Check ETH Deferral Check
[01;32m[K  1113[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Receive_All ETH Receive All
[01;32m[K  1122[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Source_Addr_Filter ETH Source Addr Filter
[01;32m[K  1132[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Pass_Control_Frames ETH Pass Control Frames
[01;32m[K  1142[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Broadcast_Frames_Reception ETH Broadcast Frames Reception
[01;32m[K  1151[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Destination_Addr_Filter ETH Destination Addr Filter
[01;32m[K  1160[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Promiscuous_Mode ETH Promiscuous Mode
[01;32m[K  1169[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Multicast_Frames_Filter ETH Multicast Frames Filter
[01;32m[K  1180[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Unicast_Frames_Filter ETH Unicast Frames Filter
[01;32m[K  1190[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Zero_Quanta_Pause ETH Zero Quanta Pause
[01;32m[K  1199[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Pause_Low_Threshold ETH Pause Low Threshold
[01;32m[K  1210[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Unicast_Pause_Frame_Detect ETH Unicast Pause Frame Detect
[01;32m[K  1219[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Receive_Flow_Control ETH Receive Flow Control
[01;32m[K  1228[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Transmit_Flow_Control ETH Transmit Flow Control
[01;32m[K  1237[m[K	/** @[01;31m[Kdefgroup[m[K ETH_VLAN_Tag_Comparison ETH VLAN Tag Comparison
[01;32m[K  1246[m[K	/** @[01;31m[Kdefgroup[m[K ETH_MAC_addresses ETH MAC addresses
[01;32m[K  1257[m[K	/** @[01;31m[Kdefgroup[m[K ETH_MAC_addresses_filter_SA_DA ETH MAC addresses filter SA DA
[01;32m[K  1266[m[K	/** @[01;31m[Kdefgroup[m[K ETH_MAC_addresses_filter_Mask_bytes ETH MAC addresses filter Mask bytes
[01;32m[K  1279[m[K	/** @[01;31m[Kdefgroup[m[K ETH_MAC_Debug_flags ETH MAC Debug flags
[01;32m[K  1317[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Drop_TCP_IP_Checksum_Error_Frame ETH Drop TCP IP Checksum Error Frame
[01;32m[K  1326[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Receive_Store_Forward ETH Receive Store Forward
[01;32m[K  1335[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Flush_Received_Frame ETH Flush Received Frame
[01;32m[K  1344[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Transmit_Store_Forward ETH Transmit Store Forward
[01;32m[K  1353[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Transmit_Threshold_Control ETH Transmit Threshold Control
[01;32m[K  1368[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Forward_Error_Frames ETH Forward Error Frames
[01;32m[K  1377[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Forward_Undersized_Good_Frames ETH Forward Undersized Good Frames
[01;32m[K  1386[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Receive_Threshold_Control ETH Receive Threshold Control
[01;32m[K  1397[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Second_Frame_Operate ETH Second Frame Operate
[01;32m[K  1406[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Address_Aligned_Beats ETH Address Aligned Beats
[01;32m[K  1415[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Fixed_Burst ETH Fixed Burst
[01;32m[K  1424[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Rx_DMA_Burst_Length ETH Rx DMA Burst Length
[01;32m[K  1443[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Tx_DMA_Burst_Length ETH Tx DMA Burst Length
[01;32m[K  1462[m[K	/** @[01;31m[Kdefgroup[m[K ETH_DMA_Enhanced_descriptor_format ETH DMA Enhanced descriptor format
[01;32m[K  1471[m[K	/** @[01;31m[Kdefgroup[m[K ETH_DMA_Arbitration ETH DMA Arbitration
[01;32m[K  1483[m[K	/** @[01;31m[Kdefgroup[m[K ETH_DMA_Tx_descriptor_segment ETH DMA Tx descriptor segment
[01;32m[K  1492[m[K	/** @[01;31m[Kdefgroup[m[K ETH_DMA_Tx_descriptor_Checksum_Insertion_Control ETH DMA Tx descriptor Checksum Insertion Control
[01;32m[K  1503[m[K	/** @[01;31m[Kdefgroup[m[K ETH_DMA_Rx_descriptor_buffers ETH DMA Rx descriptor buffers
[01;32m[K  1512[m[K	/** @[01;31m[Kdefgroup[m[K ETH_PMT_Flags ETH PMT Flags
[01;32m[K  1522[m[K	/** @[01;31m[Kdefgroup[m[K ETH_MMC_Tx_Interrupts ETH MMC Tx Interrupts
[01;32m[K  1532[m[K	/** @[01;31m[Kdefgroup[m[K ETH_MMC_Rx_Interrupts ETH MMC Rx Interrupts
[01;32m[K  1542[m[K	/** @[01;31m[Kdefgroup[m[K ETH_MAC_Flags ETH MAC Flags
[01;32m[K  1554[m[K	/** @[01;31m[Kdefgroup[m[K ETH_DMA_Flags ETH DMA Flags
[01;32m[K  1582[m[K	/** @[01;31m[Kdefgroup[m[K ETH_MAC_Interrupts ETH MAC Interrupts
[01;32m[K  1594[m[K	/** @[01;31m[Kdefgroup[m[K ETH_DMA_Interrupts ETH DMA Interrupts
[01;32m[K  1619[m[K	/** @[01;31m[Kdefgroup[m[K ETH_DMA_transmit_process_state ETH DMA transmit process state
[01;32m[K  1634[m[K	/** @[01;31m[Kdefgroup[m[K ETH_DMA_receive_process_state ETH DMA receive process state
[01;32m[K  1648[m[K	/** @[01;31m[Kdefgroup[m[K ETH_DMA_overflow ETH DMA overflow
[01;32m[K  1657[m[K	/** @[01;31m[Kdefgroup[m[K ETH_EXTI_LINE_WAKEUP ETH EXTI LINE WAKEUP
[01;32m[K  1671[m[K	/** @[01;31m[Kdefgroup[m[K ETH_Exported_Macros ETH Exported Macros

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   234[m[K	#define GMAC_UR_BPDG (0x1u << 7) /**< \brief (GMAC_UR) BPDG Bypass [01;31m[KDeglitchers[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   328[m[K	  * @brief  [01;31m[KDeInitializes[m[K ETH MSP.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   930[m[K	  #define ETH_DMAPTPRXDESC_PTPMT_DELAYREQ                  ((uint32_t)0x00000300U)  /* [01;31m[KDelayReq[m[K message (all clock types) */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   931[m[K	  #define ETH_DMAPTPRXDESC_PTPMT_DELAYRESP                 ((uint32_t)0x00000400U)  /* [01;31m[KDelayResp[m[K message (all clock types) */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   235[m[K	#define   RX_RUNT_ERROR               (0x0002)    /* Received frame was [01;31m[Kdemaged[m[K by a collision */

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   373[m[K	    [01;31m[Kdesc[m[K = cur_tx_desc_ptr->next;    // in case TX is transmitting and overwrite next pointer before we can update cur_tx_desc_ptr

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   657[m[K	  ETH_DMADescTypeDef *FSRxDesc;          /*!< First Segment Rx [01;31m[KDesc[m[K */
[01;32m[K   659[m[K	  ETH_DMADescTypeDef *LSRxDesc;          /*!< Last Segment Rx [01;31m[KDesc[m[K */
[01;32m[K  1506[m[K	#define ETH_DMARXDESC_BUFFER1     ((uint32_t)0x00000000U)  /*!< DMA Rx [01;31m[KDesc[m[K Buffer1 */
[01;32m[K  1507[m[K	#define ETH_DMARXDESC_BUFFER2     ((uint32_t)0x00000001U)  /*!< DMA Rx [01;31m[KDesc[m[K Buffer2 */
[01;32m[K  1562[m[K	#define ETH_DMA_FLAG_ACCESSERROR       ((uint32_t)0x02000000U)  /*!< Error bits 0-data buffer, 1-[01;31m[Kdesc[m[K. access */
[01;32m[K  1683[m[K	  * @brief  Checks whether the specified Ethernet DMA Tx [01;31m[KDesc[m[K flag is set or not.
[01;32m[K  1691[m[K	  * @brief  Checks whether the specified Ethernet DMA Rx [01;31m[KDesc[m[K flag is set or not.
[01;32m[K  1699[m[K	  * @brief  Enables the specified DMA Rx [01;31m[KDesc[m[K receive interrupt.
[01;32m[K  1706[m[K	  * @brief  Disables the specified DMA Rx [01;31m[KDesc[m[K receive interrupt.
[01;32m[K  1713[m[K	  * @brief  Set the specified DMA Rx [01;31m[KDesc[m[K Own bit.
[01;32m[K  1720[m[K	  * @brief  Returns the specified Ethernet DMA Tx [01;31m[KDesc[m[K collision count.
[01;32m[K  1727[m[K	  * @brief  Set the specified DMA Tx [01;31m[KDesc[m[K Own bit.
[01;32m[K  1734[m[K	  * @brief  Enables the specified DMA Tx [01;31m[KDesc[m[K Transmit interrupt.
[01;32m[K  1741[m[K	  * @brief  Disables the specified DMA Tx [01;31m[KDesc[m[K Transmit interrupt.
[01;32m[K  1748[m[K	  * @brief  Selects the specified Ethernet DMA Tx [01;31m[KDesc[m[K Checksum Insertion.
[01;32m[K  1750[m[K	  * @param  __CHECKSUM__: specifies is the DMA Tx [01;31m[Kdesc[m[K checksum insertion.
[01;32m[K  1761[m[K	  * @brief  Enables the DMA Tx [01;31m[KDesc[m[K CRC.
[01;32m[K  1768[m[K	  * @brief  Disables the DMA Tx [01;31m[KDesc[m[K CRC.
[01;32m[K  1775[m[K	  * @brief  Enables the DMA Tx [01;31m[KDesc[m[K padding for frame shorter than 64 bytes.
[01;32m[K  1782[m[K	  * @brief  Disables the DMA Tx [01;31m[KDesc[m[K padding for frame shorter than 64 bytes.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1271[m[K	    /* Set the DSL bit according to ETH [01;31m[KDesciptorSkipLength[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   618[m[K	  uint32_t             [01;31m[KDescriptorSkipLength[m[K;        /*!< Specifies the number of word to skip between two unchained descriptors (Ring mode)

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   707[m[K	#define ETH_HEADER               ((uint32_t)14U)    /*!< 6 byte [01;31m[KDest[m[K addr, 6 byte Src addr, 2 byte length/type */

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   108[m[K		uchar_8 [01;31m[Kdest[m[K[6];    // start of pucEthernetBuffer
[01;32m[K   108[m[K		uchar_8 [01;31m[Kdest[m[K[6];    // start of pucEthernetBuffer
[01;32m[K   109[m[K		uchar_8 [01;31m[Kdest[m[K[6];

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1159[m[K	  /* Set the DAIF bit according to ETH [01;31m[KDestinationAddrFilter[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   519[m[K	  uint32_t             [01;31m[KDestinationAddrFilter[m[K;     /*!< Sets the destination filter mode for both unicast and multicast frames.

[1;34m./tools/tcp_mem_stats.c[39m

[01;32m[K    27[m[K	 * Used to create a CSV file with [01;31m[Kdetaild[m[K information about the memory usage of FreeRTOS+TCP.

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   363[m[K	#define   WAKEUP_NORMAL_AUTO_ENABLE   (0x0040)    /* Enable auto goto normal mode from energy [01;31m[Kdetecion[m[K mode */

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K   130[m[K		.[01;31m[KDeviceId[m[K = XPAR_PS7_ETHERNET_0_DEVICE_ID,	/**< Unique ID  of device */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    88[m[K	#define   BUS_CLOCK_DIVIDEDBY_5       (0x0003)    /* Bus clock [01;31m[Kdevided[m[K by 5 */
[01;32m[K    89[m[K	#define   BUS_CLOCK_DIVIDEDBY_3       (0x0002)    /* Bus clock [01;31m[Kdevided[m[K by 3 */
[01;32m[K    90[m[K	#define   BUS_CLOCK_DIVIDEDBY_2       (0x0001)    /* Bus clock [01;31m[Kdevided[m[K by 2 */
[01;32m[K    91[m[K	#define   BUS_CLOCK_DIVIDEDBY_1       (0x0000)    /* Bus clock [01;31m[Kdevided[m[K by 1 */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    92[m[K	#define   BUS_CLOCK_DIVIDED_MASK      (0x0003)    /* Bus clock [01;31m[Kdevider[m[K mask */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1245[m[K	    /* Set the [01;31m[KDFF[m[K bit according to ETH FlushReceivedFrame value */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K    77[m[K	 * IP-clash detection is currently only used internally. When [01;31m[KDHCP[m[K doesn't respond, the
[01;32m[K   106[m[K		that means a [01;31m[KDHCP[m[K request has not completed. */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K    44[m[K	/* Exclude the entire file if [01;31m[KDHCP[m[K is not enabled. */
[01;32m[K    51[m[K		/* [01;31m[KDHCP[m[K must be able to receive an options field of 312 bytes, the fixed
[01;32m[K    52[m[K		part of the [01;31m[KDHCP[m[K packet is 240 bytes, and the IP/UDP headers take 28 bytes. */
[01;32m[K    56[m[K	/* Parameter widths in the [01;31m[KDHCP[m[K packet. */
[01;32m[K    67[m[K	/* Codes of interest found in the [01;31m[KDHCP[m[K options field. */
[01;32m[K    80[m[K	/* The four [01;31m[KDHCP[m[K message types of interest. */
[01;32m[K    87[m[K	/* Offsets into the transmitted [01;31m[KDHCP[m[K options fields at which various parameters
[01;32m[K    93[m[K	/* Values used in the [01;31m[KDHCP[m[K packets. */
[01;32m[K   112[m[K	/* Marks the end of the variable length options field in the [01;31m[KDHCP[m[K packet. */
[01;32m[K   115[m[K	/* Offset into a [01;31m[KDHCP[m[K message at which the first byte of the options is
[01;32m[K   119[m[K	/* Standard [01;31m[KDHCP[m[K port numbers and magic cookie value.
[01;32m[K   157[m[K	/* The UDP socket used for all incoming and outgoing [01;31m[KDHCP[m[K traffic. */
[01;32m[K   174[m[K	 * Generate a [01;31m[KDHCP[m[K discover message and send it on the [01;31m[KDHCP[m[K socket.
[01;32m[K   179[m[K	 * Interpret message received on the [01;31m[KDHCP[m[K socket.
[01;32m[K   184[m[K	 * Generate a [01;31m[KDHCP[m[K request packet, and send it on the [01;31m[KDHCP[m[K socket.
[01;32m[K   189[m[K	 * Prepare to start a [01;31m[KDHCP[m[K transaction.  This initialises some state variables
[01;32m[K   190[m[K	 * and creates the [01;31m[KDHCP[m[K socket if necessary.
[01;32m[K   195[m[K	 * Creates the part of outgoing [01;31m[KDHCP[m[K messages that are common to all outgoing
[01;32m[K   196[m[K	 * [01;31m[KDHCP[m[K messages.
[01;32m[K   204[m[K	 * Create the [01;31m[KDHCP[m[K socket, if it has not been created already.
[01;32m[K   209[m[K	 * Close the [01;31m[KDHCP[m[K socket.
[01;32m[K   214[m[K	 * After [01;31m[KDHCP[m[K has failed to answer, prepare everything to start searching
[01;32m[K   224[m[K	/* Hold information in between steps in the [01;31m[KDHCP[m[K state machine. */
[01;32m[K   253[m[K		/* Is [01;31m[KDHCP[m[K starting over? */
[01;32m[K   262[m[K				/* Ask the user if a [01;31m[KDHCP[m[K discovery is required. */
[01;32m[K   268[m[K					/* Initial state.  Create the [01;31m[KDHCP[m[K socket, timer, etc. if they
[01;32m[K   296[m[K					/* The user indicates that the [01;31m[KDHCP[m[K process does not continue. */
[01;32m[K   310[m[K					/* Ask the user if a [01;31m[KDHCP[m[K request is required. */
[01;32m[K   331[m[K					/* The user indicates that the [01;31m[KDHCP[m[K process does not continue. */
[01;32m[K   390[m[K					/* There was no [01;31m[KDHCP[m[K reply, there was no time-out, just keep on waiting. */
[01;32m[K   401[m[K					/* [01;31m[KDHCP[m[K completed.  The IP address can now be used, and the
[01;32m[K   412[m[K					/* [01;31m[KDHCP[m[K failed, the default configured IP-address will be used
[01;32m[K   541[m[K			/* [01;31m[KDHCP[m[K failed, the default configured IP-address will be used.  Now
[01;32m[K   576[m[K				/* Ensure the Rx and Tx timeouts are zero as the [01;31m[KDHCP[m[K executes in the
[01;32m[K   581[m[K				/* Bind to the standard [01;31m[KDHCP[m[K client port. */
[01;32m[K   601[m[K		/* Initialise the parameters that will be set by the [01;31m[KDHCP[m[K process. Per
[01;32m[K   613[m[K			/* Create the [01;31m[KDHCP[m[K socket if it has not already been created. */
[01;32m[K   634[m[K	const uint32_t ulMandatoryOptions = 2UL; /* [01;31m[KDHCP[m[K server address, and the correct [01;31m[KDHCP[m[K message type must be present in the options. */
[01;32m[K   641[m[K			/* Map a [01;31m[KDHCP[m[K structure onto the received data. */
[01;32m[K   658[m[K			else /* Looks like a valid [01;31m[KDHCP[m[K response, with the same transaction ID. */
[01;32m[K   770[m[K								/* The [01;31m[KDHCP[m[K server may send more than 1 gateway addresses. */
[01;32m[K   814[m[K									/* The [01;31m[KDHCP[m[K parameter is in seconds, convert
[01;32m[K   918[m[K			it easier to lookup a device in a router's list of [01;31m[KDHCP[m[K clients. */
[01;32m[K   954[m[K		dhcpIPv4_SERVER_IP_ADDRESS_OPTION_CODE, 4, 0, 0, 0, 0,				/* The IP address of the [01;31m[KDHCP[m[K server. */
[01;32m[K   969[m[K		/* Copy in the address of the [01;31m[KDHCP[m[K server being used. */
[01;32m[K  1029[m[K			/* After [01;31m[KDHCP[m[K has failed to answer, prepare everything to start
[01;32m[K  1049[m[K			/* [01;31m[KDHCP[m[K completed.  The IP address can now be used, and the
[01;32m[K  1056[m[K			/* Close socket to ensure packets don't queue on it. not needed anymore as [01;31m[KDHCP[m[K failed. but still need timer for ARP testing. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K   101[m[K	 * things such as a [01;31m[KDHCP[m[K transaction number or initial sequence number.  Random
[01;32m[K   130[m[K	 * address, netmask, DNS server address and gateway address from a [01;31m[KDHCP[m[K server.  If
[01;32m[K   133[m[K	 * set to 1 if a valid configuration cannot be obtained from a [01;31m[KDHCP[m[K server for any
[01;32m[K   141[m[K	 * provide an implementation of the [01;31m[KDHCP[m[K callback function,
[01;32m[K   145[m[K	/* When ipconfigUSE_DHCP is set to 1, [01;31m[KDHCP[m[K requests will be sent out at
[01;32m[K   146[m[K	 * increasing time intervals until either a reply is received from a [01;31m[KDHCP[m[K server
[01;32m[K   151[m[K	 * a [01;31m[KDHCP[m[K reply being received. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   259[m[K	 * - [01;31m[KDHCP[m[K:    For creating a [01;31m[KDHCP[m[K transaction number
[01;32m[K   343[m[K		 * Only applicable when [01;31m[KDHCP[m[K is in use:
[01;32m[K   344[m[K		 * If no [01;31m[KDHCP[m[K server responds, use "Auto-IP" : the

[1;34m./test/cbmc/proofs/DHCP/DHCPProcess/DHCPProcess_harness.c[39m

[01;32m[K    88[m[K	     * Assume a valid socket in most states of the [01;31m[KDHCP[m[K state machine.

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K   100[m[K	 * things such as a [01;31m[KDHCP[m[K transaction number or initial sequence number.  Random
[01;32m[K   129[m[K	 * address, netmask, DNS server address and gateway address from a [01;31m[KDHCP[m[K server.  If
[01;32m[K   132[m[K	 * set to 1 if a valid configuration cannot be obtained from a [01;31m[KDHCP[m[K server for any
[01;32m[K   140[m[K	 * provide an implementation of the [01;31m[KDHCP[m[K callback function,
[01;32m[K   144[m[K	/* When ipconfigUSE_DHCP is set to 1, [01;31m[KDHCP[m[K requests will be sent out at
[01;32m[K   145[m[K	 * increasing time intervals until either a reply is received from a [01;31m[KDHCP[m[K server
[01;32m[K   150[m[K	 * a [01;31m[KDHCP[m[K reply being received. */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   358[m[K	    start [01;31m[KDHCP[m[K (in configured) */

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K   215[m[K		[01;31m[KDHCP[m[K process and all other communication will fail. */

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   237[m[K	    start [01;31m[KDHCP[m[K (in configured) */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1226[m[K	 * -# Define the IP address configration used in the application. When [01;31m[KDHCP[m[K

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1229[m[K	 * -# Define the IP address configration used in the application. When [01;31m[KDHCP[m[K

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   424[m[K	    start [01;31m[KDHCP[m[K (in configured) */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   504[m[K	    start [01;31m[KDHCP[m[K (in configured) */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K   246[m[K			/* The packet can't be sent ([01;31m[KDHCP[m[K not completed?).  Just drop the

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   209[m[K	 * Checks the ARP, [01;31m[KDHCP[m[K and TCP timers to see if any periodic or timeout
[01;32m[K   259[m[K	/* Default values for the above struct in case [01;31m[KDHCP[m[K
[01;32m[K   355[m[K			/* Check the ARP, [01;31m[KDHCP[m[K and TCP timers to see if there is any periodic
[01;32m[K   448[m[K					/* The [01;31m[KDHCP[m[K state machine needs processing. */
[01;32m[K   451[m[K						/* Process [01;31m[KDHCP[m[K messages for a given end-point. */
[01;32m[K   663[m[K			/* Is it time for [01;31m[KDHCP[m[K processing? */
[01;32m[K  1018[m[K					/* The IP address is not set until [01;31m[KDHCP[m[K completes. */
[01;32m[K  1382[m[K				/* The network is not up until [01;31m[KDHCP[m[K has completed. */
[01;32m[K  1580[m[K					/* Or (during [01;31m[KDHCP[m[K negotiation) we have no IP-address yet? */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   237[m[K		eDHCPEvent,				/* 5: Process the [01;31m[KDHCP[m[K state machine. */
[01;32m[K   315[m[K	These values will be copied to 'xNetworkAddressing' in case [01;31m[KDHCP[m[K is not used,
[01;32m[K   316[m[K	and also in case [01;31m[KDHCP[m[K does not lead to a confirmed request. */

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    87[m[K	 * (maybe [01;31m[KDHCP[m[K is still in process, or the addressing needs a gateway but there
[01;32m[K   112[m[K	 * After [01;31m[KDHCP[m[K is ready and when changing IP address, force a quick send of our new IP

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   331[m[K		/* [01;31m[KDHCP[m[K has an option for clients to register their hostname.  It doesn't

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   262[m[K	 * - [01;31m[KDHCP[m[K:    For creating a [01;31m[KDHCP[m[K transaction number
[01;32m[K   373[m[K		 * Only applicable when [01;31m[KDHCP[m[K is in use:
[01;32m[K   374[m[K		 * If no [01;31m[KDHCP[m[K server responds, use "Auto-IP" : the

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    38[m[K		/* Used in the [01;31m[KDHCP[m[K callback if ipconfigUSE_DHCP_HOOK is set to 1. */
[01;32m[K    41[m[K			eDHCPPhasePreDiscover,	/* Driver is about to send a [01;31m[KDHCP[m[K discovery. */
[01;32m[K    42[m[K			eDHCPPhasePreRequest	/* Driver is about to request [01;31m[KDHCP[m[K an IP address. */
[01;32m[K    45[m[K		/* Used in the [01;31m[KDHCP[m[K callback if ipconfigUSE_DHCP_HOOK is set to 1. */
[01;32m[K    48[m[K			eDHCPContinue,			/* Continue the [01;31m[KDHCP[m[K process */
[01;32m[K    49[m[K			eDHCPUseDefaults,		/* Stop [01;31m[KDHCP[m[K and use the static defaults. */
[01;32m[K    50[m[K			eDHCPStopNoChanges,		/* Stop [01;31m[KDHCP[m[K and continue with current settings. */
[01;32m[K    54[m[K	/* [01;31m[KDHCP[m[K state machine states. */
[01;32m[K    61[m[K			eGetLinkLayerAddress,		/* When [01;31m[KDHCP[m[K didn't respond, try to obtain a LinkLayer address 168.254.x.x. */
[01;32m[K    64[m[K		eNotUsingLeasedAddress			/* [01;31m[KDHCP[m[K failed, and a default IP address is being used. */
[01;32m[K    67[m[K	/* Hold information in between steps in the [01;31m[KDHCP[m[K state machine. */
[01;32m[K    79[m[K		/* Maintains the [01;31m[KDHCP[m[K state machine state. */
[01;32m[K    90[m[K	/* Internal call: returns true if socket is the current [01;31m[KDHCP[m[K socket */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1734[m[K			/* The caller [01;31m[Kdidn[m[K't provide a network buffer or the provided buffer is
[01;32m[K  2872[m[K				'SYN+ACK' [01;31m[Kdidn[m[K't arrive.  Step back to the previous state in which

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  2045[m[K			/* [01;31m[KDidn[m[K't read enough octets. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1249[m[K						failure as the message [01;31m[Kdidn[m[K't need to be sent. */

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    61[m[K			eGetLinkLayerAddress,		/* When DHCP [01;31m[Kdidn[m[K't respond, try to obtain a LinkLayer address 168.254.x.x. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   913[m[K			/* Clear FES and [01;31m[KDM[m[K bits */
[01;32m[K  1131[m[K	  /* Set the [01;31m[KDM[m[K bit according to ETH Mode value */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   945[m[K				/* Nothing to do: the buffer has been passed to [01;31m[KDMA[m[K and will be released after use */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   489[m[K		to [01;31m[KDMA[m[K. As soon as sending is ready, the buffers must be released by

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   333[m[K	handle is used so direct notifications can be sent to the task for all EMAC/[01;31m[KDMA[m[K
[01;32m[K  1075[m[K	 * \brief Use pre-allocated pbuf as [01;31m[KDMA[m[K source and return the incoming packet.

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K   106[m[K	 * A deferred interrupt handler for all MAC/[01;31m[KDMA[m[K interrupt sources.
[01;32m[K   147[m[K	handle is used so direct notifications can be sent to the task for all EMAC/[01;31m[KDMA[m[K
[01;32m[K   191[m[K			/* DISC_WHEN_NO_AHB: when set, the GEM [01;31m[KDMA[m[K will automatically discard receive

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.c[39m

[01;32m[K    40[m[K	 * After "_end", 1 MB of uncached memory will be allocated for [01;31m[KDMA[m[K transfers.
[01;32m[K    41[m[K	 * Both the [01;31m[KDMA[m[K descriptors as well as all EMAC TX-buffers will be allocated in

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   114[m[K		/* uxCount is the number of TX descriptors that are in use by the [01;31m[KDMA[m[K. */
[01;32m[K   236[m[K			/* Pass the pointer (and its ownership) directly to [01;31m[KDMA[m[K. */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif.h[39m

[01;32m[K    62[m[K	 * When set, the GEM [01;31m[KDMA[m[K will automatically

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   150[m[K	handle is used so direct notifications can be sent to the task for all EMAC/[01;31m[KDMA[m[K
[01;32m[K   159[m[K	[01;31m[KDMA[m[K TX descriptors. */
[01;32m[K   262[m[K	/* Do not wait too long for a free TX [01;31m[KDMA[m[K buffer. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   516[m[K	/* Get and set [01;31m[KDMA[m[K Configuration Register */

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K    64[m[K	  RwReg   GMAC_DCFGR;      /**< \brief (Gmac Offset: 0x010) [01;31m[KDMA[m[K Configuration Register */
[01;32m[K   235[m[K	/* -------- GMAC_DCFGR : (GMAC Offset: 0x010) [01;31m[KDMA[m[K Configuration Register -------- */
[01;32m[K   237[m[K	#define GMAC_DCFGR_FBLDO_Msk (0x1fu << GMAC_DCFGR_FBLDO_Pos) /**< \brief (GMAC_DCFGR) Fixed Burst Length for [01;31m[KDMA[m[K Data Operations: */
[01;32m[K   253[m[K	#define GMAC_DCFGR_DRBS_Msk (0xffu << GMAC_DCFGR_DRBS_Pos) /**< \brief (GMAC_DCFGR) [01;31m[KDMA[m[K Receive Buffer Size */
[01;32m[K   255[m[K	#define GMAC_DCFGR_DDRP (0x1u << 24) /**< \brief (GMAC_DCFGR) [01;31m[KDMA[m[K Discard Receive Packets */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   519[m[K	/* Get and set [01;31m[KDMA[m[K Configuration Register */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   196[m[K	handle is used so direct notifications can be sent to the task for all EMAC/[01;31m[KDMA[m[K
[01;32m[K   205[m[K	[01;31m[KDMA[m[K TX descriptors. */
[01;32m[K   470[m[K	/* Do not wait too long for a free TX [01;31m[KDMA[m[K buffer. */
[01;32m[K   754[m[K					/* STrange: can not translate from a [01;31m[KDMA[m[K buffer to a Network Buffer. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   501[m[K	/* Get and set [01;31m[KDMA[m[K Configuration Register */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   434[m[K			/* Clear the [01;31m[KDMA[m[K Receive Buffer Size (DRBS) field: */
[01;32m[K   534[m[K				/* Return the buffer to [01;31m[KDMA[m[K. */
[01;32m[K   617[m[K				/* Return a pointer to the earlier [01;31m[KDMA[m[K buffer. */
[01;32m[K   620[m[K				/* Set the new [01;31m[KDMA[m[K-buffer. */
[01;32m[K   626[m[K				Leave the current [01;31m[KDMA[m[K buffer in place. */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   182[m[K	 * Sometimes the [01;31m[KDMA[m[K will report received data as being longer than the actual
[01;32m[K   223[m[K	[01;31m[KDMA[m[K TX descriptors. */
[01;32m[K   236[m[K		/* Disable receive and transmit [01;31m[KDMA[m[K processes. */
[01;32m[K   316[m[K				/* Enable receive and transmit [01;31m[KDMA[m[K processes. */
[01;32m[K   366[m[K		'uxCount' represents the number of descriptors given to [01;31m[KDMA[m[K for transmission.
[01;32m[K   367[m[K		After sending a packet, the [01;31m[KDMA[m[K will clear the 'TDES_OWN' bit. */
[01;32m[K   426[m[K			/* If the descriptor is still owned by the [01;31m[KDMA[m[K it can't be used. */
[01;32m[K   429[m[K				/* The semaphore was taken, the TX [01;31m[KDMA[m[K-descriptor is still not available.
[01;32m[K   441[m[K					/* The [01;31m[KDMA[m[K's descriptor to point directly to the data in the
[01;32m[K   445[m[K					/* The [01;31m[KDMA[m[K descriptor will 'own' this Network Buffer,
[01;32m[K   452[m[K					the [01;31m[KDMA[m[K's descriptor. */
[01;32m[K   459[m[K				/* This descriptor is given back to the [01;31m[KDMA[m[K. */
[01;32m[K   462[m[K				/* Ensure the [01;31m[KDMA[m[K is polling Tx descriptors. */
[01;32m[K   547[m[K		/* Point the [01;31m[KDMA[m[K to the base of the descriptor list. */
[01;32m[K   581[m[K				/* Pass the actual buffer to [01;31m[KDMA[m[K. */
[01;32m[K   586[m[K				/* All [01;31m[KDMA[m[K descriptors are populated with permanent memory blocks.
[01;32m[K   600[m[K			/* The descriptor is available for use by the [01;31m[KDMA[m[K. */
[01;32m[K   608[m[K		/* Point the [01;31m[KDMA[m[K to the base of the descriptor list. */
[01;32m[K   672[m[K		/* Process each descriptor that is not still in use by the [01;31m[KDMA[m[K. */
[01;32m[K   730[m[K							In case it runs out of Network Buffers, a [01;31m[KDMA[m[K buffer won't be replaced,
[01;32m[K   781[m[K				back to the [01;31m[KDMA[m[K. */
[01;32m[K  1020[m[K					/* Check if [01;31m[KDMA[m[K packets have been delivered. */

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K    93[m[K	    /* Enable MAC and [01;31m[KDMA[m[K transmission and reception */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   220[m[K	[01;31m[KDMA[m[K TX descriptors. */
[01;32m[K   237[m[K	/* Put the [01;31m[KDMA[m[K descriptors in '.first_data'.
[01;32m[K   254[m[K	/* Ethernet Tx [01;31m[KDMA[m[K Descriptor */
[01;32m[K   266[m[K	/* DMATxDescToClear points to the next TX [01;31m[KDMA[m[K descriptor
[01;32m[K   271[m[K	handle is used so direct notifications can be sent to the task for all EMAC/[01;31m[KDMA[m[K
[01;32m[K   353[m[K		'uxCount' represents the number of descriptors given to [01;31m[KDMA[m[K for transmission.
[01;32m[K   354[m[K		After sending a packet, the [01;31m[KDMA[m[K will clear the 'ETH_DMATXDESC_OWN' bit. */
[01;32m[K   517[m[K		/* Fill each [01;31m[KDMA[m[K descriptor with the right values */
[01;32m[K   532[m[K				/* Set the [01;31m[KDMA[m[K Tx descriptors checksum insertion for TCP, UDP, and ICMP */
[01;32m[K   569[m[K		/* Fill each [01;31m[KDMA[m[K descriptor with the right values */
[01;32m[K   643[m[K	/* Do not wait too long for a free TX [01;31m[KDMA[m[K buffer. */
[01;32m[K   699[m[K						/* The Network Buffer has been passed to [01;31m[KDMA[m[K, no need to release it. */
[01;32m[K   718[m[K					/* Prepare transmit descriptors to give to [01;31m[KDMA[m[K. */
[01;32m[K   733[m[K					/* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET [01;31m[KDMA[m[K */
[01;32m[K   740[m[K					/* Resume [01;31m[KDMA[m[K transmission*/
[01;32m[K   899[m[K			/* Update the ETHERNET [01;31m[KDMA[m[K global Rx descriptor with next Rx descriptor */
[01;32m[K   901[m[K			/* Selects the next [01;31m[KDMA[m[K Rx descriptor list for next buffer to read */ 
[01;32m[K   979[m[K			/* Release descriptors to [01;31m[KDMA[m[K */
[01;32m[K  1005[m[K				/* Clear RBUS ETHERNET [01;31m[KDMA[m[K flag. */
[01;32m[K  1008[m[K				/* Resume [01;31m[KDMA[m[K reception. */
[01;32m[K  1266[m[K				/* Check if [01;31m[KDMA[m[K packets have been delivered. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K    25[m[K	      (#)Call HAL_ETH_Init() API to initialize the Ethernet peripheral (MAC, [01;31m[KDMA[m[K, ...)
[01;32m[K    37[m[K	      (#)Initialize Ethernet [01;31m[KDMA[m[K Descriptors in chain mode and point to allocated buffers:
[01;32m[K    41[m[K	      (#)Enable MAC and [01;31m[KDMA[m[K transmission and reception:
[01;32m[K    44[m[K	      (#)Prepare ETH [01;31m[KDMA[m[K TX Descriptors and give the hand to ETH [01;31m[KDMA[m[K to transfer
[01;32m[K    48[m[K	      (#)Poll for a received frame in ETH RX [01;31m[KDMA[m[K Descriptors and get received
[01;32m[K    64[m[K	      (#) Configure the Ethernet [01;31m[KDMA[m[K after ETH peripheral initialization
[01;32m[K    65[m[K	          HAL_ETH_ConfigDMA(); all [01;31m[KDMA[m[K parameters should be filled.
[01;32m[K    67[m[K	      -@- The PTP protocol and the [01;31m[KDMA[m[K descriptors ring mode are not supported
[01;32m[K   188[m[K	  * @brief  Initializes the Ethernet MAC and [01;31m[KDMA[m[K according to default
[01;32m[K   279[m[K		/* Config MAC and [01;31m[KDMA[m[K */
[01;32m[K   396[m[K		/* ETH [01;31m[KDMA[m[K Error */
[01;32m[K   622[m[K	      (+) Enable MAC and [01;31m[KDMA[m[K transmission and reception.
[01;32m[K   624[m[K	      (+) Disable MAC and [01;31m[KDMA[m[K transmission and reception.
[01;32m[K   628[m[K	      (+) Set the [01;31m[KDMA[m[K configuration in runtime mode
[01;32m[K   636[m[K	  * @brief  Enables Ethernet MAC and [01;31m[KDMA[m[K reception/transmission
[01;32m[K   658[m[K		/* Start [01;31m[KDMA[m[K transmission */
[01;32m[K   661[m[K		/* Start [01;31m[KDMA[m[K reception */
[01;32m[K   675[m[K	  * @brief  Stop Ethernet MAC and [01;31m[KDMA[m[K reception/transmission
[01;32m[K   688[m[K	  /* Stop [01;31m[KDMA[m[K transmission */
[01;32m[K   691[m[K	  /* Stop [01;31m[KDMA[m[K reception */
[01;32m[K   933[m[K	  * @brief  Sets ETH [01;31m[KDMA[m[K Configuration.
[01;32m[K   936[m[K	  * @param  dmaconf: [01;31m[KDMA[m[K Configuration structure
[01;32m[K  1060[m[K	  * @brief  Configures Ethernet MAC and [01;31m[KDMA[m[K with default parameters.
[01;32m[K  1220[m[K	    /* Ethernet [01;31m[KDMA[m[K default initialization ************************************/
[01;32m[K  1270[m[K	    /* Set the Enhanced [01;31m[KDMA[m[K descriptors bit according to ETH EnhancedDescriptorFormat value*/
[01;32m[K  1385[m[K	  * @brief  Enables the [01;31m[KDMA[m[K transmission.
[01;32m[K  1392[m[K		/* Enable the [01;31m[KDMA[m[K transmission */
[01;32m[K  1399[m[K	  * @brief  Disables the [01;31m[KDMA[m[K transmission.
[01;32m[K  1406[m[K		/* Disable the [01;31m[KDMA[m[K transmission */
[01;32m[K  1413[m[K	  * @brief  Enables the [01;31m[KDMA[m[K reception.
[01;32m[K  1420[m[K		/* Enable the [01;31m[KDMA[m[K reception */
[01;32m[K  1427[m[K	  * @brief  Disables the [01;31m[KDMA[m[K reception.
[01;32m[K  1434[m[K		/* Disable the [01;31m[KDMA[m[K reception */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   338[m[K	/* Ethernet [01;31m[KDMA[m[K Tx descriptors Collision Count Shift */
[01;32m[K   341[m[K	/* Ethernet [01;31m[KDMA[m[K Tx descriptors Buffer2 Size Shift */
[01;32m[K   344[m[K	/* Ethernet [01;31m[KDMA[m[K Rx descriptors Frame Length Shift */
[01;32m[K   347[m[K	/* Ethernet [01;31m[KDMA[m[K Rx descriptors Buffer2 Size Shift */
[01;32m[K   350[m[K	/* Ethernet [01;31m[KDMA[m[K Rx descriptors Frame length Shift */
[01;32m[K   569[m[K	  * @brief  ETH [01;31m[KDMA[m[K Configuration Structure definition
[01;32m[K   589[m[K	  uint32_t             ForwardErrorFrames;          /*!< Selects or not the forward to the [01;31m[KDMA[m[K of erroneous frames.
[01;32m[K   599[m[K	  uint32_t             SecondFrameOperate;          /*!< Selects or not the Operate on second frame mode, which allows the [01;31m[KDMA[m[K to process a second
[01;32m[K   609[m[K	  uint32_t             RxDMABurstLength;            /*!< Indicates the maximum number of beats to be transferred in one Rx [01;31m[KDMA[m[K transaction.
[01;32m[K   612[m[K	  uint32_t             TxDMABurstLength;            /*!< Indicates the maximum number of beats to be transferred in one Tx [01;31m[KDMA[m[K transaction.
[01;32m[K   621[m[K	  uint32_t             DMAArbitration;              /*!< Selects the [01;31m[KDMA[m[K Tx/Rx arbitration.
[01;32m[K   627[m[K	  * @brief  ETH [01;31m[KDMA[m[K Descriptors data structure definition
[01;32m[K   640[m[K	  /*!< Enhanced Ethernet [01;31m[KDMA[m[K PTP Descriptors */
[01;32m[K   716[m[K	    an Ethernet packet is received, the Rx-[01;31m[KDMA[m[K will transfer the packet from RxFIFO
[01;32m[K   744[m[K	    an Ethernet packet is transmitted, Tx-[01;31m[KDMA[m[K will transfer the packet from the
[01;32m[K   774[m[K	/** @defgroup ETH_DMA_TX_Descriptor ETH [01;31m[KDMA[m[K TX Descriptor
[01;32m[K   779[m[K	   [01;31m[KDMA[m[K Tx Descriptor
[01;32m[K   792[m[K	  * @brief  Bit definition of TDES0 register: [01;31m[KDMA[m[K Tx descriptor status register
[01;32m[K   794[m[K	#define ETH_DMATXDESC_OWN                     ((uint32_t)0x80000000U)  /*!< OWN bit: descriptor is owned by [01;31m[KDMA[m[K engine */
[01;32m[K   812[m[K	#define ETH_DMATXDESC_FF                      ((uint32_t)0x00002000U)  /*!< Frame Flushed: [01;31m[KDMA[m[K/MTL flushed the frame due to SW flush */
[01;32m[K   855[m[K	/** @defgroup ETH_DMA_RX_Descriptor ETH [01;31m[KDMA[m[K RX Descriptor
[01;32m[K   860[m[K	  [01;31m[KDMA[m[K Rx Descriptor
[01;32m[K   873[m[K	  * @brief  Bit definition of RDES0 register: [01;31m[KDMA[m[K Rx descriptor status register
[01;32m[K   875[m[K	#define ETH_DMARXDESC_OWN         ((uint32_t)0x80000000U)  /*!< OWN bit: descriptor is owned by [01;31m[KDMA[m[K engine  */
[01;32m[K  1424[m[K	/** @defgroup ETH_Rx_DMA_Burst_Length ETH Rx [01;31m[KDMA[m[K Burst Length
[01;32m[K  1443[m[K	/** @defgroup ETH_Tx_DMA_Burst_Length ETH Tx [01;31m[KDMA[m[K Burst Length
[01;32m[K  1462[m[K	/** @defgroup ETH_DMA_Enhanced_descriptor_format ETH [01;31m[KDMA[m[K Enhanced descriptor format
[01;32m[K  1471[m[K	/** @defgroup ETH_DMA_Arbitration ETH [01;31m[KDMA[m[K Arbitration
[01;32m[K  1483[m[K	/** @defgroup ETH_DMA_Tx_descriptor_segment ETH [01;31m[KDMA[m[K Tx descriptor segment
[01;32m[K  1492[m[K	/** @defgroup ETH_DMA_Tx_descriptor_Checksum_Insertion_Control ETH [01;31m[KDMA[m[K Tx descriptor Checksum Insertion Control
[01;32m[K  1503[m[K	/** @defgroup ETH_DMA_Rx_descriptor_buffers ETH [01;31m[KDMA[m[K Rx descriptor buffers
[01;32m[K  1506[m[K	#define ETH_DMARXDESC_BUFFER1     ((uint32_t)0x00000000U)  /*!< [01;31m[KDMA[m[K Rx Desc Buffer1 */
[01;32m[K  1507[m[K	#define ETH_DMARXDESC_BUFFER2     ((uint32_t)0x00000001U)  /*!< [01;31m[KDMA[m[K Rx Desc Buffer2 */
[01;32m[K  1554[m[K	/** @defgroup ETH_DMA_Flags ETH [01;31m[KDMA[m[K Flags
[01;32m[K  1557[m[K	#define ETH_DMA_FLAG_TST               ((uint32_t)0x20000000U)  /*!< Time-stamp trigger interrupt (on [01;31m[KDMA[m[K) */
[01;32m[K  1558[m[K	#define ETH_DMA_FLAG_PMT               ((uint32_t)0x10000000U)  /*!< PMT interrupt (on [01;31m[KDMA[m[K) */
[01;32m[K  1559[m[K	#define ETH_DMA_FLAG_MMC               ((uint32_t)0x08000000U)  /*!< MMC interrupt (on [01;31m[KDMA[m[K) */
[01;32m[K  1560[m[K	#define ETH_DMA_FLAG_DATATRANSFERERROR ((uint32_t)0x00800000U)  /*!< Error bits 0-Rx [01;31m[KDMA[m[K, 1-Tx [01;31m[KDMA[m[K */
[01;32m[K  1594[m[K	/** @defgroup ETH_DMA_Interrupts ETH [01;31m[KDMA[m[K Interrupts
[01;32m[K  1597[m[K	#define ETH_DMA_IT_TST       ((uint32_t)0x20000000U)  /*!< Time-stamp trigger interrupt (on [01;31m[KDMA[m[K) */
[01;32m[K  1598[m[K	#define ETH_DMA_IT_PMT       ((uint32_t)0x10000000U)  /*!< PMT interrupt (on [01;31m[KDMA[m[K) */
[01;32m[K  1599[m[K	#define ETH_DMA_IT_MMC       ((uint32_t)0x08000000U)  /*!< MMC interrupt (on [01;31m[KDMA[m[K) */
[01;32m[K  1619[m[K	/** @defgroup ETH_DMA_transmit_process_state ETH [01;31m[KDMA[m[K transmit process state
[01;32m[K  1634[m[K	/** @defgroup ETH_DMA_receive_process_state ETH [01;31m[KDMA[m[K receive process state
[01;32m[K  1648[m[K	/** @defgroup ETH_DMA_overflow ETH [01;31m[KDMA[m[K overflow
[01;32m[K  1683[m[K	  * @brief  Checks whether the specified Ethernet [01;31m[KDMA[m[K Tx Desc flag is set or not.
[01;32m[K  1691[m[K	  * @brief  Checks whether the specified Ethernet [01;31m[KDMA[m[K Rx Desc flag is set or not.
[01;32m[K  1699[m[K	  * @brief  Enables the specified [01;31m[KDMA[m[K Rx Desc receive interrupt.
[01;32m[K  1706[m[K	  * @brief  Disables the specified [01;31m[KDMA[m[K Rx Desc receive interrupt.
[01;32m[K  1713[m[K	  * @brief  Set the specified [01;31m[KDMA[m[K Rx Desc Own bit.
[01;32m[K  1720[m[K	  * @brief  Returns the specified Ethernet [01;31m[KDMA[m[K Tx Desc collision count.
[01;32m[K  1727[m[K	  * @brief  Set the specified [01;31m[KDMA[m[K Tx Desc Own bit.
[01;32m[K  1734[m[K	  * @brief  Enables the specified [01;31m[KDMA[m[K Tx Desc Transmit interrupt.
[01;32m[K  1741[m[K	  * @brief  Disables the specified [01;31m[KDMA[m[K Tx Desc Transmit interrupt.
[01;32m[K  1748[m[K	  * @brief  Selects the specified Ethernet [01;31m[KDMA[m[K Tx Desc Checksum Insertion.
[01;32m[K  1750[m[K	  * @param  __CHECKSUM__: specifies is the [01;31m[KDMA[m[K Tx desc checksum insertion.
[01;32m[K  1761[m[K	  * @brief  Enables the [01;31m[KDMA[m[K Tx Desc CRC.
[01;32m[K  1768[m[K	  * @brief  Disables the [01;31m[KDMA[m[K Tx Desc CRC.
[01;32m[K  1775[m[K	  * @brief  Enables the [01;31m[KDMA[m[K Tx Desc padding for frame shorter than 64 bytes.
[01;32m[K  1782[m[K	  * @brief  Disables the [01;31m[KDMA[m[K Tx Desc padding for frame shorter than 64 bytes.
[01;32m[K  1855[m[K	  * @brief  Enables the specified Ethernet [01;31m[KDMA[m[K interrupts.
[01;32m[K  1857[m[K	  * @param  __INTERRUPT__: specifies the Ethernet [01;31m[KDMA[m[K interrupt sources to be
[01;32m[K  1864[m[K	  * @brief  Disables the specified Ethernet [01;31m[KDMA[m[K interrupts.
[01;32m[K  1866[m[K	  * @param  __INTERRUPT__: specifies the Ethernet [01;31m[KDMA[m[K interrupt sources to be
[01;32m[K  1873[m[K	  * @brief  Clears the Ethernet [01;31m[KDMA[m[K IT pending bit.
[01;32m[K  1881[m[K	  * @brief  Checks whether the specified Ethernet [01;31m[KDMA[m[K flag is set or not.
[01;32m[K  1889[m[K	  * @brief  Checks whether the specified Ethernet [01;31m[KDMA[m[K flag is set or not.
[01;32m[K  1897[m[K	  * @brief  Checks whether the specified Ethernet [01;31m[KDMA[m[K overflow flag is set or not.
[01;32m[K  1899[m[K	  * @param  __OVERFLOW__: specifies the [01;31m[KDMA[m[K overflow flag to check.
[01;32m[K  1903[m[K	  * @retval The state of Ethernet [01;31m[KDMA[m[K overflow Flag (SET or RESET).
[01;32m[K  1908[m[K	  * @brief  Set the [01;31m[KDMA[m[K Receive status watchdog timer register value
[01;32m[K  1910[m[K	  * @param  __VALUE__: [01;31m[KDMA[m[K Receive status watchdog timer register value

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   129[m[K	         * Ethernet hardware, initialize [01;31m[KDMA[m[K descriptors, and perform a PHY auto-negotiation to obtain a network link.

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   863[m[K		descriptor, because it will pass the buffer straight to [01;31m[KDMA[m[K. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   488[m[K		As a reference of this field may be passed to [01;31m[KDMA[m[K, force the
[01;32m[K   779[m[K		 * For the case where the network driver passes a buffer directly to a [01;31m[KDMA[m[K

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   527[m[K		to [01;31m[KDMA[m[K. As soon as sending is ready, the buffers must be released by

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1272[m[K	    /* Set the PR and DA bits according to ETH [01;31m[KDMAArbitration[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   621[m[K	  uint32_t             [01;31m[KDMAArbitration[m[K;              /*!< Selects the DMA Tx/Rx arbitration.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   987[m[K		/*----------------------- ETHERNET [01;31m[KDMABMR[m[K Configuration --------------------*/
[01;32m[K  1265[m[K	    /*----------------------- ETHERNET [01;31m[KDMABMR[m[K Configuration ------------------*/

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   936[m[K	  * @param  [01;31m[Kdmaconf[m[K: DMA Configuration structure
[01;32m[K   990[m[K		[01;31m[Kdmaconf[m[K->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1275[m[K	                                          [01;31m[Kdmainit[m[K.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   967[m[K		/*----------------------- ETHERNET [01;31m[KDMAOMR[m[K Configuration --------------------*/
[01;32m[K   968[m[K		/* Get the ETHERNET [01;31m[KDMAOMR[m[K value */
[01;32m[K   984[m[K		/* Write to ETHERNET [01;31m[KDMAOMR[m[K */
[01;32m[K  1238[m[K	    /* Get the ETHERNET [01;31m[KDMAOMR[m[K value */
[01;32m[K  1262[m[K	    /* Write to ETHERNET [01;31m[KDMAOMR[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   366[m[K	/* Ethernet [01;31m[KDMAOMR[m[K register Mask */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   266[m[K	/* [01;31m[KDMATxDescToClear[m[K points to the next TX DMA descriptor

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K    94[m[K	 * the connection properties: speed, [01;31m[Kdmix[m[K and duplex.

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K    47[m[K	/* Exclude the entire file if [01;31m[KDNS[m[K is not enabled. */
[01;32m[K    54[m[K		#define dnsRX_FLAGS_MASK				0x0f80U /* The bits of interest in the flags field of incoming [01;31m[KDNS[m[K messages. */
[01;32m[K    60[m[K		#define dnsRX_FLAGS_MASK				0x800fU /* The bits of interest in the flags field of incoming [01;31m[KDNS[m[K messages. */
[01;32m[K    65[m[K	/* The maximum number of times a [01;31m[KDNS[m[K request should be sent out if a response
[01;32m[K   105[m[K	/* Flag [01;31m[KDNS[m[K parsing errors in situations where an IPv4 address is the return
[01;32m[K   121[m[K	 * Create a socket and bind it to the standard [01;31m[KDNS[m[K port number.  Return the
[01;32m[K   127[m[K	 * Create the [01;31m[KDNS[m[K message in the zero copy buffer passed in the first parameter.
[01;32m[K   141[m[K	 * Process a response packet from a [01;31m[KDNS[m[K server.
[01;32m[K   143[m[K	 * was expected, and thus if the [01;31m[KDNS[m[K cache may be updated with the reply.
[01;32m[K   150[m[K	 * Check if hostname is already known. If not, call prvGetHostByName() to send a [01;31m[KDNS[m[K request.
[01;32m[K   162[m[K	 * Prepare and send a message to a [01;31m[KDNS[m[K server.  'uxReadTimeOut_ticks' will be passed as
[01;32m[K   215[m[K			uint32_t ulTTL;                               /* Time-to-Live (in seconds) from the [01;31m[KDNS[m[K server. */
[01;32m[K   225[m[K		/* Utility function: Clear [01;31m[KDNS[m[K cache by calling this function. */
[01;32m[K   253[m[K	/* A [01;31m[KDNS[m[K query consists of a header, as described in 'struct xDNSMessage'
[01;32m[K   266[m[K	/* [01;31m[KDNS[m[K answer record header. */
[01;32m[K   374[m[K		As soon as the list hase become empty, the [01;31m[KDNS[m[K timer will be stopped
[01;32m[K   375[m[K		In case pvSearchID is supplied, the user wants to cancel a [01;31m[KDNS[m[K request
[01;32m[K   442[m[K					/* This is the first one, start the [01;31m[KDNS[m[K timer to check for timeouts */
[01;32m[K   462[m[K		/* A [01;31m[KDNS[m[K reply was received, see if there is any matching entry and
[01;32m[K   570[m[K			/* If a [01;31m[KDNS[m[K cache is used then check the cache before issuing another [01;31m[KDNS[m[K
[01;32m[K   584[m[K						/* prvGetHostByName will be called to start a [01;31m[KDNS[m[K lookup. */
[01;32m[K   596[m[K				/* [01;31m[KDNS[m[K identifiers are 16-bit. */
[01;32m[K   704[m[K					/* Obtain the [01;31m[KDNS[m[K server address. */
[01;32m[K   707[m[K					/* Send the [01;31m[KDNS[m[K message. */
[01;32m[K   720[m[K						/* Use [01;31m[KDNS[m[K server. */
[01;32m[K   781[m[K					/* This [01;31m[KDNS[m[K lookup is asynchronous, using a call-back:
[01;32m[K   817[m[K		 * to easily access fields of the [01;31m[KDNS[m[K Message. */
[01;32m[K   858[m[K		 * access the fields of the [01;31m[KDNS[m[K Message. */
[01;32m[K  1111[m[K		/* Ensure that the buffer is of at least minimal [01;31m[KDNS[m[K message length. */
[01;32m[K  1120[m[K			/* Parse the [01;31m[KDNS[m[K message header. Map the byte stream onto a structure 
[01;32m[K  1285[m[K										/* This device has requested this [01;31m[KDNS[m[K look-up.
[01;32m[K  1286[m[K										The result may be stored in the [01;31m[KDNS[m[K cache. */
[01;32m[K  1295[m[K									/* The reply will only be stored in the [01;31m[KDNS[m[K cache when the
[01;32m[K  1321[m[K							/* Cast the response to DNSAnswerRecord for easy access to fields of the [01;31m[KDNS[m[K response. */
[01;32m[K  1353[m[K					/* If this is not a reply to our [01;31m[KDNS[m[K request, it might an LLMNR
[01;32m[K  1437[m[K			/* There was an error while parsing the [01;31m[KDNS[m[K response. Return error code. */
[01;32m[K  1525[m[K						add the name to the [01;31m[KDNS[m[K cache */
[01;32m[K  1709[m[K			/* For each entry in the [01;31m[KDNS[m[K cache table. */
[01;32m[K  1730[m[K							/*  per [01;31m[KDNS[m[K cache entry to prevent out-of-bounds access in the event */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   782[m[K								because the [01;31m[KDNS[m[K server is not essential.  Only the
[01;32m[K   783[m[K								first [01;31m[KDNS[m[K server address is taken. */

[1;34m./test/unit-test/stubs/FreeRTOS_ARP_stubs.c[39m

[01;32m[K     9[m[K	/* Structure that stores the netmask, gateway address and [01;31m[KDNS[m[K server addresses. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K    71[m[K	/* Include support for [01;31m[KDNS[m[K caching.  For TCP, having a small [01;31m[KDNS[m[K cache is very
[01;32m[K    73[m[K	 * and also [01;31m[KDNS[m[K may use small timeouts.  If a [01;31m[KDNS[m[K reply comes in after the [01;31m[KDNS[m[K
[01;32m[K   130[m[K	 * address, netmask, [01;31m[KDNS[m[K server address and gateway address from a DHCP server.  If
[01;32m[K   235[m[K	/* Set ipconfigUSE_DNS to 1 to include a basic [01;31m[KDNS[m[K client/resolver.  [01;31m[KDNS[m[K is used

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   388[m[K		/* The [01;31m[KDNS[m[K module will not be included. */
[01;32m[K   390[m[K			/* LLMNR and NBNS depend on [01;31m[KDNS[m[K because those protocols share a lot of code. */
[01;32m[K   410[m[K			of a [01;31m[KDNS[m[K name. The following default accounts for a null terminator. */

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K   197[m[K	 * ipconfigUSE_DHCP is set to 1 but a [01;31m[KDNS[m[K server cannot be contacted. */
[01;32m[K   204[m[K	 * 0, or ipconfigUSE_DHCP is set to 1 but a [01;31m[KDNS[m[K server cannot be contacted. */
[01;32m[K   210[m[K	/* Default [01;31m[KDNS[m[K server configuration.  OpenDNS addresses are 208.67.222.222 and
[01;32m[K   212[m[K	 * set to 1 but a [01;31m[KDNS[m[K server cannot be contacted.*/
[01;32m[K   219[m[K	 * ipconfigUSE_DHCP is set to 1 but a [01;31m[KDNS[m[K server cannot be contacted. */

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K    70[m[K	/* Include support for [01;31m[KDNS[m[K caching.  For TCP, having a small [01;31m[KDNS[m[K cache is very
[01;32m[K    72[m[K	 * and also [01;31m[KDNS[m[K may use small timeouts.  If a [01;31m[KDNS[m[K reply comes in after the [01;31m[KDNS[m[K
[01;32m[K   129[m[K	 * address, netmask, [01;31m[KDNS[m[K server address and gateway address from a DHCP server.  If
[01;32m[K   242[m[K	/* Set ipconfigUSE_DNS to 1 to include a basic [01;31m[KDNS[m[K client/resolver.  [01;31m[KDNS[m[K is used

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K    67[m[K	/* The TCP port number reserved for a [01;31m[KDNS[m[K server. */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K   373[m[K				/* A [01;31m[KDNS[m[K reply, check for the source port.  Although the [01;31m[KDNS[m[K client

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   256[m[K	/* Structure that stores the netmask, gateway address and [01;31m[KDNS[m[K server addresses. */
[01;32m[K   292[m[K		4. [01;31m[KDNS[m[K, to check for timeouts when looking-up a domain.
[01;32m[K   673[m[K			/* Is it time for [01;31m[KDNS[m[K processing? */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   311[m[K	/* Structure that stores the netmask, gateway address and [01;31m[KDNS[m[K server addresses. */
[01;32m[K   314[m[K	/* Structure that stores the defaults for netmask, gateway address and [01;31m[KDNS[m[K.

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K    52[m[K	#define	ipDNS_PORT		53	/* Standard [01;31m[KDNS[m[K port. */
[01;32m[K    67[m[K	 * LLMNR is very similar to [01;31m[KDNS[m[K, so is handled by the [01;31m[KDNS[m[K routines.
[01;32m[K    90[m[K		/* Look for the indicated host name in the [01;31m[KDNS[m[K cache. Returns the IPv4 
[01;32m[K    94[m[K		/* Remove all entries from the [01;31m[KDNS[m[K cache. */
[01;32m[K   103[m[K		 * It will be called when a [01;31m[KDNS[m[K reply is received or when a timeout has been reached.
[01;32m[K   125[m[K		 * The function vDNSInitialise() initialises the [01;31m[KDNS[m[K module.

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   418[m[K		/* The [01;31m[KDNS[m[K module will not be included. */
[01;32m[K   420[m[K			/* LLMNR and NBNS depend on [01;31m[KDNS[m[K because those protocols share a lot of code. */
[01;32m[K   440[m[K			of a [01;31m[KDNS[m[K name. The following default accounts for a null terminator. */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1267[m[K							/* Mapping pucByte to a [01;31m[KDNSAnswerRecord[m[K allows easy access of the
[01;32m[K  1321[m[K							/* Cast the response to [01;31m[KDNSAnswerRecord[m[K for easy access to fields of the DNS response. */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   211[m[K			Return true if the unsigned subtraction of (b-a) [01;31m[Kdoesn[m[K't generate an
[01;32m[K   588[m[K			/*  Destroy a window.  A TCP window [01;31m[Kdoesn[m[K't serve any more.  Return all
[01;32m[K  1426[m[K				/* There is a priority segment. It [01;31m[Kdoesn[m[K't need any checking for

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K    60[m[K	/* Just make sure the contents [01;31m[Kdoesn[m[K't get compiled if TCP is not enabled. */
[01;32m[K   864[m[K				Also swap the IP-addresses in case the IP-tack [01;31m[Kdoesn[m[K't have an
[01;32m[K  2845[m[K				'bWinChange' [01;31m[Kdoesn[m[K't cause a window-size-change, the flag is used
[01;32m[K  3133[m[K						/* What happens: maybe after a reboot, a client [01;31m[Kdoesn[m[K't know the

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K    77[m[K	 * IP-clash detection is currently only used internally. When DHCP [01;31m[Kdoesn[m[K't respond, the
[01;32m[K   271[m[K					[01;31m[Kdoesn[m[K't match.  Might be an entry with ucValid=pdFALSE, waiting

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   664[m[K					/* Target MAC address [01;31m[Kdoesn[m[K't match. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   495[m[K		/* This define [01;31m[Kdoesn[m[K't mean much to the driver, except that it makes

[1;34m./test/cbmc/proofs/ARP/ARP_OutputARPRequest_buffer_alloc1/OutputARPRequest_harness.c[39m

[01;32m[K    42[m[K	   it is assumed for now, that pvPortMalloc [01;31m[Kdoesn[m[K't fail. Using a model allowing

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3173[m[K						/* This 'pxSocket' [01;31m[Kdoesn[m[K't match. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   225[m[K	#define   RX_ICMP_ERROR               (0x2000)    /* ICMP checksum field [01;31m[Kdoesn[m[K't match */
[01;32m[K   226[m[K	#define   RX_IP_ERROR                 (0x1000)    /* IP checksum field [01;31m[Kdoesn[m[K't match */
[01;32m[K   227[m[K	#define   RX_TCP_ERROR                (0x0800)    /* TCP checksum field [01;31m[Kdoesn[m[K't match */
[01;32m[K   228[m[K	#define   RX_UDP_ERROR                (0x0400)    /* UDP checksum field [01;31m[Kdoesn[m[K't match */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   180[m[K		/* Kick the Tx task in either case in case it [01;31m[Kdoesn[m[K't know the buffer is

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K   217[m[K		/* Kick the Tx task in either case in case it [01;31m[Kdoesn[m[K't know the buffer is

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   406[m[K				/* Value of PhyAddress [01;31m[Kdoesn[m[K't matter, will be probed for. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2414[m[K	/* MISRA/PC-lint [01;31m[Kdoesn[m[K't like the use of unions. Here, they are a great
[01;32m[K  2522[m[K		Coverity [01;31m[Kdoesn[m[K't understand about union variables. */

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   331[m[K		/* DHCP has an option for clients to register their hostname.  It [01;31m[Kdoesn[m[K't

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   173[m[K		fields [01;31m[Kdoesn[m[K't make the structure bigger, due to alignment.

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   533[m[K		/* This define [01;31m[Kdoesn[m[K't mean much to the driver, except that it makes

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_physpeed.c[39m

[01;32m[K   428[m[K			/* [01;31m[KDont[m[K advertise PHY speed of 1000 Mbps */
[01;32m[K   430[m[K			/* [01;31m[KDont[m[K advertise PHY speed of 10 Mbps */
[01;32m[K   437[m[K			/* [01;31m[KDont[m[K advertise PHY speed of 1000 Mbps */
[01;32m[K   440[m[K			/* [01;31m[KDont[m[K advertise PHY speed of 100 Mbps */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_physpeed.c[39m

[01;32m[K   314[m[K		control |= (1 << 11);	/* enable [01;31m[Kdownshift[m[K */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   290[m[K		2. [01;31m[KDPHC[m[K, to send requests and to renew a reservation

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1133[m[K	  /* Set the [01;31m[KDR[m[K bit according to ETH RetryTransmission value */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   434[m[K			/* Clear the DMA Receive Buffer Size ([01;31m[KDRBS[m[K) field: */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1243[m[K	    /* Set the DT bit according to ETH [01;31m[KDropTCPIPChecksumErrorFrame[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   574[m[K	 uint32_t              [01;31m[KDropTCPIPChecksumErrorFrame[m[K; /*!< Selects or not the Dropping of TCP/IP Checksum Error Frames.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1271[m[K	    /* Set the [01;31m[KDSL[m[K bit according to ETH DesciptorSkipLength value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1243[m[K	    /* Set the [01;31m[KDT[m[K bit according to ETH DropTCPIPChecksumErrorFrame value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   441[m[K	  uint32_t             [01;31m[KDuplexMode[m[K;                /*!< Selects the MAC duplex mode: Half-Duplex or Full-Duplex mode

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   159[m[K				addr_dw:30; /**< Address in number of [01;31m[KDW[m[K */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   160[m[K				addr_dw:30; /**< Address in number of [01;31m[KDW[m[K */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   183[m[K				addr_dw:30; /**< Address in number of [01;31m[KDW[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   252[m[K	#define   RXQ_TWOBYTE_OFFSET          (0x0200)    /* Enable adding 2-byte before frame header for IP aligned with [01;31m[KDWORD[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   894[m[K				/* RX step18-19: pad with dummy data to keep [01;31m[Kdword[m[K alignment. */
[01;32m[K   945[m[K				/* TX step9-10: pad with dummy data to keep [01;31m[Kdword[m[K alignment. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   452[m[K	//#define   RXQ_TWOBYTE_OFFSET          (0x0200)    /* Enable adding 2-byte before frame header for IP aligned with [01;31m[KDWORD[m[K */
[01;32m[K   452[m[K	//#define   RXQ_TWOBYTE_OFFSET          (0x0200)    /* Enable adding 2-byte before frame header for IP aligned with [01;31m[KDWORD[m[K */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1023[m[K	 * \brief Set MAC Address via 2 [01;31m[Kdword[m[K.

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1026[m[K	 * \brief Set MAC Address via 2 [01;31m[Kdword[m[K.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K  1034[m[K	 * \brief Set MAC Address via 2 [01;31m[Kdword[m[K.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1193[m[K	   /* Set the [01;31m[KDZPQ[m[K bit according to ETH ZeroQuantaPause value */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   157[m[K		 * It may return: -EINPROGRESS, -[01;31m[KEAGAIN[m[K, or 0 for OK.
[01;32m[K  2239[m[K				xResult = bMayConnect( pxSocket ); /* -EINPROGRESS, -[01;31m[KEAGAIN[m[K, or 0 for OK */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2817[m[K			case pdFREERTOS_ERRNO_EWOULDBLOCK:    pcName = "EWOULDBLOCK"; break; /* same as [01;31m[KEAGAIN[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   177[m[K	#define   TX_CTRL_PAD_ENABLE          (0x0004)    /* [01;31m[KEanble[m[K adding a padding to a packet shorter than 64 bytes */
[01;32m[K   194[m[K	#define   RX_CTRL_BAD_PACKET          (0x0200)    /* [01;31m[KEanble[m[K receive CRC error frames */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1007[m[K		case [01;31m[KeARPCacheHit[m[K:		/* An ARP table lookup found a valid entry. */

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    53[m[K		[01;31m[KeARPCacheHit[m[K,				/* 1 An ARP table lookup found a valid entry. */
[01;32m[K    85[m[K	 * age, and return [01;31m[KeARPCacheHit[m[K.  If the IP address does not exist in the ARP

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1009[m[K		case [01;31m[KeARPCacheMiss[m[K:		/* An ARP table lookup did not find a valid entry. */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   463[m[K			if( eReturn == [01;31m[KeARPCacheMiss[m[K )	/*lint !e774: (Info -- Boolean within 'if' always evaluates to True, depending on configuration. */
[01;32m[K   465[m[K			/* No cache look-up was done, so the result is still '[01;31m[KeARPCacheMiss[m[K'. */

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    52[m[K		[01;31m[KeARPCacheMiss[m[K = 0,			/* 0 An ARP table lookup did not find a valid entry. */
[01;32m[K    86[m[K	 * cache return [01;31m[KeARPCacheMiss[m[K.  If the packet cannot be sent for any reason

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   235[m[K		[01;31m[KeARPTimerEvent[m[K,			/* 3: The ARP timer expired. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   425[m[K	 * returns a non-zero value then a context switch should be performed [01;31m[Kebfore[m[K

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   810[m[K	#define ETH_DMATXDESC_ES                      ((uint32_t)0x00008000U)  /*!< Error summary: OR of the following bits: UE || ED || [01;31m[KEC[m[K || LCO || NC || LCA || FF || JT */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1010[m[K		case [01;31m[KeCantSendPacket[m[K:	/* There is no IP address, or an ARP is still in progress. */

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    54[m[K		[01;31m[KeCantSendPacket[m[K				/* 2 There is no IP address, or an ARP is still in progress, so the packet cannot be sent. */
[01;32m[K    88[m[K	 * isn't a gateway defined) then return [01;31m[KeCantSendPacket[m[K.

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1636[m[K				/* Socket goes to status [01;31m[KeCLOSED[m[K because of a RST.
[01;32m[K  2895[m[K			case [01;31m[KeCLOSED[m[K:		/* (server + client) no connection state at all. */
[01;32m[K  3103[m[K				non-active states:  [01;31m[KeCLOSED[m[K, eCLOSE_WAIT, eFIN_WAIT_2, eCLOSING, or

[1;34m./include/FreeRTOS_TCP_IP.h[39m

[01;32m[K    39[m[K		[01;31m[KeCLOSED[m[K = 0U,	/* 0 (server + client) no connection state at all. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   104[m[K	 * eESTABLISHED, eFIN_WAIT_1, eFIN_WAIT_2, [01;31m[KeCLOSING[m[K, eLAST_ACK, eTIME_WAIT
[01;32m[K  2965[m[K			case [01;31m[KeCLOSING[m[K:		/* (server + client) waiting for a connection
[01;32m[K  3103[m[K				non-active states:  eCLOSED, eCLOSE_WAIT, eFIN_WAIT_2, [01;31m[KeCLOSING[m[K, or

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  2521[m[K					case [01;31m[KeCLOSING[m[K:		/* (server + client) waiting for a connection termination request acknowledgement from the remote TCP. */

[1;34m./include/FreeRTOS_TCP_IP.h[39m

[01;32m[K    53[m[K		[01;31m[KeCLOSING[m[K,		/* 9 (server + client) waiting for a connection termination request acknowledgement from the remote TCP. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K    74[m[K	#define tcpTCP_FLAG_ECN				( ( uint8_t ) 0x40U ) /* [01;31m[KECN[m[K-Echo */
[01;32m[K  1132[m[K				( ( uxFlags & ( size_t ) tcpTCP_FLAG_ECN ) != 0 )   ? 'E' : '.',	/* 0x0040: [01;31m[KECN[m[K-Echo */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  3109[m[K				the other party will get a [01;31m[KECONN[m[K error.  There are two exceptions:

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   106[m[K	needs to call [01;31m[KeConsiderFrameForProcessing[m[K. */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   570[m[K	* Arguments    : [01;31m[Kectrl[m[K - EDMAC and ETHERC control structure

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   228[m[K		/* Also enable [01;31m[KEDFE[m[K: Enhanced descriptor format enable. */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   527[m[K			xApplicationDHCPHook() returned another value than '[01;31m[KeDHCPContinue[m[K',

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    48[m[K			[01;31m[KeDHCPContinue[m[K,			/* Continue the DHCP process */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   237[m[K		[01;31m[KeDHCPEvent[m[K,				/* 5: Process the DHCP state machine. */

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    41[m[K			[01;31m[KeDHCPPhasePreDiscover[m[K,	/* Driver is about to send a DHCP discovery. */

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    42[m[K			[01;31m[KeDHCPPhasePreRequest[m[K	/* Driver is about to request DHCP an IP address. */

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    50[m[K			[01;31m[KeDHCPStopNoChanges[m[K,		/* Stop DHCP and continue with current settings. */

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    49[m[K			[01;31m[KeDHCPUseDefaults[m[K,		/* Stop DHCP and use the static defaults. */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   570[m[K	* Arguments    : ectrl - [01;31m[KEDMAC[m[K and ETHERC control structure
[01;32m[K   581[m[K	    if( pdecode->status_eesr & 0x00040000 ) /* [01;31m[KEDMAC[m[K FR (Frame Receive Event) interrupt */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   108[m[K	#define   EEPROM_CHIP_SELECT          (0x0001)    /* EEPROM chip select ([01;31m[KEECS[m[K pin) */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   105[m[K	#define   EEPROM_DATA_IN              (0x0008)    /* Data receive from EEPROM ([01;31m[KEEDI[m[K pin) */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   106[m[K	#define   EEPROM_DATA_OUT             (0x0004)    /* Data transmit to EEPROM ([01;31m[KEEDO[m[K pin) */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   103[m[K	#define REG_EEPROM_CTRL            (0x22)       /* [01;31m[KEEPCR[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    68[m[K	#define   EEPROM_PRESENCE             (0x0200)    /* External [01;31m[KEEPROM[m[K is used */
[01;32m[K   104[m[K	#define   EEPROM_ACCESS_ENABLE        (0x0010)    /* Enable software to access [01;31m[KEEPROM[m[K through bit 3 to bit 0 */
[01;32m[K   105[m[K	#define   EEPROM_DATA_IN              (0x0008)    /* Data receive from [01;31m[KEEPROM[m[K (EEDI pin) */
[01;32m[K   106[m[K	#define   EEPROM_DATA_OUT             (0x0004)    /* Data transmit to [01;31m[KEEPROM[m[K (EEDO pin) */
[01;32m[K   108[m[K	#define   EEPROM_CHIP_SELECT          (0x0001)    /* [01;31m[KEEPROM[m[K chip select (EECS pin) */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   107[m[K	#define   EEPROM_SERIAL_CLOCK         (0x0002)    /* Serial clock ([01;31m[KEESK[m[K pin) */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   104[m[K	 * [01;31m[KeESTABLISHED[m[K, eFIN_WAIT_1, eFIN_WAIT_2, eCLOSING, eLAST_ACK, eTIME_WAIT
[01;32m[K   288[m[K	 * Called from prvTCPHandleState() as long as the TCP status is [01;31m[KeESTABLISHED[m[K.
[01;32m[K  2384[m[K	 * If the flags received are correct, the socket will move to [01;31m[KeESTABLISHED[m[K.
[01;32m[K  2501[m[K	 * Called if the status is [01;31m[KeESTABLISHED[m[K.  Data reception has been handled
[01;32m[K  2708[m[K				( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) [01;31m[KeESTABLISHED[m[K ) &&	/* Connection established. */
[01;32m[K  2938[m[K			case [01;31m[KeESTABLISHED[m[K:	/* (server + client) an open connection, data

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   523[m[K										 * gets the state [01;31m[KeESTABLISHED[m[K */

[1;34m./include/FreeRTOS_TCP_IP.h[39m

[01;32m[K    47[m[K		[01;31m[KeESTABLISHED[m[K,	/* 5 (server + client) an open connection, data received can be

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   758[m[K	 * Send the event [01;31m[KeEvent[m[K to the IP task event queue, using a block time of

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   766[m[K	 * 		eIPEvent_t [01;31m[KeEventType[m[K;

[1;34m./FreeRTOS_Stream_Buffer.c[39m

[01;32m[K   185[m[K				/* Move the tail pointer to [01;31m[Keffecively[m[K remove the data read from

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   226[m[K		[01;31m[KeFrameConsumed[m[K			/* Processing the Ethernet packet contents resulted in the payload being sent to the stack. */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   412[m[K			( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) )/* Or a local broadcast address, [01;31m[Keg[m[K 192.168.1.255? */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   374[m[K							'[01;31m[KeGetLinkLayerAddress[m[K'. */

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    61[m[K			[01;31m[KeGetLinkLayerAddress[m[K,		/* When DHCP didn't respond, try to obtain a LinkLayer address 168.254.x.x. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K  1300[m[K	 * \brief Set screening type 2 [01;31m[KeherType[m[K register.

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   157[m[K		 * It may return: -[01;31m[KEINPROGRESS[m[K, -EAGAIN, or 0 for OK.
[01;32m[K  2239[m[K				xResult = bMayConnect( pxSocket ); /* -[01;31m[KEINPROGRESS[m[K, -EAGAIN, or 0 for OK */

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   158[m[K		[01;31m[KeInvalidChecksum[m[K,	/* A reply was received for an outgoing ping but the checksum of the reply was incorrect. */

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   159[m[K		[01;31m[KeInvalidData[m[K		/* A reply was received to an outgoing ping but the payload of the reply was not correct. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  2525[m[K							Both are fatal and will [01;31m[Kelad[m[K to closing the socket. */

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    63[m[K		[01;31m[KeLeasedAddress[m[K,					/* Resend the request at the appropriate time to renew the lease. */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K    59[m[K	#[01;31m[Kelif[m[K !defined( _lint )	/* Lint does not like an #error */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K    65[m[K			2) Called by [01;31m[KEMAC[m[K-Task: start SPI transfer
[01;32m[K    91[m[K			4) Called by [01;31m[KEMAC[m[K-Task: finish SPI transfer
[01;32m[K   118[m[K					vTaskNotifyGiveFromISR();	// Wake up the [01;31m[KEMAC[m[K task
[01;32m[K   118[m[K					vTaskNotifyGiveFromISR();	// Wake up the [01;31m[KEMAC[m[K task
[01;32m[K   120[m[K			2) Called by [01;31m[KEMAC[m[K-Task: check for new fragments and start SPI transfer
[01;32m[K   225[m[K	/* Default the size of the stack used by the [01;31m[KEMAC[m[K deferred handler task to 4x
[01;32m[K   333[m[K	handle is used so direct notifications can be sent to the task for all [01;31m[KEMAC[m[K/DMA
[01;32m[K   989[m[K				/* Prevent the [01;31m[KEMAC[m[K task from sleeping a single time. */
[01;32m[K  1220[m[K				/* Wait for the [01;31m[KEMAC[m[K interrupt to indicate that another packet has been

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K    83[m[K	/* Default the size of the stack used by the [01;31m[KEMAC[m[K deferred handler task to twice
[01;32m[K   116[m[K	/* [01;31m[KEMAC[m[K data/descriptions. */
[01;32m[K   147[m[K	handle is used so direct notifications can be sent to the task for all [01;31m[KEMAC[m[K/DMA
[01;32m[K   234[m[K				/* The [01;31m[KEMAC[m[K will calculate the checksum of the IP-header.

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.c[39m

[01;32m[K    41[m[K	 * Both the DMA descriptors as well as all [01;31m[KEMAC[m[K TX-buffers will be allocated in

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K    48[m[K	/* Two defines used to set or clear the [01;31m[KEMAC[m[K interrupt */
[01;32m[K    72[m[K		Once a message has been received by the [01;31m[KEMAC[m[K, the descriptor can be passed
[01;32m[K   175[m[K		/* In this port for FreeRTOS+TCP, the [01;31m[KEMAC[m[K interrupts will only set a bit in
[01;32m[K   567[m[K			Now tell the [01;31m[KEMAC[m[K that received messages should be stored at "address + 2". */

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K     3[m[K	 * PHY's communicate with an [01;31m[KEMAC[m[K either through
[01;32m[K     5[m[K	 * The [01;31m[KEMAC[m[K can poll for PHY ports on 32 different addresses. Each of the PHY ports

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K    85[m[K	/* Default the size of the stack used by the [01;31m[KEMAC[m[K deferred handler task to 4x
[01;32m[K   150[m[K	handle is used so direct notifications can be sent to the task for all [01;31m[KEMAC[m[K/DMA
[01;32m[K   562[m[K				/* Wait for the [01;31m[KEMAC[m[K interrupt to indicate that another packet has been

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K    84[m[K	/* Default the size of the stack used by the [01;31m[KEMAC[m[K deferred handler task to 4x
[01;32m[K   196[m[K	handle is used so direct notifications can be sent to the task for all [01;31m[KEMAC[m[K/DMA
[01;32m[K   566[m[K			/* For a reset / reconfigure of the [01;31m[KEMAC[m[K. */
[01;32m[K   876[m[K				/* Wait for the [01;31m[KEMAC[m[K interrupt to indicate that another packet has been

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K    99[m[K	/* Define the [01;31m[KEMAC[m[K status bits that should trigger an interrupt. */

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K    52[m[K	/* Default the size of the stack used by the [01;31m[KEMAC[m[K deferred handler task to twice
[01;32m[K    92[m[K	    /* Enable clock & set [01;31m[KEMAC[m[K configuration         */

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   276[m[K	    [01;31m[KEMAC[m[K->CAMEN = 1;    // Enable CAM entry 0    

[1;34m./portable/NetworkInterface/M487/m480_eth.h[39m

[01;32m[K    99[m[K	#define OWNERSHIP_EMAC 0x80000000  // 1 = [01;31m[KEMAC[m[K

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   126[m[K	/* Default the size of the stack used by the [01;31m[KEMAC[m[K deferred handler task to twice
[01;32m[K   271[m[K	handle is used so direct notifications can be sent to the task for all [01;31m[KEMAC[m[K/DMA
[01;32m[K   485[m[K			/* [01;31m[KEMAC[m[K initialisation failed, return pdFAIL. */

[1;34m./portable/NetworkInterface/include/phyHandling.h[39m

[01;32m[K     3[m[K	 * PHY's communicate with an [01;31m[KEMAC[m[K either through
[01;32m[K     5[m[K	 * The [01;31m[KEMAC[m[K can poll for PHY ports on 32 different addresses. Each of the PHY ports

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K   147[m[K					/* The [01;31m[KEMAC[m[K now owns the buffer. */
[01;32m[K   219[m[K			/* Wait for the [01;31m[KEMAC[m[K interrupt to indicate that another packet has been

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K    85[m[K	        [01;31m[KeMACFailed[m[K,                             /* Initialisation failed. */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   153[m[K	    [01;31m[KeMACFailed[m[K, /* Initialisation failed. */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K    89[m[K	    [01;31m[KeMACFailed[m[K, /* Initialisation failed. */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K    83[m[K	        [01;31m[KeMACInit[m[K,                               /* Must initialise MAC. */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   151[m[K	    [01;31m[KeMACInit[m[K,   /* Must initialise MAC. */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K    87[m[K	    [01;31m[KeMACInit[m[K,   /* Must initialise MAC. */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K    84[m[K	        [01;31m[KeMACPass[m[K,                               /* Initialisation was successful. */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   152[m[K	    [01;31m[KeMACPass[m[K,   /* Initialisation was successful. */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K    88[m[K	    [01;31m[KeMACPass[m[K,   /* Initialisation was successful. */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K   144[m[K	 * The PHY address is the reset status of CRS, RXD[3:0] (the [01;31m[KemacPins[m[K' pullups).

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   588[m[K		 * Enable the interrupt for [01;31m[Kemacps[m[K.
[01;32m[K   600[m[K	 * The [01;31m[KEmacPs[m[K has a HW bug (SI# 692601) on the Rx path for heavy Rx traffic.

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   342[m[K	 * -[01;31m[Kemacro[m[K(740,ipPOINTER_CAST)    // 750:  Unusual pointer cast (incompatible indirect types) [MISRA 2012 Rule 1.3, required])
[01;32m[K   342[m[K	 * -[01;31m[Kemacro[m[K(740,ipPOINTER_CAST)    // 750:  Unusual pointer cast (incompatible indirect types) [MISRA 2012 Rule 1.3, required])
[01;32m[K   343[m[K	 * -[01;31m[Kemacro[m[K(9005,ipPOINTER_CAST)   // 9005: attempt to cast away const/volatile from a pointer or reference [MISRA 2012 Rule 11.8, required]
[01;32m[K   343[m[K	 * -[01;31m[Kemacro[m[K(9005,ipPOINTER_CAST)   // 9005: attempt to cast away const/volatile from a pointer or reference [MISRA 2012 Rule 11.8, required]
[01;32m[K   344[m[K	 * -[01;31m[Kemacro[m[K(9087,ipPOINTER_CAST)   // 9087: cast performed between a pointer to object type and a pointer to a different object type [MISRA 2012 Rule 11.3, required]
[01;32m[K   344[m[K	 * -[01;31m[Kemacro[m[K(9087,ipPOINTER_CAST)   // 9087: cast performed between a pointer to object type and a pointer to a different object type [MISRA 2012 Rule 11.3, required]
[01;32m[K   347[m[K	 * -[01;31m[Kemacro[m[K(9079,ipPOINTER_CAST)   // 9079: conversion from pointer to void to pointer to other type [MISRA 2012 Rule 11.5, advisory])
[01;32m[K   347[m[K	 * -[01;31m[Kemacro[m[K(9079,ipPOINTER_CAST)   // 9079: conversion from pointer to void to pointer to other type [MISRA 2012 Rule 11.5, advisory])
[01;32m[K   348[m[K	 * --[01;31m[Kemacro[m[K((826),ipPOINTER_CAST) // 826:  Suspicious pointer-to-pointer conversion (area too small)
[01;32m[K   348[m[K	 * --[01;31m[Kemacro[m[K((826),ipPOINTER_CAST) // 826:  Suspicious pointer-to-pointer conversion (area too small)
[01;32m[K   360[m[K	 * -[01;31m[Kemacro[m[K(9033,ipNUMERIC_CAST) // 9033: Impermissible cast of composite expression (different essential type categories) [MISRA 2012 Rule 10.8, required])
[01;32m[K   360[m[K	 * -[01;31m[Kemacro[m[K(9033,ipNUMERIC_CAST) // 9033: Impermissible cast of composite expression (different essential type categories) [MISRA 2012 Rule 10.8, required])
[01;32m[K   363[m[K	 * -[01;31m[Kemacro[m[K(9030,ipNUMERIC_CAST) // 9030: Impermissible cast; cannot cast from 'essentially Boolean' to 'essentially signed' [MISRA 2012 Rule 10.5, advisory])
[01;32m[K   363[m[K	 * -[01;31m[Kemacro[m[K(9030,ipNUMERIC_CAST) // 9030: Impermissible cast; cannot cast from 'essentially Boolean' to 'essentially signed' [MISRA 2012 Rule 10.5, advisory])

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   255[m[K	    numaker_set_mac_addr(mac_addr);  // need to reconfigure hardware address 'cos we just RESET [01;31m[Kemc[m[K...

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   406[m[K	    // http://[01;31m[Ken[m[K.wikipedia.org/wiki/MAC_address

[1;34m./include/FreeRTOS_TCP_IP.h[39m

[01;32m[K    38[m[K		 * http://[01;31m[Ken[m[K.wikipedia.org/wiki/Transmission_Control_Protocol */
[01;32m[K    38[m[K		 * http://[01;31m[Ken[m[K.wikipedia.org/wiki/Transmission_Control_Protocol */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   418[m[K		 * http://community.atmel.com/forum/sam4e-gmac-transmit-checksum-offload-[01;31m[Kenablesolved[m[K
[01;32m[K   418[m[K		 * http://community.atmel.com/forum/sam4e-gmac-transmit-checksum-offload-[01;31m[Kenablesolved[m[K

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1156[m[K	 * \[01;31m[Kendcode[m[K
[01;32m[K  1165[m[K	 * \[01;31m[Kendcode[m[K
[01;32m[K  1191[m[K	 * \[01;31m[Kendcode[m[K
[01;32m[K  1206[m[K	 *   \[01;31m[Kendcode[m[K
[01;32m[K  1211[m[K	 *   \[01;31m[Kendcode[m[K
[01;32m[K  1215[m[K	 *   \[01;31m[Kendcode[m[K
[01;32m[K  1225[m[K	 *   \[01;31m[Kendcode[m[K
[01;32m[K  1241[m[K	 *   \[01;31m[Kendcode[m[K
[01;32m[K  1245[m[K	 *   \[01;31m[Kendcode[m[K
[01;32m[K  1247[m[K	 *   - \code sysclk_init(); \[01;31m[Kendcode[m[K
[01;32m[K  1249[m[K	 *   - \code board_init(); \[01;31m[Kendcode[m[K
[01;32m[K  1251[m[K	 *   - \code pmc_enable_periph_clk(ID_GMAC); \[01;31m[Kendcode[m[K
[01;32m[K  1258[m[K	 * \[01;31m[Kendcode[m[K
[01;32m[K  1262[m[K	 * \[01;31m[Kendcode[m[K
[01;32m[K  1266[m[K	 * \[01;31m[Kendcode[m[K
[01;32m[K  1270[m[K	 * \[01;31m[Kendcode[m[K
[01;32m[K  1274[m[K	 * \[01;31m[Kendcode[m[K
[01;32m[K  1278[m[K	 * \[01;31m[Kendcode[m[K
[01;32m[K  1285[m[K	 * \[01;31m[Kendcode[m[K
[01;32m[K  1289[m[K	 *   - \code gmac_dev_read(&gs_gmac_dev, (uint8_t *) gs_uc_eth_buffer, sizeof(gs_uc_eth_buffer), &ul_frm_size)); \[01;31m[Kendcode[m[K

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1159[m[K	 * \[01;31m[Kendcode[m[K
[01;32m[K  1168[m[K	 * \[01;31m[Kendcode[m[K
[01;32m[K  1194[m[K	 * \[01;31m[Kendcode[m[K
[01;32m[K  1209[m[K	 *   \[01;31m[Kendcode[m[K
[01;32m[K  1214[m[K	 *   \[01;31m[Kendcode[m[K
[01;32m[K  1218[m[K	 *   \[01;31m[Kendcode[m[K
[01;32m[K  1228[m[K	 *   \[01;31m[Kendcode[m[K
[01;32m[K  1244[m[K	 *   \[01;31m[Kendcode[m[K
[01;32m[K  1248[m[K	 *   \[01;31m[Kendcode[m[K
[01;32m[K  1250[m[K	 *   - \code sysclk_init(); \[01;31m[Kendcode[m[K
[01;32m[K  1252[m[K	 *   - \code board_init(); \[01;31m[Kendcode[m[K
[01;32m[K  1254[m[K	 *   - \code pmc_enable_periph_clk(ID_GMAC); \[01;31m[Kendcode[m[K
[01;32m[K  1261[m[K	 * \[01;31m[Kendcode[m[K
[01;32m[K  1265[m[K	 * \[01;31m[Kendcode[m[K
[01;32m[K  1269[m[K	 * \[01;31m[Kendcode[m[K
[01;32m[K  1273[m[K	 * \[01;31m[Kendcode[m[K
[01;32m[K  1277[m[K	 * \[01;31m[Kendcode[m[K
[01;32m[K  1281[m[K	 * \[01;31m[Kendcode[m[K
[01;32m[K  1288[m[K	 * \[01;31m[Kendcode[m[K
[01;32m[K  1292[m[K	 *   - \code gmac_dev_read(&gs_gmac_dev, (uint8_t *) gs_uc_eth_buffer, sizeof(gs_uc_eth_buffer), &ul_frm_size)); \[01;31m[Kendcode[m[K

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K    55[m[K	/// @[01;31m[Kendcond[m[K
[01;32m[K  1095[m[K	/// @[01;31m[Kendcond[m[K

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K    62[m[K	/// @[01;31m[Kendcond[m[K
[01;32m[K   450[m[K	/// @[01;31m[Kendcond[m[K

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K    56[m[K	/// @[01;31m[Kendcond[m[K
[01;32m[K  1098[m[K	/// @[01;31m[Kendcond[m[K

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K    66[m[K	/// @[01;31m[Kendcond[m[K
[01;32m[K   944[m[K	/// @[01;31m[Kendcond[m[K

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K    58[m[K	/// @[01;31m[Kendcond[m[K
[01;32m[K  1361[m[K	/// @[01;31m[Kendcond[m[K

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K    84[m[K	/// @[01;31m[Kendcond[m[K
[01;32m[K   924[m[K	/// @[01;31m[Kendcond[m[K

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   619[m[K		/* Look at the actual length of the packet, translate it to a host-[01;31m[Kendial[m[K notation. */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   323[m[K			uint16_t usNbFlags;     /* NetBIOS flags 0x6000 : IP-address, big-[01;31m[Kendian[m[K */
[01;32m[K  1660[m[K			/* HT:[01;31m[Kendian[m[K: should not be translated, copying from packet to packet */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1271[m[K				[01;31m[Kendian[m[K number. */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   715[m[K						/* In most cases, a 4-byte network-[01;31m[Kendian[m[K parameter follows,
[01;32m[K   815[m[K									to host-[01;31m[Kendian[m[K format. */
[01;32m[K   845[m[K						/* HT:[01;31m[Kendian[m[K: used to be network order */

[1;34m./test/unit-test/ConfigFiles/FreeRTOS_errno_TCP.h[39m

[01;32m[K    80[m[K		/* The following [01;31m[Kendian[m[K values are used by FreeRTOS+ components, not FreeRTOS

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1979[m[K		/* Translate "192.168.2.100" to a 32-bit number, network-[01;31m[Kendian[m[K. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    67[m[K	#define   LITTLE_ENDIAN_BUS_MODE      (0x0400)    /* Bus in little [01;31m[Kendian[m[K mode */

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   242[m[K	#define GMAC_DCFGR_ESMA (0x1u << 6) /**< \brief (GMAC_DCFGR) [01;31m[KEndian[m[K Swap Mode Enable for Management Descriptor Accesses */
[01;32m[K   243[m[K	#define GMAC_DCFGR_ESPA (0x1u << 7) /**< \brief (GMAC_DCFGR) [01;31m[KEndian[m[K Swap Mode Enable for Packet Data Accesses */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1917[m[K			/* HT:[01;31m[Kendian[m[K: changed back */
[01;32m[K  2427[m[K		/* Swap the input (little [01;31m[Kendian[m[K platform only). */
[01;32m[K  2535[m[K		/* swap the output (little [01;31m[Kendian[m[K platform only). */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   508[m[K		 * are being stored in the native-[01;31m[Kendian[m[K way

[1;34m./include/FreeRTOS_errno_TCP.h[39m

[01;32m[K    81[m[K		/* The following [01;31m[Kendian[m[K values are used by FreeRTOS+ components, not FreeRTOS

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   172[m[K	/* [01;31m[KEndian[m[K related definitions. */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1189[m[K							/* usChar2u16 returns value in host [01;31m[Kendianness[m[K. */
[01;32m[K  1478[m[K			/* Read the request flags in host [01;31m[Kendianness[m[K. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K    32[m[K	 * [01;31m[KEndianness[m[K: in this module all ports and IP addresses are stored in

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K    88[m[K	#[01;31m[Kendif[m[K /* configUSE_TCP_WIN */
[01;32m[K   103[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   111[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   120[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   127[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   134[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   142[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   154[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   162[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   170[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   178[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   186[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   193[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   223[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN */
[01;32m[K   243[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN */
[01;32m[K   263[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN */
[01;32m[K   364[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   395[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   455[m[K				#[01;31m[Kendif[m[K /* ipconfigHAS_DEBUG_PRINTF */
[01;32m[K   461[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   497[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   523[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   547[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   577[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   614[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   636[m[K		#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   676[m[K		#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K   719[m[K	#[01;31m[Kendif[m[K /* ipconfgiUSE_TCP_WIN == 1 */
[01;32m[K   791[m[K	#[01;31m[Kendif[m[K /* ipconfgiUSE_TCP_WIN == 1 */
[01;32m[K  1011[m[K	#[01;31m[Kendif[m[K /* ipconfgiUSE_TCP_WIN == 1 */
[01;32m[K  1047[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K  1170[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K  1180[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K  1240[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K  1316[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K  1488[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K  1566[m[K						#[01;31m[Kendif[m[K	/* ipconfigHAS_DEBUG_PRINTF */
[01;32m[K  1638[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K  1701[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K  1726[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K  1754[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K  1791[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 0 */
[01;32m[K  1847[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 0 */
[01;32m[K  1887[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 0 */
[01;32m[K  1909[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 0 */
[01;32m[K  1931[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 0 */
[01;32m[K  1977[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 0 */
[01;32m[K  2022[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 0 */
[01;32m[K  2035[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 0 */
[01;32m[K  2048[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN == 0 */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K    63[m[K	#[01;31m[Kendif[m[K /* ipconfigBYTE_ORDER */
[01;32m[K    80[m[K	#[01;31m[Kendif[m[K	/* ( ipconfigUSE_NBNS == 1 ) */
[01;32m[K    90[m[K	#[01;31m[Kendif[m[K	/* _lint */
[01;32m[K   103[m[K	#[01;31m[Kendif[m[K	/* ( ipconfigUSE_NBNS != 0 ) */
[01;32m[K   175[m[K	#[01;31m[Kendif[m[K	/* ipconfigDNS_USE_CALLBACKS */
[01;32m[K   181[m[K	#[01;31m[Kendif[m[K	/* ipconfigDNS_USE_CALLBACKS */
[01;32m[K   195[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_NBNS */
[01;32m[K   203[m[K	#[01;31m[Kendif[m[K	/* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
[01;32m[K   230[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_DNS_CACHE == 1 */
[01;32m[K   234[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_LLMNR == 1 */
[01;32m[K   294[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_LLMNR == 1 */
[01;32m[K   329[m[K		#[01;31m[Kendif[m[K /* ipconfigUSE_NBNS == 1 */
[01;32m[K   341[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_DNS_CACHE == 1 */
[01;32m[K   501[m[K	#[01;31m[Kendif[m[K /* ipconfigDNS_USE_CALLBACKS == 1 */
[01;32m[K   560[m[K		#[01;31m[Kendif[m[K	/* ( ipconfigUSE_DNS_CACHE != 0 ) */
[01;32m[K   568[m[K			#[01;31m[Kendif[m[K /* ipconfigINCLUDE_FULL_INET_ADDR == 1 */
[01;32m[K   588[m[K			#[01;31m[Kendif[m[K /* ipconfigUSE_DNS_CACHE == 1 */
[01;32m[K   620[m[K			#[01;31m[Kendif[m[K /* if ( ipconfigDNS_USE_CALLBACKS == 1 ) */
[01;32m[K   646[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_LLMNR == 1 */
[01;32m[K   663[m[K		#[01;31m[Kendif[m[K /* ipconfigUSE_LLMNR == 1 */
[01;32m[K   753[m[K						#[01;31m[Kendif[m[K /* ipconfigDNS_USE_CALLBACKS == 0 */
[01;32m[K   968[m[K	#[01;31m[Kendif[m[K	/* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
[01;32m[K  1083[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_NBNS */
[01;32m[K  1167[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
[01;32m[K  1193[m[K						#[01;31m[Kendif[m[K /* ipconfigUSE_LLMNR */
[01;32m[K  1290[m[K								#[01;31m[Kendif[m[K	/* ipconfigDNS_USE_CALLBACKS == 1 */
[01;32m[K  1311[m[K								#[01;31m[Kendif[m[K /* ipconfigUSE_DNS_CACHE */
[01;32m[K  1403[m[K							#[01;31m[Kendif[m[K /* lint */
[01;32m[K  1414[m[K							#[01;31m[Kendif[m[K /* lint */
[01;32m[K  1430[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_LLMNR == 1 */
[01;32m[K  1534[m[K				#[01;31m[Kendif[m[K /* ipconfigUSE_DNS_CACHE */
[01;32m[K  1606[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_NBNS */
[01;32m[K  1691[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_NBNS == 1 || ipconfigUSE_LLMNR == 1 */
[01;32m[K  1812[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_DNS_CACHE */
[01;32m[K  1814[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_DNS != 0 */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   147[m[K	#[01;31m[Kendif[m[K /* !defined( SEND_REPEATED_COUNT ) */
[01;32m[K   199[m[K	#[01;31m[Kendif[m[K /* ipconfigHAS_DEBUG_PRINTF != 0 */
[01;32m[K   224[m[K	#[01;31m[Kendif[m[K/* ( ipconfigUSE_TCP_WIN == 1 ) */
[01;32m[K   442[m[K					#[01;31m[Kendif[m[K /* ipconfigHAS_DEBUG_PRINTF */
[01;32m[K   528[m[K						#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_TX_DRIVER */
[01;32m[K   550[m[K		#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN */
[01;32m[K   685[m[K			#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_TX_DRIVER */
[01;32m[K   739[m[K		#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_TX_DRIVER */
[01;32m[K   998[m[K		#[01;31m[Kendif[m[K /* ipconfigHAS_PRINTF != 0 */
[01;32m[K  1138[m[K	#[01;31m[Kendif[m[K /* ipconfigHAS_DEBUG_PRINTF */
[01;32m[K  1259[m[K	#[01;31m[Kendif[m[K	/* ipconfigUSE_TCP_WIN */
[01;32m[K  1351[m[K				#[01;31m[Kendif[m[K	/* ipconfigUSE_TCP_WIN == 1 */
[01;32m[K  1399[m[K				#[01;31m[Kendif[m[K /* ipconfigUSE_CALLBACKS == 1  */
[01;32m[K  1403[m[K	#[01;31m[Kendif[m[K	/* ( ipconfigUSE_TCP_WIN != 0 ) */
[01;32m[K  1476[m[K		#[01;31m[Kendif[m[K	/* ipconfigUSE_TCP_WIN == 0 */
[01;32m[K  1621[m[K			#[01;31m[Kendif[m[K /* ipconfigUSE_CALLBACKS */
[01;32m[K  1668[m[K		#[01;31m[Kendif[m[K /* ipconfigHAS_DEBUG_PRINTF */
[01;32m[K  1941[m[K			#[01;31m[Kendif[m[K /* ipconfigTCP_KEEP_ALIVE */
[01;32m[K  2312[m[K			#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN */
[01;32m[K  2354[m[K	#[01;31m[Kendif[m[K	/* ipconfigUSE_TCP_WIN */
[01;32m[K  2470[m[K			#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN */
[01;32m[K  2488[m[K			#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN */
[01;32m[K  2528[m[K		#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN */
[01;32m[K  2564[m[K					#[01;31m[Kendif[m[K /* ipconfigUSE_CALLBACKS == 1  */
[01;32m[K  2699[m[K			#[01;31m[Kendif[m[K /* ipconfigTCP_ACK_EARLIER_PACKET */
[01;32m[K  2771[m[K		#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN */
[01;32m[K  3013[m[K	#[01;31m[Kendif[m[K /* !ipconfigIGNORE_UNKNOWN_PACKETS */
[01;32m[K  3141[m[K						#[01;31m[Kendif[m[K /* ipconfigHAS_DEBUG_PRINTF */
[01;32m[K  3258[m[K				#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN */
[01;32m[K  3270[m[K					#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN */
[01;32m[K  3411[m[K		#[01;31m[Kendif[m[K /* ipconfigSOCKET_HAS_USER_SEMAPHORE */
[01;32m[K  3420[m[K		#[01;31m[Kendif[m[K /* ipconfigUSE_CALLBACKS */
[01;32m[K  3432[m[K		#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SELECT_FUNCTION */
[01;32m[K  3519[m[K	#[01;31m[Kendif[m[K /* ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) ) */
[01;32m[K  3556[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP == 1 */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K    45[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_LLMNR */
[01;32m[K    86[m[K	#[01;31m[Kendif[m[K /* ipconfigARP_USE_CLASH_DETECTION */
[01;32m[K   158[m[K					#[01;31m[Kendif[m[K /* ipconfigARP_USE_CLASH_DETECTION */
[01;32m[K   194[m[K	#[01;31m[Kendif[m[K	/* ipconfigUSE_ARP_REMOVE_ENTRY != 0 */
[01;32m[K   385[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_ARP_REVERSED_LOOKUP */
[01;32m[K   738[m[K	#[01;31m[Kendif[m[K /* 0 */
[01;32m[K   770[m[K	#[01;31m[Kendif[m[K /* ( ipconfigHAS_PRINTF != 0 ) || ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   132[m[K	#[01;31m[Kendif[m[K /* ( ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN ) */
[01;32m[K   251[m[K	#[01;31m[Kendif[m[K	/* ipconfigUSE_DHCP_HOOK */
[01;32m[K   266[m[K			#[01;31m[Kendif[m[K	/* ipconfigUSE_DHCP_HOOK */
[01;32m[K   299[m[K			#[01;31m[Kendif[m[K	/* ipconfigUSE_DHCP_HOOK */
[01;32m[K   314[m[K				#[01;31m[Kendif[m[K	/* ipconfigUSE_DHCP_HOOK */
[01;32m[K   333[m[K				#[01;31m[Kendif[m[K	/* ipconfigUSE_DHCP_HOOK */
[01;32m[K   385[m[K						#[01;31m[Kendif[m[K /* ipconfigDHCP_FALL_BACK_AUTO_IP */
[01;32m[K   486[m[K		#[01;31m[Kendif[m[K	/* ipconfigDHCP_FALL_BACK_AUTO_IP */
[01;32m[K  1066[m[K	#[01;31m[Kendif[m[K /* ipconfigDHCP_FALL_BACK_AUTO_IP */
[01;32m[K  1069[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_DHCP != 0 */

[1;34m./test/unit-test/ConfigFiles/portmacro.h[39m

[01;32m[K   127[m[K		#[01;31m[Kendif[m[K /* __GNUC__ */
[01;32m[K   129[m[K	#[01;31m[Kendif[m[K /* taskRECORD_READY_PRIORITY */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K   124[m[K	#[01;31m[Kendif[m[K /* configINCLUDE_MESSAGE_BUFFER_AMP_DEMO */
[01;32m[K   129[m[K	#[01;31m[Kendif[m[K /* FREERTOS_CONFIG_H */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K   310[m[K	#[01;31m[Kendif[m[K /* FREERTOS_IP_CONFIG_H */

[1;34m./test/unit-test/ConfigFiles/FreeRTOS_errno_TCP.h[39m

[01;32m[K    85[m[K	#[01;31m[Kendif[m[K /* pdFREERTOS_ERRNO_NONE */
[01;32m[K    87[m[K	#[01;31m[Kendif[m[K /* FREERTOS_ERRNO_TCP */

[1;34m./test/unit-test/ConfigFiles/NetworkInterface.h[39m

[01;32m[K    43[m[K	#[01;31m[Kendif[m[K /* NETWORK_INTERFACE_H */

[1;34m./test/unit-test/ConfigFiles/NetworkBufferManagement.h[39m

[01;32m[K    70[m[K	#[01;31m[Kendif[m[K /* NETWORK_BUFFER_MANAGEMENT_H */

[1;34m./test/unit-test/ConfigFiles/IPTraceMacroDefaults.h[39m

[01;32m[K   193[m[K	#[01;31m[Kendif[m[K /* UDP_TRACE_MACRO_DEFAULTS_H */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   195[m[K			#[01;31m[Kendif[m[K /* ifdef FreeRTOS_debug_printf */
[01;32m[K   196[m[K		#[01;31m[Kendif[m[K /* ( ipconfigHAS_DEBUG_PRINTF == 0 ) */
[01;32m[K   197[m[K	#[01;31m[Kendif[m[K /* ifdef ipconfigHAS_DEBUG_PRINTF */
[01;32m[K   216[m[K			#[01;31m[Kendif[m[K /* ifdef FreeRTOS_debug_printf */
[01;32m[K   217[m[K		#[01;31m[Kendif[m[K /* ( ipconfigHAS_PRINTF == 0 ) */
[01;32m[K   218[m[K	#[01;31m[Kendif[m[K /* ifdef ipconfigHAS_PRINTF */
[01;32m[K   384[m[K		#[01;31m[Kendif[m[K /* _WINDOWS_ */
[01;32m[K   385[m[K	#[01;31m[Kendif[m[K /* ipconfigMAXIMUM_DISCOVER_TX_PERIOD */
[01;32m[K   417[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_DNS_CACHE != 0 */
[01;32m[K   570[m[K	#[01;31m[Kendif[m[K /* FREERTOS_DEFAULT_IP_CONFIG_H */

[1;34m./test/cbmc/proofs/ARP/ARP_OutputARPRequest_buffer_alloc2/OutputARPRequest_harness.c[39m

[01;32m[K    22[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_LLMNR */

[1;34m./test/cbmc/proofs/ARP/ARP_OutputARPRequest_buffer_alloc1/OutputARPRequest_harness.c[39m

[01;32m[K    22[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_LLMNR */

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K   237[m[K	#[01;31m[Kendif[m[K /* FREERTOS_CONFIG_H */

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K   319[m[K	#[01;31m[Kendif[m[K /* FREERTOS_IP_CONFIG_H */

[1;34m./test/cbmc/include/tasksStubs.h[39m

[01;32m[K    10[m[K	#[01;31m[Kendif[m[K /* INC_TASK_STUBS_H */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   129[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP == 1 */
[01;32m[K   137[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K   144[m[K	#[01;31m[Kendif[m[K  /* ipconfigUSE_TCP == 1 */
[01;32m[K   152[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K   160[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K   167[m[K	#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
[01;32m[K   176[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP == 1 */
[01;32m[K   215[m[K		#[01;31m[Kendif[m[K  /* ipconfigUSE_TCP == 1 */
[01;32m[K   242[m[K			#[01;31m[Kendif[m[K  /* ipconfigUSE_TCP == 1 */
[01;32m[K   265[m[K	#[01;31m[Kendif[m[K  /* ipconfigUSE_TCP == 1 */
[01;32m[K   341[m[K						#[01;31m[Kendif[m[K /* ipconfigUDP_MAX_RX_PACKETS > 0 */
[01;32m[K   379[m[K					#[01;31m[Kendif[m[K  /* ipconfigUSE_TCP == 1 */
[01;32m[K   419[m[K	#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
[01;32m[K   434[m[K	#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
[01;32m[K   463[m[K	#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
[01;32m[K   488[m[K	#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
[01;32m[K   517[m[K	#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
[01;32m[K   554[m[K				#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SIGNALS */
[01;32m[K   576[m[K	#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SELECT_FUNCTION */
[01;32m[K   630[m[K	#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
[01;32m[K   677[m[K						#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SIGNALS */
[01;32m[K   715[m[K				#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SIGNALS */
[01;32m[K   794[m[K		#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SIGNALS */
[01;32m[K   846[m[K				#[01;31m[Kendif[m[K /* ipconfigUSE_CALLBACKS */
[01;32m[K   909[m[K						#[01;31m[Kendif[m[K /* ipconfigUSE_CALLBACKS */
[01;32m[K  1028[m[K	#[01;31m[Kendif[m[K /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */
[01;32m[K  1036[m[K	#[01;31m[Kendif[m[K  /* ipconfigUSE_TCP == 1 */
[01;32m[K  1062[m[K		#[01;31m[Kendif[m[K /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */
[01;32m[K  1120[m[K						#[01;31m[Kendif[m[K /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
[01;32m[K  1129[m[K						#[01;31m[Kendif[m[K /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
[01;32m[K  1183[m[K			#[01;31m[Kendif[m[K  /* ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigUSE_CALLBACKS == 1 ) ) */
[01;32m[K  1226[m[K				#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN */
[01;32m[K  1246[m[K		#[01;31m[Kendif[m[K  /* ipconfigUSE_TCP == 1 */
[01;32m[K  1259[m[K			#[01;31m[Kendif[m[K /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
[01;32m[K  1267[m[K			#[01;31m[Kendif[m[K /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
[01;32m[K  1299[m[K		#[01;31m[Kendif[m[K /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */
[01;32m[K  1344[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP == 1 */
[01;32m[K  1446[m[K			#[01;31m[Kendif[m[K /* ipconfigUDP_MAX_RX_PACKETS */
[01;32m[K  1468[m[K				#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  1495[m[K							#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  1509[m[K							#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  1524[m[K			#[01;31m[Kendif[m[K /* ipconfigUSE_CALLBACKS */
[01;32m[K  1536[m[K				#[01;31m[Kendif[m[K /* ipconfigSOCKET_HAS_USER_SEMAPHORE */
[01;32m[K  1549[m[K				#[01;31m[Kendif[m[K /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */
[01;32m[K  1723[m[K			#[01;31m[Kendif[m[K  /* ipconfigUSE_TCP == 1 */
[01;32m[K  2103[m[K		#[01;31m[Kendif[m[K /* ipconfigSOCKET_HAS_USER_SEMAPHORE */
[01;32m[K  2112[m[K		#[01;31m[Kendif[m[K /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */
[01;32m[K  2128[m[K		#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SELECT_FUNCTION */
[01;32m[K  2164[m[K	#[01;31m[Kendif[m[K /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
[01;32m[K  2200[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  2272[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  2346[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  2474[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  2565[m[K							#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SIGNALS */
[01;32m[K  2602[m[K					#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SIGNALS */
[01;32m[K  2626[m[K			#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SIGNALS */
[01;32m[K  2669[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  2723[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  2755[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  2882[m[K						#[01;31m[Kendif[m[K /* ipconfigUSE_CALLBACKS */
[01;32m[K  2943[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  3004[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  3041[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  3130[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  3187[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  3208[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  3282[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  3298[m[K		#[01;31m[Kendif[m[K /* ipconfigUSE_CALLBACKS */
[01;32m[K  3326[m[K				#[01;31m[Kendif[m[K /* ipconfigUSE_CALLBACKS */
[01;32m[K  3344[m[K				#[01;31m[Kendif[m[K /* ipconfigHAS_DEBUG_PRINTF */
[01;32m[K  3378[m[K					#[01;31m[Kendif[m[K /* ipconfigUSE_CALLBACKS */
[01;32m[K  3414[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  3445[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  3484[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  3513[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  3542[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  3571[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  3597[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  3621[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  3650[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  3669[m[K	#[01;31m[Kendif[m[K /* 0 */
[01;32m[K  3685[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  3761[m[K	#[01;31m[Kendif[m[K /* ( ( ipconfigHAS_PRINTF != 0 ) && ( ipconfigUSE_TCP == 1 ) ) */
[01;32m[K  3792[m[K			#[01;31m[Kendif[m[K /* ipconfigUSE_TCP == 1 */
[01;32m[K  3886[m[K				#[01;31m[Kendif[m[K /* ipconfigUSE_TCP == 1 */
[01;32m[K  3920[m[K			#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SIGNALS */
[01;32m[K  3931[m[K	#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
[01;32m[K  3954[m[K		#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SELECT_FUNCTION */
[01;32m[K  3968[m[K	#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SIGNALS */
[01;32m[K  3993[m[K	#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SIGNALS */
[01;32m[K  4084[m[K	#[01;31m[Kendif[m[K	/* ipconfigSUPPORT_SELECT_FUNCTION */
[01;32m[K  4085[m[K	#[01;31m[Kendif[m[K /* 0 */

[1;34m./tools/tcp_mem_stats.c[39m

[01;32m[K   425[m[K	#[01;31m[Kendif[m[K	/* ( ipconfigUSE_TCP_MEM_STATS != 0 ) */

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K   657[m[K	#[01;31m[Kendif[m[K	/* ( ipconfigUSE_DUMP_PACKETS != 0 ) */

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K    79[m[K	#[01;31m[Kendif[m[K /* ipconfigTCP_IP_SANITY */
[01;32m[K   101[m[K	#[01;31m[Kendif[m[K /* ipconfigBUFFER_ALLOC_LOCK */
[01;32m[K   113[m[K	#[01;31m[Kendif[m[K /* ipconfigTCP_IP_SANITY */
[01;32m[K   160[m[K	#[01;31m[Kendif[m[K /* ipconfigTCP_IP_SANITY */
[01;32m[K   275[m[K					#[01;31m[Kendif[m[K /* ipconfigTCP_IP_SANITY */
[01;32m[K   282[m[K					#[01;31m[Kendif[m[K /* ipconfigUSE_LINKED_RX_MESSAGES */
[01;32m[K   414[m[K	/*#[01;31m[Kendif[m[K */ /* ipconfigINCLUDE_TEST_CODE */

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K    62[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP == 1 */
[01;32m[K   113[m[K				#[01;31m[Kendif[m[K /* configQUEUE_REGISTRY_SIZE */
[01;32m[K   123[m[K				#[01;31m[Kendif[m[K /*  ipconfigINCLUDE_EXAMPLE_FREERTOS_PLUS_TRACE_CALLS == 1 */
[01;32m[K   283[m[K						#[01;31m[Kendif[m[K /* ipconfigUSE_LINKED_RX_MESSAGES */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   473[m[K	#[01;31m[Kendif[m[K /* KSZ8851SNL_REG_H_INCLUDED */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K  1198[m[K			#[01;31m[Kendif[m[K /* ipconfigCHECK_IP_QUEUE_SPACE */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.h[39m

[01;32m[K    67[m[K	#[01;31m[Kendif[m[K /* KSZ8851SNL_H_INCLUDED */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   787[m[K							#[01;31m[Kendif[m[K /* niDISRUPT_PACKETS */

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K   180[m[K			#[01;31m[Kendif[m[K	/* ipconfigUSE_LLMNR == 1 */
[01;32m[K   240[m[K		#[01;31m[Kendif[m[K /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM */
[01;32m[K   372[m[K			#[01;31m[Kendif[m[K /* ipconfigCHECK_IP_QUEUE_SPACE */
[01;32m[K   374[m[K	#[01;31m[Kendif[m[K /* ( ipconfigHAS_PRINTF != 0 ) */
[01;32m[K   401[m[K			#[01;31m[Kendif[m[K /* ipconfigHAS_PRINTF != 0 ) */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   338[m[K			#[01;31m[Kendif[m[K	/* ipconfigUSE_LINKED_RX_MESSAGES */
[01;32m[K   353[m[K	#[01;31m[Kendif[m[K	/* ipconfigUSE_LINKED_RX_MESSAGES */
[01;32m[K   420[m[K				#[01;31m[Kendif[m[K	/* ipconfigUSE_LINKED_RX_MESSAGES */
[01;32m[K   457[m[K		#[01;31m[Kendif[m[K	/* ipconfigUSE_LINKED_RX_MESSAGES */

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.h[39m

[01;32m[K    22[m[K	#[01;31m[Kendif[m[K /* UNCACHEMEMORY_H */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif.h[39m

[01;32m[K   142[m[K	#[01;31m[Kendif[m[K /* __NETIF_XAXIEMACIF_H__ */

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K   600[m[K							#[01;31m[Kendif[m[K /* niDISRUPT_PACKETS */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_wifi.c[39m

[01;32m[K   192[m[K	#[01;31m[Kendif[m[K /* #ifndef PIC32_USE_ETHERNET */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K    70[m[K	    #[01;31m[Kendif[m[K /* (PIC32_MAC_DEBUG_MESSAGES != 0) */
[01;32m[K   208[m[K	    #[01;31m[Kendif[m[K /* (PIC32_MAC_DEBUG_COMMANDS != 0) */
[01;32m[K   446[m[K	            #[01;31m[Kendif[m[K /* (PIC32_MAC_DEBUG_COMMANDS != 0) */
[01;32m[K   888[m[K	    #[01;31m[Kendif[m[K /* (PIC32_MAC_DEBUG_COMMANDS != 0) */
[01;32m[K   889[m[K	#[01;31m[Kendif[m[K /* #ifdef PIC32_USE_ETHERNET */

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K    96[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP == 1 */
[01;32m[K   282[m[K	#[01;31m[Kendif[m[K /* #ifdef PIC32_USE_ETHERNET */
[01;32m[K   303[m[K	            #[01;31m[Kendif[m[K /* configQUEUE_REGISTRY_SIZE */
[01;32m[K   313[m[K	            #[01;31m[Kendif[m[K /*  ipconfigINCLUDE_EXAMPLE_FREERTOS_PLUS_TRACE_CALLS == 1 */
[01;32m[K   376[m[K	    #[01;31m[Kendif[m[K /* #ifdef PIC32_USE_ETHERNET */
[01;32m[K   387[m[K			#[01;31m[Kendif[m[K /* #ifndef PIC32_USE_ETHERNET */
[01;32m[K   407[m[K	    #[01;31m[Kendif[m[K /* #ifdef PIC32_USE_ETHERNET */
[01;32m[K   427[m[K		#[01;31m[Kendif[m[K /* #ifdef PIC32_USE_ETHERNET */
[01;32m[K   436[m[K		#[01;31m[Kendif[m[K /* #ifdef PIC32_USE_ETHERNET */
[01;32m[K   469[m[K	            #[01;31m[Kendif[m[K /* #ifdef PIC32_USE_ETHERNET */
[01;32m[K   490[m[K	                #[01;31m[Kendif[m[K /* #ifdef PIC32_USE_ETHERNET */
[01;32m[K   501[m[K	                #[01;31m[Kendif[m[K /* ipconfigUSE_LINKED_RX_MESSAGES */
[01;32m[K   591[m[K	    #[01;31m[Kendif[m[K /* #ifdef PIC32_USE_ETHERNET */
[01;32m[K   613[m[K	        #[01;31m[Kendif[m[K /* #ifdef PIC32_USE_ETHERNET */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K   280[m[K	#[01;31m[Kendif[m[K /* #ifndef ETHERNET_PHY_H_INCLUDED */

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   287[m[K			#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_TX_DRIVER */
[01;32m[K   296[m[K			#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_TX_DRIVER */
[01;32m[K   428[m[K	//#[01;31m[Kendif[m[K
[01;32m[K   550[m[K			#[01;31m[Kendif[m[K /* ipconfigCHECK_IP_QUEUE_SPACE */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1346[m[K	#[01;31m[Kendif[m[K /* GMAC_H_INCLUDED */

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   168[m[K	#[01;31m[Kendif[m[K /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */
[01;32m[K   746[m[K	#[01;31m[Kendif[m[K /* _SAM4E_GMAC_COMPONENT_ */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1349[m[K	#[01;31m[Kendif[m[K /* GMAC_H_INCLUDED */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   104[m[K	#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_TX_DRIVER */
[01;32m[K   217[m[K			#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_TX_DRIVER */
[01;32m[K   663[m[K			#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_TX_DRIVER */
[01;32m[K   777[m[K	#[01;31m[Kendif[m[K /* GMAC_USES_WAKEUP_CALLBACK */
[01;32m[K   853[m[K		#[01;31m[Kendif[m[K /* GMAC_STATS != 0 */
[01;32m[K   908[m[K						#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_TX_DRIVER */
[01;32m[K   922[m[K	#[01;31m[Kendif[m[K /* GMAC_USES_TX_CALLBACK */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   507[m[K			#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_TX_DRIVER */
[01;32m[K   524[m[K			#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_TX_DRIVER */
[01;32m[K   758[m[K			#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_RX_DRIVER */
[01;32m[K   805[m[K		#[01;31m[Kendif[m[K /* ipconfigCHECK_IP_QUEUE_SPACE */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K  1335[m[K	#[01;31m[Kendif[m[K /* !(SAM4E) */
[01;32m[K  1418[m[K	#[01;31m[Kendif[m[K /* GMAC_H_INCLUDED */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   143[m[K	#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_TX_DRIVER */
[01;32m[K   150[m[K	#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_RX_DRIVER */
[01;32m[K   251[m[K			#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_TX_DRIVER */
[01;32m[K   303[m[K			#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_RX_DRIVER */
[01;32m[K   492[m[K		#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_RX_DRIVER == 0 */
[01;32m[K   543[m[K			#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_RX_DRIVER */
[01;32m[K   629[m[K		#[01;31m[Kendif[m[K	/* ipconfigZERO_COPY_RX_DRIVER */
[01;32m[K   699[m[K			#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_TX_DRIVER */
[01;32m[K   780[m[K	#[01;31m[Kendif[m[K /* GMAC_USES_WAKEUP_CALLBACK */
[01;32m[K   847[m[K		#[01;31m[Kendif[m[K /* GMAC_STATS != 0 */
[01;32m[K   892[m[K					#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_TX_DRIVER */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   219[m[K	#[01;31m[Kendif[m[K	/* ipconfigUSE_LLMNR == 1 */
[01;32m[K   256[m[K		#[01;31m[Kendif[m[K /* ipconfigUSE_LLMNR == 1 */
[01;32m[K   390[m[K			#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_TX_DRIVER */
[01;32m[K   590[m[K			#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_RX_DRIVER */
[01;32m[K   667[m[K	#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_RX_DRIVER */
[01;32m[K   710[m[K				#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_RX_DRIVER */
[01;32m[K   739[m[K						#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_RX_DRIVER */
[01;32m[K   749[m[K							#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_RX_DRIVER */
[01;32m[K  1009[m[K			#[01;31m[Kendif[m[K /* ipconfigCHECK_IP_QUEUE_SPACE */

[1;34m./portable/NetworkInterface/M487/m480_eth.h[39m

[01;32m[K   164[m[K	#[01;31m[Kendif[m[K  /* _M480_ETH_ */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   124[m[K	#[01;31m[Kendif[m[K /* ipconfigETHERNET_AN_ENABLE == 0 */
[01;32m[K   140[m[K		#[01;31m[Kendif[m[K /* STM32F7xx */
[01;32m[K   141[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_RMII */
[01;32m[K   375[m[K			#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_TX_DRIVER */
[01;32m[K   433[m[K				#[01;31m[Kendif[m[K /* ipconfigUSE_RMII */
[01;32m[K   662[m[K			#[01;31m[Kendif[m[K /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM */
[01;32m[K   702[m[K					#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_TX_DRIVER */
[01;32m[K   836[m[K		#[01;31m[Kendif[m[K	/* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
[01;32m[K   866[m[K			#[01;31m[Kendif[m[K	/* ipconfigUSE_LINKED_RX_MESSAGES */
[01;32m[K   993[m[K			#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_RX_DRIVER */
[01;32m[K  1021[m[K		#[01;31m[Kendif[m[K	/* ipconfigUSE_LINKED_RX_MESSAGES */
[01;32m[K  1247[m[K			#[01;31m[Kendif[m[K /* ipconfigCHECK_IP_QUEUE_SPACE */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1457[m[K	#[01;31m[Kendif[m[K /* stm_is_F2 != 0 || stm_is_F4 != 0 || stm_is_F7 */
[01;32m[K  1459[m[K	#[01;31m[Kendif[m[K /* HAL_ETH_MODULE_ENABLED */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K  2259[m[K	#[01;31m[Kendif[m[K /* __STM32Fxx_HAL_ETH_H */

[1;34m./portable/NetworkInterface/esp32/NetworkInterface.c[39m

[01;32m[K   191[m[K	        #[01;31m[Kendif[m[K /* ipconfigCHECK_IP_QUEUE_SPACE */
[01;32m[K   193[m[K	#[01;31m[Kendif[m[K /* ( ipconfigHAS_PRINTF != 0 ) */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K    68[m[K	#[01;31m[Kendif[m[K /* if defined( BSP_MCU_RX65N ) || defined( BSP_MCU_RX64M ) || defined( BSP_MCU_RX71M ) */
[01;32m[K   252[m[K	        #[01;31m[Kendif[m[K /* ipconfigCHECK_IP_QUEUE_SPACE */
[01;32m[K   254[m[K	#[01;31m[Kendif[m[K /* ( ipconfigHAS_PRINTF != 0 ) */
[01;32m[K   293[m[K	        #[01;31m[Kendif[m[K /* ipconfigHAS_PRINTF != 0 ) */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K   117[m[K			#[01;31m[Kendif[m[K /* ipconfigSUPPORT_OUTGOING_PINGS */
[01;32m[K   166[m[K			#[01;31m[Kendif[m[K /* ipconfigSUPPORT_OUTGOING_PINGS */
[01;32m[K   298[m[K			#[01;31m[Kendif[m[K /* ipconfigUSE_CALLBACKS */
[01;32m[K   394[m[K			#[01;31m[Kendif[m[K /* ipconfigUSE_LLMNR */
[01;32m[K   405[m[K			#[01;31m[Kendif[m[K /* ipconfigUSE_NBNS */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   120[m[K		#[01;31m[Kendif[m[K /* ipconfigBYTE_ORDER */
[01;32m[K   121[m[K	#[01;31m[Kendif[m[K /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
[01;32m[K   185[m[K	#[01;31m[Kendif[m[K /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
[01;32m[K   192[m[K	#[01;31m[Kendif[m[K /* ipconfigREPLY_TO_INCOMING_PINGS */
[01;32m[K   200[m[K	#[01;31m[Kendif[m[K /* ipconfigSUPPORT_OUTGOING_PINGS */
[01;32m[K   242[m[K	#[01;31m[Kendif[m[K	/* ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 1 ) */
[01;32m[K   383[m[K			#[01;31m[Kendif[m[K /* ipconfigCHECK_IP_QUEUE_SPACE */
[01;32m[K   454[m[K					#[01;31m[Kendif[m[K /* ipconfigUSE_DHCP */
[01;32m[K   473[m[K						#[01;31m[Kendif[m[K	/* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
[01;32m[K   475[m[K					#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
[01;32m[K   485[m[K					#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SIGNALS */
[01;32m[K   495[m[K					#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K   512[m[K					#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K   522[m[K					#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K   596[m[K		#[01;31m[Kendif[m[K /* ipconfigUSE_LINKED_RX_MESSAGES */
[01;32m[K   626[m[K		#[01;31m[Kendif[m[K /* ipconfigUSE_DHCP */
[01;32m[K   669[m[K		#[01;31m[Kendif[m[K /* ipconfigUSE_DHCP */
[01;32m[K   679[m[K		#[01;31m[Kendif[m[K /* ipconfigDNS_USE_CALLBACKS */
[01;32m[K   717[m[K		#[01;31m[Kendif[m[K /* ipconfigUSE_TCP == 1 */
[01;32m[K   918[m[K	#[01;31m[Kendif[m[K /* ipconfigZERO_COPY_TX_DRIVER != 0 */
[01;32m[K  1003[m[K			#[01;31m[Kendif[m[K /* configQUEUE_REGISTRY_SIZE */
[01;32m[K  1033[m[K				#[01;31m[Kendif[m[K /* ipconfigUSE_DHCP == 1 */
[01;32m[K  1207[m[K	#[01;31m[Kendif[m[K /* ipconfigSUPPORT_OUTGOING_PINGS == 1 */
[01;32m[K  1254[m[K			#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K  1312[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_LLMNR */
[01;32m[K  1335[m[K		#[01;31m[Kendif[m[K /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */
[01;32m[K  1404[m[K		#[01;31m[Kendif[m[K /* ipconfigUSE_NETWORK_EVENT_HOOK */
[01;32m[K  1413[m[K		#[01;31m[Kendif[m[K /* ipconfigDNS_USE_CALLBACKS != 0 */
[01;32m[K  1591[m[K		#[01;31m[Kendif[m[K /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
[01;32m[K  1661[m[K							#[01;31m[Kendif[m[K	/* ( ipconfigHAS_PRINTF != 0 ) */
[01;32m[K  1669[m[K			#[01;31m[Kendif[m[K	/* ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 ) */
[01;32m[K  1674[m[K		#[01;31m[Kendif[m[K /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */
[01;32m[K  1776[m[K							#[01;31m[Kendif[m[K /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
[01;32m[K  1947[m[K	#[01;31m[Kendif[m[K /* ipconfigREPLY_TO_INCOMING_PINGS == 1 */
[01;32m[K  1964[m[K					#[01;31m[Kendif[m[K /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
[01;32m[K  1972[m[K					#[01;31m[Kendif[m[K /* ipconfigSUPPORT_OUTGOING_PINGS */
[01;32m[K  1983[m[K	#[01;31m[Kendif[m[K /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
[01;32m[K  2103[m[K	#[01;31m[Kendif[m[K /* ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 1 ) */
[01;32m[K  2185[m[K				#[01;31m[Kendif[m[K	/* ipconfigHAS_DEBUG_PRINTF != 0 */
[01;32m[K  2201[m[K				#[01;31m[Kendif[m[K	/* ipconfigHAS_DEBUG_PRINTF != 0 */
[01;32m[K  2225[m[K				#[01;31m[Kendif[m[K	/* ipconfigHAS_DEBUG_PRINTF != 0 */
[01;32m[K  2261[m[K					#[01;31m[Kendif[m[K	/* ( ipconfigHAS_PRINTF != 0 ) */
[01;32m[K  2289[m[K				#[01;31m[Kendif[m[K	/* ipconfigHAS_DEBUG_PRINTF != 0 */
[01;32m[K  2341[m[K					#[01;31m[Kendif[m[K	/* ipconfigHAS_DEBUG_PRINTF != 0 */
[01;32m[K  2366[m[K			#[01;31m[Kendif[m[K	/* ipconfigHAS_DEBUG_PRINTF != 0 */
[01;32m[K  2600[m[K		#[01;31m[Kendif[m[K	/* ipMONITOR_MAX_HEAP */
[01;32m[K  2669[m[K			#[01;31m[Kendif[m[K /* ipconfigCHECK_IP_QUEUE_SPACE */
[01;32m[K  2671[m[K	#[01;31m[Kendif[m[K /* ( ipconfigHAS_PRINTF != 0 ) */
[01;32m[K  2743[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_DHCP */
[01;32m[K  2751[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_DHCP */
[01;32m[K  2766[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_DHCP */
[01;32m[K  2774[m[K	#[01;31m[Kendif[m[K /* ipconfigDNS_USE_CALLBACKS != 0 */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   295[m[K	#[01;31m[Kendif[m[K /* ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN */
[01;32m[K   536[m[K					#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SELECT_FUNCTION */
[01;32m[K   561[m[K			#[01;31m[Kendif[m[K /* ipconfigTCP_KEEP_ALIVE */
[01;32m[K   564[m[K			#[01;31m[Kendif[m[K /* ipconfigTCP_HANG_PROTECTION */
[01;32m[K   573[m[K			#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_WIN */
[01;32m[K   588[m[K			#[01;31m[Kendif[m[K /* ipconfigUSE_CALLBACKS */
[01;32m[K   596[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K   603[m[K		#[01;31m[Kendif[m[K /* ipconfigUDP_MAX_RX_PACKETS */
[01;32m[K   610[m[K		#[01;31m[Kendif[m[K /* ipconfigUSE_CALLBACKS */
[01;32m[K   639[m[K		#[01;31m[Kendif[m[K /* ipconfigSOCKET_HAS_USER_SEMAPHORE */
[01;32m[K   642[m[K		#[01;31m[Kendif[m[K /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */
[01;32m[K   651[m[K		#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SELECT_FUNCTION */
[01;32m[K   664[m[K			#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K   675[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K   792[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K   813[m[K	#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SELECT_FUNCTION */
[01;32m[K   829[m[K	#[01;31m[Kendif[m[K /* FREERTOS_IP_PRIVATE_H */

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    70[m[K	#[01;31m[Kendif[m[K /* ipconfigARP_USE_CLASH_DETECTION */
[01;32m[K    80[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_ARP_REMOVE_ENTRY != 0 */
[01;32m[K   138[m[K	#[01;31m[Kendif[m[K /* FREERTOS_ARP_H */

[1;34m./include/FreeRTOS_errno_TCP.h[39m

[01;32m[K    88[m[K		#[01;31m[Kendif[m[K /* pdFREERTOS_ERRNO_EAFNOSUPPORT */
[01;32m[K    89[m[K	#[01;31m[Kendif[m[K /* pdFREERTOS_ERRNO_NONE */
[01;32m[K    94[m[K	#[01;31m[Kendif[m[K /* FREERTOS_ERRNO_TCP */

[1;34m./include/NetworkInterface.h[39m

[01;32m[K    49[m[K	#[01;31m[Kendif[m[K /* NETWORK_INTERFACE_H */

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   199[m[K	#[01;31m[Kendif[m[K /* ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN */
[01;32m[K   237[m[K	#[01;31m[Kendif[m[K /* ipconfigHAS_INLINE_FUNCTIONS */
[01;32m[K   338[m[K	#[01;31m[Kendif[m[K /* ipconfigDHCP_REGISTER_HOSTNAME */
[01;32m[K   383[m[K	#[01;31m[Kendif[m[K /* ipconfigENABLE_BACKWARD_COMPATIBILITY */
[01;32m[K   389[m[K	#[01;31m[Kendif[m[K /* FREERTOS_IP_H */

[1;34m./include/NetworkBufferManagement.h[39m

[01;32m[K    70[m[K	#[01;31m[Kendif[m[K /* NETWORK_BUFFER_MANAGEMENT_H */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   116[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_CALLBACKS */
[01;32m[K   201[m[K	#[01;31m[Kendif[m[K /* ipconfigBYTE_ORDER */
[01;32m[K   213[m[K	#[01;31m[Kendif[m[K	/* ( ipconfigSUPPORT_SELECT_FUNCTION == 1 ) */
[01;32m[K   249[m[K	#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SIGNALS */
[01;32m[K   298[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP */
[01;32m[K   361[m[K	#[01;31m[Kendif[m[K	/* ( ipconfigUSE_CALLBACKS != 0 ) */
[01;32m[K   412[m[K	#[01;31m[Kendif[m[K /* ipconfigSUPPORT_SELECT_FUNCTION */
[01;32m[K   418[m[K	#[01;31m[Kendif[m[K /* FREERTOS_SOCKETS_H */

[1;34m./include/IPTraceMacroDefaults.h[39m

[01;32m[K   213[m[K	#[01;31m[Kendif[m[K	/* ( ipconfigUSE_TCP_MEM_STATS != 0 ) */
[01;32m[K   231[m[K	#[01;31m[Kendif[m[K	/* ( ipconfigUSE_DUMP_PACKETS != 0 ) */
[01;32m[K   233[m[K	#[01;31m[Kendif[m[K /* UDP_TRACE_MACRO_DEFAULTS_H */

[1;34m./include/FreeRTOS_TCP_IP.h[39m

[01;32m[K    67[m[K	#[01;31m[Kendif[m[K /* FREERTOS_TCP_IP_H */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   205[m[K	#[01;31m[Kendif[m[K /* FREERTOS_TCP_WIN_H */

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K    49[m[K	#[01;31m[Kendif[m[K /* ipconfigBYTE_ORDER == pdFREERTOS_BIG_ENDIAN */
[01;32m[K    64[m[K	#[01;31m[Kendif[m[K	/* ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_NBNS == 1 ) */
[01;32m[K    74[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_LLMNR */
[01;32m[K    86[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_NBNS */
[01;32m[K    97[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_DNS_CACHE != 0 */
[01;32m[K   129[m[K	#[01;31m[Kendif[m[K	/* ( ipconfigDNS_USE_CALLBACKS == 1 ) */
[01;32m[K   143[m[K	#[01;31m[Kendif[m[K /* FREERTOS_DNS_H */

[1;34m./include/tcp_mem_stats.h[39m

[01;32m[K    70[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_TCP_MEM_STATS != 0 */
[01;32m[K    76[m[K	#[01;31m[Kendif[m[K	/* TCP_MEM_STATS_H */

[1;34m./include/FreeRTOS_UDP_IP.h[39m

[01;32m[K    43[m[K	#[01;31m[Kendif[m[K /* FREERTOS_UDP_IP_H */

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   198[m[K			#[01;31m[Kendif[m[K /* ifdef FreeRTOS_debug_printf */
[01;32m[K   199[m[K		#[01;31m[Kendif[m[K /* ( ipconfigHAS_DEBUG_PRINTF == 0 ) */
[01;32m[K   200[m[K	#[01;31m[Kendif[m[K /* ifdef ipconfigHAS_DEBUG_PRINTF */
[01;32m[K   219[m[K			#[01;31m[Kendif[m[K /* ifdef FreeRTOS_debug_printf */
[01;32m[K   220[m[K		#[01;31m[Kendif[m[K /* ( ipconfigHAS_PRINTF == 0 ) */
[01;32m[K   221[m[K	#[01;31m[Kendif[m[K /* ifdef ipconfigHAS_PRINTF */
[01;32m[K   414[m[K		#[01;31m[Kendif[m[K /* _WINDOWS_ */
[01;32m[K   415[m[K	#[01;31m[Kendif[m[K /* ipconfigMAXIMUM_DISCOVER_TX_PERIOD */
[01;32m[K   448[m[K	#[01;31m[Kendif[m[K /* ipconfigUSE_DNS_CACHE != 0 */
[01;32m[K   612[m[K	#[01;31m[Kendif[m[K /* FREERTOS_DEFAULT_IP_CONFIG_H */

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K   232[m[K	#[01;31m[Kendif[m[K	/* !defined( FREERTOS_STREAM_BUFFER_H ) */

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    52[m[K	#[01;31m[Kendif[m[K	/* #if( ipconfigUSE_DHCP_HOOK != 0 ) */
[01;32m[K   100[m[K	#[01;31m[Kendif[m[K	/* ( ipconfigUSE_DHCP_HOOK != 0 ) */
[01;32m[K   106[m[K	#[01;31m[Kendif[m[K /* FREERTOS_DHCP_H */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K    70[m[K	  @[01;31m[Kendverbatim[m[K
[01;32m[K   182[m[K	  @[01;31m[Kendverbatim[m[K
[01;32m[K   363[m[K	  @[01;31m[Kendverbatim[m[K
[01;32m[K   631[m[K	@[01;31m[Kendverbatim[m[K
[01;32m[K  1031[m[K	  @[01;31m[Kendverbatim[m[K

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   150[m[K		[01;31m[KeNetworkDown[m[K	/* The network connection has been lost. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1229[m[K			/* Only allow [01;31m[KeNetworkDownEvent[m[K events if the IP task is not ready

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   232[m[K		[01;31m[KeNetworkDownEvent[m[K,		/* 0: The network interface has been lost and/or needs [re]connecting. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   233[m[K		[01;31m[KeNetworkRxEvent[m[K,		/* 1: The network interface has queued a received Ethernet frame. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   234[m[K		[01;31m[KeNetworkTxEvent[m[K,		/* 2: Let the IP-task send a network packet. */

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   149[m[K		[01;31m[KeNetworkUp[m[K,		/* The network is configured. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1270[m[K	    /* Set the Enhanced DMA descriptors bit according to ETH [01;31m[KEnhancedDescriptorFormat[m[K value*/

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   615[m[K	  uint32_t             [01;31m[KEnhancedDescriptorFormat[m[K;    /*!< Enables the enhanced descriptor format.

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    64[m[K		[01;31m[KeNotUsingLeasedAddress[m[K			/* DHCP failed, and a default IP address is being used. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   495[m[K				/* Here a complete frame has been seen with SOF and [01;31m[KEOF[m[K */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   499[m[K					/* Here a complete frame has been seen with SOF and [01;31m[KEOF[m[K */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1435[m[K			/* The condition "eReturned == [01;31m[KeProcessBuffer[m[K" must be true. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   224[m[K		[01;31m[KeProcessBuffer[m[K,			/* An Ethernet frame has a valid address - continue process its contents. */
[01;32m[K   438[m[K	 * process.  [01;31m[KeProcessBuffer[m[K is returned if the frame should be processed by the

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   223[m[K		[01;31m[KeReleaseBuffer[m[K = 0,		/* Processing the frame did not find anything to do - just release the buffer. */
[01;32m[K   439[m[K	 * stack.  [01;31m[KeReleaseBuffer[m[K is returned if the frame should be discarded.

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   463[m[K			if( [01;31m[KeReturn[m[K == eARPCacheMiss )	/*lint !e774: (Info -- Boolean within 'if' always evaluates to True, depending on configuration. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1435[m[K			/* The condition "[01;31m[KeReturned[m[K == eProcessBuffer" must be true. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   225[m[K		[01;31m[KeReturnEthernetFrame[m[K,	/* The Ethernet frame contains an ARP or ICMP packet that can be returned to its source. */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   568[m[K		stack.  [01;31m[Kerrbuf[m[K is used for convenience to create the string.  Don't

[1;34m./test/unit-test/ConfigFiles/FreeRTOS_errno_TCP.h[39m

[01;32m[K    33[m[K	/* The following [01;31m[Kerrno[m[K values are used by FreeRTOS+ components, not FreeRTOS

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   924[m[K					/* If [01;31m[Kerrno[m[K was available, [01;31m[Kerrno[m[K would be set to
[01;32m[K  1942[m[K				/* [01;31m[Kerrno[m[K should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */

[1;34m./include/FreeRTOS_errno_TCP.h[39m

[01;32m[K    33[m[K	/* The following [01;31m[Kerrno[m[K values are used by FreeRTOS+ components, not FreeRTOS

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K    60[m[K	/* API function error values.  As [01;31m[Kerrno[m[K is supported, the FreeRTOS sockets
[01;32m[K    63[m[K	the corresponding found in [01;31m[Kerrno[m[K.h

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   425[m[K					/* Before '[01;31m[KeSocketBindEvent[m[K' was sent it was tested that

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   241[m[K		[01;31m[KeSocketBindEvent[m[K,		/* 9: Send a message to the IP-task to bind a socket to a port. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1155[m[K	 * The IP-task will actually close the socket, after receiving a '[01;31m[KeSocketCloseEvent[m[K' message

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   242[m[K		[01;31m[KeSocketCloseEvent[m[K,		/*10: Send a message to the IP-task to close a socket. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   243[m[K		[01;31m[KeSocketSelectEvent[m[K,		/*11: Send a message to the IP-task for select(). */
[01;32m[K   806[m[K	/* Define the data that must be passed for a '[01;31m[KeSocketSelectEvent[m[K'. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   244[m[K		[01;31m[KeSocketSignalEvent[m[K,		/*12: A socket must be signalled. */

[1;34m./portable/NetworkInterface/esp32/NetworkInterface.c[39m

[01;32m[K     1[m[K	// Copyright 2018 [01;31m[KEspressif[m[K Systems (Shanghai) PTE LTD

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   236[m[K		[01;31m[KeStackTxEvent[m[K,			/* 4: The software stack has queued a packet to transmit. */

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   157[m[K		[01;31m[KeSuccess[m[K = 0,		/* A correct reply has been received for an outgoing ping. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   239[m[K		[01;31m[KeTCPAcceptEvent[m[K,		/* 7: Client API FreeRTOS_accept() waiting for client connections. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   240[m[K		[01;31m[KeTCPNetStat[m[K,			/* 8: IP-task is asked to produce a netstat listing. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1516[m[K	BaseType_t bAfter  = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) [01;31m[KeTCPState[m[K ) );					/* Is it connected now ? */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   238[m[K		[01;31m[KeTCPTimerEvent[m[K,			/* 6: See if any TCP socket needs attention. */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1687[m[K			/* This function will fill in the [01;31m[Keth[m[K addresses and send the packet */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  3214[m[K						/* Update the copy of the TCP header only (skipping [01;31m[Keth[m[K and IP

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   317[m[K	/* Bit map of outstanding [01;31m[KETH[m[K interrupt events for processing.  Currently only

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   126[m[K	/* Bit map of outstanding [01;31m[KETH[m[K interrupt events for processing.  Currently only

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K    97[m[K	#define GMAC_TX_UNITSIZE            1518    /**< Size for [01;31m[KETH[m[K frame length */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K    98[m[K	#define GMAC_TX_UNITSIZE            1518    /**< Size for [01;31m[KETH[m[K frame length */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   178[m[K	/* Bit map of outstanding [01;31m[KETH[m[K interrupt events for processing.  Currently only

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   102[m[K	//#define GMAC_TX_UNITSIZE            1518    /**< Size for [01;31m[KETH[m[K frame length */
[01;32m[K   102[m[K	//#define GMAC_TX_UNITSIZE            1518    /**< Size for [01;31m[KETH[m[K frame length */
[01;32m[K   103[m[K	#define GMAC_TX_UNITSIZE            1536    /**< Size for [01;31m[KETH[m[K frame length */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   190[m[K	/* Bit map of outstanding [01;31m[KETH[m[K interrupt events for processing.  Currently only

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K    88[m[K	    /* Init [01;31m[KETH[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   204[m[K	/* Bit map of outstanding [01;31m[KETH[m[K interrupt events for processing.  Currently only
[01;32m[K   400[m[K				/* Initialise [01;31m[KETH[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K     7[m[K	  * @brief   [01;31m[KETH[m[K HAL module driver.
[01;32m[K     9[m[K	  *          functionalities of the Ethernet ([01;31m[KETH[m[K) peripheral:
[01;32m[K    27[m[K	      (#)Initialize the [01;31m[KETH[m[K low level resources through the HAL_ETH_MspInit() API:
[01;32m[K    44[m[K	      (#)Prepare [01;31m[KETH[m[K DMA TX Descriptors and give the hand to [01;31m[KETH[m[K DMA to transfer
[01;32m[K    48[m[K	      (#)Poll for a received frame in [01;31m[KETH[m[K RX DMA Descriptors and get received
[01;32m[K    52[m[K	      (#) Get a received frame when an [01;31m[KETH[m[K RX interrupt occurs:
[01;32m[K    61[m[K	      (#) Configure the Ethernet MAC after [01;31m[KETH[m[K peripheral initialization
[01;32m[K    64[m[K	      (#) Configure the Ethernet DMA after [01;31m[KETH[m[K peripheral initialization
[01;32m[K   122[m[K	/** @defgroup [01;31m[KETH[m[K [01;31m[KETH[m[K
[01;32m[K   123[m[K	  * @brief [01;31m[KETH[m[K HAL module driver
[01;32m[K   137[m[K	/** @defgroup ETH_Private_Constants [01;31m[KETH[m[K Private Constants
[01;32m[K   147[m[K	/** @defgroup ETH_Private_Functions [01;31m[KETH[m[K Private Functions
[01;32m[K   167[m[K	/** @defgroup ETH_Exported_Functions [01;31m[KETH[m[K Exported Functions
[01;32m[K   200[m[K		/* Check the [01;31m[KETH[m[K peripheral state */
[01;32m[K   282[m[K		/* Set [01;31m[KETH[m[K HAL State to Ready */
[01;32m[K   290[m[K	  * @brief  De-Initializes the [01;31m[KETH[m[K peripheral.
[01;32m[K   297[m[K		/* Set the [01;31m[KETH[m[K peripheral state to BUSY */
[01;32m[K   303[m[K		/* Set [01;31m[KETH[m[K HAL state to Disabled */
[01;32m[K   314[m[K	  * @brief  Initializes the [01;31m[KETH[m[K MSP.
[01;32m[K   328[m[K	  * @brief  DeInitializes [01;31m[KETH[m[K MSP.
[01;32m[K   396[m[K		/* [01;31m[KETH[m[K DMA Error */
[01;32m[K   467[m[K		/* Check the [01;31m[KETH[m[K peripheral state */
[01;32m[K   476[m[K			/* Set [01;31m[KETH[m[K HAL State to BUSY_RD */
[01;32m[K   518[m[K			/* Set [01;31m[KETH[m[K HAL State to READY */
[01;32m[K   549[m[K		/* Check the [01;31m[KETH[m[K peripheral state */
[01;32m[K   558[m[K			/* Set [01;31m[KETH[m[K HAL State to BUSY_WR */
[01;32m[K   600[m[K			/* Set [01;31m[KETH[m[K HAL State to READY */
[01;32m[K   646[m[K		/* Set the [01;31m[KETH[m[K peripheral state to BUSY */
[01;32m[K   664[m[K		/* Set the [01;31m[KETH[m[K state to READY*/
[01;32m[K   685[m[K	  /* Set the [01;31m[KETH[m[K peripheral state to BUSY */
[01;32m[K   703[m[K	  /* Set the [01;31m[KETH[m[K state*/
[01;32m[K   781[m[K	  * @brief  Set [01;31m[KETH[m[K MAC Configuration.
[01;32m[K   794[m[K		/* Set the [01;31m[KETH[m[K peripheral state to BUSY */
[01;32m[K   922[m[K		/* Set the [01;31m[KETH[m[K state to Ready */
[01;32m[K   933[m[K	  * @brief  Sets [01;31m[KETH[m[K DMA Configuration.
[01;32m[K   946[m[K		/* Set the [01;31m[KETH[m[K peripheral state to BUSY */
[01;32m[K  1003[m[K		/* Set the [01;31m[KETH[m[K state to Ready */
[01;32m[K  1027[m[K	       (+) Get the [01;31m[KETH[m[K handle state:
[01;32m[K  1036[m[K	  * @brief  Return the [01;31m[KETH[m[K HAL state
[01;32m[K  1043[m[K	  /* Return [01;31m[KETH[m[K state */
[01;32m[K  1124[m[K	  /* Set the WD bit according to [01;31m[KETH[m[K Watchdog value */
[01;32m[K  1125[m[K	  /* Set the JD: bit according to [01;31m[KETH[m[K Jabber value */
[01;32m[K  1126[m[K	  /* Set the IFG bit according to [01;31m[KETH[m[K InterFrameGap value */
[01;32m[K  1127[m[K	  /* Set the DCRS bit according to [01;31m[KETH[m[K CarrierSense value */
[01;32m[K  1128[m[K	  /* Set the FES bit according to [01;31m[KETH[m[K Speed value */
[01;32m[K  1129[m[K	  /* Set the DO bit according to [01;31m[KETH[m[K ReceiveOwn value */
[01;32m[K  1130[m[K	  /* Set the LM bit according to [01;31m[KETH[m[K LoopbackMode value */
[01;32m[K  1131[m[K	  /* Set the DM bit according to [01;31m[KETH[m[K Mode value */
[01;32m[K  1132[m[K	  /* Set the IPCO bit according to [01;31m[KETH[m[K ChecksumOffload value */
[01;32m[K  1133[m[K	  /* Set the DR bit according to [01;31m[KETH[m[K RetryTransmission value */
[01;32m[K  1134[m[K	  /* Set the ACS bit according to [01;31m[KETH[m[K AutomaticPadCRCStrip value */
[01;32m[K  1135[m[K	  /* Set the BL bit according to [01;31m[KETH[m[K BackOffLimit value */
[01;32m[K  1136[m[K	  /* Set the DC bit according to [01;31m[KETH[m[K DeferralCheck value */
[01;32m[K  1155[m[K	  /* Set the RA bit according to [01;31m[KETH[m[K ReceiveAll value */
[01;32m[K  1156[m[K	  /* Set the SAF and SAIF bits according to [01;31m[KETH[m[K SourceAddrFilter value */
[01;32m[K  1157[m[K	  /* Set the PCF bit according to [01;31m[KETH[m[K PassControlFrames value */
[01;32m[K  1158[m[K	  /* Set the DBF bit according to [01;31m[KETH[m[K BroadcastFramesReception value */
[01;32m[K  1159[m[K	  /* Set the DAIF bit according to [01;31m[KETH[m[K DestinationAddrFilter value */
[01;32m[K  1160[m[K	  /* Set the PR bit according to [01;31m[KETH[m[K PromiscuousMode value */
[01;32m[K  1161[m[K	  /* Set the PM, HMC and HPF bits according to [01;31m[KETH[m[K MulticastFramesFilter value */
[01;32m[K  1162[m[K	  /* Set the HUC and HPF bits according to [01;31m[KETH[m[K UnicastFramesFilter value */
[01;32m[K  1192[m[K	   /* Set the PT bit according to [01;31m[KETH[m[K PauseTime value */
[01;32m[K  1193[m[K	   /* Set the DZPQ bit according to [01;31m[KETH[m[K ZeroQuantaPause value */
[01;32m[K  1194[m[K	   /* Set the PLT bit according to [01;31m[KETH[m[K PauseLowThreshold value */
[01;32m[K  1195[m[K	   /* Set the UP bit according to [01;31m[KETH[m[K UnicastPauseFrameDetect value */
[01;32m[K  1196[m[K	   /* Set the RFE bit according to [01;31m[KETH[m[K ReceiveFlowControl value */
[01;32m[K  1197[m[K	   /* Set the TFE bit according to [01;31m[KETH[m[K TransmitFlowControl value */
[01;32m[K  1209[m[K	   /* Set the ETV bit according to [01;31m[KETH[m[K VLANTagComparison value */
[01;32m[K  1210[m[K	   /* Set the VL bit according to [01;31m[KETH[m[K VLANTagIdentifier value */
[01;32m[K  1243[m[K	    /* Set the DT bit according to [01;31m[KETH[m[K DropTCPIPChecksumErrorFrame value */
[01;32m[K  1244[m[K	    /* Set the RSF bit according to [01;31m[KETH[m[K ReceiveStoreForward value */
[01;32m[K  1245[m[K	    /* Set the DFF bit according to [01;31m[KETH[m[K FlushReceivedFrame value */
[01;32m[K  1246[m[K	    /* Set the TSF bit according to [01;31m[KETH[m[K TransmitStoreForward value */
[01;32m[K  1247[m[K	    /* Set the TTC bit according to [01;31m[KETH[m[K TransmitThresholdControl value */
[01;32m[K  1248[m[K	    /* Set the FEF bit according to [01;31m[KETH[m[K ForwardErrorFrames value */
[01;32m[K  1249[m[K	    /* Set the FUF bit according to [01;31m[KETH[m[K ForwardUndersizedGoodFrames value */
[01;32m[K  1250[m[K	    /* Set the RTC bit according to [01;31m[KETH[m[K ReceiveThresholdControl value */
[01;32m[K  1251[m[K	    /* Set the OSF bit according to [01;31m[KETH[m[K SecondFrameOperate value */
[01;32m[K  1266[m[K	    /* Set the AAL bit according to [01;31m[KETH[m[K AddressAlignedBeats value */
[01;32m[K  1267[m[K	    /* Set the FB bit according to [01;31m[KETH[m[K FixedBurst value */
[01;32m[K  1268[m[K	    /* Set the RPBL and 4*PBL bits according to [01;31m[KETH[m[K RxDMABurstLength value */
[01;32m[K  1269[m[K	    /* Set the PBL and 4*PBL bits according to [01;31m[KETH[m[K TxDMABurstLength value */
[01;32m[K  1270[m[K	    /* Set the Enhanced DMA descriptors bit according to [01;31m[KETH[m[K EnhancedDescriptorFormat value*/
[01;32m[K  1271[m[K	    /* Set the DSL bit according to [01;31m[KETH[m[K DesciptorSkipLength value */
[01;32m[K  1272[m[K	    /* Set the PR and DA bits according to [01;31m[KETH[m[K DMAArbitration value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K     7[m[K	  * @brief   Header file of [01;31m[KETH[m[K HAL module.
[01;32m[K    42[m[K	/* make sure that the original [01;31m[KETH[m[K headers files won't be included after this. */
[01;32m[K    63[m[K	/** @addtogroup [01;31m[KETH[m[K
[01;32m[K   406[m[K	/** @defgroup ETH_Exported_Types [01;31m[KETH[m[K Exported Types
[01;32m[K   428[m[K	  * @brief  [01;31m[KETH[m[K Init Structure definition
[01;32m[K   462[m[K	  * @brief  [01;31m[KETH[m[K MAC Configuration Structure definition
[01;32m[K   569[m[K	  * @brief  [01;31m[KETH[m[K DMA Configuration Structure definition
[01;32m[K   627[m[K	  * @brief  [01;31m[KETH[m[K DMA Descriptors data structure definition
[01;32m[K   671[m[K	  * @brief  [01;31m[KETH[m[K Handle Structure definition
[01;32m[K   688[m[K	  __IO HAL_ETH_StateTypeDef  State;         /*!< [01;31m[KETH[m[K communication state     */
[01;32m[K   690[m[K	  HAL_LockTypeDef            Lock;          /*!< [01;31m[KETH[m[K Lock                    */
[01;32m[K   699[m[K	/** @defgroup ETH_Exported_Constants [01;31m[KETH[m[K Exported Constants
[01;32m[K   703[m[K	/** @defgroup ETH_Buffers_setting [01;31m[KETH[m[K Buffers setting
[01;32m[K   774[m[K	/** @defgroup ETH_DMA_TX_Descriptor [01;31m[KETH[m[K DMA TX Descriptor
[01;32m[K   855[m[K	/** @defgroup ETH_DMA_RX_Descriptor [01;31m[KETH[m[K DMA RX Descriptor
[01;32m[K   953[m[K	 /** @defgroup ETH_AutoNegotiation [01;31m[KETH[m[K AutoNegotiation
[01;32m[K   962[m[K	/** @defgroup ETH_Speed [01;31m[KETH[m[K Speed
[01;32m[K   971[m[K	/** @defgroup ETH_Duplex_Mode [01;31m[KETH[m[K Duplex Mode
[01;32m[K   979[m[K	/** @defgroup ETH_Rx_Mode [01;31m[KETH[m[K Rx Mode
[01;32m[K   988[m[K	/** @defgroup ETH_Checksum_Mode [01;31m[KETH[m[K Checksum Mode
[01;32m[K   997[m[K	/** @defgroup ETH_Media_Interface [01;31m[KETH[m[K Media Interface
[01;32m[K  1006[m[K	/** @defgroup ETH_Watchdog [01;31m[KETH[m[K Watchdog
[01;32m[K  1015[m[K	/** @defgroup ETH_Jabber [01;31m[KETH[m[K Jabber
[01;32m[K  1024[m[K	/** @defgroup ETH_Inter_Frame_Gap [01;31m[KETH[m[K Inter Frame Gap
[01;32m[K  1039[m[K	/** @defgroup ETH_Carrier_Sense [01;31m[KETH[m[K Carrier Sense
[01;32m[K  1048[m[K	/** @defgroup ETH_Receive_Own [01;31m[KETH[m[K Receive Own
[01;32m[K  1057[m[K	/** @defgroup ETH_Loop_Back_Mode [01;31m[KETH[m[K Loop Back Mode
[01;32m[K  1066[m[K	/** @defgroup ETH_Checksum_Offload [01;31m[KETH[m[K Checksum Offload
[01;32m[K  1075[m[K	/** @defgroup ETH_Retry_Transmission [01;31m[KETH[m[K Retry Transmission
[01;32m[K  1084[m[K	/** @defgroup ETH_Automatic_Pad_CRC_Strip [01;31m[KETH[m[K Automatic Pad CRC Strip
[01;32m[K  1093[m[K	/** @defgroup ETH_Back_Off_Limit [01;31m[KETH[m[K Back Off Limit
[01;32m[K  1104[m[K	/** @defgroup ETH_Deferral_Check [01;31m[KETH[m[K Deferral Check
[01;32m[K  1113[m[K	/** @defgroup ETH_Receive_All [01;31m[KETH[m[K Receive All
[01;32m[K  1122[m[K	/** @defgroup ETH_Source_Addr_Filter [01;31m[KETH[m[K Source Addr Filter
[01;32m[K  1132[m[K	/** @defgroup ETH_Pass_Control_Frames [01;31m[KETH[m[K Pass Control Frames
[01;32m[K  1142[m[K	/** @defgroup ETH_Broadcast_Frames_Reception [01;31m[KETH[m[K Broadcast Frames Reception
[01;32m[K  1151[m[K	/** @defgroup ETH_Destination_Addr_Filter [01;31m[KETH[m[K Destination Addr Filter
[01;32m[K  1160[m[K	/** @defgroup ETH_Promiscuous_Mode [01;31m[KETH[m[K Promiscuous Mode
[01;32m[K  1169[m[K	/** @defgroup ETH_Multicast_Frames_Filter [01;31m[KETH[m[K Multicast Frames Filter
[01;32m[K  1180[m[K	/** @defgroup ETH_Unicast_Frames_Filter [01;31m[KETH[m[K Unicast Frames Filter
[01;32m[K  1190[m[K	/** @defgroup ETH_Zero_Quanta_Pause [01;31m[KETH[m[K Zero Quanta Pause
[01;32m[K  1199[m[K	/** @defgroup ETH_Pause_Low_Threshold [01;31m[KETH[m[K Pause Low Threshold
[01;32m[K  1210[m[K	/** @defgroup ETH_Unicast_Pause_Frame_Detect [01;31m[KETH[m[K Unicast Pause Frame Detect
[01;32m[K  1219[m[K	/** @defgroup ETH_Receive_Flow_Control [01;31m[KETH[m[K Receive Flow Control
[01;32m[K  1228[m[K	/** @defgroup ETH_Transmit_Flow_Control [01;31m[KETH[m[K Transmit Flow Control
[01;32m[K  1237[m[K	/** @defgroup ETH_VLAN_Tag_Comparison [01;31m[KETH[m[K VLAN Tag Comparison
[01;32m[K  1246[m[K	/** @defgroup ETH_MAC_addresses [01;31m[KETH[m[K MAC addresses
[01;32m[K  1257[m[K	/** @defgroup ETH_MAC_addresses_filter_SA_DA [01;31m[KETH[m[K MAC addresses filter SA DA
[01;32m[K  1266[m[K	/** @defgroup ETH_MAC_addresses_filter_Mask_bytes [01;31m[KETH[m[K MAC addresses filter Mask bytes
[01;32m[K  1279[m[K	/** @defgroup ETH_MAC_Debug_flags [01;31m[KETH[m[K MAC Debug flags
[01;32m[K  1317[m[K	/** @defgroup ETH_Drop_TCP_IP_Checksum_Error_Frame [01;31m[KETH[m[K Drop TCP IP Checksum Error Frame
[01;32m[K  1326[m[K	/** @defgroup ETH_Receive_Store_Forward [01;31m[KETH[m[K Receive Store Forward
[01;32m[K  1335[m[K	/** @defgroup ETH_Flush_Received_Frame [01;31m[KETH[m[K Flush Received Frame
[01;32m[K  1344[m[K	/** @defgroup ETH_Transmit_Store_Forward [01;31m[KETH[m[K Transmit Store Forward
[01;32m[K  1353[m[K	/** @defgroup ETH_Transmit_Threshold_Control [01;31m[KETH[m[K Transmit Threshold Control
[01;32m[K  1368[m[K	/** @defgroup ETH_Forward_Error_Frames [01;31m[KETH[m[K Forward Error Frames
[01;32m[K  1377[m[K	/** @defgroup ETH_Forward_Undersized_Good_Frames [01;31m[KETH[m[K Forward Undersized Good Frames
[01;32m[K  1386[m[K	/** @defgroup ETH_Receive_Threshold_Control [01;31m[KETH[m[K Receive Threshold Control
[01;32m[K  1397[m[K	/** @defgroup ETH_Second_Frame_Operate [01;31m[KETH[m[K Second Frame Operate
[01;32m[K  1406[m[K	/** @defgroup ETH_Address_Aligned_Beats [01;31m[KETH[m[K Address Aligned Beats
[01;32m[K  1415[m[K	/** @defgroup ETH_Fixed_Burst [01;31m[KETH[m[K Fixed Burst
[01;32m[K  1424[m[K	/** @defgroup ETH_Rx_DMA_Burst_Length [01;31m[KETH[m[K Rx DMA Burst Length
[01;32m[K  1443[m[K	/** @defgroup ETH_Tx_DMA_Burst_Length [01;31m[KETH[m[K Tx DMA Burst Length
[01;32m[K  1462[m[K	/** @defgroup ETH_DMA_Enhanced_descriptor_format [01;31m[KETH[m[K DMA Enhanced descriptor format
[01;32m[K  1471[m[K	/** @defgroup ETH_DMA_Arbitration [01;31m[KETH[m[K DMA Arbitration
[01;32m[K  1483[m[K	/** @defgroup ETH_DMA_Tx_descriptor_segment [01;31m[KETH[m[K DMA Tx descriptor segment
[01;32m[K  1492[m[K	/** @defgroup ETH_DMA_Tx_descriptor_Checksum_Insertion_Control [01;31m[KETH[m[K DMA Tx descriptor Checksum Insertion Control
[01;32m[K  1503[m[K	/** @defgroup ETH_DMA_Rx_descriptor_buffers [01;31m[KETH[m[K DMA Rx descriptor buffers
[01;32m[K  1512[m[K	/** @defgroup ETH_PMT_Flags [01;31m[KETH[m[K PMT Flags
[01;32m[K  1522[m[K	/** @defgroup ETH_MMC_Tx_Interrupts [01;31m[KETH[m[K MMC Tx Interrupts
[01;32m[K  1532[m[K	/** @defgroup ETH_MMC_Rx_Interrupts [01;31m[KETH[m[K MMC Rx Interrupts
[01;32m[K  1542[m[K	/** @defgroup ETH_MAC_Flags [01;31m[KETH[m[K MAC Flags
[01;32m[K  1554[m[K	/** @defgroup ETH_DMA_Flags [01;31m[KETH[m[K DMA Flags
[01;32m[K  1582[m[K	/** @defgroup ETH_MAC_Interrupts [01;31m[KETH[m[K MAC Interrupts
[01;32m[K  1594[m[K	/** @defgroup ETH_DMA_Interrupts [01;31m[KETH[m[K DMA Interrupts
[01;32m[K  1619[m[K	/** @defgroup ETH_DMA_transmit_process_state [01;31m[KETH[m[K DMA transmit process state
[01;32m[K  1634[m[K	/** @defgroup ETH_DMA_receive_process_state [01;31m[KETH[m[K DMA receive process state
[01;32m[K  1648[m[K	/** @defgroup ETH_DMA_overflow [01;31m[KETH[m[K DMA overflow
[01;32m[K  1657[m[K	/** @defgroup ETH_EXTI_LINE_WAKEUP [01;31m[KETH[m[K EXTI LINE WAKEUP
[01;32m[K  1660[m[K	#define ETH_EXTI_LINE_WAKEUP              ((uint32_t)0x00080000U)  /*!< External interrupt line 19 Connected to the [01;31m[KETH[m[K EXTI Line */
[01;32m[K  1671[m[K	/** @defgroup ETH_Exported_Macros [01;31m[KETH[m[K Exported Macros
[01;32m[K  1676[m[K	/** @brief Reset [01;31m[KETH[m[K handle state
[01;32m[K  1677[m[K	  * @param  __HANDLE__: specifies the [01;31m[KETH[m[K handle.
[01;32m[K  1684[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1692[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1700[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1707[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1714[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1721[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1728[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1735[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1742[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1749[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1762[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1769[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1776[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1783[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1790[m[K	  * @param  __HANDLE__   : [01;31m[KETH[m[K Handle
[01;32m[K  1802[m[K	  * @param  __HANDLE__   : [01;31m[KETH[m[K Handle
[01;32m[K  1814[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1821[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1828[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1835[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1842[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1856[m[K	  * @param  __HANDLE__   : [01;31m[KETH[m[K Handle
[01;32m[K  1865[m[K	  * @param  __HANDLE__   : [01;31m[KETH[m[K Handle
[01;32m[K  1874[m[K	  * @param  __HANDLE__   : [01;31m[KETH[m[K Handle
[01;32m[K  1882[m[K	* @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1890[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1898[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1909[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1918[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle.
[01;32m[K  1926[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle.
[01;32m[K  1933[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle.
[01;32m[K  1940[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle.
[01;32m[K  1947[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle.
[01;32m[K  1954[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle.
[01;32m[K  1961[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1968[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle
[01;32m[K  1975[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle.
[01;32m[K  1987[m[K	  * @param   __HANDLE__: [01;31m[KETH[m[K Handle.
[01;32m[K  1994[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle.
[01;32m[K  2002[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle.
[01;32m[K  2009[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle.
[01;32m[K  2016[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle.
[01;32m[K  2023[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle.
[01;32m[K  2030[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle.
[01;32m[K  2037[m[K	  * @param  __HANDLE__: [01;31m[KETH[m[K Handle.
[01;32m[K  2044[m[K	  * @param   __HANDLE__: [01;31m[KETH[m[K Handle.
[01;32m[K  2051[m[K	  * @param   __HANDLE__: [01;31m[KETH[m[K Handle.
[01;32m[K  2062[m[K	  * @param   __HANDLE__: [01;31m[KETH[m[K Handle.
[01;32m[K  2073[m[K	  * @param   __HANDLE__: [01;31m[KETH[m[K Handle.
[01;32m[K  2085[m[K	  * @param   __HANDLE__: [01;31m[KETH[m[K Handle.
[01;32m[K  2096[m[K	  * @brief  Enables the [01;31m[KETH[m[K External interrupt line.
[01;32m[K  2102[m[K	  * @brief  Disables the [01;31m[KETH[m[K External interrupt line.
[01;32m[K  2108[m[K	  * @brief Enable event on [01;31m[KETH[m[K External event line.
[01;32m[K  2114[m[K	  * @brief Disable event on [01;31m[KETH[m[K External event line
[01;32m[K  2120[m[K	  * @brief  Get flag of the [01;31m[KETH[m[K External interrupt line.
[01;32m[K  2126[m[K	  * @brief  Clear flag of the [01;31m[KETH[m[K External interrupt line.
[01;32m[K  2132[m[K	  * @brief  Enables rising edge trigger to the [01;31m[KETH[m[K External interrupt line.
[01;32m[K  2138[m[K	  * @brief  Disables the rising edge trigger to the [01;31m[KETH[m[K External interrupt line.
[01;32m[K  2144[m[K	  * @brief  Enables falling edge trigger to the [01;31m[KETH[m[K External interrupt line.
[01;32m[K  2150[m[K	  * @brief  Disables falling edge trigger to the [01;31m[KETH[m[K External interrupt line.
[01;32m[K  2156[m[K	  * @brief  Enables rising/falling edge trigger to the [01;31m[KETH[m[K External interrupt line.
[01;32m[K  2163[m[K	  * @brief  Disables rising/falling edge trigger to the [01;31m[KETH[m[K External interrupt line.

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   107[m[K		<< [01;31m[KETH[m[K-header >>	// half-word-aligned
[01;32m[K   107[m[K		<< [01;31m[KETH[m[K-header >>	// half-word-aligned

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   570[m[K	* Arguments    : ectrl - EDMAC and [01;31m[KETHERC[m[K control structure

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   620[m[K				the [01;31m[KEthernet[m[K address of the peer or the gateway is found. */
[01;32m[K   745[m[K			/* Map the [01;31m[Kethernet[m[K buffer onto a TCPPacket_t struct for easy access to the fields. */
[01;32m[K   979[m[K	 * the [01;31m[KEthernet[m[K address of the target will be found using ARP.  In case the
[01;32m[K  1063[m[K			/* Now that the [01;31m[KEthernet[m[K address is known, the initial packet can be
[01;32m[K  1067[m[K			/* Write the [01;31m[KEthernet[m[K address in Source, because it will be swapped by
[01;32m[K  1800[m[K		/* Map the [01;31m[Kethernet[m[K buffer onto the ProtocolHeader_t struct for easy access to the fields. */
[01;32m[K  1979[m[K				/* [01;31m[KEthernet[m[K address has been found, use progressive timeout for
[01;32m[K  2076[m[K	/* Map the [01;31m[Kethernet[m[K buffer onto the ProtocolHeader_t struct for easy access to the fields. */
[01;32m[K  2173[m[K	/* Map the [01;31m[Kethernet[m[K buffer onto the ProtocolHeader_t struct for easy access to the fields. */
[01;32m[K  2248[m[K	/* Map the [01;31m[Kethernet[m[K buffer onto the ProtocolHeader_t struct for easy access to the fields. */
[01;32m[K  2326[m[K	/* Map the [01;31m[Kethernet[m[K buffer onto the ProtocolHeader_t struct for easy access to the fields. */
[01;32m[K  2389[m[K	/* Map the [01;31m[Kethernet[m[K buffer onto the ProtocolHeader_t struct for easy access to the fields. */
[01;32m[K  3003[m[K			/* Map the [01;31m[Kethernet[m[K buffer onto the TCPPacket_t struct for easy access to the fields. */
[01;32m[K  3090[m[K			/* Map the [01;31m[Kethernet[m[K buffer onto the IPHeader_t struct for easy access to the fields. */
[01;32m[K  3298[m[K	/* Map the [01;31m[Kethernet[m[K buffer onto a TCPPacket_t struct for easy access to the fields. */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   638[m[K	/* Part of the [01;31m[KEthernet[m[K and ARP headers are always constant when sending an IPv4
[01;32m[K   643[m[K		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 	/* [01;31m[KEthernet[m[K destination address. */
[01;32m[K   644[m[K		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 	/* [01;31m[KEthernet[m[K source address. */
[01;32m[K   645[m[K		0x08, 0x06, 							/* [01;31m[KEthernet[m[K frame type (ipARP_FRAME_TYPE). */

[1;34m./test/unit-test/stubs/FreeRTOS_ARP_stubs.c[39m

[01;32m[K   104[m[K			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 	/* [01;31m[KEthernet[m[K source MAC address. */
[01;32m[K   105[m[K			0x08, 0x00, 							/* [01;31m[KEthernet[m[K frame type. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K   229[m[K	 * contain.  For normal [01;31m[KEthernet[m[K V2 frames the maximum MTU is 1500.  Setting a
[01;32m[K   251[m[K	/* If ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES is set to 1 then [01;31m[KEthernet[m[K frames
[01;32m[K   252[m[K	 * that are not in [01;31m[KEthernet[m[K II format will be dropped.  This option is included for
[01;32m[K   257[m[K	 * responsibility of the [01;31m[KEthernet[m[K interface to filter out packets that are of no
[01;32m[K   258[m[K	 * interest.  If the [01;31m[KEthernet[m[K interface does not implement this functionality, then
[01;32m[K   262[m[K	 * [01;31m[KEthernet[m[K driver does all the necessary filtering in hardware then software

[1;34m./test/cbmc/proofs/UDP/vProcessGeneratedUDPPacket/vProcessGeneratedUDPPacket_harness.c[39m

[01;32m[K    77[m[K		 * that of the [01;31m[KEthernet[m[K Frame Size. */

[1;34m./test/cbmc/proofs/parsing/ProcessIPPacket/ProcessIPPacket_harness.c[39m

[01;32m[K    23[m[K		/* Pointer to the start of the [01;31m[KEthernet[m[K frame. It should be able to access the whole [01;31m[KEthernet[m[K frame.*/

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K   160[m[K	 * priority of the task used to simulate [01;31m[KEthernet[m[K interrupts. */
[01;32m[K   163[m[K	/* This demo creates a virtual network connection by accessing the raw [01;31m[KEthernet[m[K
[01;32m[K   185[m[K	 * connection that uses this MAC address by accessing the raw [01;31m[KEthernet[m[K/WiFi data

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K   236[m[K	 * contain.  For normal [01;31m[KEthernet[m[K V2 frames the maximum MTU is 1500.  Setting a
[01;32m[K   260[m[K	/* If ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES is set to 1 then [01;31m[KEthernet[m[K frames
[01;32m[K   261[m[K	 * that are not in [01;31m[KEthernet[m[K II format will be dropped.  This option is included for
[01;32m[K   266[m[K	 * responsibility of the [01;31m[KEthernet[m[K interface to filter out packets that are of no
[01;32m[K   267[m[K	 * interest.  If the [01;31m[KEthernet[m[K interface does not implement this functionality, then
[01;32m[K   271[m[K	 * [01;31m[KEthernet[m[K driver does all the necessary filtering in hardware then software

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   232[m[K			/* Only [01;31m[KEthernet[m[K is currently supported. */
[01;32m[K   884[m[K					/* xDataLength is the size of the total packet, including the [01;31m[KEthernet[m[K header. */
[01;32m[K   891[m[K					space that will eventually get used by the [01;31m[KEthernet[m[K header. */

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K    28[m[K	 * Used in the PC/Win project to dump [01;31m[KEthernet[m[K packets, along with some description.
[01;32m[K   445[m[K		/* Interpret the received [01;31m[KEthernet[m[K packet. */
[01;32m[K   453[m[K					/* The [01;31m[KEthernet[m[K frame contains an ARP packet. */

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K    49[m[K	/* For an [01;31m[KEthernet[m[K interrupt to be able to obtain a network buffer there must
[01;32m[K    67[m[K	network buffers have constant size, large enough to hold the biggest [01;31m[KEthernet[m[K

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K   177[m[K		/* Allocate a buffer large enough to store the requested [01;31m[KEthernet[m[K frame size
[01;32m[K   186[m[K			the network buffer structure that references this [01;31m[KEthernet[m[K buffer.
[01;32m[K   187[m[K			Return a pointer to the start of the [01;31m[KEthernet[m[K buffer itself. */
[01;32m[K   197[m[K		/* There is space before the [01;31m[KEthernet[m[K buffer in which a pointer to the
[01;32m[K   198[m[K		network buffer that references this [01;31m[KEthernet[m[K buffer is stored.  Remove the

[1;34m./portable/NetworkInterface/SH2A/NetworkInterface.c[39m

[01;32m[K    72[m[K	/* The queue used to communicate [01;31m[KEthernet[m[K events with the IP task. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   233[m[K	#define   RX_FRAME_ETHER              (0x0008)    /* Received frame is an [01;31m[KEthernet[m[K-type frame */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K  1043[m[K	 * \brief Initialize ksz8851snl [01;31m[Kethernet[m[K controller.

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K    50[m[K	/* If ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES is set to 1, then the [01;31m[KEthernet[m[K
[01;32m[K    91[m[K	 * A function that simulates [01;31m[KEthernet[m[K interrupts by periodically polling the

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K     2[m[K	 * Handling of [01;31m[KEthernet[m[K PHY's
[01;32m[K   107[m[K	#define phyADVERTISE_CSMA			0x0001U	/* Supports IEEE 802.3u: Fast [01;31m[KEthernet[m[K at 100 Mbit/s */
[01;32m[K   683[m[K			/* Frequent checking the PHY Link Status can affect for the performance of [01;31m[KEthernet[m[K controller.

[1;34m./portable/NetworkInterface/mw300_rd/NetworkInterface.c[39m

[01;32m[K    58[m[K	/* If ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES is set to 1, then the [01;31m[KEthernet[m[K

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   368[m[K	    /* Allocate a buffer large enough to store the requested [01;31m[KEthernet[m[K frame size
[01;32m[K   383[m[K	         * the network buffer structure that references this [01;31m[KEthernet[m[K buffer.
[01;32m[K   384[m[K	         * Return a pointer to the start of the [01;31m[KEthernet[m[K buffer itself. */
[01;32m[K   396[m[K	    /* There is space before the [01;31m[KEthernet[m[K buffer in which a pointer to the
[01;32m[K   397[m[K	     * network buffer that references this [01;31m[KEthernet[m[K buffer is stored.  Remove the

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K     4[m[K	 * \brief KSZ8051MNL ([01;31m[KEthernet[m[K PHY) driver for SAM.

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   326[m[K		/* Contact the [01;31m[KEthernet[m[K PHY and store it's address in 'ethernet_phy_addr' */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K     4[m[K	 * \brief GMAC ([01;31m[KEthernet[m[K MAC) driver for SAM.
[01;32m[K  1100[m[K	 * This is the quickstart guide for the \ref gmac_group "[01;31m[KEthernet[m[K MAC",
[01;32m[K  1121[m[K	 * - The data will be read from the [01;31m[Kethernet[m[K
[01;32m[K  1203[m[K	 * number is 24 depending on a normal [01;31m[KEthernet[m[K throughput.
[01;32m[K  1275[m[K	 * -# Establish the [01;31m[Kethernet[m[K link; the network can be worked from now on:
[01;32m[K  1288[m[K	 * -# Start reading the data from the [01;31m[Kethernet[m[K:

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K    46[m[K	/**  SOFTWARE API DEFINITION FOR Gigabit [01;31m[KEthernet[m[K MAC */
[01;32m[K    48[m[K	/** \addtogroup SAM4E_GMAC Gigabit [01;31m[KEthernet[m[K MAC */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K    72[m[K	 * - \ref gmac_group [01;31m[KEthernet[m[K Media Access Controller (GMAC) module.
[01;32m[K    82[m[K	/* [01;31m[KEthernet[m[K PHY operation max retry count */
[01;32m[K    85[m[K	/* [01;31m[KEthernet[m[K PHY operation timeout */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K     4[m[K	 * \brief GMAC ([01;31m[KEthernet[m[K MAC) driver for SAM.
[01;32m[K  1103[m[K	 * This is the quickstart guide for the \ref gmac_group "[01;31m[KEthernet[m[K MAC",
[01;32m[K  1124[m[K	 * - The data will be read from the [01;31m[Kethernet[m[K
[01;32m[K  1206[m[K	 * number is 24 depending on a normal [01;31m[KEthernet[m[K throughput.
[01;32m[K  1278[m[K	 * -# Establish the [01;31m[Kethernet[m[K link; the network can be worked from now on:
[01;32m[K  1291[m[K	 * -# Start reading the data from the [01;31m[Kethernet[m[K:

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K     4[m[K	 * \brief GMAC ([01;31m[KEthernet[m[K MAC) driver for SAM.
[01;32m[K    72[m[K	 * \defgroup gmac_group [01;31m[KEthernet[m[K Media Access Controller
[01;32m[K    76[m[K	 * Driver for the GMAC ([01;31m[KEthernet[m[K Media Access Controller).
[01;32m[K   674[m[K		/* The buffer size defined is the length of [01;31m[Kethernet[m[K frame,

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K     4[m[K	 * \brief GMAC ([01;31m[KEthernet[m[K MAC) driver for SAM.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K     4[m[K	 * \brief GMAC ([01;31m[KEthernet[m[K MAC) driver for SAM.
[01;32m[K    99[m[K	 * \defgroup gmac_group [01;31m[KEthernet[m[K Media Access Controller
[01;32m[K   103[m[K	 * Driver for the GMAC ([01;31m[KEthernet[m[K Media Access Controller).
[01;32m[K   410[m[K				GMAC_NCFGR_RXBUFO( ETHERNET_CONF_DATA_OFFSET ) | /* Set [01;31m[KEthernet[m[K Offset  */
[01;32m[K   708[m[K		/* The buffer size defined is the length of [01;31m[Kethernet[m[K frame,

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   122[m[K	 /* If ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES is set to 1, then the [01;31m[KEthernet[m[K

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K    43[m[K	/* If ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES is set to 1, then the [01;31m[KEthernet[m[K
[01;32m[K   161[m[K	        /* It is assumed SendData() copies the data out of the FreeRTOS+TCP [01;31m[KEthernet[m[K
[01;32m[K   162[m[K	        buffer.  The [01;31m[KEthernet[m[K buffer is therefore no longer needed, and must be

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   396[m[K	// Provide [01;31m[Kethernet[m[K devices with a semi-unique MAC address

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   215[m[K	/* [01;31m[KEthernet[m[K handle. */
[01;32m[K   242[m[K	/* [01;31m[KEthernet[m[K Rx MA Descriptor */
[01;32m[K   250[m[K		/* [01;31m[KEthernet[m[K Receive Buffer */
[01;32m[K   254[m[K	/* [01;31m[KEthernet[m[K Tx DMA Descriptor */
[01;32m[K   262[m[K		/* [01;31m[KEthernet[m[K Transmit Buffer */
[01;32m[K   312[m[K		/* [01;31m[KEthernet[m[K RX-Complete callback function, elsewhere declared as weak. */
[01;32m[K   733[m[K					/* Set Own bit of the Tx descriptor Status: gives the buffer back to [01;31m[KETHERNET[m[K DMA */
[01;32m[K   899[m[K			/* Update the [01;31m[KETHERNET[m[K DMA global Rx descriptor with next Rx descriptor */
[01;32m[K   906[m[K			hold a complete [01;31m[KEthernet[m[K packet (1536 bytes).
[01;32m[K   912[m[K				/* Not an [01;31m[KEthernet[m[K frame-type or a checmsum error. */
[01;32m[K  1005[m[K				/* Clear RBUS [01;31m[KETHERNET[m[K DMA flag. */
[01;32m[K  1145[m[K			/* [01;31m[KETHERNET[m[K MAC Re-Configuration */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32f4xx_hal_eth.h[39m

[01;32m[K     2[m[K	 * The [01;31m[KEthernet[m[K header files for STM32F2, STM32F4 and STM32F7 have been merged to

[1;34m./portable/NetworkInterface/STM32Fxx/stm32f2xx_hal_eth.h[39m

[01;32m[K     2[m[K	 * The [01;31m[KEthernet[m[K header files for STM32F2, STM32F4 and STM32F7 have been merged to

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K     9[m[K	  *          functionalities of the [01;31m[KEthernet[m[K (ETH) peripheral:
[01;32m[K    25[m[K	      (#)Call HAL_ETH_Init() API to initialize the [01;31m[KEthernet[m[K peripheral (MAC, DMA, ...)
[01;32m[K    28[m[K	          (##) Enable the [01;31m[KEthernet[m[K interface clock using
[01;32m[K    34[m[K	          (##) Configure [01;31m[KEthernet[m[K pin-out
[01;32m[K    35[m[K	          (##) Configure [01;31m[KEthernet[m[K NVIC interrupt (IT mode)
[01;32m[K    37[m[K	      (#)Initialize [01;31m[KEthernet[m[K DMA Descriptors in chain mode and point to allocated buffers:
[01;32m[K    61[m[K	      (#) Configure the [01;31m[KEthernet[m[K MAC after ETH peripheral initialization
[01;32m[K    64[m[K	      (#) Configure the [01;31m[KEthernet[m[K DMA after ETH peripheral initialization
[01;32m[K   179[m[K	      (+) Initialize and configure the [01;31m[KEthernet[m[K peripheral
[01;32m[K   180[m[K	      (+) De-initialize the [01;31m[KEthernet[m[K peripheral
[01;32m[K   188[m[K	  * @brief  Initializes the [01;31m[KEthernet[m[K MAC and DMA according to default
[01;32m[K   191[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K   225[m[K		/* [01;31m[KEthernet[m[K Software reset */
[01;32m[K   238[m[K		/* Get the [01;31m[KETHERNET[m[K MACMIIAR value */
[01;32m[K   273[m[K		/* Write to [01;31m[KETHERNET[m[K MAC MIIAR: Configure the [01;31m[KETHERNET[m[K CSR Clock Range */
[01;32m[K   292[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K   316[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K   330[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K   399[m[K			/* [01;31m[KEthernet[m[K Error callback */
[01;32m[K   407[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K   421[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K   433[m[K	  * @brief  [01;31m[KEthernet[m[K transfer error callbacks
[01;32m[K   435[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K   449[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K   479[m[K			/* Get the [01;31m[KETHERNET[m[K MACMIIAR value */
[01;32m[K   532[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K   561[m[K			/* Get the [01;31m[KETHERNET[m[K MACMIIAR value */
[01;32m[K   636[m[K	  * @brief  Enables [01;31m[KEthernet[m[K MAC and DMA reception/transmission
[01;32m[K   638[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K   675[m[K	  * @brief  Stop [01;31m[KEthernet[m[K MAC and DMA reception/transmission
[01;32m[K   677[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K   783[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K   831[m[K			/*------------------------ [01;31m[KETHERNET[m[K MACCR Configuration --------------------*/
[01;32m[K   832[m[K			/* Get the [01;31m[KETHERNET[m[K MACCR value */
[01;32m[K   852[m[K			/* Write to [01;31m[KETHERNET[m[K MACCR */
[01;32m[K   855[m[K			/*----------------------- [01;31m[KETHERNET[m[K MACFFR Configuration --------------------*/
[01;32m[K   856[m[K			/* Write to [01;31m[KETHERNET[m[K MACFFR */
[01;32m[K   873[m[K			/*--------------- [01;31m[KETHERNET[m[K MACHTHR and MACHTLR Configuration ---------------*/
[01;32m[K   874[m[K			/* Write to [01;31m[KETHERNET[m[K MACHTHR */
[01;32m[K   877[m[K			/* Write to [01;31m[KETHERNET[m[K MACHTLR */
[01;32m[K   879[m[K			/*----------------------- [01;31m[KETHERNET[m[K MACFCR Configuration --------------------*/
[01;32m[K   881[m[K			/* Get the [01;31m[KETHERNET[m[K MACFCR value */
[01;32m[K   894[m[K			/* Write to [01;31m[KETHERNET[m[K MACFCR */
[01;32m[K   897[m[K			/*----------------------- [01;31m[KETHERNET[m[K MACVLANTR Configuration -----------------*/
[01;32m[K   909[m[K			/*------------------------ [01;31m[KETHERNET[m[K MACCR Configuration --------------------*/
[01;32m[K   910[m[K			/* Get the [01;31m[KETHERNET[m[K MACCR value */
[01;32m[K   918[m[K			/* Write to [01;31m[KETHERNET[m[K MACCR */
[01;32m[K   935[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K   967[m[K		/*----------------------- [01;31m[KETHERNET[m[K DMAOMR Configuration --------------------*/
[01;32m[K   968[m[K		/* Get the [01;31m[KETHERNET[m[K DMAOMR value */
[01;32m[K   984[m[K		/* Write to [01;31m[KETHERNET[m[K DMAOMR */
[01;32m[K   987[m[K		/*----------------------- [01;31m[KETHERNET[m[K DMABMR Configuration --------------------*/
[01;32m[K  1038[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K  1060[m[K	  * @brief  Configures [01;31m[KEthernet[m[K MAC and DMA with default parameters.
[01;32m[K  1062[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K  1063[m[K	  * @param  err: [01;31m[KEthernet[m[K Init error
[01;32m[K  1074[m[K	    /* Set [01;31m[KEthernet[m[K duplex mode to Full-duplex */
[01;32m[K  1077[m[K	    /* Set [01;31m[KEthernet[m[K speed to 100M */
[01;32m[K  1081[m[K	  /* [01;31m[KEthernet[m[K MAC default initialization **************************************/
[01;32m[K  1119[m[K	  /*------------------------ [01;31m[KETHERNET[m[K MACCR Configuration --------------------*/
[01;32m[K  1120[m[K	  /* Get the [01;31m[KETHERNET[m[K MACCR value */
[01;32m[K  1151[m[K	  /* Write to [01;31m[KETHERNET[m[K MACCR */
[01;32m[K  1154[m[K	  /*----------------------- [01;31m[KETHERNET[m[K MACFFR Configuration --------------------*/
[01;32m[K  1163[m[K	  /* Write to [01;31m[KETHERNET[m[K MACFFR */
[01;32m[K  1179[m[K	   /*--------------- [01;31m[KETHERNET[m[K MACHTHR and MACHTLR Configuration --------------*/
[01;32m[K  1180[m[K	   /* Write to [01;31m[KETHERNET[m[K MACHTHR */
[01;32m[K  1183[m[K	   /* Write to [01;31m[KETHERNET[m[K MACHTLR */
[01;32m[K  1185[m[K	   /*----------------------- [01;31m[KETHERNET[m[K MACFCR Configuration -------------------*/
[01;32m[K  1187[m[K	   /* Get the [01;31m[KETHERNET[m[K MACFCR value */
[01;32m[K  1205[m[K	   /* Write to [01;31m[KETHERNET[m[K MACFCR */
[01;32m[K  1208[m[K	   /*----------------------- [01;31m[KETHERNET[m[K MACVLANTR Configuration ----------------*/
[01;32m[K  1220[m[K	    /* [01;31m[KEthernet[m[K DMA default initialization ************************************/
[01;32m[K  1238[m[K	    /* Get the [01;31m[KETHERNET[m[K DMAOMR value */
[01;32m[K  1262[m[K	    /* Write to [01;31m[KETHERNET[m[K DMAOMR */
[01;32m[K  1265[m[K	    /*----------------------- [01;31m[KETHERNET[m[K DMABMR Configuration ------------------*/
[01;32m[K  1290[m[K	       /* Enable the [01;31m[KEthernet[m[K Rx Interrupt */
[01;32m[K  1294[m[K	     /* Initialize MAC address in [01;31m[Kethernet[m[K MAC */
[01;32m[K  1301[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K  1335[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K  1348[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K  1361[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K  1374[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K  1387[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K  1401[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K  1415[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K  1429[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module
[01;32m[K  1441[m[K	  * @brief  Clears the [01;31m[KETHERNET[m[K transmit FIFO.
[01;32m[K  1443[m[K	  *         the configuration information for [01;31m[KETHERNET[m[K module

[1;34m./portable/NetworkInterface/STM32Fxx/stm32f7xx_hal_eth.h[39m

[01;32m[K     2[m[K	 * The [01;31m[KEthernet[m[K header files for STM32F2, STM32F4 and STM32F7 have been merged to

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   331[m[K	/* Delay to wait when writing to some [01;31m[KEthernet[m[K registers */
[01;32m[K   334[m[K	/* [01;31m[KEthernet[m[K Errors */
[01;32m[K   338[m[K	/* [01;31m[KEthernet[m[K DMA Tx descriptors Collision Count Shift */
[01;32m[K   341[m[K	/* [01;31m[KEthernet[m[K DMA Tx descriptors Buffer2 Size Shift */
[01;32m[K   344[m[K	/* [01;31m[KEthernet[m[K DMA Rx descriptors Frame Length Shift */
[01;32m[K   347[m[K	/* [01;31m[KEthernet[m[K DMA Rx descriptors Buffer2 Size Shift */
[01;32m[K   350[m[K	/* [01;31m[KEthernet[m[K DMA Rx descriptors Frame length Shift */
[01;32m[K   353[m[K	/* [01;31m[KEthernet[m[K MAC address offsets */
[01;32m[K   354[m[K	#define ETH_MAC_ADDR_HBASE    (uint32_t)(ETH_MAC_BASE + (uint32_t)0x40U)  /* [01;31m[KEthernet[m[K MAC address high offset */
[01;32m[K   355[m[K	#define ETH_MAC_ADDR_LBASE    (uint32_t)(ETH_MAC_BASE + (uint32_t)0x44U)  /* [01;31m[KEthernet[m[K MAC address low offset */
[01;32m[K   357[m[K	/* [01;31m[KEthernet[m[K MACMIIAR register Mask */
[01;32m[K   360[m[K	/* [01;31m[KEthernet[m[K MACCR register Mask */
[01;32m[K   363[m[K	/* [01;31m[KEthernet[m[K MACFCR register Mask */
[01;32m[K   366[m[K	/* [01;31m[KEthernet[m[K DMAOMR register Mask */
[01;32m[K   369[m[K	/* [01;31m[KEthernet[m[K Remote Wake-up frame register length */
[01;32m[K   372[m[K	/* [01;31m[KEthernet[m[K Missed frames counter Shift */
[01;32m[K   438[m[K	  uint32_t             Speed;                     /*!< Sets the [01;31m[KEthernet[m[K speed: 10/100 Mbps.
[01;32m[K   444[m[K	  uint16_t             PhyAddress;                /*!< [01;31m[KEthernet[m[K PHY address.
[01;32m[K   449[m[K	  uint32_t             RxMode;                    /*!< Selects the [01;31m[KEthernet[m[K Rx mode: Polling mode, Interrupt mode.
[01;32m[K   640[m[K	  /*!< Enhanced [01;31m[KEthernet[m[K DMA PTP Descriptors */
[01;32m[K   678[m[K	  ETH_InitTypeDef            Init;          /*!< [01;31m[KEthernet[m[K Init Configuration */
[01;32m[K   680[m[K	  uint32_t                   LinkStatus;    /*!< [01;31m[KEthernet[m[K link status        */
[01;32m[K   708[m[K	#define ETH_CRC                   ((uint32_t)4U)    /*!< [01;31m[KEthernet[m[K CRC */
[01;32m[K   711[m[K	#define ETH_MIN_ETH_PAYLOAD       ((uint32_t)46U)    /*!< Minimum [01;31m[KEthernet[m[K payload size */
[01;32m[K   712[m[K	#define ETH_MAX_ETH_PAYLOAD       ((uint32_t)1500U)    /*!< Maximum [01;31m[KEthernet[m[K payload size */
[01;32m[K   715[m[K	 /* [01;31m[KEthernet[m[K driver receive buffers are organized in a chained linked-list, when
[01;32m[K   716[m[K	    an [01;31m[KEthernet[m[K packet is received, the Rx-DMA will transfer the packet from RxFIFO
[01;32m[K   719[m[K	    Depending on the size of the received [01;31m[KEthernet[m[K packet and the size of
[01;32m[K   720[m[K	    each [01;31m[KEthernet[m[K driver receive buffer, the received packet can take one or more
[01;32m[K   721[m[K	    [01;31m[KEthernet[m[K driver receive buffer.
[01;32m[K   723[m[K	    In below are defined the size of one [01;31m[KEthernet[m[K driver receive buffer ETH_RX_BUF_SIZE
[01;32m[K   730[m[K	/* Here we configure each [01;31m[KEthernet[m[K driver receive buffer to fit the Max size [01;31m[KEthernet[m[K
[01;32m[K   737[m[K	/* 5 [01;31m[KEthernet[m[K driver receive buffers are used (in a chained linked list)*/
[01;32m[K   743[m[K	 /* [01;31m[KEthernet[m[K driver transmit buffers are organized in a chained linked-list, when
[01;32m[K   744[m[K	    an [01;31m[KEthernet[m[K packet is transmitted, Tx-DMA will transfer the packet from the
[01;32m[K   747[m[K	    Depending on the size of the [01;31m[KEthernet[m[K packet to be transmitted and the size of
[01;32m[K   748[m[K	    each [01;31m[KEthernet[m[K driver transmit buffer, the packet to be transmitted can take
[01;32m[K   749[m[K	    one or more [01;31m[KEthernet[m[K driver transmit buffer.
[01;32m[K   751[m[K	    In below are defined the size of one [01;31m[KEthernet[m[K driver transmit buffer ETH_TX_BUF_SIZE
[01;32m[K   758[m[K	/* Here we configure each [01;31m[KEthernet[m[K driver transmit buffer to fit the Max size [01;31m[KEthernet[m[K
[01;32m[K   765[m[K	/* 5 [01;31m[KEthernet[m[K driver transmit buffers are used (in a chained linked list)*/
[01;32m[K   888[m[K	#define ETH_DMARXDESC_FT          ((uint32_t)0x00000020U)  /*!< Frame type - [01;31m[KEthernet[m[K, otherwise 802.3    */
[01;32m[K  1683[m[K	  * @brief  Checks whether the specified [01;31m[KEthernet[m[K DMA Tx Desc flag is set or not.
[01;32m[K  1691[m[K	  * @brief  Checks whether the specified [01;31m[KEthernet[m[K DMA Rx Desc flag is set or not.
[01;32m[K  1720[m[K	  * @brief  Returns the specified [01;31m[KEthernet[m[K DMA Tx Desc collision count.
[01;32m[K  1748[m[K	  * @brief  Selects the specified [01;31m[KEthernet[m[K DMA Tx Desc Checksum Insertion.
[01;32m[K  1789[m[K	 * @brief  Enables the specified [01;31m[KEthernet[m[K MAC interrupts.
[01;32m[K  1791[m[K	  * @param  __INTERRUPT__: specifies the [01;31m[KEthernet[m[K MAC interrupt sources to be
[01;32m[K  1801[m[K	  * @brief  Disables the specified [01;31m[KEthernet[m[K MAC interrupts.
[01;32m[K  1803[m[K	  * @param  __INTERRUPT__: specifies the [01;31m[KEthernet[m[K MAC interrupt sources to be
[01;32m[K  1820[m[K	  * @brief  Checks whether the [01;31m[KEthernet[m[K flow control busy bit is set or not.
[01;32m[K  1841[m[K	  * @brief  Checks whether the specified [01;31m[KEthernet[m[K MAC flag is set or not.
[01;32m[K  1850[m[K	  * @retval The state of [01;31m[KEthernet[m[K MAC flag.
[01;32m[K  1855[m[K	  * @brief  Enables the specified [01;31m[KEthernet[m[K DMA interrupts.
[01;32m[K  1857[m[K	  * @param  __INTERRUPT__: specifies the [01;31m[KEthernet[m[K DMA interrupt sources to be
[01;32m[K  1864[m[K	  * @brief  Disables the specified [01;31m[KEthernet[m[K DMA interrupts.
[01;32m[K  1866[m[K	  * @param  __INTERRUPT__: specifies the [01;31m[KEthernet[m[K DMA interrupt sources to be
[01;32m[K  1873[m[K	  * @brief  Clears the [01;31m[KEthernet[m[K DMA IT pending bit.
[01;32m[K  1881[m[K	  * @brief  Checks whether the specified [01;31m[KEthernet[m[K DMA flag is set or not.
[01;32m[K  1889[m[K	  * @brief  Checks whether the specified [01;31m[KEthernet[m[K DMA flag is set or not.
[01;32m[K  1897[m[K	  * @brief  Checks whether the specified [01;31m[KEthernet[m[K DMA overflow flag is set or not.
[01;32m[K  1903[m[K	  * @retval The state of [01;31m[KEthernet[m[K DMA overflow Flag (SET or RESET).
[01;32m[K  1974[m[K	  * @brief  Checks whether the specified [01;31m[KEthernet[m[K PMT flag is set or not.
[01;32m[K  1981[m[K	  * @retval The new state of [01;31m[KEthernet[m[K PMT Flag (SET or RESET).
[01;32m[K  2050[m[K	  * @brief  Enables the specified [01;31m[KEthernet[m[K MMC Rx interrupts.
[01;32m[K  2052[m[K	  * @param  __INTERRUPT__: specifies the [01;31m[KEthernet[m[K MMC interrupt sources to be enabled or disabled.
[01;32m[K  2061[m[K	  * @brief  Disables the specified [01;31m[KEthernet[m[K MMC Rx interrupts.
[01;32m[K  2063[m[K	  * @param  __INTERRUPT__: specifies the [01;31m[KEthernet[m[K MMC interrupt sources to be enabled or disabled.
[01;32m[K  2072[m[K	  * @brief  Enables the specified [01;31m[KEthernet[m[K MMC Tx interrupts.
[01;32m[K  2074[m[K	  * @param  __INTERRUPT__: specifies the [01;31m[KEthernet[m[K MMC interrupt sources to be enabled or disabled.
[01;32m[K  2084[m[K	  * @brief  Disables the specified [01;31m[KEthernet[m[K MMC Tx interrupts.
[01;32m[K  2086[m[K	  * @param  __INTERRUPT__: specifies the [01;31m[KEthernet[m[K MMC interrupt sources to be enabled or disabled.

[1;34m./portable/NetworkInterface/board_family/NetworkInterface.c[39m

[01;32m[K    33[m[K	/* If ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES is set to 1, then the [01;31m[KEthernet[m[K

[1;34m./portable/NetworkInterface/include/phyHandling.h[39m

[01;32m[K     2[m[K	 * Handling of [01;31m[KEthernet[m[K PHY's

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K    23[m[K	* Description  : Interfaces FreeRTOS TCP/IP stack to RX [01;31m[KEthernet[m[K driver.
[01;32m[K   117[m[K	 * Description  : Initialization of [01;31m[KEthernet[m[K driver.
[01;32m[K   128[m[K	         * Perform the hardware specific network initialization here using the [01;31m[KEthernet[m[K driver library to initialize the
[01;32m[K   129[m[K	         * [01;31m[KEthernet[m[K hardware, initialize DMA descriptors, and perform a PHY auto-negotiation to obtain a network link.
[01;32m[K   131[m[K	         * InitialiseNetwork() uses [01;31m[KEthernet[m[K peripheral driver library function, and returns 0 if the initialization fails.
[01;32m[K   173[m[K	     * interfaces) just use [01;31m[KEthernet[m[K peripheral driver library functions to copy
[01;32m[K   196[m[K	        /* It is assumed SendData() copies the data out of the FreeRTOS+TCP [01;31m[KEthernet[m[K
[01;32m[K   197[m[K	         * buffer.  The [01;31m[KEthernet[m[K buffer is therefore no longer needed, and must be
[01;32m[K   271[m[K	     * of an [01;31m[KEthernet[m[K receive event. */
[01;32m[K   295[m[K	        /* Wait for the [01;31m[KEthernet[m[K MAC interrupt to indicate that another packet
[01;32m[K   328[m[K	                /* pxBufferDescriptor->pucEthernetBuffer now points to an [01;31m[KEthernet[m[K
[01;32m[K   344[m[K	                /* See if the data contained in the received [01;31m[KEthernet[m[K frame needs
[01;32m[K   377[m[K	                    /* The [01;31m[KEthernet[m[K frame can be dropped, but the [01;31m[KEthernet[m[K buffer must be released. */

[1;34m./portable/NetworkInterface/RX/ether_callback.c[39m

[01;32m[K   100[m[K	    channel = pdecode->channel;                             /* Get [01;31m[KEthernet[m[K channel number */
[01;32m[K   128[m[K	*                    [01;31m[KEthernet[m[K channel number
[01;32m[K   145[m[K	*                    [01;31m[KEthernet[m[K channel number
[01;32m[K   163[m[K	*                    [01;31m[KEthernet[m[K channel number

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K    76[m[K	/* The queue used to communicate [01;31m[KEthernet[m[K events with the IP task. */
[01;32m[K    91[m[K		/* Enable [01;31m[KEthernet[m[K Pins */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K    53[m[K	/* Part of the [01;31m[KEthernet[m[K and IP headers are always constant when sending an IPv4
[01;32m[K    61[m[K			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 	/* [01;31m[KEthernet[m[K source MAC address. */
[01;32m[K    62[m[K			0x08, 0x00, 							/* [01;31m[KEthernet[m[K frame type. */
[01;32m[K   153[m[K				 * [01;31m[KEthernet[m[K header 'source' MAC address; the preceding 'destination' should not be altered.
[01;32m[K   155[m[K				/* The [01;31m[KEthernet[m[K source address is at offset 6. */
[01;32m[K   260[m[K	/* Map the [01;31m[Kethernet[m[K buffer to the UDPPacket_t struct for easy access to the fields. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   100[m[K	/* If ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES is set to 1, then the [01;31m[KEthernet[m[K
[01;32m[K   104[m[K	then the [01;31m[KEthernet[m[K driver will pass all received packets to the stack, and the
[01;32m[K  1042[m[K				/* Create the task that processes [01;31m[KEthernet[m[K and stack events. */
[01;32m[K  1181[m[K					/* xDataLength is the size of the total packet, including the [01;31m[KEthernet[m[K header. */
[01;32m[K  1291[m[K		/* Map the buffer onto [01;31m[KEthernet[m[K Header struct for easy access to fields. */
[01;32m[K  1330[m[K					/* Not an [01;31m[KEthernet[m[K II frame. */
[01;32m[K  1427[m[K		/* Interpret the [01;31m[KEthernet[m[K frame. */
[01;32m[K  1432[m[K			/* Map the buffer onto the [01;31m[KEthernet[m[K Header struct for easy access to the fields. */
[01;32m[K  1440[m[K				/* Interpret the received [01;31m[KEthernet[m[K packet. */
[01;32m[K  1444[m[K					/* The [01;31m[KEthernet[m[K frame contains an ARP packet. */
[01;32m[K  1456[m[K					/* The [01;31m[KEthernet[m[K frame contains an IP packet. */
[01;32m[K  1475[m[K		/* Perform any actions that resulted from processing the [01;31m[KEthernet[m[K frame. */
[01;32m[K  1479[m[K				/* The [01;31m[KEthernet[m[K frame will have been updated (maybe it was
[01;32m[K  1688[m[K		/* Bound the calculated header length: take away the [01;31m[KEthernet[m[K header size,
[01;32m[K  1797[m[K									of: the actual network buffer [01;31m[KEthernet[m[K frame length, or
[01;32m[K  1802[m[K									includes the size of the [01;31m[KEthernet[m[K header, the size of
[01;32m[K  2004[m[K				/* Check for minimum packet size: [01;31m[KEthernet[m[K header and an IP-header, 34 bytes */
[01;32m[K  2046[m[K				assignment results in a pointer into the protocol packet with the [01;31m[KEthernet[m[K
[01;32m[K  2164[m[K			assignment results in a pointer into the protocol packet with the [01;31m[KEthernet[m[K
[01;32m[K  2580[m[K			/* Map the Buffer to [01;31m[KEthernet[m[K Header struct for easy access to fields. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   224[m[K		eProcessBuffer,			/* An [01;31m[KEthernet[m[K frame has a valid address - continue process its contents. */
[01;32m[K   225[m[K		eReturnEthernetFrame,	/* The [01;31m[KEthernet[m[K frame contains an ARP or ICMP packet that can be returned to its source. */
[01;32m[K   226[m[K		eFrameConsumed			/* Processing the [01;31m[KEthernet[m[K packet contents resulted in the payload being sent to the stack. */
[01;32m[K   233[m[K		eNetworkRxEvent,		/* 1: The network interface has queued a received [01;31m[KEthernet[m[K frame. */
[01;32m[K   255[m[K	/* Offset into the [01;31m[KEthernet[m[K frame that is used to temporarily store information
[01;32m[K   273[m[K		/* [01;31m[KEthernet[m[K frame types. */
[01;32m[K   285[m[K		/* [01;31m[KEthernet[m[K frame types. */
[01;32m[K   437[m[K	 * Inspect an [01;31m[KEthernet[m[K frame to see if it contains data that the stack needs to
[01;32m[K   697[m[K	 * An [01;31m[KEthernet[m[K frame has been updated (maybe it was an ARP request or a PING

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K    57[m[K	/* The size of the [01;31m[KEthernet[m[K header is 14, meaning that 802.1Q VLAN tags
[01;32m[K    92[m[K	/* Dimensions the buffers that are filled by received [01;31m[KEthernet[m[K frames. */
[01;32m[K   129[m[K		uint8_t *pucEthernetBuffer; 	/* Pointer to the start of the [01;31m[KEthernet[m[K frame. */
[01;32m[K   130[m[K		size_t xDataLength; 			/* Starts by holding the total [01;31m[KEthernet[m[K frame length, then the UDP/TCP payload length. */

[1;34m./include/tcp_dump_packets.h[39m

[01;32m[K    28[m[K	 * Used in the PC/Win project to dump [01;31m[KEthernet[m[K packets, along with some description.

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   656[m[K	 * \param netif the lwIP network interface structure for this [01;31m[Kethernetif[m[K.
[01;32m[K  1047[m[K	 * \param netif the lwIP network interface structure for this [01;31m[Kethernetif[m[K.
[01;32m[K  1077[m[K	 * \param netif the lwIP network interface structure for this [01;31m[Kethernetif[m[K.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K  1303[m[K	 * \param [01;31m[Kethertype[m[K  [01;31m[KEthertype[m[K compare value

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1209[m[K	   /* Set the [01;31m[KETV[m[K bit according to ETH VLANTagComparison value */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  3512[m[K				/* The last item is called '[01;31m[KeUNKNOWN[m[K' */

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    59[m[K		[01;31m[KeWaitingAcknowledge[m[K,			/* Either resend the request. */

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    58[m[K		[01;31m[KeWaitingOffer[m[K,					/* Either resend the discover, or, if the offer is forthcoming, send a request. */

[1;34m./test/cbmc/proofs/DHCP/DHCPProcess/DHCPProcess_harness.c[39m

[01;32m[K    90[m[K	     * The socket is created in the [01;31m[KeWaitingSendFirstDiscover[m[K state.
[01;32m[K    91[m[K	     * xReset==True resets the state to [01;31m[KeWaitingSendFirstDiscover[m[K.

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    57[m[K		[01;31m[KeWaitingSendFirstDiscover[m[K = 0,	/* Initial state.  Send a discover the first time it is called, and reset all timers. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2817[m[K			case pdFREERTOS_ERRNO_EWOULDBLOCK:    pcName = "[01;31m[KEWOULDBLOCK[m[K"; break; /* same as EAGAIN */

[1;34m./portable/NetworkInterface/M487/m480_eth.h[39m

[01;32m[K    64[m[K	#define BMSR_ERCAP              0x0001  /* [01;31m[KExt[m[K-reg capability          */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   641[m[K	  uint32_t   [01;31m[KExtendedStatus[m[K;        /*!< Extended status for PTP receive descriptor */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K  1657[m[K	/** @defgroup ETH_EXTI_LINE_WAKEUP ETH [01;31m[KEXTI[m[K LINE WAKEUP
[01;32m[K  1660[m[K	#define ETH_EXTI_LINE_WAKEUP              ((uint32_t)0x00080000U)  /*!< External interrupt line 19 Connected to the ETH [01;31m[KEXTI[m[K Line */
[01;32m[K  2170[m[K	  * @brief Generate a Software interrupt on selected [01;31m[KEXTI[m[K line.

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    45[m[K	 * Support and [01;31m[KFAQ[m[K: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
[01;32m[K    45[m[K	 * Support and [01;31m[KFAQ[m[K: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K    45[m[K	 * Support and [01;31m[KFAQ[m[K: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
[01;32m[K    45[m[K	 * Support and [01;31m[KFAQ[m[K: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.h[39m

[01;32m[K    45[m[K	 * Support and [01;31m[KFAQ[m[K: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
[01;32m[K    45[m[K	 * Support and [01;31m[KFAQ[m[K: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K    44[m[K	 * Support and [01;31m[KFAQ[m[K: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
[01;32m[K    44[m[K	 * Support and [01;31m[KFAQ[m[K: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K    44[m[K	 * Support and [01;31m[KFAQ[m[K: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
[01;32m[K    44[m[K	 * Support and [01;31m[KFAQ[m[K: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1267[m[K	    /* Set the [01;31m[KFB[m[K bit according to ETH FixedBurst value */

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K    41[m[K	 * MAC address: 01:00:5E:00:00:[01;31m[KFC[m[K
[01;32m[K    72[m[K		/* The LLMNR MAC address is 01:00:5e:00:00:[01;31m[Kfc[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   321[m[K	#define REG_RX_HIGH_WATERMARK      (0xB2)       /* [01;31m[KFCHWR[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   318[m[K	#define REG_RX_LOW_WATERMARK       (0xB0)       /* [01;31m[KFCLWR[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   324[m[K	#define REG_RX_OVERRUN_WATERMARK   (0xB4)       /* [01;31m[KFCOWR[m[K */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K    79[m[K	#define GMAC_RXD_LEN_MASK       (0xFFF)     /**< Length of frame including [01;31m[KFCS[m[K (if selected) */
[01;32m[K   165[m[K				uint32_t len:13,       /**  0..12  Length of frame including [01;31m[KFCS[m[K */
[01;32m[K   721[m[K	 * \brief Enable/Disable discarding [01;31m[KFCS[m[K field of received frames.
[01;32m[K   724[m[K	 * \param uc_enable   0 to disable discarding [01;31m[KFCS[m[K field of received frames, else to enable it.
[01;32m[K   753[m[K	 * \brief Enable/Disable ignore RX [01;31m[KFCS[m[K.
[01;32m[K   756[m[K	 * \param uc_enable   0 to disable ignore RX [01;31m[KFCS[m[K, else to enable it.

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   206[m[K	#define GMAC_NCFGR_RFCS (0x1u << 17) /**< \brief (GMAC_NCFGR) Remove [01;31m[KFCS[m[K */
[01;32m[K   224[m[K	#define GMAC_NCFGR_IRXFCS (0x1u << 26) /**< \brief (GMAC_NCFGR) Ignore RX [01;31m[KFCS[m[K */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K    80[m[K	#define GMAC_RXD_LEN_MASK       (0xFFF)     /**< Length of frame including [01;31m[KFCS[m[K (if selected) */
[01;32m[K   166[m[K				uint32_t len:13,       /**  0..12  Length of frame including [01;31m[KFCS[m[K */
[01;32m[K   724[m[K	 * \brief Enable/Disable discarding [01;31m[KFCS[m[K field of received frames.
[01;32m[K   727[m[K	 * \param uc_enable   0 to disable discarding [01;31m[KFCS[m[K field of received frames, else to enable it.
[01;32m[K   756[m[K	 * \brief Enable/Disable ignore RX [01;31m[KFCS[m[K.
[01;32m[K   759[m[K	 * \param uc_enable   0 to disable ignore RX [01;31m[KFCS[m[K, else to enable it.

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   419[m[K		   ignore broadcasts, and not copy [01;31m[KFCS[m[K. */
[01;32m[K   423[m[K				GMAC_NCFGR_RFCS |   /*  Remove [01;31m[KFCS[m[K, frame check sequence (last 4 bytes) */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K    82[m[K	#define GMAC_RXD_LEN_MASK       (0xFFF)     /**< Length of frame including [01;31m[KFCS[m[K (if selected) */
[01;32m[K   189[m[K				uint32_t b_len:13,     /**  0..12  Length of frame including [01;31m[KFCS[m[K */
[01;32m[K   720[m[K	 * \brief Enable/Disable discarding [01;31m[KFCS[m[K field of received frames.
[01;32m[K   723[m[K	 * \param uc_enable   0 to disable discarding [01;31m[KFCS[m[K field of received frames, else to enable it.
[01;32m[K   752[m[K	 * \brief Enable/Disable ignore RX [01;31m[KFCS[m[K.
[01;32m[K   755[m[K	 * \param uc_enable   0 to disable ignore RX [01;31m[KFCS[m[K, else to enable it.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   404[m[K		   ignore broadcasts, and not copy [01;31m[KFCS[m[K. */
[01;32m[K   408[m[K				GMAC_NCFGR_RFCS |   /*  Remove [01;31m[KFCS[m[K, frame check sequence (last 4 bytes) */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3999[m[K		Socket_t [01;31m[Kfd[m[K;	  /* file descriptor */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1248[m[K	    /* Set the [01;31m[KFEF[m[K bit according to ETH ForwardErrorFrames value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   913[m[K			/* Clear [01;31m[KFES[m[K and DM bits */
[01;32m[K  1128[m[K	  /* Set the [01;31m[KFES[m[K bit according to ETH Speed value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   810[m[K	#define ETH_DMATXDESC_ES                      ((uint32_t)0x00008000U)  /*!< Error summary: OR of the following bits: UE || ED || EC || LCO || NC || LCA || [01;31m[KFF[m[K || JT */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   812[m[K							/* RX step11-17: start asynchronous [01;31m[KFIFO[m[K read operation. */
[01;32m[K   878[m[K						/* TX step4-8: perform [01;31m[KFIFO[m[K write operation. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   292[m[K	 * \brief Read internal [01;31m[Kfifo[m[K buffer.
[01;32m[K   294[m[K	 * \param buf the buffer to store the data from the [01;31m[Kfifo[m[K buffer.
[01;32m[K   328[m[K	 * \brief Write internal [01;31m[Kfifo[m[K buffer.
[01;32m[K   330[m[K	 * \param buf the buffer to send to the [01;31m[Kfifo[m[K buffer.
[01;32m[K   378[m[K	 * \brief Write dummy data to the internal [01;31m[Kfifo[m[K buffer.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K    45[m[K	         the frame to MAC TX [01;31m[KFIFO[m[K:
[01;32m[K   655[m[K		/* Flush Transmit [01;31m[KFIFO[m[K */
[01;32m[K   697[m[K	  /* Flush Transmit [01;31m[KFIFO[m[K */
[01;32m[K  1441[m[K	  * @brief  Clears the ETHERNET transmit [01;31m[KFIFO[m[K.
[01;32m[K  1448[m[K		/* Set the Flush Transmit [01;31m[KFIFO[m[K bit */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   592[m[K	  uint32_t             ForwardUndersizedGoodFrames; /*!< Enables or disables the Rx [01;31m[KFIFO[m[K to forward Undersized frames (frames with no Error
[01;32m[K   596[m[K	  uint32_t             ReceiveThresholdControl;     /*!< Selects the threshold level of the Receive [01;31m[KFIFO[m[K.
[01;32m[K  1283[m[K		#define ETH_MAC_TXFIFO_FULL          ((uint32_t)0x02000000)  /* Tx [01;31m[KFIFO[m[K full */
[01;32m[K  1284[m[K		#define ETH_MAC_TXFIFONOT_EMPTY      ((uint32_t)0x01000000)  /* Tx [01;31m[KFIFO[m[K not empty */
[01;32m[K  1285[m[K		#define ETH_MAC_TXFIFO_WRITE_ACTIVE  ((uint32_t)0x00400000)  /* Tx [01;31m[KFIFO[m[K write active */
[01;32m[K  1286[m[K		#define ETH_MAC_TXFIFO_IDLE     ((uint32_t)0x00000000)  /* Tx [01;31m[KFIFO[m[K read status: Idle */
[01;32m[K  1287[m[K		#define ETH_MAC_TXFIFO_READ     ((uint32_t)0x00100000)  /* Tx [01;31m[KFIFO[m[K read status: Read (transferring data to the MAC transmitter) */
[01;32m[K  1288[m[K		#define ETH_MAC_TXFIFO_WAITING  ((uint32_t)0x00200000)  /* Tx [01;31m[KFIFO[m[K read status: Waiting for TxStatus from MAC transmitter */
[01;32m[K  1289[m[K		#define ETH_MAC_TXFIFO_WRITING  ((uint32_t)0x00300000)  /* Tx [01;31m[KFIFO[m[K read status: Writing the received TxStatus or flushing the TxFIFO */
[01;32m[K  1296[m[K		#define ETH_MAC_RXFIFO_EMPTY             ((uint32_t)0x00000000)  /* Rx [01;31m[KFIFO[m[K fill level: empty */
[01;32m[K  1297[m[K		#define ETH_MAC_RXFIFO_BELOW_THRESHOLD   ((uint32_t)0x00000100)  /* Rx [01;31m[KFIFO[m[K fill level: fill-level below flow-control de-activate threshold */
[01;32m[K  1298[m[K		#define ETH_MAC_RXFIFO_ABOVE_THRESHOLD   ((uint32_t)0x00000200)  /* Rx [01;31m[KFIFO[m[K fill level: fill-level above flow-control activate threshold */
[01;32m[K  1299[m[K		#define ETH_MAC_RXFIFO_FULL              ((uint32_t)0x00000300)  /* Rx [01;31m[KFIFO[m[K fill level: full */
[01;32m[K  1300[m[K		#define ETH_MAC_READCONTROLLER_IDLE            ((uint32_t)0x00000060)  /* Rx [01;31m[KFIFO[m[K read controller IDLE state */
[01;32m[K  1301[m[K		#define ETH_MAC_READCONTROLLER_READING_DATA    ((uint32_t)0x00000060)  /* Rx [01;31m[KFIFO[m[K read controller Reading frame data */
[01;32m[K  1302[m[K		#define ETH_MAC_READCONTROLLER_READING_STATUS  ((uint32_t)0x00000060)  /* Rx [01;31m[KFIFO[m[K read controller Reading frame status (or time-stamp) */
[01;32m[K  1303[m[K		#define ETH_MAC_READCONTROLLER_ FLUSHING       ((uint32_t)0x00000060)  /* Rx [01;31m[KFIFO[m[K read controller Flushing the frame data and status */
[01;32m[K  1304[m[K		#define ETH_MAC_RXFIFO_WRITE_ACTIVE     ((uint32_t)0x00000010)  /* Rx [01;31m[KFIFO[m[K write controller active */
[01;32m[K  1305[m[K		#define ETH_MAC_SMALL_FIFO_NOTACTIVE    ((uint32_t)0x00000000)  /* MAC small [01;31m[KFIFO[m[K read / write controllers not active */
[01;32m[K  1306[m[K		#define ETH_MAC_SMALL_FIFO_READ_ACTIVE  ((uint32_t)0x00000002)  /* MAC small [01;31m[KFIFO[m[K read controller active */
[01;32m[K  1307[m[K		#define ETH_MAC_SMALL_FIFO_WRITE_ACTIVE ((uint32_t)0x00000004)  /* MAC small [01;31m[KFIFO[m[K write controller active */
[01;32m[K  1308[m[K		#define ETH_MAC_SMALL_FIFO_RW_ACTIVE    ((uint32_t)0x00000006)  /* MAC small [01;31m[KFIFO[m[K read / write controllers active */
[01;32m[K  1356[m[K	#define ETH_TRANSMITTHRESHOLDCONTROL_64BYTES     ((uint32_t)0x00000000U)  /*!< threshold level of the MTL Transmit [01;31m[KFIFO[m[K is 64 Bytes */
[01;32m[K  1357[m[K	#define ETH_TRANSMITTHRESHOLDCONTROL_128BYTES    ((uint32_t)0x00004000U)  /*!< threshold level of the MTL Transmit [01;31m[KFIFO[m[K is 128 Bytes */
[01;32m[K  1358[m[K	#define ETH_TRANSMITTHRESHOLDCONTROL_192BYTES    ((uint32_t)0x00008000U)  /*!< threshold level of the MTL Transmit [01;31m[KFIFO[m[K is 192 Bytes */
[01;32m[K  1359[m[K	#define ETH_TRANSMITTHRESHOLDCONTROL_256BYTES    ((uint32_t)0x0000C000U)  /*!< threshold level of the MTL Transmit [01;31m[KFIFO[m[K is 256 Bytes */
[01;32m[K  1360[m[K	#define ETH_TRANSMITTHRESHOLDCONTROL_40BYTES     ((uint32_t)0x00010000U)  /*!< threshold level of the MTL Transmit [01;31m[KFIFO[m[K is 40 Bytes */
[01;32m[K  1361[m[K	#define ETH_TRANSMITTHRESHOLDCONTROL_32BYTES     ((uint32_t)0x00014000U)  /*!< threshold level of the MTL Transmit [01;31m[KFIFO[m[K is 32 Bytes */
[01;32m[K  1362[m[K	#define ETH_TRANSMITTHRESHOLDCONTROL_24BYTES     ((uint32_t)0x00018000U)  /*!< threshold level of the MTL Transmit [01;31m[KFIFO[m[K is 24 Bytes */
[01;32m[K  1363[m[K	#define ETH_TRANSMITTHRESHOLDCONTROL_16BYTES     ((uint32_t)0x0001C000U)  /*!< threshold level of the MTL Transmit [01;31m[KFIFO[m[K is 16 Bytes */
[01;32m[K  1389[m[K	#define ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES      ((uint32_t)0x00000000U)  /*!< threshold level of the MTL Receive [01;31m[KFIFO[m[K is 64 Bytes */
[01;32m[K  1390[m[K	#define ETH_RECEIVEDTHRESHOLDCONTROL_32BYTES      ((uint32_t)0x00000008U)  /*!< threshold level of the MTL Receive [01;31m[KFIFO[m[K is 32 Bytes */
[01;32m[K  1391[m[K	#define ETH_RECEIVEDTHRESHOLDCONTROL_96BYTES      ((uint32_t)0x00000010U)  /*!< threshold level of the MTL Receive [01;31m[KFIFO[m[K is 96 Bytes */
[01;32m[K  1392[m[K	#define ETH_RECEIVEDTHRESHOLDCONTROL_128BYTES     ((uint32_t)0x00000018U)  /*!< threshold level of the MTL Receive [01;31m[KFIFO[m[K is 128 Bytes */
[01;32m[K  1651[m[K	#define ETH_DMA_OVERFLOW_RXFIFOCOUNTER      ((uint32_t)0x10000000U)  /*!< Overflow bit for [01;31m[KFIFO[m[K overflow counter */
[01;32m[K  1901[m[K	  *     @arg ETH_DMA_OVERFLOW_RXFIFOCOUNTER : Overflow for [01;31m[KFIFO[m[K Overflows Counter

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   713[m[K	 * will be written with ulOffset == 0, meaning: at the end of the [01;31m[KFIFO[m[K.  When

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1655[m[K				case FREERTOS_SO_CLOSE_AFTER_SEND:		/* As soon as the last byte has been transmitted, [01;31m[Kfinalise[m[K the connection */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   525[m[K					bCloseAfterSend : 1,/* As soon as the last byte has been transmitted, [01;31m[Kfinalise[m[K the connection
[01;32m[K   528[m[K					bCloseRequested : 1,/* Request to [01;31m[Kfinalise[m[K the connection */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   119[m[K	#define FREERTOS_SO_CLOSE_AFTER_SEND	( 12 )		/* As soon as the last byte has been transmitted, [01;31m[Kfinalise[m[K the connection */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1267[m[K	    /* Set the FB bit according to ETH [01;31m[KFixedBurst[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   606[m[K	  uint32_t             [01;31m[KFixedBurst[m[K;                  /*!< Enables or disables the AHB Master interface fixed burst transfers.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1245[m[K	    /* Set the DFF bit according to ETH [01;31m[KFlushReceivedFrame[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   580[m[K	  uint32_t             [01;31m[KFlushReceivedFrame[m[K;          /*!< Enables or disables the flushing of received frames.

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   412[m[K	        /* Enable [01;31m[KFMC[m[K ISP function */
[01;32m[K   419[m[K	        /* Disable [01;31m[KFMC[m[K ISP function */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   349[m[K			[01;31m[KFOnDNSEvent[m[K pCallbackFunction;	/* Function to be called when the address has been found or when a timeout has beeen reached */

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K   105[m[K		typedef void (* [01;31m[KFOnDNSEvent[m[K ) ( const char * /* pcName */, void * /* pvSearchID */, uint32_t /* ulIPAddress */ );

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   849[m[K		/* Utility function used to [01;31m[Kformap[m[K messages being printed only. */

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K   654[m[K		/* Utility function used to [01;31m[Kformap[m[K messages being printed only. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1248[m[K	    /* Set the FEF bit according to ETH [01;31m[KForwardErrorFrames[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   589[m[K	  uint32_t             [01;31m[KForwardErrorFrames[m[K;          /*!< Selects or not the forward to the DMA of erroneous frames.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1249[m[K	    /* Set the FUF bit according to ETH [01;31m[KForwardUndersizedGoodFrames[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   592[m[K	  uint32_t             [01;31m[KForwardUndersizedGoodFrames[m[K; /*!< Enables or disables the Rx FIFO to forward Undersized frames (frames with no Error

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   274[m[K		( void )pxSocket;	/* Was only use [01;31m[Kfot[m[K sizeof. */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   581[m[K	    if( pdecode->status_eesr & 0x00040000 ) /* EDMAC [01;31m[KFR[m[K (Frame Receive Event) interrupt */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1588[m[K					/* Packet is not [01;31m[Kfragemented[m[K, destination is this device. */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   300[m[K		/* The driver has already cleared the [01;31m[KFRAMERX[m[K, BUFFNA and error bits

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    28[m[K	 * Module which handles the TCP windowing schemes for [01;31m[KFreeRTOS[m[K+TCP.  Many
[01;32m[K    29[m[K	 * functions have two versions - one for [01;31m[KFreeRTOS[m[K+TCP (full) and one for
[01;32m[K    30[m[K	 * [01;31m[KFreeRTOS[m[K+TCP (lite).
[01;32m[K    39[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    43[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */
[01;32m[K   157[m[K	 * [01;31m[KFreeRTOS[m[K+TCP stores data in circular buffers.  Calculate the next position to
[01;32m[K   710[m[K	         * once [01;31m[KFreeRTOS[m[K+TCP will no longer be used. No thread-safety is provided for this

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    30[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    35[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    28[m[K	 * Module which handles the TCP connections for [01;31m[KFreeRTOS[m[K+TCP.
[01;32m[K    40[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    46[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    30[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    36[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    34[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */
[01;32m[K   508[m[K					/* See PR #53 on github/[01;31m[Kfreertos[m[K/[01;31m[Kfreertos[m[K */

[1;34m./test/unit-test/ConfigFiles/pack_struct_start.h[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.0.11
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./test/unit-test/ConfigFiles/portmacro.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K Kernel V10.3.0
[01;32m[K    22[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    22[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K   136[m[K	/* Task function macros as described on the [01;31m[KFreeRTOS[m[K.org WEB site. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K Kernel V10.3.0
[01;32m[K    22[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    22[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    40[m[K	 * [01;31m[KFreeRTOS[m[K API DOCUMENTATION AVAILABLE ON THE [01;31m[KFreeRTOS[m[K.org WEB SITE.  See
[01;32m[K    41[m[K	 * http://www.[01;31m[Kfreertos[m[K.org/a00110.html
[01;32m[K    41[m[K	 * http://www.[01;31m[Kfreertos[m[K.org/a00110.html
[01;32m[K    92[m[K	[01;31m[KFreeRTOS[m[K/Source/tasks.c for limitations. */
[01;32m[K   126[m[K	/* Include the [01;31m[KFreeRTOS[m[K+Trace [01;31m[KFreeRTOS[m[K trace macro definitions. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K Kernel V10.2.0
[01;32m[K    18[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    18[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    19[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    19[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    26[m[K	* http://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K    26[m[K	* http://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K    55[m[K	/* Define the byte order of the target MCU (the MCU [01;31m[KFreeRTOS[m[K+TCP is executing
[01;32m[K    85[m[K	 * standard [01;31m[KFreeRTOS[m[K task priority so can take any value from 0 (the lowest
[01;32m[K    87[m[K	 * configMAX_PRIORITIES is a standard [01;31m[KFreeRTOS[m[K configuration parameter defined in
[01;32m[K    93[m[K	/* The size, in words (not bytes), of the stack allocated to the [01;31m[KFreeRTOS[m[K+TCP
[01;32m[K    94[m[K	 * task.  This setting is less important when the [01;31m[KFreeRTOS[m[K Win32 simulator is used
[01;32m[K    96[m[K	 * stack.  [01;31m[KFreeRTOS[m[K includes optional stack overflow detection, see:
[01;32m[K    97[m[K	 * http://www.[01;31m[Kfreertos[m[K.org/Stacks-and-stack-overflow-checking.html. */
[01;32m[K    97[m[K	 * http://www.[01;31m[Kfreertos[m[K.org/Stacks-and-stack-overflow-checking.html. */
[01;32m[K   108[m[K	/* If ipconfigUSE_NETWORK_EVENT_HOOK is set to 1 then [01;31m[KFreeRTOS[m[K+TCP will call the
[01;32m[K   111[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_UDP/API/vApplicationIPNetworkEventHook.shtml.
[01;32m[K   111[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_UDP/API/vApplicationIPNetworkEventHook.shtml.
[01;32m[K   129[m[K	/* If ipconfigUSE_DHCP is 1 then [01;31m[KFreeRTOS[m[K+TCP will attempt to retrieve an IP
[01;32m[K   131[m[K	 * ipconfigUSE_DHCP is 0 then [01;31m[KFreeRTOS[m[K+TCP will use a static IP address.  The
[01;32m[K   196[m[K	/* A [01;31m[KFreeRTOS[m[K queue is used to send events from application tasks to the IP

[1;34m./test/unit-test/ConfigFiles/pack_struct_end.h[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.0.11
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./test/unit-test/ConfigFiles/FreeRTOS_errno_TCP.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.0
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	/* The following definitions will be included in the core [01;31m[KFreeRTOS[m[K code in
[01;32m[K    30[m[K	future versions of [01;31m[KFreeRTOS[m[K - hence the 'pd' (ProjDefs) prefix - at which time
[01;32m[K    33[m[K	/* The following errno values are used by [01;31m[KFreeRTOS[m[K+ components, not [01;31m[KFreeRTOS[m[K
[01;32m[K    80[m[K		/* The following endian values are used by [01;31m[KFreeRTOS[m[K+ components, not [01;31m[KFreeRTOS[m[K

[1;34m./test/unit-test/ConfigFiles/NetworkInterface.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.0
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org

[1;34m./test/unit-test/ConfigFiles/NetworkBufferManagement.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.0
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org

[1;34m./test/unit-test/ConfigFiles/IPTraceMacroDefaults.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.0
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    28[m[K	http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/TCP_IP_Trace.html */
[01;32m[K    28[m[K	http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/TCP_IP_Trace.html */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.0
[01;32m[K    22[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    22[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    31[m[K	/* The error numbers defined in this file will be moved to the core [01;31m[KFreeRTOS[m[K
[01;32m[K    32[m[K	code in future versions of [01;31m[KFreeRTOS[m[K - at which time the following header file
[01;32m[K   129[m[K		#error ipconfigDHCP_USES_USER_HOOK and its associated callback have been superceeded - see http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html#ipconfigUSE_DHCP_HOOK
[01;32m[K   182[m[K	 * [01;31m[KFreeRTOS[m[K debug logging routine (proposal)
[01;32m[K   205[m[K	 * [01;31m[KFreeRTOS[m[K general logging routine (proposal)
[01;32m[K   234[m[K	/* Malloc functions. Within most applications of [01;31m[KFreeRTOS[m[K, the couple

[1;34m./test/cbmc/proofs/CheckOptions/CheckOptions_harness.c[39m

[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    11[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/ReadNameField/ReadNameField_harness.c[39m

[01;32m[K     4[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    11[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/Socket/vSocketBind/DONT_ALLOW_SOCKET_SEND_WITHOUT_BIND/vSocketBind_harness.c[39m

[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     9[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/Socket/vSocketBind/ALLOW_ETHERNET_DRIVER_FILTERS_PACKETS/vSocketBind_harness.c[39m

[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     9[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/Socket/vSocketBind/ALLOW_SOCKET_SEND_WITHOUT_BIND/vSocketBind_harness.c[39m

[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     9[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/ARP/ARPAgeCache/ARPAgeCache_harness.c[39m

[01;32m[K     1[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/ARP/ARPGetCacheEntryByMac/ARPGetCacheEntryByMac_harness.c[39m

[01;32m[K     1[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/ARP/ARPGetCacheEntry/ARPGetCacheEntry_harness.c[39m

[01;32m[K     1[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/ARP/ARPRefreshCacheEntry/ARPRefreshCacheEntry_harness.c[39m

[01;32m[K     1[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_OutputARPRequest/OutputARPRequest_harness.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K memory safety proofs with CBMC.
[01;32m[K    25[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    25[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    26[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    26[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    33[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/ARP/ARP_OutputARPRequest_buffer_alloc2/OutputARPRequest_harness.c[39m

[01;32m[K     7[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    13[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/ARP/ARPProcessPacket/ARPProcessPacket_harness.c[39m

[01;32m[K     1[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/ARP/ARPSendGratuitous/ARPSendGratuitous_harness.c[39m

[01;32m[K     1[m[K	// /* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     1[m[K	// /* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/ARP/ARPGenerateRequestPacket/ARPGenerateRequestPacket_harness.c[39m

[01;32m[K     1[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/ARP/ARP_OutputARPRequest_buffer_alloc1/OutputARPRequest_harness.c[39m

[01;32m[K     7[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    13[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_PrintARPCache/FreeRTOS_PrintARPCache_harness.c[39m

[01;32m[K     1[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/ARP/ulARPRemoveCacheEntryByMac/ulARPRemoveCacheEntryByMac_harness.c[39m

[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     8[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_ClearARP/ClearARP_harness.c[39m

[01;32m[K     1[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/prvProcessEthernetPacket/prvProcessEthernetPacket_harness.c[39m

[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    11[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/UDP/vProcessGeneratedUDPPacket/vProcessGeneratedUDPPacket_harness.c[39m

[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    12[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/ProcessDHCPReplies/ProcessDHCPReplies_harness.c[39m

[01;32m[K     4[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     9[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/IP/SendEventToIPTask/SendEventToIPTask_harness.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K memory safety proofs with CBMC.
[01;32m[K    25[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    25[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    26[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    26[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    31[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    35[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/SkipNameField/SkipNameField_harness.c[39m

[01;32m[K     4[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    11[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/TCP/prvTCPReturnPacket/TCPReturnPacket_harness.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K memory safety proofs with CBMC.
[01;32m[K    25[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    25[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    26[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    26[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    33[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/TCP/prvTCPPrepareSend/TCPPrepareSend_harness.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K memory safety proofs with CBMC.
[01;32m[K    25[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    25[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    26[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    26[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    33[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K memory safety proofs with CBMC.
[01;32m[K    25[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    25[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    26[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    26[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    33[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/CheckOptionsOuter/CheckOptionsOuter_harness.c[39m

[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    11[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/DHCP/IsDHCPSocket/IsDHCPSocket_harness.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K memory safety proofs with CBMC.
[01;32m[K    25[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    25[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    26[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    26[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    31[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    35[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/DHCP/DHCPProcess/DHCPProcess_harness.c[39m

[01;32m[K     2[m[K	  * [01;31m[KFreeRTOS[m[K memory safety proofs with CBMC.
[01;32m[K    25[m[K	  * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    25[m[K	  * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    26[m[K	  * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    26[m[K	  * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    32[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    37[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/parsing/ProcessIPPacket/ProcessIPPacket_harness.c[39m

[01;32m[K     1[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/parsing/ProcessReceivedUDPPacket/ProcessReceivedUDPPacket_harness.c[39m

[01;32m[K     1[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/parsing/ProcessReceivedTCPPacket/ProcessReceivedTCPPacket_harness.c[39m

[01;32m[K     1[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/ParseDNSReply/ParseDNSReply_harness.c[39m

[01;32m[K     4[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    11[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/DNS/DNSlookup/DNSlookup_harness.c[39m

[01;32m[K     1[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     6[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName/DNSgetHostByName_harness.c[39m

[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    10[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */
[01;32m[K    29[m[K	 *   Many methods in the [01;31m[KFreeRTOS[m[K TCP API in stubs/freertos_api.c

[1;34m./test/cbmc/proofs/DNS/DNSclear/DNSclear_harness.c[39m

[01;32m[K     1[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/DNS/DNSHandlePacket/DNShandlePacket_harness.c[39m

[01;32m[K     1[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */
[01;32m[K    11[m[K	The proof can be found here: https://github.com/aws/amazon-[01;31m[Kfreertos[m[K/tree/master/tools/cbmc/proofs/ParseDNSReply */
[01;32m[K    11[m[K	The proof can be found here: https://github.com/aws/amazon-[01;31m[Kfreertos[m[K/tree/master/tools/cbmc/proofs/ParseDNSReply */

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_a/DNSgetHostByName_a_harness.c[39m

[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    10[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */
[01;32m[K    29[m[K	 *   Many methods in the [01;31m[KFreeRTOS[m[K TCP API in stubs/freertos_api.c

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_cancel/DNSgetHostByName_cancel_harness.c[39m

[01;32m[K     1[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K     6[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/proofs/CheckOptionsInner/CheckOptionsInner_harness.c[39m

[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    11[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K Kernel V10.4.0
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    36[m[K	* [01;31m[KFreeRTOS[m[K API DOCUMENTATION AVAILABLE ON THE [01;31m[KFreeRTOS[m[K.org WEB SITE.
[01;32m[K    37[m[K	* http://www.[01;31m[Kfreertos[m[K.org/a00110.html
[01;32m[K    37[m[K	* http://www.[01;31m[Kfreertos[m[K.org/a00110.html
[01;32m[K    40[m[K	* stack in this demo.  Constants specific to [01;31m[KFreeRTOS[m[K+TCP itself (rather than
[01;32m[K    64[m[K	#define configNUM_THREAD_LOCAL_STORAGE_POINTERS    3      /* [01;31m[KFreeRTOS[m[K+FAT requires 2 pointers if a CWD is supported. */
[01;32m[K   124[m[K	 * [01;31m[KFreeRTOS[m[K/Source/tasks.c for limitations.  configUSE_STATS_FORMATTING_FUNCTIONS
[01;32m[K   159[m[K	/* Only used when running in the [01;31m[KFreeRTOS[m[K Windows simulator.  Defines the
[01;32m[K   176[m[K	 * http://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/TCP_Echo_Clients.html,
[01;32m[K   176[m[K	 * http://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/TCP_Echo_Clients.html,
[01;32m[K   177[m[K	 * http://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/UDP_Echo_Clients.html. */
[01;32m[K   177[m[K	 * http://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/UDP_Echo_Clients.html. */
[01;32m[K   234[m[K	/* The platform that [01;31m[KFreeRTOS[m[K is running on. */

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K Kernel V10.4.0
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    30[m[K	* http://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K    30[m[K	* http://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K    52[m[K	/* Define the byte order of the target MCU (the MCU [01;31m[KFreeRTOS[m[K+TCP is executing
[01;32m[K    84[m[K	 * standard [01;31m[KFreeRTOS[m[K task priority so can take any value from 0 (the lowest
[01;32m[K    86[m[K	 * configMAX_PRIORITIES is a standard [01;31m[KFreeRTOS[m[K configuration parameter defined in
[01;32m[K    92[m[K	/* The size, in words (not bytes), of the stack allocated to the [01;31m[KFreeRTOS[m[K+TCP
[01;32m[K    93[m[K	 * task.  This setting is less important when the [01;31m[KFreeRTOS[m[K Win32 simulator is used
[01;32m[K    95[m[K	 * stack.  [01;31m[KFreeRTOS[m[K includes optional stack overflow detection, see:
[01;32m[K    96[m[K	 * http://www.[01;31m[Kfreertos[m[K.org/Stacks-and-stack-overflow-checking.html. */
[01;32m[K    96[m[K	 * http://www.[01;31m[Kfreertos[m[K.org/Stacks-and-stack-overflow-checking.html. */
[01;32m[K   107[m[K	/* If ipconfigUSE_NETWORK_EVENT_HOOK is set to 1 then [01;31m[KFreeRTOS[m[K+TCP will call the
[01;32m[K   110[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_UDP/API/vApplicationIPNetworkEventHook.shtml.
[01;32m[K   110[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_UDP/API/vApplicationIPNetworkEventHook.shtml.
[01;32m[K   128[m[K	/* If ipconfigUSE_DHCP is 1 then [01;31m[KFreeRTOS[m[K+TCP will attempt to retrieve an IP
[01;32m[K   130[m[K	 * ipconfigUSE_DHCP is 0 then [01;31m[KFreeRTOS[m[K+TCP will use a static IP address.  The
[01;32m[K   199[m[K	/* A [01;31m[KFreeRTOS[m[K queue is used to send events from application tasks to the IP

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    11[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */
[01;32m[K    22[m[K	 * This is a collection of abstractions of methods in the [01;31m[KFreeRTOS[m[K TCP
[01;32m[K    30[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/socket.html
[01;32m[K    30[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/socket.html
[01;32m[K    46[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/setsockopt.html
[01;32m[K    46[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/setsockopt.html
[01;32m[K    64[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/close.html
[01;32m[K    64[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/close.html
[01;32m[K    76[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/bind.html
[01;32m[K    76[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/bind.html
[01;32m[K    92[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/inet_addr.html
[01;32m[K    92[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/inet_addr.html
[01;32m[K   104[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/recvfrom.html
[01;32m[K   104[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/recvfrom.html
[01;32m[K   177[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/sendto.html
[01;32m[K   177[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/sendto.html
[01;32m[K   198[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_UDP/API/FreeRTOS_GetUDPPayloadBuffer.html
[01;32m[K   198[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_UDP/API/FreeRTOS_GetUDPPayloadBuffer.html
[01;32m[K   219[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/FreeRTOS_ReleaseUDPPayloadBuffer.html
[01;32m[K   219[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/FreeRTOS_ReleaseUDPPayloadBuffer.html
[01;32m[K   235[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/pxGetNetworkBufferWithDescriptor.html
[01;32m[K   235[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/pxGetNetworkBufferWithDescriptor.html
[01;32m[K   306[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/vReleaseNetworkBufferAndDescriptor.html
[01;32m[K   306[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/vReleaseNetworkBufferAndDescriptor.html
[01;32m[K   324[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/FreeRTOS_GetAddressConfiguration.html
[01;32m[K   324[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/FreeRTOS_GetAddressConfiguration.html
[01;32m[K   357[m[K	 * application but are invoked by the [01;31m[KFreeRTOS[m[K API.
[01;32m[K   362[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/vApplicationIPNetworkEventHook.html
[01;32m[K   362[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/API/vApplicationIPNetworkEventHook.html
[01;32m[K   371[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K   371[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K   384[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Porting.html#xNetworkInterfaceOutput
[01;32m[K   384[m[K	 * https://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Porting.html#xNetworkInterfaceOutput

[1;34m./test/cbmc/include/cbmc.h[39m

[01;32m[K     5[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    10[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    30[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    36[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */
[01;32m[K   296[m[K			By default it points to the [01;31m[KFreeRTOS[m[K function 'pvPortMalloc()'. */

[1;34m./tools/tcp_mem_stats.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    27[m[K	 * Used to create a CSV file with detaild information about the memory usage of [01;31m[KFreeRTOS[m[K+TCP.
[01;32m[K    36[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    40[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    38[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    42[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */
[01;32m[K    55[m[K	/* There is a stream buffer between the [01;31m[KFreeRTOS[m[K tasks sending network packets,
[01;32m[K    92[m[K	/* A stream buffer between the [01;31m[KFreeRTOS[m[K tasks and the Windows thread. */
[01;32m[K   138[m[K		"/* [01;31m[KFreeRTOS[m[K includes. */\n"
[01;32m[K   222[m[K		/* This function shall be called from a normal [01;31m[KFreeRTOS[m[K task only. */
[01;32m[K   257[m[K		/* This is a Windows thread, not a [01;31m[KFreeRTOS[m[K task. [01;31m[KFreeRTOS[m[K API's may not be called. */

[1;34m./FreeRTOS_Stream_Buffer.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    34[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    30[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html
[01;32m[K    30[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html
[01;32m[K    37[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    43[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    22[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    32[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html
[01;32m[K    32[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html
[01;32m[K    44[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    49[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */
[01;32m[K   116[m[K				in [01;31m[KFreeRTOS[m[K+Trace.  */

[1;34m./portable/NetworkInterface/SH2A/NetworkInterface.c[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    35[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    32[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    38[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K    48[m[K	/* [01;31m[KFreeRTOS[m[K includes. */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.0.11
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    26[m[K	/* ========================= [01;31m[KFreeRTOS[m[K includes ============================== */
[01;32m[K    32[m[K	/* ========================= [01;31m[KFreeRTOS[m[K+TCP includes ========================== */
[01;32m[K   153[m[K		are placed in the thread safe buffer used to pass data between the [01;31m[KFreeRTOS[m[K
[01;32m[K   203[m[K		/* The buffer used to pass data to be transmitted from a [01;31m[KFreeRTOS[m[K task to
[01;32m[K   222[m[K			via the pcap library to the [01;31m[KFreeRTOS[m[K task. */
[01;32m[K   488[m[K	 *        and one [01;31m[KFreeRTOS[m[K thread that will simulate an interrupt
[01;32m[K   553[m[K	 * @brief Create the buffers used to pass packets between the [01;31m[KFreeRTOS[m[K simulator
[01;32m[K   554[m[K	 *        and the pthreads that are handling pcap as well as the [01;31m[KFreeRTOS[m[K task
[01;32m[K   620[m[K	 * @warning this is called from a Linux thread, do not attempt any [01;31m[KFreeRTOS[m[K calls
[01;32m[K   632[m[K		/* Pass data to the [01;31m[KFreeRTOS[m[K simulator on a thread safe circular buffer. */
[01;32m[K   645[m[K	 * @warning this is called from a Linux thread, do not attempt any [01;31m[KFreeRTOS[m[K calls
[01;32m[K   683[m[K	 * @warning this is called from a Linux thread, do not attempt any [01;31m[KFreeRTOS[m[K calls
[01;32m[K   693[m[K		/* disable signals to avoid treating this thread as a [01;31m[KFreeRTOS[m[K task and puting
[01;32m[K   705[m[K			used to pass data from the [01;31m[KFreeRTOS[m[K simulator into this pthread?*/
[01;32m[K   725[m[K	 * @brief [01;31m[KFreeRTOS[m[K infinite loop thread that simulates a network interrupt to notify the
[01;32m[K   745[m[K			handles pacap Rx into the [01;31m[KFreeRTOS[m[K simulator contain another packet? */

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K V202002.00
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    31[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    37[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */
[01;32m[K    73[m[K	http://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html */
[01;32m[K    73[m[K	http://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html */

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K V202002.00
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    50[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    55[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K V202002.00
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    31[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */
[01;32m[K    78[m[K		The [01;31m[KFreeRTOS[m[K+TCP port is using a fixed 'topology', which is declared in
[01;32m[K    86[m[K		The [01;31m[KFreeRTOS[m[K+TCP port does not make use of "src/xemacps_bdring.c".
[01;32m[K   175[m[K		/* In this port for [01;31m[KFreeRTOS[m[K+TCP, the EMAC interrupts will only set a bit in
[01;32m[K   358[m[K		/* This [01;31m[KFreeRTOS[m[K+TCP driver shall be compiled with the option

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_hw.c[39m

[01;32m[K    25[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    30[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_physpeed.c[39m

[01;32m[K    56[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    62[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    30[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    35[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */
[01;32m[K    65[m[K	 * Windows threads that are outside of the control of the [01;31m[KFreeRTOS[m[K simulator are
[01;32m[K    97[m[K	 * Create the buffers that are used to pass data between the [01;31m[KFreeRTOS[m[K simulator
[01;32m[K   169[m[K		/* The buffer used to pass data to be transmitted from a [01;31m[KFreeRTOS[m[K task to
[01;32m[K   180[m[K		via the WinPCAP library to the [01;31m[KFreeRTOS[m[K task. */
[01;32m[K   199[m[K		are placed in the thread safe buffer used to pass data between the [01;31m[KFreeRTOS[m[K
[01;32m[K   395[m[K		/* Create the buffers used to pass packets between the [01;31m[KFreeRTOS[m[K simulator
[01;32m[K   413[m[K			/* Use the cores that are not used by the [01;31m[KFreeRTOS[m[K tasks. */
[01;32m[K   425[m[K			/* Use the cores that are not used by the [01;31m[KFreeRTOS[m[K tasks. */
[01;32m[K   441[m[K		/* THIS IS CALLED FROM A WINDOWS THREAD - DO NOT ATTEMPT ANY [01;31m[KFREERTOS[m[K CALLS
[01;32m[K   444[m[K		/* Pass data to the [01;31m[KFreeRTOS[m[K simulator on a thread safe circular buffer. */
[01;32m[K   463[m[K		/* THIS IS A WINDOWS THREAD - DO NOT ATTEMPT ANY [01;31m[KFREERTOS[m[K CALLS	OR TO PRINT
[01;32m[K   480[m[K		/* THIS IS A WINDOWS THREAD - DO NOT ATTEMPT ANY [01;31m[KFREERTOS[m[K CALLS	OR TO PRINT
[01;32m[K   492[m[K			used to pass data from the [01;31m[KFreeRTOS[m[K simulator into this Win32 thread? */
[01;32m[K   551[m[K			handles WinPCAP Rx into the [01;31m[KFreeRTOS[m[K simulator contain another packet? */

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K    15[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    21[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./portable/NetworkInterface/mw300_rd/NetworkInterface.c[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    26[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    30[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */
[01;32m[K    32[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_wifi.c[39m

[01;32m[K     5[m[K	*   Network Interface file for [01;31m[KFreeRTOS[m[K-Plus-TCP stack
[01;32m[K     8[m[K	*   - Interfaces PIC32 to the [01;31m[KFreeRTOS[m[K TCP/IP stack
[01;32m[K    67[m[K	    /* [01;31m[KFreeRTOS[m[K implementation functions */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K     5[m[K	*   Network Interface file for [01;31m[KFreeRTOS[m[K-Plus-TCP stack
[01;32m[K     8[m[K	*   - Interfaces PIC32 to the [01;31m[KFreeRTOS[m[K TCP/IP stack
[01;32m[K   128[m[K	    /* memory allocation mapping to [01;31m[KFreeRTOS[m[K */
[01;32m[K   173[m[K	    /* cannot use the system_init.c::tcpipHeapConfig because [01;31m[KFreeRTOS[m[K does not have a calloc function! */
[01;32m[K   176[m[K	    /* make sure we're running with external heap! Redirect to [01;31m[KFreeRTOS[m[K. */
[01;32m[K   211[m[K	    /* [01;31m[KFreeRTOS[m[K implementation functions */
[01;32m[K   328[m[K	        /* if something failed, the routine will be called again and again by [01;31m[KFreeRTOS[m[K! */
[01;32m[K   363[m[K	            /* Set the mac address in the [01;31m[KFreeRTOS[m[K+TCP stack. */
[01;32m[K   728[m[K	            { /* no support in [01;31m[KFreeRTOS[m[K for multi segment packets! */
[01;32m[K   733[m[K	            /* but [01;31m[KFreeRTOS[m[K needs the whole frame! */

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP Labs Build 160919 (C) 2016 Real Time Engineers ltd.
[01;32m[K     9[m[K	 ***   [01;31m[KFREERTOS[m[K+TCP IS STILL IN THE LAB (mainly because the FTP and HTTP     ***
[01;32m[K    10[m[K	 ***   demos have a dependency on [01;31m[KFreeRTOS[m[K+FAT, which is only in the Labs    ***
[01;32m[K    13[m[K	 ***   [01;31m[KFreeRTOS[m[K+TCP is functional and has been used in commercial products   ***
[01;32m[K    20[m[K	 ***   URL: http://www.[01;31m[KFreeRTOS[m[K.org/contact  Active early adopters may, at   ***
[01;32m[K    20[m[K	 ***   URL: http://www.[01;31m[KFreeRTOS[m[K.org/contact  Active early adopters may, at   ***
[01;32m[K    28[m[K	 * [01;31m[KFreeRTOS[m[K+TCP can be used under two different free open source licenses.  The
[01;32m[K    29[m[K	 * license that applies is dependent on the processor on which [01;31m[KFreeRTOS[m[K+TCP is
[01;32m[K    32[m[K	 * If [01;31m[KFreeRTOS[m[K+TCP is executed on one of the processors listed under the Special
[01;32m[K    33[m[K	 * License Arrangements heading of the [01;31m[KFreeRTOS[m[K+TCP license information web
[01;32m[K    34[m[K	 * page, then it can be used under the terms of the [01;31m[KFreeRTOS[m[K Open Source
[01;32m[K    35[m[K	 * License.  If [01;31m[KFreeRTOS[m[K+TCP is used on any other processor, then it can be used
[01;32m[K    39[m[K	 * The [01;31m[KFreeRTOS[m[K+TCP License Information Page: http://www.[01;31m[KFreeRTOS[m[K.org/tcp_license
[01;32m[K    39[m[K	 * The [01;31m[KFreeRTOS[m[K+TCP License Information Page: http://www.[01;31m[KFreeRTOS[m[K.org/tcp_license
[01;32m[K    40[m[K	 * The [01;31m[KFreeRTOS[m[K Open Source License: http://www.[01;31m[KFreeRTOS[m[K.org/license
[01;32m[K    40[m[K	 * The [01;31m[KFreeRTOS[m[K Open Source License: http://www.[01;31m[KFreeRTOS[m[K.org/license
[01;32m[K    41[m[K	 * The GNU General Public License Version 2: http://www.[01;31m[KFreeRTOS[m[K.org/gpl-2.0.txt
[01;32m[K    41[m[K	 * The GNU General Public License Version 2: http://www.[01;31m[KFreeRTOS[m[K.org/gpl-2.0.txt
[01;32m[K    43[m[K	 * [01;31m[KFreeRTOS[m[K+TCP is distributed in the hope that it will be useful.  You cannot
[01;32m[K    44[m[K	 * use [01;31m[KFreeRTOS[m[K+TCP unless you agree that you use the software 'as is'.
[01;32m[K    45[m[K	 * [01;31m[KFreeRTOS[m[K+TCP is provided WITHOUT ANY WARRANTY; without even the implied
[01;32m[K    52[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    52[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    53[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/plus
[01;32m[K    53[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/plus
[01;32m[K    54[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/labs
[01;32m[K    54[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/labs
[01;32m[K    62[m[K	* http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html
[01;32m[K    62[m[K	* http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html
[01;32m[K    73[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    78[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */
[01;32m[K   143[m[K	    /*      - 4 bytes pointer to the network descriptor ([01;31m[KFreeRTOS[m[K) */
[01;32m[K   184[m[K	    /* this packet saves room for the [01;31m[KFreeRTOS[m[K network descriptor */
[01;32m[K   244[m[K	    /* [01;31m[KFreeRTOS[m[K allocation functions */
[01;32m[K   306[m[K	             * in [01;31m[KFreeRTOS[m[K+Trace.  */

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    31[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    37[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K    49[m[K	/* [01;31m[KFreeRTOS[m[K includes. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K    50[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K   415[m[K		/* Note: [01;31m[KFreeRTOS[m[K+TCP wants to have this offset set to 2 bytes */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    31[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    37[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K    54[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    61[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */
[01;32m[K   400[m[K		/* Note: [01;31m[KFreeRTOS[m[K+TCP wants to have this offset set to 2 bytes */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    31[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    37[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */
[01;32m[K   145[m[K	 * Delay function passed into the library.  The implementation uses [01;31m[KFreeRTOS[m[K

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    26[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    33[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */
[01;32m[K    73[m[K	http://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html */
[01;32m[K    73[m[K	http://www.[01;31m[Kfreertos[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html */
[01;32m[K   161[m[K	        /* It is assumed SendData() copies the data out of the [01;31m[KFreeRTOS[m[K+TCP Ethernet

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K     7[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    27[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    27[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    28[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    28[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    36[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    42[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./portable/NetworkInterface/board_family/NetworkInterface.c[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    26[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    30[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./portable/NetworkInterface/esp32/NetworkInterface.c[39m

[01;32m[K    20[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    26[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K    23[m[K	* Description  : Interfaces [01;31m[KFreeRTOS[m[K TCP/IP stack to RX Ethernet driver.
[01;32m[K    39[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K   174[m[K	     * data from the [01;31m[KFreeRTOS[m[K+TCP buffer into the peripheral driver's own buffer.
[01;32m[K   196[m[K	        /* It is assumed SendData() copies the data out of the [01;31m[KFreeRTOS[m[K+TCP Ethernet

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    38[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./portable/Compiler/Keil/pack_struct_start.h[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/Keil/pack_struct_end.h[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/Renesas/pack_struct_start.h[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/Renesas/pack_struct_end.h[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/GCC/pack_struct_start.h[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/GCC/pack_struct_end.h[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/MSVC/pack_struct_start.h[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/MSVC/pack_struct_end.h[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/CompilerName/pack_struct_start.h[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/CompilerName/pack_struct_end.h[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/IAR/pack_struct_start.h[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/IAR/pack_struct_end.h[39m

[01;32m[K     2[m[K	[01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    30[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    36[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    31[m[K	/* [01;31m[KFreeRTOS[m[K includes. */
[01;32m[K    37[m[K	/* [01;31m[KFreeRTOS[m[K+TCP includes. */
[01;32m[K  2616[m[K			/* When setting up and testing a project with [01;31m[KFreeRTOS[m[K+TCP, it is

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org

[1;34m./include/FreeRTOS_errno_TCP.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    29[m[K	/* The following definitions will be included in the core [01;31m[KFreeRTOS[m[K code in
[01;32m[K    30[m[K	future versions of [01;31m[KFreeRTOS[m[K - hence the 'pd' (ProjDefs) prefix - at which time
[01;32m[K    33[m[K	/* The following errno values are used by [01;31m[KFreeRTOS[m[K+ components, not [01;31m[KFreeRTOS[m[K
[01;32m[K    81[m[K		/* The following endian values are used by [01;31m[KFreeRTOS[m[K+ components, not [01;31m[KFreeRTOS[m[K

[1;34m./include/NetworkInterface.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K   257[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/FreeRTOS_TCP_API_Functions.html
[01;32m[K   257[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/FreeRTOS_TCP_API_Functions.html

[1;34m./include/NetworkBufferManagement.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org

[1;34m./include/tcp_dump_packets.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    51[m[K		#ifndef TASK_H /* For compatibility with older [01;31m[KFreeRTOS[m[K versions. */
[01;32m[K    60[m[K	/* API function error values.  As errno is supported, the [01;31m[KFreeRTOS[m[K sockets
[01;32m[K   218[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/FreeRTOS_TCP_API_Functions.html
[01;32m[K   218[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/FreeRTOS_TCP_API_Functions.html

[1;34m./include/IPTraceMacroDefaults.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    28[m[K	http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/TCP_IP_Trace.html */
[01;32m[K    28[m[K	http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/TCP_IP_Trace.html */

[1;34m./include/FreeRTOS_TCP_IP.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    28[m[K	 *  Module which handles the TCP windowing schemes for [01;31m[KFreeRTOS[m[K-PLUS-TCP
[01;32m[K   156[m[K	/* Clean up allocated segments. Should only be called when [01;31m[KFreeRTOS[m[K+TCP will no longer be used. */

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org

[1;34m./include/tcp_mem_stats.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org

[1;34m./include/FreeRTOS_UDP_IP.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    22[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    31[m[K	/* The error numbers defined in this file will be moved to the core [01;31m[KFreeRTOS[m[K
[01;32m[K    32[m[K	code in future versions of [01;31m[KFreeRTOS[m[K - at which time the following header file
[01;32m[K   132[m[K		#error ipconfigDHCP_USES_USER_HOOK and its associated callback have been superceeded - see http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html#ipconfigUSE_DHCP_HOOK
[01;32m[K   185[m[K	 * [01;31m[KFreeRTOS[m[K debug logging routine (proposal)
[01;32m[K   208[m[K	 * [01;31m[KFreeRTOS[m[K general logging routine (proposal)
[01;32m[K   237[m[K	/* Malloc functions. Within most applications of [01;31m[KFreeRTOS[m[K, the couple

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K     2[m[K	 * [01;31m[KFreeRTOS[m[K+TCP V2.2.1
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    22[m[K	 * http://aws.amazon.com/[01;31m[Kfreertos[m[K
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    23[m[K	 * http://www.[01;31m[KFreeRTOS[m[K.org
[01;32m[K    97[m[K		http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html#ipconfigUSE_DHCP_HOOK
[01;32m[K    97[m[K		http://www.[01;31m[KFreeRTOS[m[K.org/[01;31m[KFreeRTOS[m[K-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html#ipconfigUSE_DHCP_HOOK

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K    88[m[K	 * [01;31m[KFreeRTOSConfig[m[K.h, not FreeRTOSIPConfig.h. Consideration needs to be given as to

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K    87[m[K	 * [01;31m[KFreeRTOSConfig[m[K.h, not FreeRTOSIPConfig.h. Consideration needs to be given as to

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   227[m[K	[01;31m[KFreeRTOSConfig[m[K.h as configMINIMAL_STACK_SIZE is a user definable constant. */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   451[m[K	 *	       set by the configNETWORK_INTERFACE_TO_USE constant in [01;31m[KFreeRTOSConfig[m[K.h

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K    85[m[K	[01;31m[KFreeRTOSConfig[m[K.h as configMINIMAL_STACK_SIZE is a user definable constant. */

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K    79[m[K	 * by the configNETWORK_INTERFACE_TO_USE constant in [01;31m[KFreeRTOSConfig[m[K.h.
[01;32m[K   131[m[K	/* The MAC address initially set to the constants defined in [01;31m[KFreeRTOSConfig[m[K.h. */
[01;32m[K   149[m[K		set by the configNETWORK_INTERFACE_TO_USE constant in [01;31m[KFreeRTOSConfig[m[K.h.

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K   360[m[K	             * [01;31m[KFreeRTOSConfig[m[K.h and therefore it will be initialized to the

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K    87[m[K	[01;31m[KFreeRTOSConfig[m[K.h as configMINIMAL_STACK_SIZE is a user definable constant. */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K    86[m[K	[01;31m[KFreeRTOSConfig[m[K.h as configMINIMAL_STACK_SIZE is a user definable constant. */

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K    54[m[K	[01;31m[KFreeRTOSConfig[m[K.h as configMINIMAL_STACK_SIZE is a user definable constant. */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   128[m[K	[01;31m[KFreeRTOSConfig[m[K.h as configMINIMAL_STACK_SIZE is a user definable constant. */

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K   221[m[K			set to 0 in [01;31m[KFreeRTOSConfig[m[K.h. */

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   140[m[K	    /*  - the [01;31m[KFreeRTOSIP[m[K (NetworkBufferDescriptor_t->pucEthernetBuffer) */
[01;32m[K   247[m[K	    /*  - the [01;31m[KFreeRTOSIP[m[K (NetworkBufferDescriptor_t->pucEthernetBuffer) */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K    88[m[K	 * FreeRTOSConfig.h, not [01;31m[KFreeRTOSIPConfig[m[K.h. Consideration needs to be given as to

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K    37[m[K	from the [01;31m[KFreeRTOSIPConfig[m[K.h configuration header file. */

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K    41[m[K	* the demo) are contained in [01;31m[KFreeRTOSIPConfig[m[K.h.

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K    87[m[K	 * FreeRTOSConfig.h, not [01;31m[KFreeRTOSIPConfig[m[K.h. Consideration needs to be given as to

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K    61[m[K	number then, depending on the [01;31m[KFreeRTOSIPConfig[m[K.h settings, it might be that a
[01;32m[K  1422[m[K					in [01;31m[KFreeRTOSIPConfig[m[K.h (assuming an official configuration file

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K    47[m[K	Users can change their values in the project's '[01;31m[KFreeRTOSIPConfig[m[K.h'. */

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K   141[m[K				if( pxNetworkBuffer->xDataLength < EMAC_ETH_MAX_FLEN ) /*_RB_ The size needs to come from [01;31m[KFreeRTOSIPConfig[m[K.h. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   831[m[K		[01;31m[KFreeRTOSIPConfig[m[K.h header file is being used). */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   261[m[K	/* Only used when outgoing fragmentation is being used ([01;31m[KFreeRTOSIPConfig[m[K.h

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K    37[m[K	from the [01;31m[KFreeRTOSIPConfig[m[K.h configuration header file. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K   219[m[K	/* Also defined in [01;31m[KFreeRTOSIPConfigDefaults[m[K.h. */

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K   224[m[K	/* Also defined in [01;31m[KFreeRTOSIPConfigDefaults[m[K.h. */

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K    46[m[K	included in '[01;31m[KFreeRTOSIPConfigDefaults[m[K.h'.

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3973[m[K		/* Send a signal to the task which reads from this socket ([01;31m[KFromISR[m[K version). */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   246[m[K		/* Send a signal to the task which reads from this socket ([01;31m[KFromISR[m[K

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   657[m[K	  ETH_DMADescTypeDef *[01;31m[KFSRxDesc[m[K;          /*!< First Segment Rx Desc */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1249[m[K	    /* Set the [01;31m[KFUF[m[K bit according to ETH ForwardUndersizedGoodFrames value */

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_cancel/DNSgetHostByName_cancel_harness.c[39m

[01;32m[K    32[m[K	/* The function [01;31m[Kfunc[m[K mimics the callback function.*/ 

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K   230[m[K	/* Pseudo random number [01;31m[Kgenerater[m[K used by some demo tasks. */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   531[m[K	 as [01;31m[Kgethostbyname[m[K() may be called from different threads */

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K   108[m[K		 * Asynchronous version of [01;31m[Kgethostbyname[m[K()
[01;32m[K   119[m[K	 * [01;31m[Kgethostbyname[m[K() is already deprecated.

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K   261[m[K	          * actual number of times [01;31m[KGetNetworkBuffer[m[K should be allowed to

[1;34m./test/cbmc/proofs/DHCP/DHCPProcess/DHCPProcess_harness.c[39m

[01;32m[K    80[m[K	     * [01;31m[KGetNetworkBufferWithDescriptor[m[K can fail.

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   508[m[K					/* See PR #53 on [01;31m[Kgithub[m[K/freertos/freertos */

[1;34m./test/cbmc/proofs/DNS/DNSHandlePacket/DNShandlePacket_harness.c[39m

[01;32m[K    11[m[K	The proof can be found here: https://[01;31m[Kgithub[m[K.com/aws/amazon-freertos/tree/master/tools/cbmc/proofs/ParseDNSReply */
[01;32m[K    11[m[K	The proof can be found here: https://[01;31m[Kgithub[m[K.com/aws/amazon-freertos/tree/master/tools/cbmc/proofs/ParseDNSReply */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   300[m[K	 * A deferred interrupt handler task that processes [01;31m[KGMAC[m[K interrupts.

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K   222[m[K	 * The [01;31m[KGMAC[m[K peripheral pins are configured after the reset is done.
[01;32m[K   224[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   226[m[K	 * \param ul_mck [01;31m[KGMAC[m[K MCK.
[01;32m[K   234[m[K	 * \brief Get the Link & speed settings, and automatically set up the [01;31m[KGMAC[m[K with the
[01;32m[K   237[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   250[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   260[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K    45[m[K	/*_RB_ The SAM4E portable layer has three different header files called [01;31m[Kgmac[m[K.h! */
[01;32m[K   104[m[K	 * Called from the ASF [01;31m[KGMAC[m[K driver.
[01;32m[K   110[m[K	 * A deferred interrupt handler task that processes [01;31m[KGMAC[m[K interrupts.
[01;32m[K   115[m[K	 * Initialise the ASF [01;31m[KGMAC[m[K driver.
[01;32m[K   143[m[K	/* The [01;31m[KGMAC[m[K object as defined by the ASF drivers. */
[01;32m[K   165[m[K	 * [01;31m[KGMAC[m[K interrupt handler.
[01;32m[K   332[m[K		/* The [01;31m[KGMAC[m[K driver will call a hook prvRxCallback(), which

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K     4[m[K	 * \brief [01;31m[KGMAC[m[K (Ethernet MAC) driver for SAM.
[01;32m[K    58[m[K	    last few bits are zero.  These bits have special meaning for the [01;31m[KGMAC[m[K
[01;32m[K    99[m[K	/** [01;31m[KGMAC[m[K clock speed */
[01;32m[K   107[m[K	/** [01;31m[KGMAC[m[K maintain code default value*/
[01;32m[K   110[m[K	/** [01;31m[KGMAC[m[K maintain start of frame default value*/
[01;32m[K   113[m[K	/** [01;31m[KGMAC[m[K maintain read/write*/
[01;32m[K   116[m[K	/** [01;31m[KGMAC[m[K maintain read only*/
[01;32m[K   119[m[K	/** [01;31m[KGMAC[m[K address length */
[01;32m[K   130[m[K	 * \brief Return codes for [01;31m[KGMAC[m[K APIs.
[01;32m[K   134[m[K		GMAC_TIMEOUT = 1,    /** 1  [01;31m[KGMAC[m[K operation timeout */
[01;32m[K   157[m[K				uint32_t b_ownership:1, /**< User clear, [01;31m[KGMAC[m[K sets this to 1 once it has successfully written a frame to memory */
[01;32m[K   204[m[K				b_used:1;            /** 31     User clear, [01;31m[KGMAC[m[K sets this to 1 once a frame has been successfully transmitted */
[01;32m[K   212[m[K	 * \brief Input parameters when initializing the [01;31m[Kgmac[m[K module mode.
[01;32m[K   229[m[K	 * [01;31m[KGMAC[m[K driver structure.
[01;32m[K   277[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   288[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   297[m[K	 * \brief Enable/Disable [01;31m[KGMAC[m[K receive.
[01;32m[K   299[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   300[m[K	 * \param uc_enable   0 to disable [01;31m[KGMAC[m[K receiver, else to enable it.
[01;32m[K   312[m[K	 * \brief Enable/Disable [01;31m[KGMAC[m[K transmit.
[01;32m[K   314[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   315[m[K	 * \param uc_enable   0 to disable [01;31m[KGMAC[m[K transmit, else to enable it.
[01;32m[K   327[m[K	 * \brief Enable/Disable [01;31m[KGMAC[m[K management.
[01;32m[K   329[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   330[m[K	 * \param uc_enable   0 to disable [01;31m[KGMAC[m[K management, else to enable it.
[01;32m[K   344[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   354[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   364[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   380[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   395[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   405[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   415[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   425[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   435[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   445[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   460[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   475[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   485[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   495[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   506[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   530[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   545[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   560[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   575[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   590[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   605[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   620[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   635[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   636[m[K	 * \param ul_mck   [01;31m[KGMAC[m[K MCK.
[01;32m[K   667[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   668[m[K	 * \param uc_enable   0 to disable the [01;31m[KGMAC[m[K receiver, else to enable it.
[01;32m[K   682[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   697[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   708[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   723[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   740[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   755[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   770[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   782[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   794[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   806[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   818[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   829[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   839[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   850[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   861[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   873[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   884[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   896[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   907[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   918[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   930[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   942[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   966[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   981[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   995[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1007[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1008[m[K	 * \param uc_index  [01;31m[KGMAC[m[K specific address register index.
[01;32m[K  1009[m[K	 * \param p_mac_addr  [01;31m[KGMAC[m[K address.
[01;32m[K  1025[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1026[m[K	 * \param uc_index  [01;31m[KGMAC[m[K specific address register index.
[01;32m[K  1027[m[K	 * \param ul_mac_top  [01;31m[KGMAC[m[K top address.
[01;32m[K  1028[m[K	 * \param ul_mac_bottom  [01;31m[KGMAC[m[K bottom address.
[01;32m[K  1040[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1041[m[K	 * \param uc_index  [01;31m[KGMAC[m[K specific address register index.
[01;32m[K  1042[m[K	 * \param ull_mac  64-bit [01;31m[KGMAC[m[K address.
[01;32m[K  1054[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1098[m[K	 * \page gmac_quickstart Quickstart guide for [01;31m[KGMAC[m[K driver.
[01;32m[K  1109[m[K	 * In the basic use case, the [01;31m[KGMAC[m[K driver are configured for:
[01;32m[K  1111[m[K	 * - [01;31m[KGMAC[m[K uses MII mode
[01;32m[K  1120[m[K	 * - [01;31m[KGMAC[m[K is configured to not support copy all frame and support broadcast
[01;32m[K  1158[m[K	 * A specific [01;31m[Kgmac[m[K device and the receive data buffer must be defined; another ul_frm_size should be defined
[01;32m[K  1180[m[K	 *       gs_gmac_dev.p_hw = [01;31m[KGMAC[m[K;
[01;32m[K  1182[m[K	 *       gmac_dev_init([01;31m[KGMAC[m[K, &gs_gmac_dev, &gmac_option);
[01;32m[K  1186[m[K	 *       ethernet_phy_init([01;31m[KGMAC[m[K, BOARD_GMAC_PHY_ADDR, sysclk_get_cpu_hz());
[01;32m[K  1188[m[K	 *       ethernet_phy_auto_negotiate([01;31m[KGMAC[m[K, BOARD_GMAC_PHY_ADDR);
[01;32m[K  1190[m[K	 *       ethernet_phy_set_link([01;31m[KGMAC[m[K, BOARD_GMAC_PHY_ADDR, 1);
[01;32m[K  1197[m[K	 * -# Define the receiving buffer size used in the internal [01;31m[KGMAC[m[K driver.
[01;32m[K  1207[m[K	 * -# Define the transmitting buffer size used in the internal [01;31m[KGMAC[m[K driver.
[01;32m[K  1248[m[K	 * -# Enable PIO configurations for [01;31m[KGMAC[m[K:
[01;32m[K  1250[m[K	 * -# Enable PMC clock for [01;31m[KGMAC[m[K:
[01;32m[K  1252[m[K	 * -# Set the [01;31m[KGMAC[m[K options; it's set to copy all frame and support broadcast:
[01;32m[K  1257[m[K	 *         gs_gmac_dev.p_hw = [01;31m[KGMAC[m[K;
[01;32m[K  1259[m[K	 * -# Initialize [01;31m[KGMAC[m[K device with the filled option:
[01;32m[K  1261[m[K	 *         gmac_dev_init([01;31m[KGMAC[m[K, &gs_gmac_dev, &gmac_option);
[01;32m[K  1263[m[K	 * -# Enable the interrupt service for [01;31m[KGMAC[m[K:
[01;32m[K  1269[m[K	 *         ethernet_phy_init([01;31m[KGMAC[m[K, BOARD_GMAC_PHY_ADDR, sysclk_get_cpu_hz());
[01;32m[K  1273[m[K	 *         ethernet_phy_auto_negotiate([01;31m[KGMAC[m[K, BOARD_GMAC_PHY_ADDR);
[01;32m[K  1277[m[K	 *         ethernet_phy_set_link([01;31m[KGMAC[m[K, BOARD_GMAC_PHY_ADDR, 1);
[01;32m[K  1297[m[K		frequencies of 	[01;31m[KGMAC[m[K interrupts. */

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K    57[m[K	/** \brief [01;31m[KGmac[m[K hardware registers */
[01;32m[K    60[m[K	  RwReg   GMAC_NCR;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x000) Network Control Register */
[01;32m[K    61[m[K	  RwReg   GMAC_NCFGR;      /**< \brief ([01;31m[KGmac[m[K Offset: 0x004) Network Configuration Register */
[01;32m[K    62[m[K	  RoReg   GMAC_NSR;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x008) Network Status Register */
[01;32m[K    63[m[K	  RwReg   GMAC_UR;         /**< \brief ([01;31m[KGmac[m[K Offset: 0x00C) User Register */
[01;32m[K    64[m[K	  RwReg   GMAC_DCFGR;      /**< \brief ([01;31m[KGmac[m[K Offset: 0x010) DMA Configuration Register */
[01;32m[K    65[m[K	  RwReg   GMAC_TSR;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x014) Transmit Status Register */
[01;32m[K    66[m[K	  RwReg   GMAC_RBQB;       /**< \brief ([01;31m[KGmac[m[K Offset: 0x018) Receive Buffer Queue Base Address */
[01;32m[K    67[m[K	  RwReg   GMAC_TBQB;       /**< \brief ([01;31m[KGmac[m[K Offset: 0x01C) Transmit Buffer Queue Base Address */
[01;32m[K    68[m[K	  RwReg   GMAC_RSR;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x020) Receive Status Register */
[01;32m[K    69[m[K	  RoReg   GMAC_ISR;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x024) Interrupt Status Register */
[01;32m[K    70[m[K	  WoReg   GMAC_IER;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x028) Interrupt Enable Register */
[01;32m[K    71[m[K	  WoReg   GMAC_IDR;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x02C) Interrupt Disable Register */
[01;32m[K    72[m[K	  RoReg   GMAC_IMR;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x030) Interrupt Mask Register */
[01;32m[K    73[m[K	  RwReg   GMAC_MAN;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x034) PHY Maintenance Register */
[01;32m[K    74[m[K	  RoReg   GMAC_RPQ;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x038) Received Pause Quantum Register */
[01;32m[K    75[m[K	  RwReg   GMAC_TPQ;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x03C) Transmit Pause Quantum Register */
[01;32m[K    76[m[K	  RwReg   GMAC_TPSF;       /**< \brief ([01;31m[KGmac[m[K Offset: 0x040) TX Partial Store and Forward Register */
[01;32m[K    77[m[K	  RwReg   GMAC_RPSF;       /**< \brief ([01;31m[KGmac[m[K Offset: 0x044) RX Partial Store and Forward Register */
[01;32m[K    79[m[K	  RwReg   GMAC_HRB;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x080) Hash Register Bottom [31:0] */
[01;32m[K    80[m[K	  RwReg   GMAC_HRT;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x084) Hash Register Top [63:32] */
[01;32m[K    81[m[K	  GmacSa  GMAC_SA[GMACSA_NUMBER]; /**< \brief ([01;31m[KGmac[m[K Offset: 0x088) 1 .. 4 */
[01;32m[K    82[m[K	  RwReg   GMAC_TIDM[4];    /**< \brief ([01;31m[KGmac[m[K Offset: 0x0A8) Type ID Match 1 Register */
[01;32m[K    83[m[K	  RwReg   GMAC_WOL;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x0B8) Wake on LAN Register */
[01;32m[K    84[m[K	  RwReg   GMAC_IPGS;       /**< \brief ([01;31m[KGmac[m[K Offset: 0x0BC) IPG Stretch Register */
[01;32m[K    85[m[K	  RwReg   GMAC_SVLAN;      /**< \brief ([01;31m[KGmac[m[K Offset: 0x0C0) Stacked VLAN Register */
[01;32m[K    86[m[K	  RwReg   GMAC_TPFCP;      /**< \brief ([01;31m[KGmac[m[K Offset: 0x0C4) Transmit PFC Pause Register */
[01;32m[K    87[m[K	  RwReg   GMAC_SAMB1;      /**< \brief ([01;31m[KGmac[m[K Offset: 0x0C8) Specific Address 1 Mask Bottom [31:0] Register */
[01;32m[K    88[m[K	  RwReg   GMAC_SAMT1;      /**< \brief ([01;31m[KGmac[m[K Offset: 0x0CC) Specific Address 1 Mask Top [47:32] Register */
[01;32m[K    90[m[K	  RoReg   GMAC_OTLO;       /**< \brief ([01;31m[KGmac[m[K Offset: 0x100) Octets Transmitted [31:0] Register */
[01;32m[K    91[m[K	  RoReg   GMAC_OTHI;       /**< \brief ([01;31m[KGmac[m[K Offset: 0x104) Octets Transmitted [47:32] Register */
[01;32m[K    92[m[K	  RoReg   GMAC_FT;         /**< \brief ([01;31m[KGmac[m[K Offset: 0x108) Frames Transmitted Register */
[01;32m[K    93[m[K	  RoReg   GMAC_BCFT;       /**< \brief ([01;31m[KGmac[m[K Offset: 0x10C) Broadcast Frames Transmitted Register */
[01;32m[K    94[m[K	  RoReg   GMAC_MFT;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x110) Multicast Frames Transmitted Register */
[01;32m[K    95[m[K	  RoReg   GMAC_PFT;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x114) Pause Frames Transmitted Register */
[01;32m[K    96[m[K	  RoReg   GMAC_BFT64;      /**< \brief ([01;31m[KGmac[m[K Offset: 0x118) 64 Byte Frames Transmitted Register */
[01;32m[K    97[m[K	  RoReg   GMAC_TBFT127;    /**< \brief ([01;31m[KGmac[m[K Offset: 0x11C) 65 to 127 Byte Frames Transmitted Register */
[01;32m[K    98[m[K	  RoReg   GMAC_TBFT255;    /**< \brief ([01;31m[KGmac[m[K Offset: 0x120) 128 to 255 Byte Frames Transmitted Register */
[01;32m[K    99[m[K	  RoReg   GMAC_TBFT511;    /**< \brief ([01;31m[KGmac[m[K Offset: 0x124) 256 to 511 Byte Frames Transmitted Register */
[01;32m[K   100[m[K	  RoReg   GMAC_TBFT1023;   /**< \brief ([01;31m[KGmac[m[K Offset: 0x128) 512 to 1023 Byte Frames Transmitted Register */
[01;32m[K   101[m[K	  RoReg   GMAC_TBFT1518;   /**< \brief ([01;31m[KGmac[m[K Offset: 0x12C) 1024 to 1518 Byte Frames Transmitted Register */
[01;32m[K   102[m[K	  RoReg   GMAC_GTBFT1518;  /**< \brief ([01;31m[KGmac[m[K Offset: 0x130) Greater Than 1518 Byte Frames Transmitted Register */
[01;32m[K   103[m[K	  RoReg   GMAC_TUR;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x134) Transmit Under Runs Register */
[01;32m[K   104[m[K	  RoReg   GMAC_SCF;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x138) Single Collision Frames Register */
[01;32m[K   105[m[K	  RoReg   GMAC_MCF;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x13C) Multiple Collision Frames Register */
[01;32m[K   106[m[K	  RoReg   GMAC_EC;         /**< \brief ([01;31m[KGmac[m[K Offset: 0x140) Excessive Collisions Register */
[01;32m[K   107[m[K	  RoReg   GMAC_LC;         /**< \brief ([01;31m[KGmac[m[K Offset: 0x144) Late Collisions Register */
[01;32m[K   108[m[K	  RoReg   GMAC_DTF;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x148) Deferred Transmission Frames Register */
[01;32m[K   109[m[K	  RoReg   GMAC_CSE;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x14C) Carrier Sense Errors Register */
[01;32m[K   110[m[K	  RoReg   GMAC_ORLO;       /**< \brief ([01;31m[KGmac[m[K Offset: 0x150) Octets Received [31:0] Received */
[01;32m[K   111[m[K	  RoReg   GMAC_ORHI;       /**< \brief ([01;31m[KGmac[m[K Offset: 0x154) Octets Received [47:32] Received */
[01;32m[K   112[m[K	  RoReg   GMAC_FR;         /**< \brief ([01;31m[KGmac[m[K Offset: 0x158) Frames Received Register */
[01;32m[K   113[m[K	  RoReg   GMAC_BCFR;       /**< \brief ([01;31m[KGmac[m[K Offset: 0x15C) Broadcast Frames Received Register */
[01;32m[K   114[m[K	  RoReg   GMAC_MFR;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x160) Multicast Frames Received Register */
[01;32m[K   115[m[K	  RoReg   GMAC_PFR;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x164) Pause Frames Received Register */
[01;32m[K   116[m[K	  RoReg   GMAC_BFR64;      /**< \brief ([01;31m[KGmac[m[K Offset: 0x168) 64 Byte Frames Received Register */
[01;32m[K   117[m[K	  RoReg   GMAC_TBFR127;    /**< \brief ([01;31m[KGmac[m[K Offset: 0x16C) 65 to 127 Byte Frames Received Register */
[01;32m[K   118[m[K	  RoReg   GMAC_TBFR255;    /**< \brief ([01;31m[KGmac[m[K Offset: 0x170) 128 to 255 Byte Frames Received Register */
[01;32m[K   119[m[K	  RoReg   GMAC_TBFR511;    /**< \brief ([01;31m[KGmac[m[K Offset: 0x174) 256 to 511Byte Frames Received Register */
[01;32m[K   120[m[K	  RoReg   GMAC_TBFR1023;   /**< \brief ([01;31m[KGmac[m[K Offset: 0x178) 512 to 1023 Byte Frames Received Register */
[01;32m[K   121[m[K	  RoReg   GMAC_TBFR1518;   /**< \brief ([01;31m[KGmac[m[K Offset: 0x17C) 1024 to 1518 Byte Frames Received Register */
[01;32m[K   122[m[K	  RoReg   GMAC_TMXBFR;     /**< \brief ([01;31m[KGmac[m[K Offset: 0x180) 1519 to Maximum Byte Frames Received Register */
[01;32m[K   123[m[K	  RoReg   GMAC_UFR;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x184) Undersize Frames Received Register */
[01;32m[K   124[m[K	  RoReg   GMAC_OFR;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x188) Oversize Frames Received Register */
[01;32m[K   125[m[K	  RoReg   GMAC_JR;         /**< \brief ([01;31m[KGmac[m[K Offset: 0x18C) Jabbers Received Register */
[01;32m[K   126[m[K	  RoReg   GMAC_FCSE;       /**< \brief ([01;31m[KGmac[m[K Offset: 0x190) Frame Check Sequence Errors Register */
[01;32m[K   127[m[K	  RoReg   GMAC_LFFE;       /**< \brief ([01;31m[KGmac[m[K Offset: 0x194) Length Field Frame Errors Register */
[01;32m[K   128[m[K	  RoReg   GMAC_RSE;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x198) Receive Symbol Errors Register */
[01;32m[K   129[m[K	  RoReg   GMAC_AE;         /**< \brief ([01;31m[KGmac[m[K Offset: 0x19C) Alignment Errors Register */
[01;32m[K   130[m[K	  RoReg   GMAC_RRE;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x1A0) Receive Resource Errors Register */
[01;32m[K   131[m[K	  RoReg   GMAC_ROE;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x1A4) Receive Overrun Register */
[01;32m[K   132[m[K	  RoReg   GMAC_IHCE;       /**< \brief ([01;31m[KGmac[m[K Offset: 0x1A8) IP Header Checksum Errors Register */
[01;32m[K   133[m[K	  RoReg   GMAC_TCE;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x1AC) TCP Checksum Errors Register */
[01;32m[K   134[m[K	  RoReg   GMAC_UCE;        /**< \brief ([01;31m[KGmac[m[K Offset: 0x1B0) UDP Checksum Errors Register */
[01;32m[K   136[m[K	  RwReg   GMAC_TSSS;       /**< \brief ([01;31m[KGmac[m[K Offset: 0x1C8) 1588 Timer Sync Strobe Seconds Register */
[01;32m[K   137[m[K	  RwReg   GMAC_TSSN;       /**< \brief ([01;31m[KGmac[m[K Offset: 0x1CC) 1588 Timer Sync Strobe Nanoseconds Register */
[01;32m[K   138[m[K	  RwReg   GMAC_TS;         /**< \brief ([01;31m[KGmac[m[K Offset: 0x1D0) 1588 Timer Seconds Register */
[01;32m[K   139[m[K	  RwReg   GMAC_TN;         /**< \brief ([01;31m[KGmac[m[K Offset: 0x1D4) 1588 Timer Nanoseconds Register */
[01;32m[K   140[m[K	  WoReg   GMAC_TA;         /**< \brief ([01;31m[KGmac[m[K Offset: 0x1D8) 1588 Timer Adjust Register */
[01;32m[K   141[m[K	  RwReg   GMAC_TI;         /**< \brief ([01;31m[KGmac[m[K Offset: 0x1DC) 1588 Timer Increment Register */
[01;32m[K   142[m[K	  RoReg   GMAC_EFTS;       /**< \brief ([01;31m[KGmac[m[K Offset: 0x1E0) PTP Event Frame Transmitted Seconds */
[01;32m[K   143[m[K	  RoReg   GMAC_EFTN;       /**< \brief ([01;31m[KGmac[m[K Offset: 0x1E4) PTP Event Frame Transmitted Nanoseconds */
[01;32m[K   144[m[K	  RoReg   GMAC_EFRS;       /**< \brief ([01;31m[KGmac[m[K Offset: 0x1E8) PTP Event Frame Received Seconds */
[01;32m[K   145[m[K	  RoReg   GMAC_EFRN;       /**< \brief ([01;31m[KGmac[m[K Offset: 0x1EC) PTP Event Frame Received Nanoseconds */
[01;32m[K   146[m[K	  RoReg   GMAC_PEFTS;      /**< \brief ([01;31m[KGmac[m[K Offset: 0x1F0) PTP Peer Event Frame Transmitted Seconds */
[01;32m[K   147[m[K	  RoReg   GMAC_PEFTN;      /**< \brief ([01;31m[KGmac[m[K Offset: 0x1F4) PTP Peer Event Frame Transmitted Nanoseconds */
[01;32m[K   148[m[K	  RoReg   GMAC_PEFRS;      /**< \brief ([01;31m[KGmac[m[K Offset: 0x1F8) PTP Peer Event Frame Received Seconds */
[01;32m[K   149[m[K	  RoReg   GMAC_PEFRN;      /**< \brief ([01;31m[KGmac[m[K Offset: 0x1FC) PTP Peer Event Frame Received Nanoseconds */
[01;32m[K   151[m[K	  RoReg   GMAC_ISRPQ[7];   /**< \brief ([01;31m[KGmac[m[K Offset: 0x400) Interrupt Status Register Priority Queue */
[01;32m[K   153[m[K	  RwReg   GMAC_TBQBAPQ[7]; /**< \brief ([01;31m[KGmac[m[K Offset: 0x440) Transmit Buffer Queue Base Address Priority Queue */
[01;32m[K   155[m[K	  RwReg   GMAC_RBQBAPQ[7]; /**< \brief ([01;31m[KGmac[m[K Offset: 0x480) Receive Buffer Queue Base Address Priority Queue */
[01;32m[K   157[m[K	  RwReg   GMAC_RBSRPQ[7];  /**< \brief ([01;31m[KGmac[m[K Offset: 0x4A0) Receive Buffer Size Register Priority Queue */
[01;32m[K   159[m[K	  RwReg   GMAC_ST1RPQ[16]; /**< \brief ([01;31m[KGmac[m[K Offset: 0x500) Screening Type1 Register Priority Queue */
[01;32m[K   160[m[K	  RwReg   GMAC_ST2RPQ[16]; /**< \brief ([01;31m[KGmac[m[K Offset: 0x540) Screening Type2 Register Priority Queue */
[01;32m[K   162[m[K	  WoReg   GMAC_IERPQ[7];   /**< \brief ([01;31m[KGmac[m[K Offset: 0x600) Interrupt Enable Register Priority Queue */
[01;32m[K   164[m[K	  WoReg   GMAC_IDRPQ[7];   /**< \brief ([01;31m[KGmac[m[K Offset: 0x620) Interrupt Disable Register Priority Queue */
[01;32m[K   166[m[K	  RwReg   GMAC_IMRPQ[7];   /**< \brief ([01;31m[KGmac[m[K Offset: 0x640) Interrupt Mask Register Priority Queue */
[01;32m[K   169[m[K	/* -------- GMAC_NCR : ([01;31m[KGMAC[m[K Offset: 0x000) Network Control Register -------- */
[01;32m[K   188[m[K	/* -------- GMAC_NCFGR : ([01;31m[KGMAC[m[K Offset: 0x004) Network Configuration Register -------- */
[01;32m[K   228[m[K	/* -------- GMAC_NSR : ([01;31m[KGMAC[m[K Offset: 0x008) Network Status Register -------- */
[01;32m[K   231[m[K	/* -------- GMAC_UR : ([01;31m[KGMAC[m[K Offset: 0x00C) User Register -------- */
[01;32m[K   235[m[K	/* -------- GMAC_DCFGR : ([01;31m[KGMAC[m[K Offset: 0x010) DMA Configuration Register -------- */
[01;32m[K   256[m[K	/* -------- GMAC_TSR : ([01;31m[KGMAC[m[K Offset: 0x014) Transmit Status Register -------- */
[01;32m[K   266[m[K	/* -------- GMAC_RBQB : ([01;31m[KGMAC[m[K Offset: 0x018) Receive Buffer Queue Base Address -------- */
[01;32m[K   270[m[K	/* -------- GMAC_TBQB : ([01;31m[KGMAC[m[K Offset: 0x01C) Transmit Buffer Queue Base Address -------- */
[01;32m[K   274[m[K	/* -------- GMAC_RSR : ([01;31m[KGMAC[m[K Offset: 0x020) Receive Status Register -------- */
[01;32m[K   279[m[K	/* -------- GMAC_ISR : ([01;31m[KGMAC[m[K Offset: 0x024) Interrupt Status Register -------- */
[01;32m[K   304[m[K	/* -------- GMAC_IER : ([01;31m[KGMAC[m[K Offset: 0x028) Interrupt Enable Register -------- */
[01;32m[K   329[m[K	/* -------- GMAC_IDR : ([01;31m[KGMAC[m[K Offset: 0x02C) Interrupt Disable Register -------- */
[01;32m[K   354[m[K	/* -------- GMAC_IMR : ([01;31m[KGMAC[m[K Offset: 0x030) Interrupt Mask Register -------- */
[01;32m[K   377[m[K	/* -------- GMAC_MAN : ([01;31m[KGMAC[m[K Offset: 0x034) PHY Maintenance Register -------- */
[01;32m[K   395[m[K	/* -------- GMAC_RPQ : ([01;31m[KGMAC[m[K Offset: 0x038) Received Pause Quantum Register -------- */
[01;32m[K   398[m[K	/* -------- GMAC_TPQ : ([01;31m[KGMAC[m[K Offset: 0x03C) Transmit Pause Quantum Register -------- */
[01;32m[K   402[m[K	/* -------- GMAC_TPSF : ([01;31m[KGMAC[m[K Offset: 0x040) TX Partial Store and Forward Register -------- */
[01;32m[K   407[m[K	/* -------- GMAC_RPSF : ([01;31m[KGMAC[m[K Offset: 0x044) RX Partial Store and Forward Register -------- */
[01;32m[K   412[m[K	/* -------- GMAC_HRB : ([01;31m[KGMAC[m[K Offset: 0x080) Hash Register Bottom [31:0] -------- */
[01;32m[K   416[m[K	/* -------- GMAC_HRT : ([01;31m[KGMAC[m[K Offset: 0x084) Hash Register Top [63:32] -------- */
[01;32m[K   420[m[K	/* -------- GMAC_SAB1 : ([01;31m[KGMAC[m[K Offset: 0x088) Specific Address 1 Bottom [31:0] Register -------- */
[01;32m[K   424[m[K	/* -------- GMAC_SAT1 : ([01;31m[KGMAC[m[K Offset: 0x08C) Specific Address 1 Top [47:32] Register -------- */
[01;32m[K   428[m[K	/* -------- GMAC_SAB2 : ([01;31m[KGMAC[m[K Offset: 0x090) Specific Address 2 Bottom [31:0] Register -------- */
[01;32m[K   432[m[K	/* -------- GMAC_SAT2 : ([01;31m[KGMAC[m[K Offset: 0x094) Specific Address 2 Top [47:32] Register -------- */
[01;32m[K   436[m[K	/* -------- GMAC_SAB3 : ([01;31m[KGMAC[m[K Offset: 0x098) Specific Address 3 Bottom [31:0] Register -------- */
[01;32m[K   440[m[K	/* -------- GMAC_SAT3 : ([01;31m[KGMAC[m[K Offset: 0x09C) Specific Address 3 Top [47:32] Register -------- */
[01;32m[K   444[m[K	/* -------- GMAC_SAB4 : ([01;31m[KGMAC[m[K Offset: 0x0A0) Specific Address 4 Bottom [31:0] Register -------- */
[01;32m[K   448[m[K	/* -------- GMAC_SAT4 : ([01;31m[KGMAC[m[K Offset: 0x0A4) Specific Address 4 Top [47:32] Register -------- */
[01;32m[K   452[m[K	/* -------- GMAC_TIDM[4] : ([01;31m[KGMAC[m[K Offset: 0x0A8) Type ID Match 1 Register -------- */
[01;32m[K   456[m[K	/* -------- GMAC_WOL : ([01;31m[KGMAC[m[K Offset: 0x0B8) Wake on LAN Register -------- */
[01;32m[K   464[m[K	/* -------- GMAC_IPGS : ([01;31m[KGMAC[m[K Offset: 0x0BC) IPG Stretch Register -------- */
[01;32m[K   468[m[K	/* -------- GMAC_SVLAN : ([01;31m[KGMAC[m[K Offset: 0x0C0) Stacked VLAN Register -------- */
[01;32m[K   473[m[K	/* -------- GMAC_TPFCP : ([01;31m[KGMAC[m[K Offset: 0x0C4) Transmit PFC Pause Register -------- */
[01;32m[K   480[m[K	/* -------- GMAC_SAMB1 : ([01;31m[KGMAC[m[K Offset: 0x0C8) Specific Address 1 Mask Bottom [31:0] Register -------- */
[01;32m[K   484[m[K	/* -------- GMAC_SAMT1 : ([01;31m[KGMAC[m[K Offset: 0x0CC) Specific Address 1 Mask Top [47:32] Register -------- */
[01;32m[K   488[m[K	/* -------- GMAC_OTLO : ([01;31m[KGMAC[m[K Offset: 0x100) Octets Transmitted [31:0] Register -------- */
[01;32m[K   491[m[K	/* -------- GMAC_OTHI : ([01;31m[KGMAC[m[K Offset: 0x104) Octets Transmitted [47:32] Register -------- */
[01;32m[K   494[m[K	/* -------- GMAC_FT : ([01;31m[KGMAC[m[K Offset: 0x108) Frames Transmitted Register -------- */
[01;32m[K   497[m[K	/* -------- GMAC_BCFT : ([01;31m[KGMAC[m[K Offset: 0x10C) Broadcast Frames Transmitted Register -------- */
[01;32m[K   500[m[K	/* -------- GMAC_MFT : ([01;31m[KGMAC[m[K Offset: 0x110) Multicast Frames Transmitted Register -------- */
[01;32m[K   503[m[K	/* -------- GMAC_PFT : ([01;31m[KGMAC[m[K Offset: 0x114) Pause Frames Transmitted Register -------- */
[01;32m[K   506[m[K	/* -------- GMAC_BFT64 : ([01;31m[KGMAC[m[K Offset: 0x118) 64 Byte Frames Transmitted Register -------- */
[01;32m[K   509[m[K	/* -------- GMAC_TBFT127 : ([01;31m[KGMAC[m[K Offset: 0x11C) 65 to 127 Byte Frames Transmitted Register -------- */
[01;32m[K   512[m[K	/* -------- GMAC_TBFT255 : ([01;31m[KGMAC[m[K Offset: 0x120) 128 to 255 Byte Frames Transmitted Register -------- */
[01;32m[K   515[m[K	/* -------- GMAC_TBFT511 : ([01;31m[KGMAC[m[K Offset: 0x124) 256 to 511 Byte Frames Transmitted Register -------- */
[01;32m[K   518[m[K	/* -------- GMAC_TBFT1023 : ([01;31m[KGMAC[m[K Offset: 0x128) 512 to 1023 Byte Frames Transmitted Register -------- */
[01;32m[K   521[m[K	/* -------- GMAC_TBFT1518 : ([01;31m[KGMAC[m[K Offset: 0x12C) 1024 to 1518 Byte Frames Transmitted Register -------- */
[01;32m[K   524[m[K	/* -------- GMAC_GTBFT1518 : ([01;31m[KGMAC[m[K Offset: 0x130) Greater Than 1518 Byte Frames Transmitted Register -------- */
[01;32m[K   527[m[K	/* -------- GMAC_TUR : ([01;31m[KGMAC[m[K Offset: 0x134) Transmit Under Runs Register -------- */
[01;32m[K   530[m[K	/* -------- GMAC_SCF : ([01;31m[KGMAC[m[K Offset: 0x138) Single Collision Frames Register -------- */
[01;32m[K   533[m[K	/* -------- GMAC_MCF : ([01;31m[KGMAC[m[K Offset: 0x13C) Multiple Collision Frames Register -------- */
[01;32m[K   536[m[K	/* -------- GMAC_EC : ([01;31m[KGMAC[m[K Offset: 0x140) Excessive Collisions Register -------- */
[01;32m[K   539[m[K	/* -------- GMAC_LC : ([01;31m[KGMAC[m[K Offset: 0x144) Late Collisions Register -------- */
[01;32m[K   542[m[K	/* -------- GMAC_DTF : ([01;31m[KGMAC[m[K Offset: 0x148) Deferred Transmission Frames Register -------- */
[01;32m[K   545[m[K	/* -------- GMAC_CSE : ([01;31m[KGMAC[m[K Offset: 0x14C) Carrier Sense Errors Register -------- */
[01;32m[K   548[m[K	/* -------- GMAC_ORLO : ([01;31m[KGMAC[m[K Offset: 0x150) Octets Received [31:0] Received -------- */
[01;32m[K   551[m[K	/* -------- GMAC_ORHI : ([01;31m[KGMAC[m[K Offset: 0x154) Octets Received [47:32] Received -------- */
[01;32m[K   554[m[K	/* -------- GMAC_FR : ([01;31m[KGMAC[m[K Offset: 0x158) Frames Received Register -------- */
[01;32m[K   557[m[K	/* -------- GMAC_BCFR : ([01;31m[KGMAC[m[K Offset: 0x15C) Broadcast Frames Received Register -------- */
[01;32m[K   560[m[K	/* -------- GMAC_MFR : ([01;31m[KGMAC[m[K Offset: 0x160) Multicast Frames Received Register -------- */
[01;32m[K   563[m[K	/* -------- GMAC_PFR : ([01;31m[KGMAC[m[K Offset: 0x164) Pause Frames Received Register -------- */
[01;32m[K   566[m[K	/* -------- GMAC_BFR64 : ([01;31m[KGMAC[m[K Offset: 0x168) 64 Byte Frames Received Register -------- */
[01;32m[K   569[m[K	/* -------- GMAC_TBFR127 : ([01;31m[KGMAC[m[K Offset: 0x16C) 65 to 127 Byte Frames Received Register -------- */
[01;32m[K   572[m[K	/* -------- GMAC_TBFR255 : ([01;31m[KGMAC[m[K Offset: 0x170) 128 to 255 Byte Frames Received Register -------- */
[01;32m[K   575[m[K	/* -------- GMAC_TBFR511 : ([01;31m[KGMAC[m[K Offset: 0x174) 256 to 511Byte Frames Received Register -------- */
[01;32m[K   578[m[K	/* -------- GMAC_TBFR1023 : ([01;31m[KGMAC[m[K Offset: 0x178) 512 to 1023 Byte Frames Received Register -------- */
[01;32m[K   581[m[K	/* -------- GMAC_TBFR1518 : ([01;31m[KGMAC[m[K Offset: 0x17C) 1024 to 1518 Byte Frames Received Register -------- */
[01;32m[K   584[m[K	/* -------- GMAC_TMXBFR : ([01;31m[KGMAC[m[K Offset: 0x180) 1519 to Maximum Byte Frames Received Register -------- */
[01;32m[K   587[m[K	/* -------- GMAC_UFR : ([01;31m[KGMAC[m[K Offset: 0x184) Undersize Frames Received Register -------- */
[01;32m[K   590[m[K	/* -------- GMAC_OFR : ([01;31m[KGMAC[m[K Offset: 0x188) Oversize Frames Received Register -------- */
[01;32m[K   593[m[K	/* -------- GMAC_JR : ([01;31m[KGMAC[m[K Offset: 0x18C) Jabbers Received Register -------- */
[01;32m[K   596[m[K	/* -------- GMAC_FCSE : ([01;31m[KGMAC[m[K Offset: 0x190) Frame Check Sequence Errors Register -------- */
[01;32m[K   599[m[K	/* -------- GMAC_LFFE : ([01;31m[KGMAC[m[K Offset: 0x194) Length Field Frame Errors Register -------- */
[01;32m[K   602[m[K	/* -------- GMAC_RSE : ([01;31m[KGMAC[m[K Offset: 0x198) Receive Symbol Errors Register -------- */
[01;32m[K   605[m[K	/* -------- GMAC_AE : ([01;31m[KGMAC[m[K Offset: 0x19C) Alignment Errors Register -------- */
[01;32m[K   608[m[K	/* -------- GMAC_RRE : ([01;31m[KGMAC[m[K Offset: 0x1A0) Receive Resource Errors Register -------- */
[01;32m[K   611[m[K	/* -------- GMAC_ROE : ([01;31m[KGMAC[m[K Offset: 0x1A4) Receive Overrun Register -------- */
[01;32m[K   614[m[K	/* -------- GMAC_IHCE : ([01;31m[KGMAC[m[K Offset: 0x1A8) IP Header Checksum Errors Register -------- */
[01;32m[K   617[m[K	/* -------- GMAC_TCE : ([01;31m[KGMAC[m[K Offset: 0x1AC) TCP Checksum Errors Register -------- */
[01;32m[K   620[m[K	/* -------- GMAC_UCE : ([01;31m[KGMAC[m[K Offset: 0x1B0) UDP Checksum Errors Register -------- */
[01;32m[K   623[m[K	/* -------- GMAC_TSSS : ([01;31m[KGMAC[m[K Offset: 0x1C8) 1588 Timer Sync Strobe Seconds Register -------- */
[01;32m[K   627[m[K	/* -------- GMAC_TSSN : ([01;31m[KGMAC[m[K Offset: 0x1CC) 1588 Timer Sync Strobe Nanoseconds Register -------- */
[01;32m[K   631[m[K	/* -------- GMAC_TS : ([01;31m[KGMAC[m[K Offset: 0x1D0) 1588 Timer Seconds Register -------- */
[01;32m[K   635[m[K	/* -------- GMAC_TN : ([01;31m[KGMAC[m[K Offset: 0x1D4) 1588 Timer Nanoseconds Register -------- */
[01;32m[K   639[m[K	/* -------- GMAC_TA : ([01;31m[KGMAC[m[K Offset: 0x1D8) 1588 Timer Adjust Register -------- */
[01;32m[K   644[m[K	/* -------- GMAC_TI : ([01;31m[KGMAC[m[K Offset: 0x1DC) 1588 Timer Increment Register -------- */
[01;32m[K   654[m[K	/* -------- GMAC_EFTS : ([01;31m[KGMAC[m[K Offset: 0x1E0) PTP Event Frame Transmitted Seconds -------- */
[01;32m[K   657[m[K	/* -------- GMAC_EFTN : ([01;31m[KGMAC[m[K Offset: 0x1E4) PTP Event Frame Transmitted Nanoseconds -------- */
[01;32m[K   660[m[K	/* -------- GMAC_EFRS : ([01;31m[KGMAC[m[K Offset: 0x1E8) PTP Event Frame Received Seconds -------- */
[01;32m[K   663[m[K	/* -------- GMAC_EFRN : ([01;31m[KGMAC[m[K Offset: 0x1EC) PTP Event Frame Received Nanoseconds -------- */
[01;32m[K   666[m[K	/* -------- GMAC_PEFTS : ([01;31m[KGMAC[m[K Offset: 0x1F0) PTP Peer Event Frame Transmitted Seconds -------- */
[01;32m[K   669[m[K	/* -------- GMAC_PEFTN : ([01;31m[KGMAC[m[K Offset: 0x1F4) PTP Peer Event Frame Transmitted Nanoseconds -------- */
[01;32m[K   672[m[K	/* -------- GMAC_PEFRS : ([01;31m[KGMAC[m[K Offset: 0x1F8) PTP Peer Event Frame Received Seconds -------- */
[01;32m[K   675[m[K	/* -------- GMAC_PEFRN : ([01;31m[KGMAC[m[K Offset: 0x1FC) PTP Peer Event Frame Received Nanoseconds -------- */
[01;32m[K   678[m[K	/* -------- GMAC_ISRPQ[7] : ([01;31m[KGMAC[m[K Offset: 0x400) Interrupt Status Register Priority Queue -------- */
[01;32m[K   686[m[K	/* -------- GMAC_TBQBAPQ[7] : ([01;31m[KGMAC[m[K Offset: 0x440) Transmit Buffer Queue Base Address Priority Queue -------- */
[01;32m[K   690[m[K	/* -------- GMAC_RBQBAPQ[7] : ([01;31m[KGMAC[m[K Offset: 0x480) Receive Buffer Queue Base Address Priority Queue -------- */
[01;32m[K   694[m[K	/* -------- GMAC_RBSRPQ[7] : ([01;31m[KGMAC[m[K Offset: 0x4A0) Receive Buffer Size Register Priority Queue -------- */
[01;32m[K   698[m[K	/* -------- GMAC_ST1RPQ[16] : ([01;31m[KGMAC[m[K Offset: 0x500) Screening Type1 Register Priority Queue -------- */
[01;32m[K   710[m[K	/* -------- GMAC_ST2RPQ[16] : ([01;31m[KGMAC[m[K Offset: 0x540) Screening Type2 Register Priority Queue -------- */
[01;32m[K   718[m[K	/* -------- GMAC_IERPQ[7] : ([01;31m[KGMAC[m[K Offset: 0x600) Interrupt Enable Register Priority Queue -------- */
[01;32m[K   726[m[K	/* -------- GMAC_IDRPQ[7] : ([01;31m[KGMAC[m[K Offset: 0x620) Interrupt Disable Register Priority Queue -------- */
[01;32m[K   734[m[K	/* -------- GMAC_IMRPQ[7] : ([01;31m[KGMAC[m[K Offset: 0x640) Interrupt Mask Register Priority Queue -------- */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K    72[m[K	 * - \ref gmac_group Ethernet Media Access Controller ([01;31m[KGMAC[m[K) module.
[01;32m[K    91[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   148[m[K	 * The [01;31m[KGMAC[m[K peripheral pins are configured after the reset is done.
[01;32m[K   150[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   152[m[K	 * \param ul_mck [01;31m[KGMAC[m[K MCK.
[01;32m[K   163[m[K		/* Configure [01;31m[KGMAC[m[K runtime clock */
[01;32m[K   183[m[K	 * \brief Get the Link & speed settings, and automatically set up the [01;31m[KGMAC[m[K with the
[01;32m[K   186[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   206[m[K			/* Disable PHY management and start the [01;31m[KGMAC[m[K transfer */
[01;32m[K   212[m[K			/* Disable PHY management and start the [01;31m[KGMAC[m[K transfer */
[01;32m[K   219[m[K			/* Disable PHY management and start the [01;31m[KGMAC[m[K transfer */
[01;32m[K   230[m[K			/* Disable PHY management and start the [01;31m[KGMAC[m[K transfer */
[01;32m[K   237[m[K			/* Set [01;31m[KGMAC[m[K for 100BaseTX and Full Duplex */
[01;32m[K   260[m[K		/* Start the [01;31m[KGMAC[m[K transfers */
[01;32m[K   270[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   377[m[K		/* Set up the [01;31m[KGMAC[m[K link speed */
[01;32m[K   413[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K     4[m[K	 * \brief [01;31m[KGMAC[m[K (Ethernet MAC) driver for SAM.
[01;32m[K    59[m[K	    last few bits are zero.  These bits have special meaning for the [01;31m[KGMAC[m[K
[01;32m[K   100[m[K	/** [01;31m[KGMAC[m[K clock speed */
[01;32m[K   108[m[K	/** [01;31m[KGMAC[m[K maintain code default value*/
[01;32m[K   111[m[K	/** [01;31m[KGMAC[m[K maintain start of frame default value*/
[01;32m[K   114[m[K	/** [01;31m[KGMAC[m[K maintain read/write*/
[01;32m[K   117[m[K	/** [01;31m[KGMAC[m[K maintain read only*/
[01;32m[K   120[m[K	/** [01;31m[KGMAC[m[K address length */
[01;32m[K   131[m[K	 * \brief Return codes for [01;31m[KGMAC[m[K APIs.
[01;32m[K   135[m[K		GMAC_TIMEOUT = 1,    /** 1  [01;31m[KGMAC[m[K operation timeout */
[01;32m[K   158[m[K				uint32_t b_ownership:1, /**< User clear, [01;31m[KGMAC[m[K sets this to 1 once it has successfully written a frame to memory */
[01;32m[K   205[m[K				b_used:1;            /** 31     User clear, [01;31m[KGMAC[m[K sets this to 1 once a frame has been successfully transmitted */
[01;32m[K   213[m[K	 * \brief Input parameters when initializing the [01;31m[Kgmac[m[K module mode.
[01;32m[K   232[m[K	 * [01;31m[KGMAC[m[K driver structure.
[01;32m[K   280[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   291[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   300[m[K	 * \brief Enable/Disable [01;31m[KGMAC[m[K receive.
[01;32m[K   302[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   303[m[K	 * \param uc_enable   0 to disable [01;31m[KGMAC[m[K receiver, else to enable it.
[01;32m[K   315[m[K	 * \brief Enable/Disable [01;31m[KGMAC[m[K transmit.
[01;32m[K   317[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   318[m[K	 * \param uc_enable   0 to disable [01;31m[KGMAC[m[K transmit, else to enable it.
[01;32m[K   330[m[K	 * \brief Enable/Disable [01;31m[KGMAC[m[K management.
[01;32m[K   332[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   333[m[K	 * \param uc_enable   0 to disable [01;31m[KGMAC[m[K management, else to enable it.
[01;32m[K   347[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   357[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   367[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   383[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   398[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   408[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   418[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   428[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   438[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   448[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   463[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   478[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   488[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   498[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   509[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   533[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   548[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   563[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   578[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   593[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   608[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   623[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   638[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   639[m[K	 * \param ul_mck   [01;31m[KGMAC[m[K MCK.
[01;32m[K   670[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   671[m[K	 * \param uc_enable   0 to disable the [01;31m[KGMAC[m[K receiver, else to enable it.
[01;32m[K   685[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   700[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   711[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   726[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   743[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   758[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   773[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   785[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   797[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   809[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   821[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   832[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   842[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   853[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   864[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   876[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   887[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   899[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   910[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   921[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   933[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   945[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   969[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   984[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   998[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1010[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1011[m[K	 * \param uc_index  [01;31m[KGMAC[m[K specific address register index.
[01;32m[K  1012[m[K	 * \param p_mac_addr  [01;31m[KGMAC[m[K address.
[01;32m[K  1028[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1029[m[K	 * \param uc_index  [01;31m[KGMAC[m[K specific address register index.
[01;32m[K  1030[m[K	 * \param ul_mac_top  [01;31m[KGMAC[m[K top address.
[01;32m[K  1031[m[K	 * \param ul_mac_bottom  [01;31m[KGMAC[m[K bottom address.
[01;32m[K  1043[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1044[m[K	 * \param uc_index  [01;31m[KGMAC[m[K specific address register index.
[01;32m[K  1045[m[K	 * \param ull_mac  64-bit [01;31m[KGMAC[m[K address.
[01;32m[K  1057[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1101[m[K	 * \page gmac_quickstart Quickstart guide for [01;31m[KGMAC[m[K driver.
[01;32m[K  1112[m[K	 * In the basic use case, the [01;31m[KGMAC[m[K driver are configured for:
[01;32m[K  1114[m[K	 * - [01;31m[KGMAC[m[K uses MII mode
[01;32m[K  1123[m[K	 * - [01;31m[KGMAC[m[K is configured to not support copy all frame and support broadcast
[01;32m[K  1161[m[K	 * A specific [01;31m[Kgmac[m[K device and the receive data buffer must be defined; another ul_frm_size should be defined
[01;32m[K  1183[m[K	 *       gs_gmac_dev.p_hw = [01;31m[KGMAC[m[K;
[01;32m[K  1185[m[K	 *       gmac_dev_init([01;31m[KGMAC[m[K, &gs_gmac_dev, &gmac_option);
[01;32m[K  1189[m[K	 *       ethernet_phy_init([01;31m[KGMAC[m[K, BOARD_GMAC_PHY_ADDR, sysclk_get_cpu_hz());
[01;32m[K  1191[m[K	 *       ethernet_phy_auto_negotiate([01;31m[KGMAC[m[K, BOARD_GMAC_PHY_ADDR);
[01;32m[K  1193[m[K	 *       ethernet_phy_set_link([01;31m[KGMAC[m[K, BOARD_GMAC_PHY_ADDR, 1);
[01;32m[K  1200[m[K	 * -# Define the receiving buffer size used in the internal [01;31m[KGMAC[m[K driver.
[01;32m[K  1210[m[K	 * -# Define the transmitting buffer size used in the internal [01;31m[KGMAC[m[K driver.
[01;32m[K  1251[m[K	 * -# Enable PIO configurations for [01;31m[KGMAC[m[K:
[01;32m[K  1253[m[K	 * -# Enable PMC clock for [01;31m[KGMAC[m[K:
[01;32m[K  1255[m[K	 * -# Set the [01;31m[KGMAC[m[K options; it's set to copy all frame and support broadcast:
[01;32m[K  1260[m[K	 *         gs_gmac_dev.p_hw = [01;31m[KGMAC[m[K;
[01;32m[K  1262[m[K	 * -# Initialize [01;31m[KGMAC[m[K device with the filled option:
[01;32m[K  1264[m[K	 *         gmac_dev_init([01;31m[KGMAC[m[K, &gs_gmac_dev, &gmac_option);
[01;32m[K  1266[m[K	 * -# Enable the interrupt service for [01;31m[KGMAC[m[K:
[01;32m[K  1272[m[K	 *         ethernet_phy_init([01;31m[KGMAC[m[K, BOARD_GMAC_PHY_ADDR, sysclk_get_cpu_hz());
[01;32m[K  1276[m[K	 *         ethernet_phy_auto_negotiate([01;31m[KGMAC[m[K, BOARD_GMAC_PHY_ADDR);
[01;32m[K  1280[m[K	 *         ethernet_phy_set_link([01;31m[KGMAC[m[K, BOARD_GMAC_PHY_ADDR, 1);
[01;32m[K  1300[m[K		frequencies of 	[01;31m[KGMAC[m[K interrupts. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K     4[m[K	 * \brief [01;31m[KGMAC[m[K (Ethernet MAC) driver for SAM.
[01;32m[K    76[m[K	 * Driver for the [01;31m[KGMAC[m[K (Ethernet Media Access Controller).
[01;32m[K    77[m[K	 * This file contains basic functions for the [01;31m[KGMAC[m[K, with support for all modes, settings
[01;32m[K   111[m[K	 * [01;31m[KGMAC[m[K device memory management struct.
[01;32m[K   190[m[K	 * \param p_dev Pointer to [01;31m[KGMAC[m[K driver instance.
[01;32m[K   231[m[K	 * \param p_drv Pointer to [01;31m[KGMAC[m[K Driver instance.
[01;32m[K   261[m[K	 * \brief Initialize the allocated buffer lists for [01;31m[KGMAC[m[K driver to transfer data.
[01;32m[K   267[m[K	 * \param p_gmac Pointer to [01;31m[KGMAC[m[K instance.
[01;32m[K   268[m[K	 * \param p_gmac_dev Pointer to [01;31m[KGMAC[m[K device instance.
[01;32m[K   269[m[K	 * \param p_dev_mm Pointer to the [01;31m[KGMAC[m[K memory management control block.
[01;32m[K   342[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   364[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   383[m[K	 * \brief Initialize the [01;31m[KGMAC[m[K driver.
[01;32m[K   385[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   386[m[K	 * \param p_gmac_dev Pointer to the [01;31m[KGMAC[m[K device instance.
[01;32m[K   387[m[K	 * \param p_opt [01;31m[KGMAC[m[K configure options.
[01;32m[K   440[m[K		/* Fill in [01;31m[KGMAC[m[K device memory management */
[01;32m[K   467[m[K	 * \brief Frames can be read from the [01;31m[KGMAC[m[K in multiple sections.
[01;32m[K   527[m[K	 * \brief Frames can be read from the [01;31m[KGMAC[m[K in multiple sections.
[01;32m[K   528[m[K	 * Read ul_frame_size bytes from the [01;31m[KGMAC[m[K receive buffers to pcTo.
[01;32m[K   533[m[K	 * \param p_gmac_dev Pointer to the [01;31m[KGMAC[m[K device instance.
[01;32m[K   602[m[K	 * [01;31m[KGMAC[m[K Tx buffers, and then indicates to the [01;31m[KGMAC[m[K that the buffer is ready.
[01;32m[K   606[m[K	 * \param p_gmac_dev Pointer to the [01;31m[KGMAC[m[K device instance.
[01;32m[K   651[m[K			/* Calculating the checksum here is faster than calculating it from the [01;31m[KGMAC[m[K buffer
[01;32m[K   697[m[K	 * \param p_gmac_dev Pointer to the [01;31m[KGMAC[m[K device instance.
[01;32m[K   724[m[K	 * \param p_gmac_dev Pointer to the [01;31m[KGMAC[m[K device instance.
[01;32m[K   754[m[K	 * \param p_gmac_dev   Pointer to [01;31m[KGMAC[m[K device instance.
[01;32m[K   782[m[K	 * \param p_gmac_dev   Pointer to [01;31m[KGMAC[m[K device instance.
[01;32m[K   804[m[K	 * \brief [01;31m[KGMAC[m[K Interrupt handler.
[01;32m[K   806[m[K	 * \param p_gmac_dev   Pointer to [01;31m[KGMAC[m[K device instance.

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K    46[m[K	/* gmac_SAM.[ch] is a combination of the [01;31m[Kgmac[m[K.[ch] for both SAM4E and SAME70. */
[01;32m[K   135[m[K	 * Update settings in [01;31m[KGMAC[m[K for speed and duplex.
[01;32m[K   151[m[K	 * Called from the ASF [01;31m[KGMAC[m[K driver.
[01;32m[K   157[m[K	 * A deferred interrupt handler task that processes [01;31m[KGMAC[m[K interrupts.
[01;32m[K   162[m[K	 * Initialise the ASF [01;31m[KGMAC[m[K driver.
[01;32m[K   189[m[K	/* The [01;31m[KGMAC[m[K object as defined by the ASF drivers. */
[01;32m[K   244[m[K	 * [01;31m[KGMAC[m[K interrupt handler.
[01;32m[K   322[m[K			/* Enable further [01;31m[KGMAC[m[K maintenance. */
[01;32m[K   349[m[K			/* Disable further [01;31m[KGMAC[m[K maintenance. */
[01;32m[K   368[m[K			/* Enable further [01;31m[KGMAC[m[K maintenance. */
[01;32m[K   388[m[K			/* Disable further [01;31m[KGMAC[m[K maintenance. */
[01;32m[K   446[m[K	/** The [01;31m[KGMAC[m[K TX errors to handle */
[01;32m[K   451[m[K	/* Handle [01;31m[KGMAC[m[K underrun or AHB errors. */
[01;32m[K   544[m[K		/* Enable further [01;31m[KGMAC[m[K maintenance. */
[01;32m[K   591[m[K		/* Disable further [01;31m[KGMAC[m[K maintenance. */
[01;32m[K   614[m[K					/* Enable further [01;31m[KGMAC[m[K maintenance. */
[01;32m[K   642[m[K					/* Enable further [01;31m[KGMAC[m[K maintenance. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K     4[m[K	 * \brief [01;31m[KGMAC[m[K (Ethernet MAC) driver for SAM.
[01;32m[K    61[m[K	    last few bits are zero.  These bits have special meaning for the [01;31m[KGMAC[m[K
[01;32m[K   105[m[K	/** [01;31m[KGMAC[m[K clock speed */
[01;32m[K   113[m[K	/** [01;31m[KGMAC[m[K maintain code default value*/
[01;32m[K   116[m[K	/** [01;31m[KGMAC[m[K maintain start of frame default value*/
[01;32m[K   119[m[K	/** [01;31m[KGMAC[m[K maintain read/write*/
[01;32m[K   122[m[K	/** [01;31m[KGMAC[m[K maintain read only*/
[01;32m[K   125[m[K	/** [01;31m[KGMAC[m[K address length */
[01;32m[K   136[m[K	 * \brief Return codes for [01;31m[KGMAC[m[K APIs.
[01;32m[K   140[m[K		GMAC_TIMEOUT = 1,    /** 1  [01;31m[KGMAC[m[K operation timeout */
[01;32m[K   158[m[K	/* This is the list of [01;31m[KGMAC[m[K priority queue */
[01;32m[K   181[m[K				uint32_t b_ownership:1, /**< User clear, [01;31m[KGMAC[m[K sets this to 1 once it has successfully written a frame to memory */
[01;32m[K   228[m[K				b_used:1;            /** 31     User clear, [01;31m[KGMAC[m[K sets this to 1 once a frame has been successfully transmitted */
[01;32m[K   236[m[K	 * \brief Input parameters when initializing the [01;31m[Kgmac[m[K module mode.
[01;32m[K   251[m[K	 * [01;31m[KGMAC[m[K driver structure.
[01;32m[K   284[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   295[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   304[m[K	 * \brief Enable/Disable [01;31m[KGMAC[m[K receive.
[01;32m[K   306[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   307[m[K	 * \param uc_enable   0 to disable [01;31m[KGMAC[m[K receiver, else to enable it.
[01;32m[K   319[m[K	 * \brief Enable/Disable [01;31m[KGMAC[m[K transmit.
[01;32m[K   321[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   322[m[K	 * \param uc_enable   0 to disable [01;31m[KGMAC[m[K transmit, else to enable it.
[01;32m[K   334[m[K	 * \brief Enable/Disable [01;31m[KGMAC[m[K management.
[01;32m[K   336[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   337[m[K	 * \param uc_enable   0 to disable [01;31m[KGMAC[m[K management, else to enable it.
[01;32m[K   351[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   361[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   371[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   387[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   402[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   413[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   423[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   433[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   443[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   458[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   473[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   483[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   493[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   515[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   527[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   542[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   557[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   572[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   587[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   602[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   617[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   632[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   633[m[K	 * \param ul_mck   [01;31m[KGMAC[m[K MCK.
[01;32m[K   666[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   667[m[K	 * \param uc_enable   0 to disable the [01;31m[KGMAC[m[K receiver, else to enable it.
[01;32m[K   681[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   696[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   707[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   722[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   739[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   754[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   769[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   781[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   793[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   805[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   817[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   828[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   838[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   849[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   860[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   872[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   884[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   895[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   907[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   918[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   929[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   941[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   953[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   977[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   992[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1006[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1018[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1019[m[K	 * \param uc_index  [01;31m[KGMAC[m[K specific address register index.
[01;32m[K  1020[m[K	 * \param p_mac_addr  [01;31m[KGMAC[m[K address.
[01;32m[K  1036[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1037[m[K	 * \param uc_index  [01;31m[KGMAC[m[K specific address register index.
[01;32m[K  1038[m[K	 * \param ul_mac_top  [01;31m[KGMAC[m[K top address.
[01;32m[K  1039[m[K	 * \param ul_mac_bottom  [01;31m[KGMAC[m[K bottom address.
[01;32m[K  1051[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1052[m[K	 * \param uc_index  [01;31m[KGMAC[m[K specific address register index.
[01;32m[K  1053[m[K	 * \param ull_mac  64-bit [01;31m[KGMAC[m[K address.
[01;32m[K  1065[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1102[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1117[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1130[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1141[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1154[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1165[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1178[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1189[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1204[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1219[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1230[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1241[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1253[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1265[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1277[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1289[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1302[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1314[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K  1369[m[K		frequencies of 	[01;31m[KGMAC[m[K interrupts. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K     4[m[K	 * \brief [01;31m[KGMAC[m[K (Ethernet MAC) driver for SAM.
[01;32m[K   103[m[K	 * Driver for the [01;31m[KGMAC[m[K (Ethernet Media Access Controller).
[01;32m[K   104[m[K	 * This file contains basic functions for the [01;31m[KGMAC[m[K, with support for all modes, settings
[01;32m[K   217[m[K	 * \param p_dev Pointer to [01;31m[KGMAC[m[K driver instance.
[01;32m[K   275[m[K	 * \param p_dev Pointer to [01;31m[KGMAC[m[K Driver instance.
[01;32m[K   316[m[K	 * \brief Initialize the allocated buffer lists for [01;31m[KGMAC[m[K driver to transfer data.
[01;32m[K   322[m[K	 * \param p_gmac Pointer to [01;31m[KGMAC[m[K instance.
[01;32m[K   323[m[K	 * \param p_gmac_dev Pointer to [01;31m[KGMAC[m[K device instance.
[01;32m[K   324[m[K	 * \param p_dev_mm Pointer to the [01;31m[KGMAC[m[K memory management control block.
[01;32m[K   366[m[K	 * \brief Initialize the [01;31m[KGMAC[m[K driver.
[01;32m[K   368[m[K	 * \param p_gmac   Pointer to the [01;31m[KGMAC[m[K instance.
[01;32m[K   369[m[K	 * \param p_gmac_dev Pointer to the [01;31m[KGMAC[m[K device instance.
[01;32m[K   370[m[K	 * \param p_opt [01;31m[KGMAC[m[K configure options.
[01;32m[K   418[m[K		 * http://community.atmel.com/forum/sam4e-[01;31m[Kgmac[m[K-transmit-checksum-offload-enablesolved
[01;32m[K   418[m[K		 * http://community.atmel.com/forum/sam4e-[01;31m[Kgmac[m[K-transmit-checksum-offload-enablesolved
[01;32m[K   424[m[K			/* Let the [01;31m[KGMAC[m[K set TX checksum's. */
[01;32m[K   457[m[K	 * \brief Frames can be read from the [01;31m[KGMAC[m[K in multiple sections.
[01;32m[K   549[m[K	 * \brief Frames can be read from the [01;31m[KGMAC[m[K in multiple sections.
[01;32m[K   550[m[K	 * Read ul_frame_size bytes from the [01;31m[KGMAC[m[K receive buffers to pcTo.
[01;32m[K   555[m[K	 * \param p_gmac_dev Pointer to the [01;31m[KGMAC[m[K device instance.
[01;32m[K   652[m[K	 * [01;31m[KGMAC[m[K Tx buffers, and then indicates to the [01;31m[KGMAC[m[K that the buffer is ready.
[01;32m[K   656[m[K	 * \param p_gmac_dev Pointer to the [01;31m[KGMAC[m[K device instance.
[01;32m[K   687[m[K			/* Calculating the checksum here is faster than calculating it from the [01;31m[KGMAC[m[K buffer
[01;32m[K   733[m[K	 * \param p_gmac_dev Pointer to the [01;31m[KGMAC[m[K device instance.
[01;32m[K   757[m[K	 * \param p_gmac_dev   Pointer to [01;31m[KGMAC[m[K device instance.
[01;32m[K   785[m[K	 * \param p_gmac_dev   Pointer to [01;31m[KGMAC[m[K device instance.
[01;32m[K   807[m[K	 * \brief [01;31m[KGMAC[m[K Interrupt handler.
[01;32m[K   809[m[K	 * \param p_gmac_dev   Pointer to [01;31m[KGMAC[m[K device instance.

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K   218[m[K	 * The PHY address is the reset status of CRS, RXD[3:0] (the [01;31m[KGmacPins[m[K' pullups).

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K    52[m[K	/** \brief [01;31m[KGmacSa[m[K hardware registers */
[01;32m[K    54[m[K	  RwReg   GMAC_SAB;        /**< \brief ([01;31m[KGmacSa[m[K Offset: 0x0) Specific Address 1 Bottom [31:0] Register */
[01;32m[K    55[m[K	  RwReg   GMAC_SAT;        /**< \brief ([01;31m[KGmacSa[m[K Offset: 0x4) Specific Address 1 Top [47:32] Register */
[01;32m[K    81[m[K	  [01;31m[KGmacSa[m[K  GMAC_SA[GMACSA_NUMBER]; /**< \brief (Gmac Offset: 0x088) 1 .. 4 */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K    33[m[K	          (##) Initialize the related [01;31m[KGPIO[m[K clocks
[01;32m[K   214[m[K			/* Init the low level hardware : [01;31m[KGPIO[m[K, CLOCK, NVIC. */
[01;32m[K   300[m[K		/* De-Init the low level hardware : [01;31m[KGPIO[m[K, CLOCK, NVIC. */

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K    41[m[K	 * The GNU General Public License Version 2: http://www.FreeRTOS.org/[01;31m[Kgpl[m[K-2.0.txt
[01;32m[K    41[m[K	 * The GNU General Public License Version 2: http://www.FreeRTOS.org/[01;31m[Kgpl[m[K-2.0.txt

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K    79[m[K	 * [01;31m[Kgratuitos[m[K ARP message and, after a period of time, check the variables here below:
[01;32m[K    82[m[K		/* Becomes non-zero if another device responded to a [01;31m[Kgratuitos[m[K ARP message. */

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    66[m[K		/* Becomes non-zero if another device responded to a [01;31m[Kgratuitos[m[K ARP message. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   118[m[K	#define REG_RESET_CTRL             (0x26)       /* [01;31m[KGRR[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   375[m[K	#define REG_WAKEUP_TIME            (0xD6)       /* [01;31m[KGSWUTR[m[K */

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_OutputARPRequest/OutputARPRequest_harness.c[39m

[01;32m[K    52[m[K	 * of an ARPPacket to [01;31m[Kgurantee[m[K memory safety.

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K     2[m[K	 * Some constants, hardware definitions and comments taken from ST's [01;31m[KHAL[m[K driver

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K     7[m[K	  * @brief   ETH [01;31m[KHAL[m[K module driver.
[01;32m[K   123[m[K	  * @brief ETH [01;31m[KHAL[m[K module driver
[01;32m[K   192[m[K	  * @retval [01;31m[KHAL[m[K status
[01;32m[K   282[m[K		/* Set ETH [01;31m[KHAL[m[K State to Ready */
[01;32m[K   293[m[K	  * @retval [01;31m[KHAL[m[K status
[01;32m[K   303[m[K		/* Set ETH [01;31m[KHAL[m[K state to Disabled */
[01;32m[K   456[m[K	  * @retval [01;31m[KHAL[m[K status
[01;32m[K   476[m[K			/* Set ETH [01;31m[KHAL[m[K State to BUSY_RD */
[01;32m[K   518[m[K			/* Set ETH [01;31m[KHAL[m[K State to READY */
[01;32m[K   538[m[K	  * @retval [01;31m[KHAL[m[K status
[01;32m[K   558[m[K			/* Set ETH [01;31m[KHAL[m[K State to BUSY_WR */
[01;32m[K   600[m[K			/* Set ETH [01;31m[KHAL[m[K State to READY */
[01;32m[K   639[m[K	  * @retval [01;31m[KHAL[m[K status
[01;32m[K   678[m[K	  * @retval [01;31m[KHAL[m[K status
[01;32m[K   717[m[K		 * Regarding the [01;31m[KHAL[m[K delay functions, I noticed that [01;31m[KHAL[m[K delay is being used to workaround the
[01;32m[K   785[m[K	  * @retval [01;31m[KHAL[m[K status
[01;32m[K   937[m[K	  * @retval [01;31m[KHAL[m[K status
[01;32m[K  1036[m[K	  * @brief  Return the ETH [01;31m[KHAL[m[K state
[01;32m[K  1039[m[K	  * @retval [01;31m[KHAL[m[K state
[01;32m[K  1064[m[K	  * @retval [01;31m[KHAL[m[K status
[01;32m[K  1309[m[K	  * @retval [01;31m[KHAL[m[K status

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K     7[m[K	  * @brief   Header file of ETH [01;31m[KHAL[m[K module.
[01;32m[K   411[m[K	  * @brief  [01;31m[KHAL[m[K State structures definition

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   310[m[K					/* Nothing [01;31m[Khappes[m[K to this cache entry for now. */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   374[m[K		As soon as the list [01;31m[Khase[m[K become empty, the DNS timer will be stopped

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   525[m[K	  uint32_t             MulticastFramesFilter;     /*!< Selects the Multicast Frames filter mode: None/[01;31m[KHashTableFilter[m[K/PerfectFilter/PerfectHashTableFilter.
[01;32m[K   528[m[K	  uint32_t             UnicastFramesFilter;       /*!< Selects the Unicast Frames filter mode: [01;31m[KHashTableFilter[m[K/PerfectFilter/PerfectHashTableFilter.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   531[m[K	  uint32_t             [01;31m[KHashTableHigh[m[K;             /*!< This field holds the higher 32 bits of Hash table.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   534[m[K	  uint32_t             [01;31m[KHashTableLow[m[K;              /*!< This field holds the lower 32 bits of Hash table.

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2118[m[K				/* We have sent out a FIN but the peer [01;31m[Khasn[m[K't replied with a FIN

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2247[m[K					/* Sender [01;31m[Khasn[m[K't set the checksum, drop the packet because
[01;32m[K  2265[m[K					/* Sender [01;31m[Khasn[m[K't set the checksum, no use to calculate it. */

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   206[m[K	    // Configure MDC clock rate to [01;31m[KHCLK[m[K / (127 + 1) = 1.25 MHz if system is running at 160 MH

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   243[m[K		/* Get [01;31m[Khclk[m[K frequency value (e.g. 168,000,000) */
[01;32m[K   246[m[K		/* Set CR bits depending on [01;31m[Khclk[m[K value */
[01;32m[K   267[m[K		else /* ( ( [01;31m[Khclk[m[K >= 150000000uL ) && ( [01;31m[Khclk[m[K <= 183000000uL ) ) */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K   308[m[K		 * 100BaseTxFD and [01;31m[KHD[m[K, 10BaseTFD and [01;31m[KHD[m[K, IEEE 802.3.

[1;34m./tools/tcp_mem_stats.c[39m

[01;32m[K   406[m[K		// name;object;size;Heap;Ppointer;HeapMin;[01;31m[KHeapDur[m[K;Comment

[1;34m./tools/tcp_mem_stats.c[39m

[01;32m[K   406[m[K		// name;object;size;Heap;Ppointer;[01;31m[KHeapMin[m[K;HeapDur;Comment

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K     3[m[K	 * Authors include [01;31m[KHein[m[K Tibosch and Richard Barry

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1161[m[K	  /* Set the PM, [01;31m[KHMC[m[K and HPF bits according to ETH MulticastFramesFilter value */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   392[m[K	#define   PHY_HP_MDIX                 (0x0020)     /* Set PHY in [01;31m[KHP[m[K auto MDI-X mode */
[01;32m[K   458[m[K	#define   PORT_HP_MDIX                (0x8000)     /* Set PHY in [01;31m[KHP[m[K auto MDI-X mode */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1161[m[K	  /* Set the PM, HMC and [01;31m[KHPF[m[K bits according to ETH MulticastFramesFilter value */
[01;32m[K  1162[m[K	  /* Set the HUC and [01;31m[KHPF[m[K bits according to ETH UnicastFramesFilter value */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    45[m[K	 * Support and FAQ: visit <a [01;31m[Khref[m[K="http://www.atmel.com/design-support/">Atmel Support</a>
[01;32m[K    45[m[K	 * Support and FAQ: visit <a [01;31m[Khref[m[K="http://www.atmel.com/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K    45[m[K	 * Support and FAQ: visit <a [01;31m[Khref[m[K="http://www.atmel.com/design-support/">Atmel Support</a>
[01;32m[K    45[m[K	 * Support and FAQ: visit <a [01;31m[Khref[m[K="http://www.atmel.com/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.h[39m

[01;32m[K    45[m[K	 * Support and FAQ: visit <a [01;31m[Khref[m[K="http://www.atmel.com/design-support/">Atmel Support</a>
[01;32m[K    45[m[K	 * Support and FAQ: visit <a [01;31m[Khref[m[K="http://www.atmel.com/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K    44[m[K	 * Support and FAQ: visit <a [01;31m[Khref[m[K="http://www.atmel.com/design-support/">Atmel Support</a>
[01;32m[K    44[m[K	 * Support and FAQ: visit <a [01;31m[Khref[m[K="http://www.atmel.com/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K    44[m[K	 * Support and FAQ: visit <a [01;31m[Khref[m[K="http://www.atmel.com/design-support/">Atmel Support</a>
[01;32m[K    44[m[K	 * Support and FAQ: visit <a [01;31m[Khref[m[K="http://www.atmel.com/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1337[m[K			{ MK_PAIR( [01;31m[KHRESP[m[K ) }, /* Enable [01;31m[KHresp[m[K not OK interrupt. */

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   265[m[K	#define GMAC_TSR_HRESP (0x1u << 8) /**< \brief (GMAC_TSR) [01;31m[KHRESP[m[K Not OK */
[01;32m[K   278[m[K	#define GMAC_RSR_HNO (0x1u << 3) /**< \brief (GMAC_RSR) [01;31m[KHRESP[m[K Not OK */
[01;32m[K   289[m[K	#define GMAC_ISR_HRESP (0x1u << 11) /**< \brief (GMAC_ISR) [01;31m[KHRESP[m[K Not OK */
[01;32m[K   314[m[K	#define GMAC_IER_HRESP (0x1u << 11) /**< \brief (GMAC_IER) [01;31m[KHRESP[m[K Not OK */
[01;32m[K   339[m[K	#define GMAC_IDR_HRESP (0x1u << 11) /**< \brief (GMAC_IDR) [01;31m[KHRESP[m[K Not OK */
[01;32m[K   364[m[K	#define GMAC_IMR_HRESP (0x1u << 11) /**< \brief (GMAC_IMR) [01;31m[KHRESP[m[K Not OK */
[01;32m[K   685[m[K	#define GMAC_ISRPQ_HRESP (0x1u << 11) /**< \brief (GMAC_ISRPQ[7]) [01;31m[KHRESP[m[K Not OK */
[01;32m[K   725[m[K	#define GMAC_IERPQ_HRESP (0x1u << 11) /**< \brief (GMAC_IERPQ[7]) [01;31m[KHRESP[m[K Not OK */
[01;32m[K   733[m[K	#define GMAC_IDRPQ_HRESP (0x1u << 11) /**< \brief (GMAC_IDRPQ[7]) [01;31m[KHRESP[m[K Not OK */
[01;32m[K   741[m[K	#define GMAC_IMRPQ_HRESP (0x1u << 11) /**< \brief (GMAC_IMRPQ[7]) [01;31m[KHRESP[m[K Not OK */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1340[m[K			{ MK_PAIR( [01;31m[KHRESP[m[K ) }, /* Enable [01;31m[KHresp[m[K not OK interrupt. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   332[m[K				GMAC_IER_HRESP | /* Enable [01;31m[KHresp[m[K not OK interrupt. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K  1409[m[K			{ MK_PAIR( [01;31m[KHRESP[m[K ) }, /* Enable [01;31m[KHresp[m[K not OK interrupt. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   357[m[K				GMAC_IER_HRESP | /* Enable [01;31m[KHresp[m[K not OK interrupt. */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1658[m[K			/* [01;31m[KHT[m[K: started using defines like 'ipSIZE_OF_xxx' */
[01;32m[K  1660[m[K			/* [01;31m[KHT[m[K:endian: should not be translated, copying from packet to packet */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   845[m[K						/* [01;31m[KHT[m[K:endian: used to be network order */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   270[m[K	 * End of: [01;31m[KHT[m[K Added some macro defaults for the PLUS-UDP project

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K   107[m[K		/* [01;31m[KHT[m[K: SANITY code will be removed as soon as the library is stable

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   789[m[K			/* [01;31m[KHT[m[K: Might want to make the following configurable because

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1917[m[K			/* [01;31m[KHT[m[K:endian: changed back */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K    62[m[K	/* [01;31m[KHT[m[K: Extended the number of error codes, gave them positive values and if possible

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   273[m[K	 * End of: [01;31m[KHT[m[K Added some macro defaults for the PLUS-UDP project

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   315[m[K	 * A "challenge ACK" is as per https://tools.ietf.org/[01;31m[Khtml[m[K/rfc5961#section-3.2,
[01;32m[K   315[m[K	 * A "challenge ACK" is as per https://tools.ietf.org/[01;31m[Khtml[m[K/rfc5961#section-3.2,
[01;32m[K  3170[m[K						/* Implement https://tools.ietf.org/[01;31m[Khtml[m[K/rfc5961#section-3.2. */
[01;32m[K  3170[m[K						/* Implement https://tools.ietf.org/[01;31m[Khtml[m[K/rfc5961#section-3.2. */

[1;34m./test/unit-test/ConfigFiles/pack_struct_start.h[39m

[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K    41[m[K	 * http://www.freertos.org/a00110.[01;31m[Khtml[m[K
[01;32m[K    41[m[K	 * http://www.freertos.org/a00110.[01;31m[Khtml[m[K

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K    26[m[K	* http://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.[01;31m[Khtml[m[K
[01;32m[K    26[m[K	* http://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.[01;31m[Khtml[m[K
[01;32m[K    97[m[K	 * http://www.freertos.org/Stacks-and-stack-overflow-checking.[01;31m[Khtml[m[K. */
[01;32m[K    97[m[K	 * http://www.freertos.org/Stacks-and-stack-overflow-checking.[01;31m[Khtml[m[K. */

[1;34m./test/unit-test/ConfigFiles/pack_struct_end.h[39m

[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K

[1;34m./test/unit-test/ConfigFiles/IPTraceMacroDefaults.h[39m

[01;32m[K    28[m[K	http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Trace.[01;31m[Khtml[m[K */
[01;32m[K    28[m[K	http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Trace.[01;31m[Khtml[m[K */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   129[m[K		#error ipconfigDHCP_USES_USER_HOOK and its associated callback have been superceeded - see http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.[01;31m[Khtml[m[K#ipconfigUSE_DHCP_HOOK
[01;32m[K   409[m[K			/* Per https://tools.ietf.org/[01;31m[Khtml[m[K/rfc1035, 253 is the maximum string length
[01;32m[K   409[m[K			/* Per https://tools.ietf.org/[01;31m[Khtml[m[K/rfc1035, 253 is the maximum string length

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K    37[m[K	* http://www.freertos.org/a00110.[01;31m[Khtml[m[K
[01;32m[K    37[m[K	* http://www.freertos.org/a00110.[01;31m[Khtml[m[K
[01;32m[K   176[m[K	 * http://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_Echo_Clients.[01;31m[Khtml[m[K,
[01;32m[K   176[m[K	 * http://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_Echo_Clients.[01;31m[Khtml[m[K,
[01;32m[K   177[m[K	 * http://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/UDP_Echo_Clients.[01;31m[Khtml[m[K. */
[01;32m[K   177[m[K	 * http://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/UDP_Echo_Clients.[01;31m[Khtml[m[K. */

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K    30[m[K	* http://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.[01;31m[Khtml[m[K
[01;32m[K    30[m[K	* http://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.[01;31m[Khtml[m[K
[01;32m[K    96[m[K	 * http://www.freertos.org/Stacks-and-stack-overflow-checking.[01;31m[Khtml[m[K. */
[01;32m[K    96[m[K	 * http://www.freertos.org/Stacks-and-stack-overflow-checking.[01;31m[Khtml[m[K. */

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K    30[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/socket.[01;31m[Khtml[m[K
[01;32m[K    30[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/socket.[01;31m[Khtml[m[K
[01;32m[K    46[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/setsockopt.[01;31m[Khtml[m[K
[01;32m[K    46[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/setsockopt.[01;31m[Khtml[m[K
[01;32m[K    64[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/close.[01;31m[Khtml[m[K
[01;32m[K    64[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/close.[01;31m[Khtml[m[K
[01;32m[K    76[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/bind.[01;31m[Khtml[m[K
[01;32m[K    76[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/bind.[01;31m[Khtml[m[K
[01;32m[K    92[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/inet_addr.[01;31m[Khtml[m[K
[01;32m[K    92[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/inet_addr.[01;31m[Khtml[m[K
[01;32m[K   104[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/recvfrom.[01;31m[Khtml[m[K
[01;32m[K   104[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/recvfrom.[01;31m[Khtml[m[K
[01;32m[K   177[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/sendto.[01;31m[Khtml[m[K
[01;32m[K   177[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/sendto.[01;31m[Khtml[m[K
[01;32m[K   198[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/FreeRTOS_GetUDPPayloadBuffer.[01;31m[Khtml[m[K
[01;32m[K   198[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/FreeRTOS_GetUDPPayloadBuffer.[01;31m[Khtml[m[K
[01;32m[K   219[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/FreeRTOS_ReleaseUDPPayloadBuffer.[01;31m[Khtml[m[K
[01;32m[K   219[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/FreeRTOS_ReleaseUDPPayloadBuffer.[01;31m[Khtml[m[K
[01;32m[K   235[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/pxGetNetworkBufferWithDescriptor.[01;31m[Khtml[m[K
[01;32m[K   235[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/pxGetNetworkBufferWithDescriptor.[01;31m[Khtml[m[K
[01;32m[K   306[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/vReleaseNetworkBufferAndDescriptor.[01;31m[Khtml[m[K
[01;32m[K   306[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/vReleaseNetworkBufferAndDescriptor.[01;31m[Khtml[m[K
[01;32m[K   324[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/FreeRTOS_GetAddressConfiguration.[01;31m[Khtml[m[K
[01;32m[K   324[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/FreeRTOS_GetAddressConfiguration.[01;31m[Khtml[m[K
[01;32m[K   362[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/vApplicationIPNetworkEventHook.[01;31m[Khtml[m[K
[01;32m[K   362[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/vApplicationIPNetworkEventHook.[01;31m[Khtml[m[K
[01;32m[K   371[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.[01;31m[Khtml[m[K
[01;32m[K   371[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.[01;31m[Khtml[m[K
[01;32m[K   384[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Porting.[01;31m[Khtml[m[K#xNetworkInterfaceOutput
[01;32m[K   384[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Porting.[01;31m[Khtml[m[K#xNetworkInterfaceOutput

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K    66[m[K	Per https://tools.ietf.org/[01;31m[Khtml[m[K/rfc6056, "the dynamic ports consist of the range
[01;32m[K    66[m[K	Per https://tools.ietf.org/[01;31m[Khtml[m[K/rfc6056, "the dynamic ports consist of the range
[01;32m[K  1736[m[K	/* Find an available port number per https://tools.ietf.org/[01;31m[Khtml[m[K/rfc6056. */
[01;32m[K  1736[m[K	/* Find an available port number per https://tools.ietf.org/[01;31m[Khtml[m[K/rfc6056. */
[01;32m[K  3192[m[K		 * [01;31m[KHTML[m[K driver wants to see if a sequence of 13/10/13/10 is available. */

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K    30[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.[01;31m[Khtml[m[K
[01;32m[K    30[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.[01;31m[Khtml[m[K

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K    32[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.[01;31m[Khtml[m[K
[01;32m[K    32[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.[01;31m[Khtml[m[K

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K    73[m[K	http://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.[01;31m[Khtml[m[K */
[01;32m[K    73[m[K	http://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.[01;31m[Khtml[m[K */

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K    62[m[K	* http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.[01;31m[Khtml[m[K
[01;32m[K    62[m[K	* http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.[01;31m[Khtml[m[K

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K    73[m[K	http://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.[01;31m[Khtml[m[K */
[01;32m[K    73[m[K	http://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.[01;31m[Khtml[m[K */

[1;34m./portable/Compiler/Keil/pack_struct_start.h[39m

[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K

[1;34m./portable/Compiler/Keil/pack_struct_end.h[39m

[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K

[1;34m./portable/Compiler/Renesas/pack_struct_start.h[39m

[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K

[1;34m./portable/Compiler/Renesas/pack_struct_end.h[39m

[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K

[1;34m./portable/Compiler/GCC/pack_struct_start.h[39m

[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K

[1;34m./portable/Compiler/GCC/pack_struct_end.h[39m

[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K

[1;34m./portable/Compiler/MSVC/pack_struct_start.h[39m

[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K

[1;34m./portable/Compiler/MSVC/pack_struct_end.h[39m

[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K

[1;34m./portable/Compiler/CompilerName/pack_struct_start.h[39m

[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K

[1;34m./portable/Compiler/CompilerName/pack_struct_end.h[39m

[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K

[1;34m./portable/Compiler/IAR/pack_struct_start.h[39m

[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K

[1;34m./portable/Compiler/IAR/pack_struct_end.h[39m

[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.[01;31m[Khtml[m[K

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1361[m[K		/* Per the ARP Cache Validation section of https://tools.ietf.org/[01;31m[Khtml[m[K/rfc1122, 
[01;32m[K  1361[m[K		/* Per the ARP Cache Validation section of https://tools.ietf.org/[01;31m[Khtml[m[K/rfc1122, 
[01;32m[K  2138[m[K			/* Per https://tools.ietf.org/[01;31m[Khtml[m[K/rfc791, the four-bit Internet Header
[01;32m[K  2138[m[K			/* Per https://tools.ietf.org/[01;31m[Khtml[m[K/rfc791, the four-bit Internet Header

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   257[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/FreeRTOS_TCP_API_Functions.[01;31m[Khtml[m[K
[01;32m[K   257[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/FreeRTOS_TCP_API_Functions.[01;31m[Khtml[m[K

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   218[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/FreeRTOS_TCP_API_Functions.[01;31m[Khtml[m[K
[01;32m[K   218[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/FreeRTOS_TCP_API_Functions.[01;31m[Khtml[m[K
[01;32m[K   384[m[K	 * [01;31m[KHTML[m[K driver wants to see if a sequence of 13/10/13/10 is available

[1;34m./include/IPTraceMacroDefaults.h[39m

[01;32m[K    28[m[K	http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Trace.[01;31m[Khtml[m[K */
[01;32m[K    28[m[K	http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Trace.[01;31m[Khtml[m[K */

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   132[m[K		#error ipconfigDHCP_USES_USER_HOOK and its associated callback have been superceeded - see http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.[01;31m[Khtml[m[K#ipconfigUSE_DHCP_HOOK
[01;32m[K   439[m[K			/* Per https://tools.ietf.org/[01;31m[Khtml[m[K/rfc1035, 253 is the maximum string length
[01;32m[K   439[m[K			/* Per https://tools.ietf.org/[01;31m[Khtml[m[K/rfc1035, 253 is the maximum string length

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    97[m[K		http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.[01;31m[Khtml[m[K#ipconfigUSE_DHCP_HOOK
[01;32m[K    97[m[K		http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.[01;31m[Khtml[m[K#ipconfigUSE_DHCP_HOOK

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   750[m[K			/* Fill the packet, using [01;31m[Khton[m[K translations. */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./test/unit-test/ConfigFiles/pack_struct_start.h[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./test/unit-test/ConfigFiles/portmacro.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    41[m[K	 * [01;31m[Khttp[m[K://www.freertos.org/a00110.html
[01;32m[K    41[m[K	 * [01;31m[Khttp[m[K://www.freertos.org/a00110.html

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K    18[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    18[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    19[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    19[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    26[m[K	* [01;31m[Khttp[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K    26[m[K	* [01;31m[Khttp[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K    97[m[K	 * [01;31m[Khttp[m[K://www.freertos.org/Stacks-and-stack-overflow-checking.html. */
[01;32m[K    97[m[K	 * [01;31m[Khttp[m[K://www.freertos.org/Stacks-and-stack-overflow-checking.html. */
[01;32m[K   111[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/vApplicationIPNetworkEventHook.shtml.
[01;32m[K   111[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/vApplicationIPNetworkEventHook.shtml.

[1;34m./test/unit-test/ConfigFiles/pack_struct_end.h[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./test/unit-test/ConfigFiles/FreeRTOS_errno_TCP.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./test/unit-test/ConfigFiles/NetworkInterface.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./test/unit-test/ConfigFiles/NetworkBufferManagement.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./test/unit-test/ConfigFiles/IPTraceMacroDefaults.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    28[m[K	[01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Trace.html */
[01;32m[K    28[m[K	[01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Trace.html */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K   129[m[K		#error ipconfigDHCP_USES_USER_HOOK and its associated callback have been superceeded - see [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html#ipconfigUSE_DHCP_HOOK

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_OutputARPRequest/OutputARPRequest_harness.c[39m

[01;32m[K    25[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    25[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    26[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    26[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./test/cbmc/proofs/IP/SendEventToIPTask/SendEventToIPTask_harness.c[39m

[01;32m[K    25[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    25[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    26[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    26[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./test/cbmc/proofs/TCP/prvTCPReturnPacket/TCPReturnPacket_harness.c[39m

[01;32m[K    25[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    25[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    26[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    26[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./test/cbmc/proofs/TCP/prvTCPPrepareSend/TCPPrepareSend_harness.c[39m

[01;32m[K    25[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    25[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    26[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    26[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K    25[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    25[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    26[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    26[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./test/cbmc/proofs/DHCP/IsDHCPSocket/IsDHCPSocket_harness.c[39m

[01;32m[K    25[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    25[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    26[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    26[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./test/cbmc/proofs/DHCP/DHCPProcess/DHCPProcess_harness.c[39m

[01;32m[K    25[m[K	  * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    25[m[K	  * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    26[m[K	  * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    26[m[K	  * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    37[m[K	* [01;31m[Khttp[m[K://www.freertos.org/a00110.html
[01;32m[K    37[m[K	* [01;31m[Khttp[m[K://www.freertos.org/a00110.html
[01;32m[K   176[m[K	 * [01;31m[Khttp[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_Echo_Clients.html,
[01;32m[K   176[m[K	 * [01;31m[Khttp[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_Echo_Clients.html,
[01;32m[K   177[m[K	 * [01;31m[Khttp[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/UDP_Echo_Clients.html. */
[01;32m[K   177[m[K	 * [01;31m[Khttp[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/UDP_Echo_Clients.html. */

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    30[m[K	* [01;31m[Khttp[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K    30[m[K	* [01;31m[Khttp[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K    96[m[K	 * [01;31m[Khttp[m[K://www.freertos.org/Stacks-and-stack-overflow-checking.html. */
[01;32m[K    96[m[K	 * [01;31m[Khttp[m[K://www.freertos.org/Stacks-and-stack-overflow-checking.html. */
[01;32m[K   110[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/vApplicationIPNetworkEventHook.shtml.
[01;32m[K   110[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/vApplicationIPNetworkEventHook.shtml.

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./tools/tcp_mem_stats.c[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./FreeRTOS_Stream_Buffer.c[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    30[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html
[01;32m[K    30[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    32[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html
[01;32m[K    32[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html

[1;34m./portable/NetworkInterface/SH2A/NetworkInterface.c[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="[01;31m[Khttp[m[K://www.atmel.com/design-support/">Atmel Support</a>
[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="[01;31m[Khttp[m[K://www.atmel.com/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="[01;31m[Khttp[m[K://www.atmel.com/design-support/">Atmel Support</a>
[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="[01;31m[Khttp[m[K://www.atmel.com/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.h[39m

[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="[01;31m[Khttp[m[K://www.atmel.com/design-support/">Atmel Support</a>
[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="[01;31m[Khttp[m[K://www.atmel.com/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    73[m[K	[01;31m[Khttp[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html */
[01;32m[K    73[m[K	[01;31m[Khttp[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html */

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.c[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./portable/NetworkInterface/mw300_rd/NetworkInterface.c[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K     9[m[K	 ***   FREERTOS+TCP IS STILL IN THE LAB (mainly because the FTP and [01;31m[KHTTP[m[K     ***
[01;32m[K    20[m[K	 ***   URL: [01;31m[Khttp[m[K://www.FreeRTOS.org/contact  Active early adopters may, at   ***
[01;32m[K    20[m[K	 ***   URL: [01;31m[Khttp[m[K://www.FreeRTOS.org/contact  Active early adopters may, at   ***
[01;32m[K    39[m[K	 * The FreeRTOS+TCP License Information Page: [01;31m[Khttp[m[K://www.FreeRTOS.org/tcp_license
[01;32m[K    39[m[K	 * The FreeRTOS+TCP License Information Page: [01;31m[Khttp[m[K://www.FreeRTOS.org/tcp_license
[01;32m[K    40[m[K	 * The FreeRTOS Open Source License: [01;31m[Khttp[m[K://www.FreeRTOS.org/license
[01;32m[K    40[m[K	 * The FreeRTOS Open Source License: [01;31m[Khttp[m[K://www.FreeRTOS.org/license
[01;32m[K    41[m[K	 * The GNU General Public License Version 2: [01;31m[Khttp[m[K://www.FreeRTOS.org/gpl-2.0.txt
[01;32m[K    41[m[K	 * The GNU General Public License Version 2: [01;31m[Khttp[m[K://www.FreeRTOS.org/gpl-2.0.txt
[01;32m[K    52[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    52[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    53[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/plus
[01;32m[K    53[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/plus
[01;32m[K    54[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/labs
[01;32m[K    54[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/labs
[01;32m[K    62[m[K	* [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html
[01;32m[K    62[m[K	* [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K    44[m[K	 * Support and FAQ: visit <a href="[01;31m[Khttp[m[K://www.atmel.com/design-support/">Atmel Support</a>
[01;32m[K    44[m[K	 * Support and FAQ: visit <a href="[01;31m[Khttp[m[K://www.atmel.com/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K    44[m[K	 * Support and FAQ: visit <a href="[01;31m[Khttp[m[K://www.atmel.com/design-support/">Atmel Support</a>
[01;32m[K    44[m[K	 * Support and FAQ: visit <a href="[01;31m[Khttp[m[K://www.atmel.com/design-support/">Atmel Support</a>
[01;32m[K   418[m[K		 * [01;31m[Khttp[m[K://community.atmel.com/forum/sam4e-gmac-transmit-checksum-offload-enablesolved
[01;32m[K   418[m[K		 * [01;31m[Khttp[m[K://community.atmel.com/forum/sam4e-gmac-transmit-checksum-offload-enablesolved

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    73[m[K	[01;31m[Khttp[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html */
[01;32m[K    73[m[K	[01;31m[Khttp[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html */

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   406[m[K	    // [01;31m[Khttp[m[K://en.wikipedia.org/wiki/MAC_address

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K    27[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    27[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    28[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    28[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./portable/NetworkInterface/board_family/NetworkInterface.c[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./portable/NetworkInterface/esp32/NetworkInterface.c[39m

[01;32m[K     7[m[K	//     [01;31m[Khttp[m[K://www.apache.org/licenses/LICENSE-2.0

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K    15[m[K	* [01;31m[Khttp[m[K://www.renesas.com/disclaimer
[01;32m[K    15[m[K	* [01;31m[Khttp[m[K://www.renesas.com/disclaimer

[1;34m./portable/NetworkInterface/RX/ether_callback.c[39m

[01;32m[K    15[m[K	* [01;31m[Khttp[m[K://www.renesas.com/disclaimer
[01;32m[K    15[m[K	* [01;31m[Khttp[m[K://www.renesas.com/disclaimer

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./portable/Compiler/Keil/pack_struct_start.h[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/Keil/pack_struct_end.h[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/Renesas/pack_struct_start.h[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/Renesas/pack_struct_end.h[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/GCC/pack_struct_start.h[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/GCC/pack_struct_end.h[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/MSVC/pack_struct_start.h[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/MSVC/pack_struct_end.h[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/CompilerName/pack_struct_start.h[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/CompilerName/pack_struct_end.h[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/IAR/pack_struct_start.h[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/IAR/pack_struct_end.h[39m

[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./include/FreeRTOS_errno_TCP.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./include/NetworkInterface.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K   257[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/FreeRTOS_TCP_API_Functions.html
[01;32m[K   257[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/FreeRTOS_TCP_API_Functions.html

[1;34m./include/NetworkBufferManagement.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./include/tcp_dump_packets.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K   218[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/FreeRTOS_TCP_API_Functions.html
[01;32m[K   218[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/FreeRTOS_TCP_API_Functions.html

[1;34m./include/IPTraceMacroDefaults.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    28[m[K	[01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Trace.html */
[01;32m[K    28[m[K	[01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Trace.html */

[1;34m./include/FreeRTOS_TCP_IP.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    38[m[K		 * [01;31m[Khttp[m[K://en.wikipedia.org/wiki/Transmission_Control_Protocol */
[01;32m[K    38[m[K		 * [01;31m[Khttp[m[K://en.wikipedia.org/wiki/Transmission_Control_Protocol */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./include/tcp_mem_stats.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./include/FreeRTOS_UDP_IP.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K   132[m[K		#error ipconfigDHCP_USES_USER_HOOK and its associated callback have been superceeded - see [01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html#ipconfigUSE_DHCP_HOOK

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    22[m[K	 * [01;31m[Khttp[m[K://aws.amazon.com/freertos
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    23[m[K	 * [01;31m[Khttp[m[K://www.FreeRTOS.org
[01;32m[K    97[m[K		[01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html#ipconfigUSE_DHCP_HOOK
[01;32m[K    97[m[K		[01;31m[Khttp[m[K://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html#ipconfigUSE_DHCP_HOOK

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   315[m[K	 * A "challenge ACK" is as per [01;31m[Khttps[m[K://tools.ietf.org/html/rfc5961#section-3.2,
[01;32m[K   315[m[K	 * A "challenge ACK" is as per [01;31m[Khttps[m[K://tools.ietf.org/html/rfc5961#section-3.2,
[01;32m[K  3170[m[K						/* Implement [01;31m[Khttps[m[K://tools.ietf.org/html/rfc5961#section-3.2. */
[01;32m[K  3170[m[K						/* Implement [01;31m[Khttps[m[K://tools.ietf.org/html/rfc5961#section-3.2. */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   602[m[K		[01;31m[Khttps[m[K://www.ietf.org/rfc/rfc2131.txt, Transaction ID should be a random
[01;32m[K   602[m[K		[01;31m[Khttps[m[K://www.ietf.org/rfc/rfc2131.txt, Transaction ID should be a random

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   409[m[K			/* Per [01;31m[Khttps[m[K://tools.ietf.org/html/rfc1035, 253 is the maximum string length
[01;32m[K   409[m[K			/* Per [01;31m[Khttps[m[K://tools.ietf.org/html/rfc1035, 253 is the maximum string length

[1;34m./test/cbmc/proofs/DNS/DNSHandlePacket/DNShandlePacket_harness.c[39m

[01;32m[K    11[m[K	The proof can be found here: [01;31m[Khttps[m[K://github.com/aws/amazon-freertos/tree/master/tools/cbmc/proofs/ParseDNSReply */
[01;32m[K    11[m[K	The proof can be found here: [01;31m[Khttps[m[K://github.com/aws/amazon-freertos/tree/master/tools/cbmc/proofs/ParseDNSReply */

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K    30[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/socket.html
[01;32m[K    30[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/socket.html
[01;32m[K    46[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/setsockopt.html
[01;32m[K    46[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/setsockopt.html
[01;32m[K    64[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/close.html
[01;32m[K    64[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/close.html
[01;32m[K    76[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/bind.html
[01;32m[K    76[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/bind.html
[01;32m[K    92[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/inet_addr.html
[01;32m[K    92[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/inet_addr.html
[01;32m[K   104[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/recvfrom.html
[01;32m[K   104[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/recvfrom.html
[01;32m[K   177[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/sendto.html
[01;32m[K   177[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/sendto.html
[01;32m[K   198[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/FreeRTOS_GetUDPPayloadBuffer.html
[01;32m[K   198[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/FreeRTOS_GetUDPPayloadBuffer.html
[01;32m[K   219[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/FreeRTOS_ReleaseUDPPayloadBuffer.html
[01;32m[K   219[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/FreeRTOS_ReleaseUDPPayloadBuffer.html
[01;32m[K   235[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/pxGetNetworkBufferWithDescriptor.html
[01;32m[K   235[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/pxGetNetworkBufferWithDescriptor.html
[01;32m[K   306[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/vReleaseNetworkBufferAndDescriptor.html
[01;32m[K   306[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/vReleaseNetworkBufferAndDescriptor.html
[01;32m[K   324[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/FreeRTOS_GetAddressConfiguration.html
[01;32m[K   324[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/FreeRTOS_GetAddressConfiguration.html
[01;32m[K   362[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/vApplicationIPNetworkEventHook.html
[01;32m[K   362[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/vApplicationIPNetworkEventHook.html
[01;32m[K   371[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K   371[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K   384[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Porting.html#xNetworkInterfaceOutput
[01;32m[K   384[m[K	 * [01;31m[Khttps[m[K://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Porting.html#xNetworkInterfaceOutput

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K    66[m[K	Per [01;31m[Khttps[m[K://tools.ietf.org/html/rfc6056, "the dynamic ports consist of the range
[01;32m[K    66[m[K	Per [01;31m[Khttps[m[K://tools.ietf.org/html/rfc6056, "the dynamic ports consist of the range
[01;32m[K  1736[m[K	/* Find an available port number per [01;31m[Khttps[m[K://tools.ietf.org/html/rfc6056. */
[01;32m[K  1736[m[K	/* Find an available port number per [01;31m[Khttps[m[K://tools.ietf.org/html/rfc6056. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1361[m[K		/* Per the ARP Cache Validation section of [01;31m[Khttps[m[K://tools.ietf.org/html/rfc1122, 
[01;32m[K  1361[m[K		/* Per the ARP Cache Validation section of [01;31m[Khttps[m[K://tools.ietf.org/html/rfc1122, 
[01;32m[K  2138[m[K			/* Per [01;31m[Khttps[m[K://tools.ietf.org/html/rfc791, the four-bit Internet Header
[01;32m[K  2138[m[K			/* Per [01;31m[Khttps[m[K://tools.ietf.org/html/rfc791, the four-bit Internet Header

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   439[m[K			/* Per [01;31m[Khttps[m[K://tools.ietf.org/html/rfc1035, 253 is the maximum string length
[01;32m[K   439[m[K			/* Per [01;31m[Khttps[m[K://tools.ietf.org/html/rfc1035, 253 is the maximum string length

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1162[m[K	  /* Set the [01;31m[KHUC[m[K and HPF bits according to ETH UnicastFramesFilter value */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   600[m[K	 * The EmacPs has a [01;31m[KHW[m[K bug (SI# 692601) on the Rx path for heavy Rx traffic.
[01;32m[K   601[m[K	 * Under heavy Rx traffic because of the [01;31m[KHW[m[K bug there are times when the Rx path

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K   215[m[K	 * \brief Perform a [01;31m[KHW[m[K initialization to the PHY and set up clocks.

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   233[m[K		/** Pointer to [01;31m[KHW[m[K register base */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K   141[m[K	 * \brief Perform a [01;31m[KHW[m[K initialization to the PHY and set up clocks.

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   236[m[K		/** Pointer to [01;31m[KHW[m[K register base */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   159[m[K	 * \param p_gmac [01;31m[KHW[m[K controller address.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   255[m[K		/** Pointer to [01;31m[KHW[m[K register base */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   186[m[K	 * \param p_gmac [01;31m[KHW[m[K controller address.

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   125[m[K		/* Adjust PIO debounce filter parameters, uses 10 [01;31m[KHz[m[K filter. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   342[m[K	#define REG_IND_IACR               (0xC8)       /* [01;31m[KIACR[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   348[m[K	#define REG_IND_DATA_HIGH          (0xD2)       /* [01;31m[KIADHR[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   347[m[K	#define REG_IND_DATA_LOW           (0xD0)       /* [01;31m[KIADLR[m[K */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K   240[m[K	 * generate replies to incoming [01;31m[KICMP[m[K echo (ping) requests. */

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K   247[m[K	 * generate replies to incoming [01;31m[KICMP[m[K echo (ping) requests. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   171[m[K	#define   TX_CTRL_ICMP_CHECKSUM       (0x0100)    /* Enable [01;31m[KICMP[m[K frame checksum generation */
[01;32m[K   211[m[K	#define   RX_CTRL_ICMP_CHECKSUM       (0x0002)    /* Enable [01;31m[KICMP[m[K frame checksum verification */
[01;32m[K   225[m[K	#define   RX_ICMP_ERROR               (0x2000)    /* [01;31m[KICMP[m[K checksum field doesn't match */

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K   236[m[K				so for [01;31m[KICMP[m[K and other protocols it must be done manually. */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   532[m[K				/* Set the DMA Tx descriptors checksum insertion for TCP, UDP, and [01;31m[KICMP[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   491[m[K	  uint32_t             ChecksumOffload;           /*!< Selects or not the IPv4 checksum checking for received frame payloads' TCP/UDP/[01;31m[KICMP[m[K headers.
[01;32m[K   804[m[K	#define ETH_DMATXDESC_CIC_TCPUDPICMP_SEGMENT  ((uint32_t)0x00800000U)  /*!< TCP/UDP/[01;31m[KICMP[m[K Checksum Insertion calculated over segment only */
[01;32m[K   805[m[K	#define ETH_DMATXDESC_CIC_TCPUDPICMP_FULL     ((uint32_t)0x00C00000U)  /*!< TCP/UDP/[01;31m[KICMP[m[K Checksum Insertion fully calculated */
[01;32m[K   943[m[K	  #define ETH_DMAPTPRXDESC_IPPT_ICMP                     ((uint32_t)0x00000003U)  /* [01;31m[KICMP[m[K payload encapsulated in the IP datagram */
[01;32m[K  1497[m[K	#define ETH_DMATXDESC_CHECKSUMTCPUDPICMPSEGMENT  ((uint32_t)0x00800000U)   /*!< TCP/UDP/[01;31m[KICMP[m[K checksum insertion. Pseudo header checksum is assumed to be present */
[01;32m[K  1498[m[K	#define ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL     ((uint32_t)0x00C00000U)   /*!< TCP/UDP/[01;31m[KICMP[m[K checksum fully in hardware including pseudo header */
[01;32m[K  1754[m[K	  *     @arg ETH_DMATXDESC_CHECKSUMTCPUDPICMPSEGMENT : TCP/UDP/[01;31m[KICMP[m[K checksum. Pseudo header checksum is assumed to be present
[01;32m[K  1755[m[K	  *     @arg ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL : TCP/UDP/[01;31m[KICMP[m[K checksum fully in hardware including pseudo header

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K   115[m[K				after all, but an [01;31m[KICMP[m[K packet. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K    62[m[K	/* [01;31m[KICMP[m[K protocol definitions. */
[01;32m[K   182[m[K		 * Process incoming [01;31m[KICMP[m[K packets.
[01;32m[K  1606[m[K				/* Is the upper-layer checksum (TCP/UDP/[01;31m[KICMP[m[K) correct? */
[01;32m[K  1714[m[K						/* From: the previous start of UDP/[01;31m[KICMP[m[K/TCP data. */
[01;32m[K  1716[m[K						/* To: the usual start of UDP/[01;31m[KICMP[m[K/TCP data at offset 20 (decimal ) from IP header. */
[01;32m[K  1754[m[K							/* The IP packet contained an [01;31m[KICMP[m[K frame.  Don't bother checking
[01;32m[K  1755[m[K							the [01;31m[KICMP[m[K checksum, as if it is wrong then the wrong data will
[01;32m[K  1763[m[K									/* Map the buffer onto a [01;31m[KICMP[m[K-Packet struct to easily access the
[01;32m[K  1764[m[K									 * fields of [01;31m[KICMP[m[K packet. */
[01;32m[K  1873[m[K			/* Remove the length of the IP headers to obtain the length of the [01;31m[KICMP[m[K
[01;32m[K  1877[m[K			/* Remove the length of the [01;31m[KICMP[m[K header, to obtain the length of
[01;32m[K  1883[m[K			/* Find the first byte of the data within the [01;31m[KICMP[m[K packet. */
[01;32m[K  1976[m[K					/* Only [01;31m[KICMP[m[K echo packets are handled. */
[01;32m[K  2071[m[K					/* Unhandled protocol, other than [01;31m[KICMP[m[K, IGMP, UDP, or TCP. */
[01;32m[K  2229[m[K				/* Unhandled protocol, other than [01;31m[KICMP[m[K, IGMP, UDP, or TCP. */
[01;32m[K  2301[m[K				/* [01;31m[KICMP[m[K/IGMP do not have a pseudo header for CRC-calculation. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   225[m[K		eReturnEthernetFrame,	/* The Ethernet frame contains an ARP or [01;31m[KICMP[m[K packet that can be returned to its source. */
[01;32m[K   368[m[K	/* [01;31m[KICMP[m[K packets are sent using the same function as UDP packets.  The port
[01;32m[K   689[m[K	 * Works both for UDP, [01;31m[KICMP[m[K and TCP packages

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K    88[m[K	/* The character used to fill [01;31m[KICMP[m[K echo requests, and therefore also the
[01;32m[K    89[m[K	character expected to fill [01;31m[KICMP[m[K echo replies. */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K    56[m[K	#define GMII_PHYID1      0x02   // PHY [01;31m[KIdendifier[m[K 1
[01;32m[K    57[m[K	#define GMII_PHYID2      0x03   // PHY [01;31m[KIdendifier[m[K 2
[01;32m[K   182[m[K	// Bit definitions: GMII_PHYID1 0x02 PHY [01;31m[KIdendifier[m[K 1
[01;32m[K   183[m[K	// Bit definitions: GMII_PHYID2 0x03 PHY [01;31m[KIdendifier[m[K 2

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K  1087[m[K		/* Check that descriptor is owned by software ([01;31m[Kie[m[K packet received). */

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K   107[m[K	#define phyADVERTISE_CSMA			0x0001U	/* Supports [01;31m[KIEEE[m[K 802.3u: Fast Ethernet at 100 Mbit/s */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K    53[m[K	// [01;31m[KIEEE[m[K defined Registers
[01;32m[K   203[m[K	#define GMII_AN_IEEE_802_3      0x0001    // [00001] = [01;31m[KIEEE[m[K 802.3

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K   308[m[K		 * 100BaseTxFD and HD, 10BaseTFD and HD, [01;31m[KIEEE[m[K 802.3.

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   273[m[K	#define REG_INT_MASK               (0x90)       /* [01;31m[KIER[m[K */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   315[m[K	 * A "challenge ACK" is as per https://tools.[01;31m[Kietf[m[K.org/html/rfc5961#section-3.2,
[01;32m[K   315[m[K	 * A "challenge ACK" is as per https://tools.[01;31m[Kietf[m[K.org/html/rfc5961#section-3.2,
[01;32m[K  3170[m[K						/* Implement https://tools.[01;31m[Kietf[m[K.org/html/rfc5961#section-3.2. */
[01;32m[K  3170[m[K						/* Implement https://tools.[01;31m[Kietf[m[K.org/html/rfc5961#section-3.2. */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   602[m[K		https://www.[01;31m[Kietf[m[K.org/rfc/rfc2131.txt, Transaction ID should be a random
[01;32m[K   602[m[K		https://www.[01;31m[Kietf[m[K.org/rfc/rfc2131.txt, Transaction ID should be a random

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   409[m[K			/* Per https://tools.[01;31m[Kietf[m[K.org/html/rfc1035, 253 is the maximum string length
[01;32m[K   409[m[K			/* Per https://tools.[01;31m[Kietf[m[K.org/html/rfc1035, 253 is the maximum string length

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K    66[m[K	Per https://tools.[01;31m[Kietf[m[K.org/html/rfc6056, "the dynamic ports consist of the range
[01;32m[K    66[m[K	Per https://tools.[01;31m[Kietf[m[K.org/html/rfc6056, "the dynamic ports consist of the range
[01;32m[K  1736[m[K	/* Find an available port number per https://tools.[01;31m[Kietf[m[K.org/html/rfc6056. */
[01;32m[K  1736[m[K	/* Find an available port number per https://tools.[01;31m[Kietf[m[K.org/html/rfc6056. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1361[m[K		/* Per the ARP Cache Validation section of https://tools.[01;31m[Kietf[m[K.org/html/rfc1122, 
[01;32m[K  1361[m[K		/* Per the ARP Cache Validation section of https://tools.[01;31m[Kietf[m[K.org/html/rfc1122, 
[01;32m[K  2138[m[K			/* Per https://tools.[01;31m[Kietf[m[K.org/html/rfc791, the four-bit Internet Header
[01;32m[K  2138[m[K			/* Per https://tools.[01;31m[Kietf[m[K.org/html/rfc791, the four-bit Internet Header

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   439[m[K			/* Per https://tools.[01;31m[Kietf[m[K.org/html/rfc1035, 253 is the maximum string length
[01;32m[K   439[m[K			/* Per https://tools.[01;31m[Kietf[m[K.org/html/rfc1035, 253 is the maximum string length

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   195[m[K			#endif /* [01;31m[Kifdef[m[K FreeRTOS_debug_printf */
[01;32m[K   197[m[K	#endif /* [01;31m[Kifdef[m[K ipconfigHAS_DEBUG_PRINTF */
[01;32m[K   216[m[K			#endif /* [01;31m[Kifdef[m[K FreeRTOS_debug_printf */
[01;32m[K   218[m[K	#endif /* [01;31m[Kifdef[m[K ipconfigHAS_PRINTF */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K   889[m[K	#endif /* #[01;31m[Kifdef[m[K PIC32_USE_ETHERNET */

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   282[m[K	#endif /* #[01;31m[Kifdef[m[K PIC32_USE_ETHERNET */
[01;32m[K   376[m[K	    #endif /* #[01;31m[Kifdef[m[K PIC32_USE_ETHERNET */
[01;32m[K   407[m[K	    #endif /* #[01;31m[Kifdef[m[K PIC32_USE_ETHERNET */
[01;32m[K   427[m[K		#endif /* #[01;31m[Kifdef[m[K PIC32_USE_ETHERNET */
[01;32m[K   436[m[K		#endif /* #[01;31m[Kifdef[m[K PIC32_USE_ETHERNET */
[01;32m[K   469[m[K	            #endif /* #[01;31m[Kifdef[m[K PIC32_USE_ETHERNET */
[01;32m[K   490[m[K	                #endif /* #[01;31m[Kifdef[m[K PIC32_USE_ETHERNET */
[01;32m[K   591[m[K	    #endif /* #[01;31m[Kifdef[m[K PIC32_USE_ETHERNET */
[01;32m[K   613[m[K	        #endif /* #[01;31m[Kifdef[m[K PIC32_USE_ETHERNET */

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   198[m[K			#endif /* [01;31m[Kifdef[m[K FreeRTOS_debug_printf */
[01;32m[K   200[m[K	#endif /* [01;31m[Kifdef[m[K ipconfigHAS_DEBUG_PRINTF */
[01;32m[K   219[m[K			#endif /* [01;31m[Kifdef[m[K FreeRTOS_debug_printf */
[01;32m[K   221[m[K	#endif /* [01;31m[Kifdef[m[K ipconfigHAS_PRINTF */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1126[m[K	  /* Set the [01;31m[KIFG[m[K bit according to ETH InterFrameGap value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   477[m[K	  uint32_t             InterFrameGap;             /*!< Selects the minimum [01;31m[KIFG[m[K between frames during transmission.
[01;32m[K  1027[m[K	#define ETH_INTERFRAMEGAP_96BIT   ((uint32_t)0x00000000U)  /*!< minimum [01;31m[KIFG[m[K between frames during transmission is 96Bit */
[01;32m[K  1028[m[K	#define ETH_INTERFRAMEGAP_88BIT   ((uint32_t)0x00020000U)  /*!< minimum [01;31m[KIFG[m[K between frames during transmission is 88Bit */
[01;32m[K  1029[m[K	#define ETH_INTERFRAMEGAP_80BIT   ((uint32_t)0x00040000U)  /*!< minimum [01;31m[KIFG[m[K between frames during transmission is 80Bit */
[01;32m[K  1030[m[K	#define ETH_INTERFRAMEGAP_72BIT   ((uint32_t)0x00060000U)  /*!< minimum [01;31m[KIFG[m[K between frames during transmission is 72Bit */
[01;32m[K  1031[m[K	#define ETH_INTERFRAMEGAP_64BIT   ((uint32_t)0x00080000U)  /*!< minimum [01;31m[KIFG[m[K between frames during transmission is 64Bit */
[01;32m[K  1032[m[K	#define ETH_INTERFRAMEGAP_56BIT   ((uint32_t)0x000A0000U)  /*!< minimum [01;31m[KIFG[m[K between frames during transmission is 56Bit */
[01;32m[K  1033[m[K	#define ETH_INTERFRAMEGAP_48BIT   ((uint32_t)0x000C0000U)  /*!< minimum [01;31m[KIFG[m[K between frames during transmission is 48Bit */
[01;32m[K  1034[m[K	#define ETH_INTERFRAMEGAP_40BIT   ((uint32_t)0x000E0000U)  /*!< minimum [01;31m[KIFG[m[K between frames during transmission is 40Bit */
[01;32m[K  1292[m[K		#define ETH_MAC_TRANSMITFRAMECONTROLLER_WAITING         ((uint32_t)0x00020000)  /* MAC transmit frame controller: Waiting for Status of previous frame or [01;31m[KIFG[m[K/backoff period to be over */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_wifi.c[39m

[01;32m[K   192[m[K	#endif /* #[01;31m[Kifndef[m[K PIC32_USE_ETHERNET */

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   387[m[K			#endif /* #[01;31m[Kifndef[m[K PIC32_USE_ETHERNET */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K   280[m[K	#endif /* #[01;31m[Kifndef[m[K ETHERNET_PHY_H_INCLUDED */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K    51[m[K		#[01;31m[Kifndef[m[K TASK_H /* For compatibility with older FreeRTOS versions. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2071[m[K					/* Unhandled protocol, other than ICMP, [01;31m[KIGMP[m[K, UDP, or TCP. */
[01;32m[K  2229[m[K				/* Unhandled protocol, other than ICMP, [01;31m[KIGMP[m[K, UDP, or TCP. */
[01;32m[K  2301[m[K				/* ICMP/[01;31m[KIGMP[m[K do not have a pseudo header for CRC-calculation. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1724[m[K						/* Rewrite the Version/[01;31m[KIHL[m[K byte to indicate that this packet has no IP options. */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./test/unit-test/ConfigFiles/pack_struct_start.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./test/unit-test/ConfigFiles/portmacro.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2020 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2020 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./test/unit-test/ConfigFiles/pack_struct_end.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./test/unit-test/ConfigFiles/FreeRTOS_errno_TCP.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./test/unit-test/ConfigFiles/NetworkInterface.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./test/unit-test/ConfigFiles/NetworkBufferManagement.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./test/unit-test/ConfigFiles/IPTraceMacroDefaults.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_OutputARPRequest/OutputARPRequest_harness.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2019 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./test/cbmc/proofs/IP/SendEventToIPTask/SendEventToIPTask_harness.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2019 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./test/cbmc/proofs/TCP/prvTCPReturnPacket/TCPReturnPacket_harness.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2019 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./test/cbmc/proofs/TCP/prvTCPPrepareSend/TCPPrepareSend_harness.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2019 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2019 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./test/cbmc/proofs/DHCP/IsDHCPSocket/IsDHCPSocket_harness.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2019 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./test/cbmc/proofs/DHCP/DHCPProcess/DHCPProcess_harness.c[39m

[01;32m[K     3[m[K	  * Copyright (C) 2019 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./tools/tcp_mem_stats.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./FreeRTOS_Stream_Buffer.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/NetworkInterface/SH2A/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2020 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2020 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/NetworkInterface/Zynq/x_topology.h[39m

[01;32m[K     2[m[K	 * Copyright (c) 2007-2013 Xilinx, [01;31m[KInc[m[K.  All rights reserved.
[01;32m[K     4[m[K	 * Xilinx, [01;31m[KInc[m[K.

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2020 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2020 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_hw.c[39m

[01;32m[K     2[m[K	 * Copyright (c) 2010-2013 Xilinx, [01;31m[KInc[m[K.  All rights reserved.
[01;32m[K     4[m[K	 * Xilinx, [01;31m[KInc[m[K.

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_hw.h[39m

[01;32m[K     2[m[K	 * Copyright (c) 2010-2013 Xilinx, [01;31m[KInc[m[K.  All rights reserved.
[01;32m[K     4[m[K	 * Xilinx, [01;31m[KInc[m[K.

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_physpeed.c[39m

[01;32m[K     2[m[K	 * Copyright (c) 2007-2008, Advanced Micro Devices, [01;31m[KInc[m[K.
[01;32m[K    15[m[K	 *    * Neither the name of Advanced Micro Devices, [01;31m[KInc[m[K. nor the names
[01;32m[K    34[m[K	 * Some portions copyright (c) 2010-2013 Xilinx, [01;31m[KInc[m[K.  All rights reserved.
[01;32m[K    36[m[K	 * Xilinx, [01;31m[KInc[m[K.

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif.h[39m

[01;32m[K     2[m[K	 * Copyright (c) 2010-2013 Xilinx, [01;31m[KInc[m[K.  All rights reserved.
[01;32m[K     4[m[K	 * Xilinx, [01;31m[KInc[m[K.

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/NetworkInterface/mw300_rd/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2018 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2018 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K     8[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/NetworkInterface/board_family/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2018 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/Compiler/Keil/pack_struct_start.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/Compiler/Keil/pack_struct_end.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/Compiler/Renesas/pack_struct_start.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/Compiler/Renesas/pack_struct_end.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/Compiler/GCC/pack_struct_start.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/Compiler/GCC/pack_struct_end.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/Compiler/MSVC/pack_struct_start.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/Compiler/MSVC/pack_struct_end.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/Compiler/CompilerName/pack_struct_start.h[39m

[01;32m[K     3[m[K	Copyright (C) 2018 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/Compiler/CompilerName/pack_struct_end.h[39m

[01;32m[K     3[m[K	Copyright (C) 2018 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/Compiler/IAR/pack_struct_start.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./portable/Compiler/IAR/pack_struct_end.h[39m

[01;32m[K     3[m[K	Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./include/FreeRTOS_errno_TCP.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./include/NetworkInterface.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./include/NetworkBufferManagement.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./include/tcp_dump_packets.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2020 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./include/IPTraceMacroDefaults.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./include/FreeRTOS_TCP_IP.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./include/tcp_mem_stats.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2020 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./include/FreeRTOS_UDP_IP.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K     3[m[K	 * Copyright (C) 2017 Amazon.com, [01;31m[KInc[m[K. or its affiliates.  All Rights Reserved.

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2592[m[K					/* Refusing FIN: Rx [01;31m[Kincomp[m[K 1 optlen 4 tx done 1. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   686[m[K	  ETH_DMARxFrameInfos        RxFrameInfos;  /*!< last Rx frame [01;31m[Kinfos[m[K         */

[1;34m./test/cbmc/proofs/Socket/vSocketBind/DONT_ALLOW_SOCKET_SEND_WITHOUT_BIND/vSocketBind_harness.c[39m

[01;32m[K    62[m[K		/* Call to [01;31m[Kinit[m[K the socket list. */

[1;34m./test/cbmc/proofs/Socket/vSocketBind/ALLOW_ETHERNET_DRIVER_FILTERS_PACKETS/vSocketBind_harness.c[39m

[01;32m[K    64[m[K		/* Call to [01;31m[Kinit[m[K the socket list. */

[1;34m./test/cbmc/proofs/Socket/vSocketBind/ALLOW_SOCKET_SEND_WITHOUT_BIND/vSocketBind_harness.c[39m

[01;32m[K    61[m[K		/* Call to [01;31m[Kinit[m[K the socket list. */

[1;34m./test/cbmc/proofs/CBMCStubLibrary/tasksStubs.c[39m

[01;32m[K    26[m[K	/* This function is another method apart from overwritting the defines to [01;31m[Kinit[m[K the max

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K  1006[m[K		/* [01;31m[KInit[m[K pointer index. */
[01;32m[K  1030[m[K		/* [01;31m[KInit[m[K TX index pointer. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   403[m[K		/* [01;31m[KInit[m[K step2-4: write QMU MAC address (low, middle then high). */
[01;32m[K   408[m[K		/* [01;31m[KInit[m[K step5: enable QMU Transmit Frame Data Pointer Auto Increment. */
[01;32m[K   411[m[K		/* [01;31m[KInit[m[K step6: configure QMU transmit control register. */
[01;32m[K   422[m[K		/* [01;31m[KInit[m[K step7: enable QMU Receive Frame Data Pointer Auto Increment. */
[01;32m[K   425[m[K		/* [01;31m[KInit[m[K step8: configure QMU Receive Frame Threshold for one frame. */
[01;32m[K   428[m[K		/* [01;31m[KInit[m[K step9: configure QMU receive control register1. */
[01;32m[K   455[m[K		/* [01;31m[KInit[m[K step11: configure QMU receive queue: trigger INT and auto-dequeue frame. */
[01;32m[K   458[m[K		/* [01;31m[KInit[m[K step12: adjust SPI data output delay. */
[01;32m[K   461[m[K		/* [01;31m[KInit[m[K step13: restart auto-negotiation. */
[01;32m[K   464[m[K		/* [01;31m[KInit[m[K step13.1: force link in half duplex if auto-negotiation failed. */
[01;32m[K   470[m[K		/* [01;31m[KInit[m[K step14: clear interrupt status. */
[01;32m[K   473[m[K		/* [01;31m[KInit[m[K step15: set interrupt mask. */
[01;32m[K   476[m[K		/* [01;31m[KInit[m[K step16: enable QMU Transmit. */
[01;32m[K   479[m[K		/* [01;31m[KInit[m[K step17: enable QMU Receive. */
[01;32m[K   534[m[K			/* [01;31m[KInit[m[K step1: read chip ID. */
[01;32m[K   564[m[K			/* [01;31m[KInit[m[K step1: read chip ID. */

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K   160[m[K		/* Guard against the [01;31m[Kinit[m[K function being called more than once. */

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K    88[m[K	    /* [01;31m[KInit[m[K ETH */

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   213[m[K	    /* [01;31m[KInit[m[K I/O Multi-function                                                                                 */
[01;32m[K   245[m[K	    // [01;31m[Kinit[m[K CLK & pins

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K    23[m[K	      (#)Fill parameters of [01;31m[KInit[m[K structure in heth handle
[01;32m[K   214[m[K			/* [01;31m[KInit[m[K the low level hardware : GPIO, CLOCK, NVIC. */
[01;32m[K   300[m[K		/* De-[01;31m[KInit[m[K the low level hardware : GPIO, CLOCK, NVIC. */
[01;32m[K   486[m[K			tmpreg |= ( ( ( uint32_t )heth->[01;31m[KInit[m[K.PhyAddress << 11) & ETH_MACMIIAR_PA );    /* Set the PHY device address   */
[01;32m[K   568[m[K			tmpreg |= ( ( ( uint32_t ) heth->[01;31m[KInit[m[K.PhyAddress << 11 ) & ETH_MACMIIAR_PA ); /* Set the PHY device address */
[01;32m[K  1063[m[K	  * @param  err: Ethernet [01;31m[KInit[m[K error

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   428[m[K	  * @brief  ETH [01;31m[KInit[m[K Structure definition
[01;32m[K   678[m[K	  ETH_InitTypeDef            [01;31m[KInit[m[K;          /*!< Ethernet [01;31m[KInit[m[K Configuration */

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K    61[m[K	in this array.  The array is not accessed directly except during [01;31m[Kinitialisation[m[K,

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K    82[m[K	in this array.  The array is not accessed directly except during [01;31m[Kinitialisation[m[K,

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K   210[m[K			/* [01;31m[KInitialisation[m[K was already performed, just wait for the link. */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K    84[m[K	        eMACPass,                               /* [01;31m[KInitialisation[m[K was successful. */
[01;32m[K    85[m[K	        eMACFailed,                             /* [01;31m[KInitialisation[m[K failed. */
[01;32m[K   221[m[K	                /* Indicate that the MAC [01;31m[Kinitialisation[m[K succeeded. */

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   116[m[K	 * in this array.  The array is not accessed directly except during [01;31m[Kinitialisation[m[K,

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   152[m[K	    eMACPass,   /* [01;31m[KInitialisation[m[K was successful. */
[01;32m[K   153[m[K	    eMACFailed, /* [01;31m[KInitialisation[m[K failed. */
[01;32m[K   485[m[K			/* EMAC [01;31m[Kinitialisation[m[K failed, return pdFAIL. */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K    88[m[K	    eMACPass,   /* [01;31m[KInitialisation[m[K was successful. */
[01;32m[K    89[m[K	    eMACFailed, /* [01;31m[KInitialisation[m[K failed. */
[01;32m[K   139[m[K	            /* Indicate that the MAC [01;31m[Kinitialisation[m[K succeeded. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   345[m[K		/* [01;31m[KInitialisation[m[K is complete and events can now be processed. */
[01;32m[K  1371[m[K			/* Ideally the network interface [01;31m[Kinitialisation[m[K function will only
[01;32m[K  1373[m[K			wait a while before retrying the [01;31m[Kinitialisation[m[K. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   418[m[K	 * This is used during [01;31m[Kinitialisation[m[K, and at any time the network interface

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   365[m[K		/* [01;31m[KInitialise[m[K the list of call-back structures. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   184[m[K	 * [01;31m[KInitialise[m[K the data structures which keep track of the TCP windowing system.
[01;32m[K   189[m[K	 * Let ARP look-up the MAC-address of the peer and [01;31m[Kinitialise[m[K the first SYN

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   601[m[K		/* [01;31m[KInitialise[m[K the parameters that will be set by the DHCP process. Per

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   330[m[K					/* [01;31m[KInitialise[m[K the socket's members.  The semaphore will be created

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K   166[m[K		/* Only [01;31m[Kinitialise[m[K the buffers and their associated kernel objects if they
[01;32m[K   181[m[K				/* [01;31m[KInitialise[m[K all the network buffers.  The buffer storage comes
[01;32m[K   187[m[K					/* [01;31m[KInitialise[m[K and set the owner of the buffer list items. */

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K   100[m[K		/* Only [01;31m[Kinitialise[m[K the buffers and their associated kernel objects if they
[01;32m[K   127[m[K				/* [01;31m[KInitialise[m[K all the network buffers.  No storage is allocated to
[01;32m[K   131[m[K					/* [01;31m[KInitialise[m[K and set the owner of the buffer list items. */

[1;34m./portable/NetworkInterface/SH2A/NetworkInterface.c[39m

[01;32m[K    85[m[K		/* [01;31m[KInitialise[m[K the MAC. */

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K   167[m[K	/* [01;31m[KInitialise[m[K the struct and assign a PHY-read and -write function. */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K    83[m[K	        eMACInit,                               /* Must [01;31m[Kinitialise[m[K MAC. */

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   290[m[K	    /* Only [01;31m[Kinitialise[m[K the buffers and their associated kernel objects if they
[01;32m[K   317[m[K	            /* [01;31m[KInitialise[m[K all the network buffers.  No storage is allocated to
[01;32m[K   321[m[K	                /* [01;31m[KInitialise[m[K and set the owner of the buffer list items. */

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   115[m[K	 * [01;31m[KInitialise[m[K the ASF GMAC driver.

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   162[m[K	 * [01;31m[KInitialise[m[K the ASF GMAC driver.

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   242[m[K		/* Call the LPCOpen function to [01;31m[Kinitialise[m[K the hardware. */
[01;32m[K   309[m[K	       		/* [01;31m[KInitialise[m[K the descriptors. */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   151[m[K	    eMACInit,   /* Must [01;31m[Kinitialise[m[K MAC. */
[01;32m[K   189[m[K	 * [01;31m[KInitialise[m[K the TX descriptors.
[01;32m[K   194[m[K	 * [01;31m[KInitialise[m[K the RX descriptors.
[01;32m[K   400[m[K				/* [01;31m[KInitialise[m[K ETH */
[01;32m[K   451[m[K				/* [01;31m[KInitialise[m[K TX-descriptors. */
[01;32m[K   454[m[K				/* [01;31m[KInitialise[m[K RX-descriptors. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   276[m[K		/* [01;31m[KInitialise[m[K the MACB and set all PHY properties */

[1;34m./portable/NetworkInterface/include/phyHandling.h[39m

[01;32m[K    90[m[K	/* [01;31m[KInitialise[m[K the struct and assign a PHY-read and -write function. */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K    87[m[K	    eMACInit,   /* Must [01;31m[Kinitialise[m[K MAC. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K    75[m[K	/* Time delay between repeated attempts to [01;31m[Kinitialise[m[K the network hardware. */
[01;32m[K   333[m[K		down.  This will cause this task to [01;31m[Kinitialise[m[K the network interface.  After
[01;32m[K   340[m[K			/* [01;31m[KInitialise[m[K the TCP timer. */
[01;32m[K  1351[m[K			[01;31m[Kinitialise[m[K the network hardware, so do not call the network down event

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   417[m[K	 * Create a message that contains a command to [01;31m[Kinitialise[m[K the network interface.

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   235[m[K			/* Check if the UDP socket-list has been [01;31m[Kinitialised[m[K. */
[01;32m[K   239[m[K				/* Check if the TCP socket-list has been [01;31m[Kinitialised[m[K. */
[01;32m[K  1625[m[K						/* In case the socket has already [01;31m[Kinitialised[m[K its tcpWin,

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K   167[m[K		have not been [01;31m[Kinitialised[m[K before. */
[01;32m[K   170[m[K			/* In case alternative locking is used, the mutexes can be [01;31m[Kinitialised[m[K

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K   101[m[K		have not been [01;31m[Kinitialised[m[K before. */

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   291[m[K	     * have not been [01;31m[Kinitialised[m[K before. */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   283[m[K			descriptors being [01;31m[Kinitialised[m[K more than once. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1366[m[K		/* The network has been disconnected (or is being [01;31m[Kinitialised[m[K for the first

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   463[m[K	 * Returns pdTRUE if the IP task has been created and is [01;31m[Kinitialised[m[K.  Otherwise

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    98[m[K					bHasInit : 1,		/* The window structure has been [01;31m[Kinitialised[m[K */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   131[m[K	         * [01;31m[KInitialiseNetwork[m[K() uses Ethernet peripheral driver library function, and returns 0 if the initialization fails.

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   189[m[K	 * Prepare to start a DHCP transaction.  This [01;31m[Kinitialises[m[K some state variables

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K    80[m[K	void vConfigureTimerForRunTimeStats( void );	/* Prototype of function that [01;31m[Kinitialises[m[K the run time counter. */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   151[m[K	 * [01;31m[KInitialises[m[K the Tx and Rx descriptors respectively.

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K   125[m[K		 * The function vDNSInitialise() [01;31m[Kinitialises[m[K the DNS module.

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K    95[m[K		/* When [01;31m[Kinitialising[m[K the TCP timer,

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   468[m[K	 * Function Name: [01;31m[KInitializeNetwork[m[K ()
[01;32m[K   520[m[K	} /* End of function [01;31m[KInitializeNetwork[m[K() */

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K    42[m[K		/* Coverity static checks don't like [01;31m[Kinlined[m[K functions.

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K    43[m[K		As it is up to the users to allow [01;31m[Kinlining[m[K, don't let

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K    56[m[K	These defines come before [01;31m[Kinlucding[m[K the configuration header files. */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K    38[m[K	/* ======================== Standard Library [01;31m[Kinludes[m[K ======================== */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   455[m[K		/* Init step11: configure QMU receive queue: trigger [01;31m[KINT[m[K and auto-dequeue frame. */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif.h[39m

[01;32m[K    46[m[K	//[01;31m[Kint[m[K 	xemacpsif_init(struct netif *netif);
[01;32m[K    47[m[K	//[01;31m[Kint[m[K 	xemacpsif_input(struct netif *netif);

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   891[m[K	#define ETH_DMARXDESC_DBE         ((uint32_t)0x00000004U)  /*!< Dribble bit error: frame contains non [01;31m[Kint[m[K multiple of 8 bits  */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2399[m[K	 * by looking at the 16 most-significant bits of the 32-bit integer, since a 32-bit [01;31m[Kint[m[K will continue
[01;32m[K  2434[m[K		/* The object pointer expression "pucNextData" of type "uint8_t const *" is cast to an integer type "unsigned [01;31m[Kint[m[K". */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1126[m[K	  /* Set the IFG bit according to ETH [01;31m[KInterFrameGap[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   477[m[K	  uint32_t             [01;31m[KInterFrameGap[m[K;             /*!< Selects the minimum IFG between frames during transmission.

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   656[m[K		 * printf and other blocking operations without being [01;31m[Kinterruped[m[K and put in

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   115[m[K			1) Wait for a [01;31m[KINTN[m[K interrupt
[01;32m[K   273[m[K		/* ul_had_intn_interrupt becomes true within the [01;31m[KINTN[m[K interrupt. */
[01;32m[K   607[m[K			/* Set the [01;31m[KINTN[m[K flag. */
[01;32m[K  1070[m[K		/* Initialize interrupt line [01;31m[KINTN[m[K. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   115[m[K	 * \brief Configure the [01;31m[KINTN[m[K interrupt.

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K   120[m[K	/* Handles to the Windows threads that handle the PCAP [01;31m[KIO[m[K. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K    11[m[K	  *           + [01;31m[KIO[m[K operation functions
[01;32m[K   345[m[K	/** @defgroup ETH_Exported_Functions_Group2 [01;31m[KIO[m[K operation functions
[01;32m[K   350[m[K	                          ##### [01;31m[KIO[m[K operation functions #####

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K  2199[m[K	/* [01;31m[KIO[m[K operation functions  ****************************************************/

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K    32[m[K	 * In this module all ports and [01;31m[KIP[m[K addresses and sequence numbers are
[01;32m[K   417[m[K				not required as only the [01;31m[KIP[m[K task will call these functions.  */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   213[m[K			uint32_t ulIPAddresses[ ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY ]; /* The [01;31m[KIP[m[K address(es) of an ARP cache entry. */
[01;32m[K   323[m[K			uint16_t usNbFlags;     /* NetBIOS flags 0x6000 : [01;31m[KIP[m[K-address, big-endian */
[01;32m[K   419[m[K			/* _HT_ Should better become a new API call to have the [01;31m[KIP[m[K-task remove the callback */
[01;32m[K   562[m[K			/* If the supplied hostname is [01;31m[KIP[m[K address, convert it to uint32_t
[01;32m[K   615[m[K						/* The [01;31m[KIP[m[K address is known, do the call-back now. */
[01;32m[K  1274[m[K								/* Copy the [01;31m[KIP[m[K address out of the record. Using different pointers
[01;32m[K  1442[m[K			/* Do not return a valid [01;31m[KIP[m[K-address in case the reply was not expected. */
[01;32m[K  1447[m[K			/* The [01;31m[KIP[m[K-address found will be returned. */
[01;32m[K  1674[m[K				/* calculate the [01;31m[KIP[m[K header checksum */
[01;32m[K  1719[m[K					/* Is this function called for a lookup or to add/update an [01;31m[KIP[m[K address? */
[01;32m[K  1728[m[K							/*  modulo it by the number of [01;31m[KIP[m[K addresses to keep it in range.     */
[01;32m[K  1729[m[K							/*  Also perform a final modulo by the max number of [01;31m[KIP[m[K addresses    */
[01;32m[K  1751[m[K							/* If more answers exist than there are [01;31m[KIP[m[K address storage slots */
[01;32m[K  1788[m[K						/* Initialize all remaining [01;31m[KIP[m[K addresses in this entry to 0 */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K    32[m[K	 * Endianness: in this module all ports and [01;31m[KIP[m[K addresses are stored in
[01;32m[K    33[m[K	 * host byte-order, except fields in the [01;31m[KIP[m[K-packets
[01;32m[K   455[m[K							the [01;31m[KIP[m[K-task, so it's safe to call the internal Close
[01;32m[K   477[m[K	 * [01;31m[KIP[m[K-Task:
[01;32m[K   609[m[K					pxSocket->u.xTCP.ulRemoteIP,		/* [01;31m[KIP[m[K address of remote machine. */
[01;32m[K   863[m[K				and the [01;31m[KIP[m[K-addresses must be swapped.
[01;32m[K   864[m[K				Also swap the [01;31m[KIP[m[K-addresses in case the [01;31m[KIP[m[K-tack doesn't have an
[01;32m[K   865[m[K				[01;31m[KIP[m[K-address yet, i.e. when ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ). */
[01;32m[K   886[m[K				/* calculate the [01;31m[KIP[m[K header checksum, in case the driver won't do that. */
[01;32m[K   980[m[K	 * target [01;31m[KIP[m[K address is not within the netmask, the hardware address of the
[01;32m[K  1002[m[K		/* Determine the ARP cache status for the requested [01;31m[KIP[m[K address. */
[01;32m[K  1010[m[K		case eCantSendPacket:	/* There is no [01;31m[KIP[m[K address, or an ARP is still in progress. */
[01;32m[K  1626[m[K				won't need further attention of the [01;31m[KIP[m[K-task.
[01;32m[K  1909[m[K						pxSocket->u.xTCP.ulRemoteIP,			/* [01;31m[KIP[m[K address of remote machine. */
[01;32m[K  2197[m[K		( LinkLayer length (14) + [01;31m[KIP[m[K header length (20) + size of TCP header(20 +) ).*/
[01;32m[K  2210[m[K		/* Subtract the size of the TCP and [01;31m[KIP[m[K headers and the actual data size is
[01;32m[K  2689[m[K		/* Set the time-out field, so that we'll be called by the [01;31m[KIP[m[K-task in case no
[01;32m[K  3214[m[K						/* Update the copy of the TCP header only (skipping eth and [01;31m[KIP[m[K
[01;32m[K  3524[m[K	 * not walk through the xBoundTCPSocketsList the [01;31m[KIP[m[K-task will do this.
[01;32m[K  3534[m[K		/* Here xBoundTCPSocketsList can be accessed safely [01;31m[KIP[m[K-task is the only one

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K    63[m[K	 * Lookup an MAC address in the ARP cache from the [01;31m[KIP[m[K address.
[01;32m[K    73[m[K	to ensure ARP tables are up to date and to detect [01;31m[KIP[m[K address conflicts. */
[01;32m[K    77[m[K	 * [01;31m[KIP[m[K-clash detection is currently only used internally. When DHCP doesn't respond, the
[01;32m[K    78[m[K	 * driver can try out a random LinkLayer [01;31m[KIP[m[K address (169.254.x.x).  It will send out a
[01;32m[K    84[m[K		/* MAC-address of the other device containing the same [01;31m[KIP[m[K-address. */
[01;32m[K   105[m[K		/* Don't do anything if the local [01;31m[KIP[m[K address is zero because
[01;32m[K   112[m[K					/* The packet contained an ARP request.  Was it for the [01;31m[KIP[m[K
[01;32m[K   127[m[K							/* A double [01;31m[KIP[m[K address is detected! */
[01;32m[K   154[m[K							/* Remember the MAC-address of the other device which has the same [01;31m[KIP[m[K-address. */
[01;32m[K   206[m[K		/* Only process the [01;31m[KIP[m[K address if it is on the local network.
[01;32m[K   207[m[K		Unless: when '*ipLOCAL_IP_ADDRESS_POINTER' equals zero, the [01;31m[KIP[m[K-address
[01;32m[K   212[m[K			/* If ipconfigARP_STORES_REMOTE_ADDRESSES is non-zero, [01;31m[KIP[m[K addresses with
[01;32m[K   214[m[K			message from a different netmask, the [01;31m[KIP[m[K address can be looped up and a
[01;32m[K   245[m[K				/* Does this line in the cache table hold an entry for the [01;31m[KIP[m[K
[01;32m[K   279[m[K					/* Found an entry with the given MAC-address, but the [01;31m[KIP[m[K-address
[01;32m[K   283[m[K					/* If ARP stores the MAC address of [01;31m[KIP[m[K addresses outside the
[01;32m[K   320[m[K					/* Both the MAC address as well as the [01;31m[KIP[m[K address were found in
[01;32m[K   322[m[K					[01;31m[KIP[m[K-address */
[01;32m[K   328[m[K				/* An entry containing the [01;31m[KIP[m[K-address was found, but it had a different MAC address */
[01;32m[K   398[m[K			/* The LLMNR [01;31m[KIP[m[K-address has a fixed virtual MAC address. */
[01;32m[K   406[m[K			/* Get the lowest 23 bits of the [01;31m[KIP[m[K-address. */
[01;32m[K   420[m[K			/* The [01;31m[KIP[m[K address has not yet been assigned, so there is nothing that
[01;32m[K   436[m[K					/* The stack is configured to store 'remote [01;31m[KIP[m[K addresses', i.e. addresses
[01;32m[K   443[m[K					/* The [01;31m[KIP[m[K address is off the local network, so look up the
[01;32m[K   457[m[K				/* The [01;31m[KIP[m[K address is on the local network, so lookup the requested
[01;32m[K   458[m[K				[01;31m[KIP[m[K address directly. */
[01;32m[K   500[m[K			/* Does this row in the ARP cache table hold an entry for the [01;31m[KIP[m[K address
[01;32m[K   582[m[K		/* Let the [01;31m[KIP[m[K-task call vARPAgeCache(). */
[01;32m[K   591[m[K		/* This is called from the context of the [01;31m[KIP[m[K event task, so a block time
[01;32m[K   617[m[K				/* Only the [01;31m[KIP[m[K-task is allowed to call this function directly. */
[01;32m[K   624[m[K				/* Send a message to the [01;31m[KIP[m[K-task to send this ARP packet. */
[01;32m[K   703[m[K		/* This function will check if the target [01;31m[KIP[m[K-address belongs to this device.
[01;32m[K   704[m[K		 * If so, the packet will be passed to the [01;31m[KIP[m[K-stack, who will answer it.

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K    52[m[K		part of the DHCP packet is 240 bytes, and the [01;31m[KIP[m[K/UDP headers take 28 bytes. */
[01;32m[K   161[m[K		/* Define the Link Layer [01;31m[KIP[m[K address: 169.254.x.x */
[01;32m[K   215[m[K	 * for (trying-out) LinkLayer [01;31m[KIP[m[K-addresses, using the random method: Send
[01;32m[K   371[m[K							/* Only use a fake Ack if the default [01;31m[KIP[m[K address == 0x00
[01;32m[K   373[m[K							a free LinkLayer [01;31m[KIP[m[K-address.  Next state will be
[01;32m[K   377[m[K							/* Setting an [01;31m[KIP[m[K address manually so set to not using
[01;32m[K   401[m[K					/* DHCP completed.  The [01;31m[KIP[m[K address can now be used, and the
[01;32m[K   412[m[K					/* DHCP failed, the default configured [01;31m[KIP[m[K-address will be used
[01;32m[K   469[m[K						/* Auto-[01;31m[KIP[m[K succeeded, the default configured [01;31m[KIP[m[K-address will
[01;32m[K   477[m[K						/* ARP clashed - try another [01;31m[KIP[m[K address. */
[01;32m[K   480[m[K						/* Setting an [01;31m[KIP[m[K address manually so set to not using leased
[01;32m[K   530[m[K			/* Revert to static [01;31m[KIP[m[K address. */
[01;32m[K   541[m[K			/* DHCP failed, the default configured [01;31m[KIP[m[K-address will be used.  Now
[01;32m[K   555[m[K			/* This modules runs from the [01;31m[KIP[m[K-task. Use the internal
[01;32m[K   577[m[K				context of the [01;31m[KIP[m[K task. */
[01;32m[K   953[m[K		dhcpIPv4_REQUEST_IP_ADDRESS_OPTION_CODE, 4, 0, 0, 0, 0,				/* The [01;31m[KIP[m[K address being requested. */
[01;32m[K   954[m[K		dhcpIPv4_SERVER_IP_ADDRESS_OPTION_CODE, 4, 0, 0, 0, 0,				/* The [01;31m[KIP[m[K address of the DHCP server. */
[01;32m[K   964[m[K		/* Copy in the [01;31m[KIP[m[K address being requested. */
[01;32m[K  1030[m[K			trying-out LinkLayer [01;31m[KIP[m[K-addresses, using the random method. */
[01;32m[K  1035[m[K			ucLinkLayerIPAddress[ 0 ] = ( uint8_t )1 + ( uint8_t )( ulNumbers[ 0 ] % 0xFDU );		/* get value 1..254 for [01;31m[KIP[m[K-address 3rd byte of [01;31m[KIP[m[K address to try. */
[01;32m[K  1036[m[K			ucLinkLayerIPAddress[ 1 ] = ( uint8_t )1 + ( uint8_t )( ulNumbers[ 1 ] % 0xFDU );		/* get value 1..254 for [01;31m[KIP[m[K-address 4th byte of [01;31m[KIP[m[K address to try. */
[01;32m[K  1049[m[K			/* DHCP completed.  The [01;31m[KIP[m[K address can now be used, and the

[1;34m./test/unit-test/stubs/FreeRTOS_ARP_stubs.c[39m

[01;32m[K    12[m[K	/* The expected [01;31m[KIP[m[K version and header length coded into the [01;31m[KIP[m[K header itself. */
[01;32m[K   114[m[K			0x00, 0x00, 0x00, 0x00 					/* Source [01;31m[KIP[m[K address. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K    59[m[K	/* If the network card/driver includes checksum offloading ([01;31m[KIP[m[K/TCP/UDP checksums)
[01;32m[K    82[m[K	/* The [01;31m[KIP[m[K stack executes it its own task (although any application task can make
[01;32m[K    84[m[K	 * sets the priority of the task that executes the [01;31m[KIP[m[K stack.  The priority is a
[01;32m[K    89[m[K	 * the priority assigned to the task executing the [01;31m[KIP[m[K stack relative to the
[01;32m[K    90[m[K	 * priority assigned to tasks that use the [01;31m[KIP[m[K stack. */
[01;32m[K   100[m[K	/* ipconfigRAND32() is called by the [01;31m[KIP[m[K stack to generate random numbers for
[01;32m[K   129[m[K	/* If ipconfigUSE_DHCP is 1 then FreeRTOS+TCP will attempt to retrieve an [01;31m[KIP[m[K
[01;32m[K   131[m[K	 * ipconfigUSE_DHCP is 0 then FreeRTOS+TCP will use a static [01;31m[KIP[m[K address.  The
[01;32m[K   132[m[K	 * stack will revert to using the static [01;31m[KIP[m[K address even when ipconfigUSE_DHCP is
[01;32m[K   148[m[K	 * ipconfigMAXIMUM_DISCOVER_TX_PERIOD.  The [01;31m[KIP[m[K stack will revert to using the
[01;32m[K   149[m[K	 * static [01;31m[KIP[m[K address passed as a parameter to FreeRTOS_IPInit() if the
[01;32m[K   155[m[K	/* The ARP cache is a table that maps [01;31m[KIP[m[K addresses to MAC addresses.  The [01;31m[KIP[m[K
[01;32m[K   156[m[K	 * stack can only send a UDP message to a remove [01;31m[KIP[m[K address if it knowns the MAC
[01;32m[K   157[m[K	 * address associated with the [01;31m[KIP[m[K address, or the MAC address of the router used to
[01;32m[K   158[m[K	 * contact the remote [01;31m[KIP[m[K address.  When a UDP message is received from a remote [01;31m[KIP[m[K
[01;32m[K   159[m[K	 * address the MAC address and [01;31m[KIP[m[K address are added to the ARP cache.  When a UDP
[01;32m[K   160[m[K	 * message is sent to a remote [01;31m[KIP[m[K address that does not already appear in the ARP
[01;32m[K   182[m[K	 * takes an [01;31m[KIP[m[K in decimal dot format (for example, "192.168.0.1") as its parameter.
[01;32m[K   183[m[K	 * FreeRTOS_inet_addr_quick() takes an [01;31m[KIP[m[K address as four separate numerical octets
[01;32m[K   191[m[K	 * are available to the [01;31m[KIP[m[K stack.  The total number of network buffers is limited
[01;32m[K   192[m[K	 * to ensure the total amount of RAM that can be consumed by the [01;31m[KIP[m[K stack is capped
[01;32m[K   196[m[K	/* A FreeRTOS queue is used to send events from application tasks to the [01;31m[KIP[m[K
[01;32m[K   203[m[K	/* The address of a socket is the combination of its [01;31m[KIP[m[K address and its port
[01;32m[K   209[m[K	 * FreeRTOS_sendto() on a socket that has not yet been bound will result in the [01;31m[KIP[m[K
[01;32m[K   239[m[K	/* If ipconfigREPLY_TO_INCOMING_PINGS is set to 1 then the [01;31m[KIP[m[K stack will
[01;32m[K   253[m[K	 * potential future [01;31m[KIP[m[K stack developments. */
[01;32m[K   259[m[K	 * set ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES to 0 to have the [01;31m[KIP[m[K stack
[01;32m[K   270[m[K	/* Advanced only: in order to access 32-bit fields in the [01;31m[KIP[m[K packets with
[01;32m[K   272[m[K	 * plus 16-bits. This has to do with the contents of the [01;31m[KIP[m[K-packets: all

[1;34m./test/unit-test/ConfigFiles/IPTraceMacroDefaults.h[39m

[01;32m[K    26[m[K	/* This file provides default (empty) implementations for any [01;31m[KIP[m[K trace macros

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   344[m[K		 * If no DHCP server responds, use "Auto-[01;31m[KIP[m[K" : the
[01;32m[K   345[m[K		 * device will allocate a random LinkLayer [01;31m[KIP[m[K address.
[01;32m[K   459[m[K		/* This macro will be called in every loop the [01;31m[KIP[m[K-task makes.  It may be

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K   145[m[K	/* If configINCLUDE_DEMO_DEBUG_STATS is set to one, then a few basic [01;31m[KIP[m[K trace
[01;32m[K   152[m[K	 * and one on TCP/[01;31m[KIP[m[K).  This is done to prevent an output buffer being defined by
[01;32m[K   196[m[K	/* Default [01;31m[KIP[m[K address configuration.  Used in ipconfigUSE_DHCP is set to 0, or
[01;32m[K   203[m[K	/* Default gateway [01;31m[KIP[m[K address configuration.  Used in ipconfigUSE_DHCP is set to

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K    58[m[K	/* If the network card/driver includes checksum offloading ([01;31m[KIP[m[K/TCP/UDP checksums)
[01;32m[K    81[m[K	/* The [01;31m[KIP[m[K stack executes it its own task (although any application task can make
[01;32m[K    83[m[K	 * sets the priority of the task that executes the [01;31m[KIP[m[K stack.  The priority is a
[01;32m[K    88[m[K	 * the priority assigned to the task executing the [01;31m[KIP[m[K stack relative to the
[01;32m[K    89[m[K	 * priority assigned to tasks that use the [01;31m[KIP[m[K stack. */
[01;32m[K    99[m[K	/* ipconfigRAND32() is called by the [01;31m[KIP[m[K stack to generate random numbers for
[01;32m[K   128[m[K	/* If ipconfigUSE_DHCP is 1 then FreeRTOS+TCP will attempt to retrieve an [01;31m[KIP[m[K
[01;32m[K   130[m[K	 * ipconfigUSE_DHCP is 0 then FreeRTOS+TCP will use a static [01;31m[KIP[m[K address.  The
[01;32m[K   131[m[K	 * stack will revert to using the static [01;31m[KIP[m[K address even when ipconfigUSE_DHCP is
[01;32m[K   147[m[K	 * ipconfigMAXIMUM_DISCOVER_TX_PERIOD.  The [01;31m[KIP[m[K stack will revert to using the
[01;32m[K   148[m[K	 * static [01;31m[KIP[m[K address passed as a parameter to FreeRTOS_IPInit() if the
[01;32m[K   154[m[K	/* The ARP cache is a table that maps [01;31m[KIP[m[K addresses to MAC addresses.  The [01;31m[KIP[m[K
[01;32m[K   155[m[K	 * stack can only send a UDP message to a remove [01;31m[KIP[m[K address if it knowns the MAC
[01;32m[K   156[m[K	 * address associated with the [01;31m[KIP[m[K address, or the MAC address of the router used to
[01;32m[K   157[m[K	 * contact the remote [01;31m[KIP[m[K address.  When a UDP message is received from a remote [01;31m[KIP[m[K
[01;32m[K   158[m[K	 * address the MAC address and [01;31m[KIP[m[K address are added to the ARP cache.  When a UDP
[01;32m[K   159[m[K	 * message is sent to a remote [01;31m[KIP[m[K address that does not already appear in the ARP
[01;32m[K   183[m[K	 * takes an [01;31m[KIP[m[K in decimal dot format (for example, "192.168.0.1") as its parameter.
[01;32m[K   184[m[K	 * FreeRTOS_inet_addr_quick() takes an [01;31m[KIP[m[K address as four separate numerical octets
[01;32m[K   192[m[K	 * are available to the [01;31m[KIP[m[K stack.  The total number of network buffers is limited
[01;32m[K   193[m[K	 * to ensure the total amount of RAM that can be consumed by the [01;31m[KIP[m[K stack is capped
[01;32m[K   199[m[K	/* A FreeRTOS queue is used to send events from application tasks to the [01;31m[KIP[m[K
[01;32m[K   206[m[K	/* The address of a socket is the combination of its [01;31m[KIP[m[K address and its port
[01;32m[K   212[m[K	 * FreeRTOS_sendto() on a socket that has not yet been bound will result in the [01;31m[KIP[m[K
[01;32m[K   246[m[K	/* If ipconfigREPLY_TO_INCOMING_PINGS is set to 1 then the [01;31m[KIP[m[K stack will
[01;32m[K   262[m[K	 * potential future [01;31m[KIP[m[K stack developments. */
[01;32m[K   268[m[K	 * set ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES to 0 to have the [01;31m[KIP[m[K stack
[01;32m[K   279[m[K	/* Advanced only: in order to access 32-bit fields in the [01;31m[KIP[m[K packets with
[01;32m[K   281[m[K	 * plus 16-bits. This has to do with the contents of the [01;31m[KIP[m[K-packets: all

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K    75[m[K	/* The number of octets that make up an [01;31m[KIP[m[K address. */
[01;32m[K   149[m[K		 * message to the [01;31m[KIP[m[K-task to start connecting to a remote socket
[01;32m[K   164[m[K		/* Executed by the [01;31m[KIP[m[K-task, it will check all sockets belonging to a set */
[01;32m[K   457[m[K				/* Now have the [01;31m[KIP[m[K-task call vSocketSelect() to see if the set contains
[01;32m[K   556[m[K				/* Have the [01;31m[KIP[m[K-task find the socket which had an event */
[01;32m[K   581[m[K		/* Send a message to the [01;31m[KIP[m[K-task to have it check all sockets belonging to
[01;32m[K   601[m[K				/* while the [01;31m[KIP[m[K-task works on the request, the API will block on
[01;32m[K   611[m[K				/* Oops, we failed to wake-up the [01;31m[KIP[m[K task. No use to wait for it. */
[01;32m[K   616[m[K				/* As soon as the [01;31m[KIP[m[K-task is ready, it will set 'eSELECT_CALL_IP' to
[01;32m[K   693[m[K				/* Wait for arrival of data.  While waiting, the [01;31m[KIP[m[K-task may set the
[01;32m[K   842[m[K						get a deadlock: the [01;31m[KIP[m[K-task waiting for itself. */
[01;32m[K   890[m[K					/* The socket options are passed to the [01;31m[KIP[m[K layer in the
[01;32m[K   897[m[K					/* Ask the [01;31m[KIP[m[K-task to send this packet */
[01;32m[K   900[m[K						/* The packet was successfully sent to the [01;31m[KIP[m[K task. */
[01;32m[K   951[m[K	 * by the [01;31m[KIP[m[K-task to avoid mutual access to the bound-socket-lists
[01;32m[K   978[m[K			/* Prepare a messages to the [01;31m[KIP[m[K-task in order to perform the binding.
[01;32m[K   997[m[K				/* Failed to wake-up the [01;31m[KIP[m[K-task, no use to wait for it */
[01;32m[K  1003[m[K				/* The [01;31m[KIP[m[K-task will set the 'eSOCKET_BOUND' bit when it has done its
[01;32m[K  1089[m[K				from the [01;31m[KIP[m[K-task, no such check is necessary. */
[01;32m[K  1114[m[K						by calling xPortHasUDPSocket() then the [01;31m[KIP[m[K-task must temporarily
[01;32m[K  1155[m[K	 * The [01;31m[KIP[m[K-task will actually close the socket, after receiving a 'eSocketCloseEvent' message
[01;32m[K  1177[m[K					/* Make sure that [01;31m[KIP[m[K-task won't call the user callback's anymore */
[01;32m[K  1185[m[K			/* Let the [01;31m[KIP[m[K task close the socket to keep it synchronised	with the
[01;32m[K  1189[m[K			this function. If it is called by the [01;31m[KIP[m[K-task, a deadlock could occur.
[01;32m[K  1190[m[K			The [01;31m[KIP[m[K-task would only call it in case of a user call-back */
[01;32m[K  1253[m[K			by calling xPortHasUDPSocket(), then the [01;31m[KIP[m[K-task must temporarily
[01;32m[K  2076[m[K	/* Function to get the local address and [01;31m[KIP[m[K port */
[01;32m[K  2081[m[K		/* [01;31m[KIP[m[K address of local machine. */
[01;32m[K  2253[m[K					/* [01;31m[KIP[m[K address of remote machine. */
[01;32m[K  2414[m[K							/* [01;31m[KIP[m[K address of remote machine. */
[01;32m[K  2835[m[K							/* Now when the [01;31m[KIP[m[K-task transmits the data, it will also
[01;32m[K  2841[m[K						/* Send a message to the [01;31m[KIP[m[K-task so it can work on this
[01;32m[K  2842[m[K						socket.  Data is sent, let the [01;31m[KIP[m[K-task work on it. */
[01;32m[K  2848[m[K							[01;31m[KIP[m[K-task. */
[01;32m[K  2877[m[K								chances would be big to get a deadlock: the [01;31m[KIP[m[K-task
[01;32m[K  3031[m[K				/* Let the [01;31m[KIP[m[K-task perform the shutdown of the connection. */
[01;32m[K  3104[m[K				[01;31m[KIP[m[K-task goes to sleep. */
[01;32m[K  3109[m[K						/* The [01;31m[KIP[m[K-task is about to go to sleep, so messages can be
[01;32m[K  3138[m[K		 * Both a local port, and a remote port and [01;31m[KIP[m[K address are being used
[01;32m[K  3139[m[K		 * For a socket in listening mode, the remote port and [01;31m[KIP[m[K address are both 0
[01;32m[K  3396[m[K						semaphores will be set just before the [01;31m[KIP[m[K-task goes asleep. */
[01;32m[K  3419[m[K		/* Function to get the remote address and [01;31m[KIP[m[K port */
[01;32m[K  3431[m[K				/* BSD style sockets communicate [01;31m[KIP[m[K and port addresses in network
[01;32m[K  3433[m[K				[01;31m[KIP[m[K address of remote machine. */
[01;32m[K  3677[m[K			/* Ask the [01;31m[KIP[m[K-task to call vTCPNetStat()
[01;32m[K  3732[m[K						pxSocket->u.xTCP.ulRemoteIP,	/* [01;31m[KIP[m[K address of remote machine */
[01;32m[K  3987[m[K			/* The [01;31m[KIP[m[K-task will call FreeRTOS_SignalSocket for this socket. */

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K   365[m[K			/* Check if the [01;31m[KIP[m[K headers are acceptable and if it has our destination.
[01;32m[K   366[m[K			The lowest four bits of 'ucVersionHeaderLength' indicate the [01;31m[KIP[m[K-header

[1;34m./portable/NetworkInterface/SH2A/NetworkInterface.c[39m

[01;32m[K    72[m[K	/* The queue used to communicate Ethernet events with the [01;31m[KIP[m[K task. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   174[m[K	#define   TX_CTRL_IP_CHECKSUM         (0x0020)    /* Enable [01;31m[KIP[m[K frame checksum generation */
[01;32m[K   191[m[K	#define   RX_CTRL_IP_CHECKSUM         (0x1000)    /* Enable [01;31m[KIP[m[K frame checksum verification */
[01;32m[K   226[m[K	#define   RX_IP_ERROR                 (0x1000)    /* [01;31m[KIP[m[K checksum field doesn't match */
[01;32m[K   252[m[K	#define   RXQ_TWOBYTE_OFFSET          (0x0200)    /* Enable adding 2-byte before frame header for [01;31m[KIP[m[K aligned with DWORD */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K  1139[m[K			/* Send the descriptor to the [01;31m[KIP[m[K task for processing. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   452[m[K	//#define   RXQ_TWOBYTE_OFFSET          (0x0200)    /* Enable adding 2-byte before frame header for [01;31m[KIP[m[K aligned with DWORD */
[01;32m[K   452[m[K	//#define   RXQ_TWOBYTE_OFFSET          (0x0200)    /* Enable adding 2-byte before frame header for [01;31m[KIP[m[K aligned with DWORD */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   346[m[K		  [01;31m[KIP[m[K address is going to be "simulated", and
[01;32m[K   347[m[K		  not be the real MAC and [01;31m[KIP[m[K address.  This allows
[01;32m[K   348[m[K		  traffic to the simulated [01;31m[KIP[m[K address to be routed
[01;32m[K   349[m[K		  to uIP, and traffic to the real [01;31m[KIP[m[K address to be
[01;32m[K   350[m[K		  routed to the Linux TCP/[01;31m[KIP[m[K stack.
[01;32m[K   489[m[K	 *        and notify the tcp/[01;31m[Kip[m[K stack of new data
[01;32m[K   535[m[K			block waiting for packets, then send a message to the [01;31m[KIP[m[K task when data
[01;32m[K   567[m[K		/* Set up a filter so only the packets of interest are passed to the [01;31m[KIP[m[K
[01;32m[K   794[m[K								the [01;31m[KIP[m[K task to let it know. */

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K   234[m[K				/* The EMAC will calculate the checksum of the [01;31m[KIP[m[K-header.

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K    73[m[K		immediately to the [01;31m[KIP[m[K-task.
[01;32m[K   360[m[K		chain of RX messages within one message to the [01;31m[KIP[m[K-task.	*/

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K   314[m[K																			[01;31m[KIP[m[K address is going to be "simulated", and
[01;32m[K   315[m[K																			not be the real MAC and [01;31m[KIP[m[K address.  This allows
[01;32m[K   316[m[K																			traffic to the simulated [01;31m[KIP[m[K address to be routed
[01;32m[K   317[m[K																			to uIP, and traffic to the real [01;31m[KIP[m[K address to be
[01;32m[K   318[m[K																			routed to the Windows TCP/[01;31m[KIP[m[K stack. */
[01;32m[K   372[m[K		/* Set up a filter so only the packets of interest are passed to the [01;31m[KIP[m[K
[01;32m[K   429[m[K			block waiting for packets, then send a message to the [01;31m[KIP[m[K task when data
[01;32m[K   607[m[K								the [01;31m[KIP[m[K task to let it know. */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_wifi.c[39m

[01;32m[K     8[m[K	*   - Interfaces PIC32 to the FreeRTOS TCP/[01;31m[KIP[m[K stack
[01;32m[K   161[m[K	            /* Send the data to the TCP/[01;31m[KIP[m[K stack. */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K     8[m[K	*   - Interfaces PIC32 to the FreeRTOS TCP/[01;31m[KIP[m[K stack
[01;32m[K   755[m[K	            /* Send the data to the TCP/[01;31m[KIP[m[K stack */

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   418[m[K				/* Calculate the [01;31m[KIP[m[K header checksum. */
[01;32m[K   482[m[K			/* Send the descriptor to the [01;31m[KIP[m[K task for processing. */
[01;32m[K   492[m[K			/* Now the buffer has either been passed to the [01;31m[KIP[m[K-task,

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1115[m[K	 * - [01;31m[KIP[m[K address is set to 192.168.0.2
[01;32m[K  1116[m[K	 * - [01;31m[KIP[m[K address is set to 192.168.0.2
[01;32m[K  1226[m[K	 * -# Define the [01;31m[KIP[m[K address configration used in the application. When DHCP

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   132[m[K	  RoReg   GMAC_IHCE;       /**< \brief (Gmac Offset: 0x1A8) [01;31m[KIP[m[K Header Checksum Errors Register */
[01;32m[K   225[m[K	#define GMAC_NCFGR_IPGSEN (0x1u << 28) /**< \brief (GMAC_NCFGR) [01;31m[KIP[m[K Stretch Enable */
[01;32m[K   458[m[K	#define GMAC_WOL_IP_Msk (0xffffu << GMAC_WOL_IP_Pos) /**< \brief (GMAC_WOL) ARP Request [01;31m[KIP[m[K Address */
[01;32m[K   461[m[K	#define GMAC_WOL_ARP (0x1u << 17) /**< \brief (GMAC_WOL) ARP Request [01;31m[KIP[m[K Address */
[01;32m[K   614[m[K	/* -------- GMAC_IHCE : (GMAC Offset: 0x1A8) [01;31m[KIP[m[K Header Checksum Errors Register -------- */
[01;32m[K   616[m[K	#define GMAC_IHCE_HCKER_Msk (0xffu << GMAC_IHCE_HCKER_Pos) /**< \brief (GMAC_IHCE) [01;31m[KIP[m[K Header Checksum Errors */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1118[m[K	 * - [01;31m[KIP[m[K address is set to 192.168.0.2
[01;32m[K  1119[m[K	 * - [01;31m[KIP[m[K address is set to 192.168.0.2
[01;32m[K  1229[m[K	 * -# Define the [01;31m[KIP[m[K address configration used in the application. When DHCP

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   689[m[K			/* Calculate the [01;31m[KIP[m[K header checksum. */
[01;32m[K   763[m[K			/* Send the descriptor to the [01;31m[KIP[m[K task for processing. */
[01;32m[K   773[m[K			/* Now the buffer has either been passed to the [01;31m[KIP[m[K-task,

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   755[m[K							/* Pass the data to the TCP/[01;31m[KIP[m[K task for processing. */
[01;32m[K   759[m[K								/* Could not send the descriptor into the TCP/[01;31m[KIP[m[K
[01;32m[K   779[m[K				/* Got here because received data was sent to the [01;31m[KIP[m[K task or the

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K   282[m[K	            /* The event about to be sent to the TCP/[01;31m[KIP[m[K is an Rx event. */
[01;32m[K   289[m[K	            /* Send the data to the TCP/[01;31m[KIP[m[K stack. */
[01;32m[K   292[m[K	                /* The buffer could not be sent to the [01;31m[KIP[m[K task so the buffer
[01;32m[K   302[m[K	                /* The message was successfully sent to the TCP/[01;31m[KIP[m[K stack.

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   203[m[K	    /* Enable [01;31m[KIP[m[K clock */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K    82[m[K	#define ipFRAGMENT_OFFSET_BIT_MASK		( ( uint16_t ) 0x0fff ) /* The bits in the two byte [01;31m[KIP[m[K header field that make up the fragment offset value. */
[01;32m[K   171[m[K	 * See if there is a new packet and forward it to the [01;31m[KIP[m[K-task.
[01;32m[K   415[m[K					both the [01;31m[KIP[m[K and the protocol checksums will be calculated
[01;32m[K   784[m[K			 * can be fragmented) as these are the only handled [01;31m[KIP[m[K frames currently. */
[01;32m[K   790[m[K			 * most [01;31m[KIP[m[K messages have a standard length of 20 bytes */
[01;32m[K   792[m[K			/* 0x45 means: IPv4 with an [01;31m[KIP[m[K header of 5 x 4 = 20 bytes
[01;32m[K   793[m[K			 * 0x47 means: IPv4 with an [01;31m[KIP[m[K header of 7 x 4 = 28 bytes */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   574[m[K	 uint32_t              DropTCPIPChecksumErrorFrame; /*!< Selects or not the Dropping of TCP/[01;31m[KIP[m[K Checksum Error Frames.
[01;32m[K   809[m[K	#define ETH_DMATXDESC_IHE                     ((uint32_t)0x00010000U)  /*!< [01;31m[KIP[m[K Header Error */
[01;32m[K   937[m[K	#define ETH_DMAPTPRXDESC_IPCB                            ((uint32_t)0x00000020U)  /* [01;31m[KIP[m[K Checksum Bypassed */
[01;32m[K   938[m[K	#define ETH_DMAPTPRXDESC_IPPE                            ((uint32_t)0x00000010U)  /* [01;31m[KIP[m[K Payload Error */
[01;32m[K   939[m[K	#define ETH_DMAPTPRXDESC_IPHE                            ((uint32_t)0x00000008U)  /* [01;31m[KIP[m[K Header Error */
[01;32m[K   940[m[K	#define ETH_DMAPTPRXDESC_IPPT                            ((uint32_t)0x00000007U)  /* [01;31m[KIP[m[K Payload Type */
[01;32m[K   941[m[K	  #define ETH_DMAPTPRXDESC_IPPT_UDP                      ((uint32_t)0x00000001U)  /* UDP payload encapsulated in the [01;31m[KIP[m[K datagram */
[01;32m[K   942[m[K	  #define ETH_DMAPTPRXDESC_IPPT_TCP                      ((uint32_t)0x00000002U)  /* TCP payload encapsulated in the [01;31m[KIP[m[K datagram */
[01;32m[K   943[m[K	  #define ETH_DMAPTPRXDESC_IPPT_ICMP                     ((uint32_t)0x00000003U)  /* ICMP payload encapsulated in the [01;31m[KIP[m[K datagram */
[01;32m[K  1317[m[K	/** @defgroup ETH_Drop_TCP_IP_Checksum_Error_Frame ETH Drop TCP [01;31m[KIP[m[K Checksum Error Frame

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K    23[m[K	* Description  : Interfaces FreeRTOS TCP/[01;31m[KIP[m[K stack to RX Ethernet driver.
[01;32m[K   350[m[K	                    /* The event about to be sent to the TCP/[01;31m[KIP[m[K is an Rx event. */
[01;32m[K   357[m[K	                    /* Send the data to the TCP/[01;31m[KIP[m[K stack. */
[01;32m[K   360[m[K	                        /* The buffer could not be sent to the [01;31m[KIP[m[K task so the buffer must be released. */
[01;32m[K   369[m[K	                        /* The message was successfully sent to the TCP/[01;31m[KIP[m[K stack.

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K    76[m[K	/* The queue used to communicate Ethernet events with the [01;31m[KIP[m[K task. */
[01;32m[K   245[m[K						/* Data was received and stored.  Send a message to the [01;31m[KIP[m[K

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K    50[m[K	/* The expected [01;31m[KIP[m[K version and header length coded into the [01;31m[KIP[m[K header itself. */
[01;32m[K    53[m[K	/* Part of the Ethernet and [01;31m[KIP[m[K headers are always constant when sending an IPv4
[01;32m[K    71[m[K			0x00, 0x00, 0x00, 0x00 					/* Source [01;31m[KIP[m[K address. */
[01;32m[K    98[m[K		/* Determine the ARP cache status for the requested [01;31m[KIP[m[K address. */
[01;32m[K   209[m[K				/* Generate an ARP for the required [01;31m[KIP[m[K address. */
[01;32m[K   217[m[K				sent out for the queried [01;31m[KIP[m[K address. */
[01;32m[K   271[m[K			handling them, no use to fill the ARP cache with those [01;31m[KIP[m[K addresses. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K    70[m[K	/* The first byte in the IPv4 header combines the [01;31m[KIP[m[K version (4) with
[01;32m[K    71[m[K	with the length of the [01;31m[KIP[m[K header. */
[01;32m[K   115[m[K			/* The bits in the two byte [01;31m[KIP[m[K header field that make up the fragment offset value. */
[01;32m[K   118[m[K			/* The bits in the two byte [01;31m[KIP[m[K header field that make up the fragment offset value. */
[01;32m[K   123[m[K	/* The maximum time the [01;31m[KIP[m[K task is allowed to remain in the Blocked state if no
[01;32m[K   164[m[K	 * The main TCP/[01;31m[KIP[m[K stack processing task.  This task receives commands/events
[01;32m[K   176[m[K	 * Process incoming [01;31m[KIP[m[K packets.
[01;32m[K   215[m[K	 * Determine how long the [01;31m[KIP[m[K task can sleep for, which depends on when the next
[01;32m[K   227[m[K	 * Utility functions for the light weight [01;31m[KIP[m[K timers.
[01;32m[K   240[m[K		the [01;31m[KIP[m[K-task will still check if the length fields are OK. */
[01;32m[K   246[m[K	/* The queue used to pass events into the [01;31m[KIP[m[K-task for processing. */
[01;32m[K   272[m[K	being called by a task (in which case it is ok to block) or by the [01;31m[KIP[m[K task
[01;32m[K   305[m[K	/* Set to pdTRUE when the [01;31m[KIP[m[K task is ready to start processing packets. */
[01;32m[K   350[m[K		/* Loop, processing [01;31m[KIP[m[K events. */
[01;32m[K   414[m[K					/* FreeRTOS_bind (a user API) wants the [01;31m[KIP[m[K-task to bind a socket
[01;32m[K   434[m[K					[01;31m[KIP[m[K-task to actually close a socket. This is handled in
[01;32m[K   499[m[K					/* The API FreeRTOS_accept() was called, the [01;31m[KIP[m[K-task will now
[01;32m[K   516[m[K					/* FreeRTOS_netstat() was called to have the [01;31m[KIP[m[K-task print an
[01;32m[K   538[m[K				As this code runs in the [01;31m[KIP[m[K-task, it can be done directly by
[01;32m[K   569[m[K			messages from the MAC to the TCP/[01;31m[KIP[m[K stack. */
[01;32m[K   577[m[K			Instead of passing received packets into the [01;31m[KIP[m[K task one at a time the
[01;32m[K   579[m[K			the [01;31m[KIP[m[K task in one go.  The packets are chained using the pxNextBuffer
[01;32m[K   687[m[K			/* If the [01;31m[KIP[m[K task has messages waiting to be processed then
[01;32m[K   936[m[K			the total size of a UDP/[01;31m[KIP[m[K header plus the size of the header in
[01;32m[K   990[m[K		/* Attempt to create the queue used to communicate with the [01;31m[KIP[m[K task. */
[01;32m[K  1007[m[K				/* Store the local [01;31m[KIP[m[K and MAC address. */
[01;32m[K  1018[m[K					/* The [01;31m[KIP[m[K address is not set until DHCP completes. */
[01;32m[K  1023[m[K					/* The [01;31m[KIP[m[K address is set from the value passed in. */
[01;32m[K  1027[m[K					gateway is on the same subnet as the [01;31m[KIP[m[K	address. */
[01;32m[K  1176[m[K					/* The message is complete, [01;31m[KIP[m[K and checksum's are handled by
[01;32m[K  1229[m[K			/* Only allow eNetworkDownEvent events if the [01;31m[KIP[m[K task is not ready
[01;32m[K  1243[m[K					[01;31m[KIP[m[K task is already awake processing other message. */
[01;32m[K  1258[m[K				/* The [01;31m[KIP[m[K task cannot block itself while waiting for itself to
[01;32m[K  1269[m[K					/* A message should have been sent to the [01;31m[KIP[m[K task, but wasn't. */
[01;32m[K  1350[m[K			/* The first network down event is generated by the [01;31m[KIP[m[K stack itself to
[01;32m[K  1456[m[K					/* The Ethernet frame contains an [01;31m[KIP[m[K packet. */
[01;32m[K  1555[m[K				packets can be fragmented) as these are the only handled [01;31m[KIP[m[K frames
[01;32m[K  1562[m[K				/* Test if the length of the [01;31m[KIP[m[K-header is between 20 and 60 bytes,
[01;32m[K  1563[m[K				and if the [01;31m[KIP[m[K-version is 4. */
[01;32m[K  1570[m[K					/* Is the packet for this [01;31m[KIP[m[K address? */
[01;32m[K  1580[m[K					/* Or (during DHCP negotiation) we have no [01;31m[KIP[m[K-address yet? */
[01;32m[K  1599[m[K				/* Is the [01;31m[KIP[m[K header checksum correct? */
[01;32m[K  1603[m[K					/* Check sum in [01;31m[KIP[m[K-header not correct. */
[01;32m[K  1689[m[K		then check if the [01;31m[KIP[m[K header is claiming to be longer than the remaining
[01;32m[K  1699[m[K			/* Check if the [01;31m[KIP[m[K headers are acceptable and if it has our destination. */
[01;32m[K  1704[m[K				/* Are there [01;31m[KIP[m[K-options. */
[01;32m[K  1707[m[K					/* The size of the [01;31m[KIP[m[K-header is larger than 20 bytes.
[01;32m[K  1708[m[K					The extra space is used for [01;31m[KIP[m[K-options. */
[01;32m[K  1711[m[K						/* All structs of headers expect a [01;31m[KIP[m[K header size of 20 bytes
[01;32m[K  1712[m[K						 * [01;31m[KIP[m[K header options were included, we'll ignore them and cut them out. */
[01;32m[K  1716[m[K						/* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from [01;31m[KIP[m[K header. */
[01;32m[K  1724[m[K						/* Rewrite the Version/IHL byte to indicate that this packet has no [01;31m[KIP[m[K options. */
[01;32m[K  1731[m[K						[01;31m[KIP[m[K-options will be dropped. */
[01;32m[K  1739[m[K					/* Add the [01;31m[KIP[m[K and MAC addresses to the ARP table if they are not
[01;32m[K  1744[m[K						/* Refresh the ARP cache with the [01;31m[KIP[m[K/MAC-address of the received
[01;32m[K  1748[m[K						overwritten with the [01;31m[KIP[m[K address of useless broadcast packets. */
[01;32m[K  1754[m[K							/* The [01;31m[KIP[m[K packet contained an ICMP frame.  Don't bother checking
[01;32m[K  1781[m[K							/* The [01;31m[KIP[m[K packet contained a UDP frame. */
[01;32m[K  1803[m[K									the [01;31m[KIP[m[K header, and the size of the UDP header. */
[01;32m[K  1844[m[K								to be called just before the [01;31m[KIP[m[K-task blocks. */
[01;32m[K  1869[m[K			/* Find the total length of the [01;31m[KIP[m[K packet. */
[01;32m[K  1873[m[K			/* Remove the length of the [01;31m[KIP[m[K headers to obtain the length of the ICMP
[01;32m[K  1988[m[K		the [01;31m[KIP[m[K-task will still check if the length fields are OK. */
[01;32m[K  2004[m[K				/* Check for minimum packet size: Ethernet header and an [01;31m[KIP[m[K-header, 34 bytes */
[01;32m[K  2011[m[K				/* Map the buffer onto a [01;31m[KIP[m[K-Packet struct to easily access the
[01;32m[K  2012[m[K				 * fields of the [01;31m[KIP[m[K packet. */
[01;32m[K  2016[m[K				/* Test if the length of the [01;31m[KIP[m[K-header is between 20 and 60 bytes,
[01;32m[K  2017[m[K				and if the [01;31m[KIP[m[K-version is 4. */
[01;32m[K  2027[m[K				/* Check if the complete [01;31m[KIP[m[K-header is transferred. */
[01;32m[K  2033[m[K				/* Check if the complete [01;31m[KIP[m[K-header plus protocol data have been transferred: */
[01;32m[K  2045[m[K				/* If this [01;31m[KIP[m[K packet header includes Options, then the following
[01;32m[K  2047[m[K				and [01;31m[KIP[m[K headers incorrectly aligned. However, either way, the "third"
[01;32m[K  2163[m[K			/* N.B., if this [01;31m[KIP[m[K packet header includes Options, then the following
[01;32m[K  2165[m[K			and [01;31m[KIP[m[K headers incorrectly aligned. However, either way, the "third"
[01;32m[K  2308[m[K				/* For UDP and TCP, sum the pseudo header, i.e. [01;31m[KIP[m[K protocol + length
[01;32m[K  2676[m[K		/* Returns the [01;31m[KIP[m[K address of the NIC. */
[01;32m[K  2683[m[K		/* Sets the [01;31m[KIP[m[K address of the NIC. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   234[m[K		eNetworkTxEvent,		/* 2: Let the [01;31m[KIP[m[K-task send a network packet. */
[01;32m[K   240[m[K		eTCPNetStat,			/* 8: [01;31m[KIP[m[K-task is asked to produce a netstat listing. */
[01;32m[K   241[m[K		eSocketBindEvent,		/* 9: Send a message to the [01;31m[KIP[m[K-task to bind a socket to a port. */
[01;32m[K   242[m[K		eSocketCloseEvent,		/*10: Send a message to the [01;31m[KIP[m[K-task to close a socket. */
[01;32m[K   243[m[K		eSocketSelectEvent,		/*11: Send a message to the [01;31m[KIP[m[K-task for select(). */
[01;32m[K   268[m[K	/* The offset into an [01;31m[KIP[m[K packet into which the [01;31m[KIP[m[K data (payload) starts. */
[01;32m[K   328[m[K	/* The local [01;31m[KIP[m[K address is accessed from within xDefaultPartUDPPacketHeader,
[01;32m[K   463[m[K	 * Returns pdTRUE if the [01;31m[KIP[m[K task has been created and is initialised.  Otherwise
[01;32m[K   477[m[K		 * [01;31m[KIP[m[K-task
[01;32m[K   514[m[K			uint32_t ulRemoteIP;		/* [01;31m[KIP[m[K address of remote machine */
[01;32m[K   649[m[K			They are maintained by the [01;31m[KIP[m[K-task */
[01;32m[K   671[m[K		 * return [01;31m[KIP[m[K address.
[01;32m[K   758[m[K	 * Send the event eEvent to the [01;31m[KIP[m[K task event queue, using a block time of
[01;32m[K   794[m[K	/* Returns pdTRUE is this function is called from the [01;31m[KIP[m[K-task */

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    44[m[K		uint32_t ulIPAddress;		/* The [01;31m[KIP[m[K address of an ARP cache entry. */
[01;32m[K    54[m[K		eCantSendPacket				/* 2 There is no [01;31m[KIP[m[K address, or an ARP is still in progress, so the packet cannot be sent. */
[01;32m[K    68[m[K		/* MAC-address of the other device containing the same [01;31m[KIP[m[K-address. */
[01;32m[K    83[m[K	 * Look for ulIPAddress in the ARP cache.  If the [01;31m[KIP[m[K address exists, copy the
[01;32m[K    85[m[K	 * age, and return eARPCacheHit.  If the [01;31m[KIP[m[K address does not exist in the ARP
[01;32m[K    94[m[K		/* Lookup an [01;31m[KIP[m[K-address if only the MAC-address is known */
[01;32m[K   105[m[K	 * Send out an ARP request for the [01;31m[KIP[m[K address contained in pxNetworkBuffer, and
[01;32m[K   112[m[K	 * After DHCP is ready and when changing [01;31m[KIP[m[K address, force a quick send of our new [01;31m[KIP[m[K
[01;32m[K   117[m[K	/* This function will check if the target [01;31m[KIP[m[K-address belongs to this device.
[01;32m[K   118[m[K	If so, the packet will be passed to the [01;31m[KIP[m[K-stack, who will answer it.
[01;32m[K   124[m[K		   / * The packet has been sent back to the [01;31m[KIP[m[K-task.
[01;32m[K   125[m[K			 * The [01;31m[KIP[m[K-task will further handle it.

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K    78[m[K	/* The number of octets in the MAC and [01;31m[KIP[m[K addresses respectively. */
[01;32m[K    82[m[K	/* [01;31m[KIP[m[K protocol definitions. */
[01;32m[K   111[m[K		<< [01;31m[KIP[m[K-header >>		// word-aligned
[01;32m[K   111[m[K		<< [01;31m[KIP[m[K-header >>		// word-aligned
[01;32m[K   128[m[K		uint32_t ulIPAddress;			/* Source or destination [01;31m[KIP[m[K address, depending on usage scenario. */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K    88[m[K	/* [01;31m[KIP[m[K packet of type "Any local network"
[01;32m[K   225[m[K	/* function to get the local address and [01;31m[KIP[m[K port */
[01;32m[K   251[m[K	/* Return the remote address and [01;31m[KIP[m[K port. */

[1;34m./include/IPTraceMacroDefaults.h[39m

[01;32m[K    26[m[K	/* This file provides default (empty) implementations for any [01;31m[KIP[m[K trace macros

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    38[m[K	/* The name xTCPTimer was already use as the name of an [01;31m[KIP[m[K-timer. */

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K    43[m[K	 * The target [01;31m[KIP[m[K address will be 224.0.0.252
[01;32m[K   118[m[K	 * It returns a 32-bit [01;31m[KIP[m[K-address, 0 when not found.
[01;32m[K   126[m[K		 * It will be called "internally", by the [01;31m[KIP[m[K-task.

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   324[m[K	/* Configuration to control whether packets with [01;31m[KIP[m[K options,
[01;32m[K   327[m[K	 * If set to 1, the stack accepts [01;31m[KIP[m[K packets that contain [01;31m[KIP[m[K options, but does
[01;32m[K   328[m[K	 * not process the options ([01;31m[KIP[m[K options are not supported).
[01;32m[K   329[m[K	 * If set to 0, the stack will drop [01;31m[KIP[m[K packets that contain [01;31m[KIP[m[K options.
[01;32m[K   374[m[K		 * If no DHCP server responds, use "Auto-[01;31m[KIP[m[K" : the
[01;32m[K   375[m[K		 * device will allocate a random LinkLayer [01;31m[KIP[m[K address.
[01;32m[K   450[m[K	/* When accessing services which have multiple [01;31m[KIP[m[K addresses, setting this
[01;32m[K   451[m[K	greater than 1 can improve reliability by returning different [01;31m[KIP[m[K address
[01;32m[K   497[m[K		/* This macro will be called in every loop the [01;31m[KIP[m[K-task makes.  It may be

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    42[m[K			eDHCPPhasePreRequest	/* Driver is about to request DHCP an [01;31m[KIP[m[K address. */
[01;32m[K    64[m[K		eNotUsingLeasedAddress			/* DHCP failed, and a default [01;31m[KIP[m[K address is being used. */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   336[m[K			/* If the entry was not found, we use the oldest entry and set the [01;31m[KIPaddress[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   878[m[K	#define ETH_DMARXDESC_ES          ((uint32_t)0x00008000U)  /*!< Error summary: OR of the following bits: DE || OE || [01;31m[KIPC[m[K || LC || RWT || RE || CE */
[01;32m[K   886[m[K	#define ETH_DMARXDESC_IPV4HCE     ((uint32_t)0x00000080U)  /*!< [01;31m[KIPC[m[K Checksum Error: Rx Ipv4 header checksum error   */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1132[m[K	  /* Set the [01;31m[KIPCO[m[K bit according to ETH ChecksumOffload value */

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K    84[m[K	  RwReg   GMAC_IPGS;       /**< \brief (Gmac Offset: 0x0BC) [01;31m[KIPG[m[K Stretch Register */
[01;32m[K   227[m[K	#define GMAC_NCFGR_IRXER (0x1u << 30) /**< \brief (GMAC_NCFGR) Ignore [01;31m[KIPG[m[K rx_er */
[01;32m[K   464[m[K	/* -------- GMAC_IPGS : (GMAC Offset: 0x0BC) [01;31m[KIPG[m[K Stretch Register -------- */

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K   131[m[K		.BaseAddress = XPAR_PS7_ETHERNET_0_BASEADDR /**< Physical base address of [01;31m[KIPIF[m[K registers */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    64[m[K	#define   BUS_ERROR_IBECV_MASK        (0x7800)    /* Default [01;31m[KIPSec[m[K clock at 166Mhz */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1206[m[K	 * It will be called by the [01;31m[KIPtask[m[K only to avoid problems with synchronicity

[1;34m./include/tcp_mem_stats.h[39m

[01;32m[K    68[m[K		/* The header file '[01;31m[KIPTraceMacroDefaults[m[K.h' will define the default empty macro's. */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   109[m[K											  * for Rx: initial receive sequence number ([01;31m[KIRS[m[K) */

[1;34m./test/cbmc/proofs/DHCP/IsDHCPSocket/IsDHCPSocket_harness.c[39m

[01;32m[K    41[m[K	 * The harness test proceeds to call [01;31m[KIsDHCPSocket[m[K with an unconstrained value

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   659[m[K	 * data to be sent and as long as the transmit window [01;31m[Kisn[m[K't full.
[01;32m[K  1089[m[K			/* We are actively connecting, so the peer's Initial Sequence Number ([01;31m[KISN[m[K)
[01;32m[K  1090[m[K			[01;31m[Kisn[m[K't known yet. */
[01;32m[K  1093[m[K			/* Start with [01;31m[KISN[m[K (Initial Sequence Number). */
[01;32m[K  1625[m[K				/* Now the socket [01;31m[Kisn[m[K't in an active state anymore so it

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   262[m[K	 *            Having a well randomised [01;31m[KISN[m[K is important to avoid spoofing

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   190[m[K			/* The caller expects the socket to be bound, but it [01;31m[Kisn[m[K't. */
[01;32m[K  1431[m[K					/* For TCP socket, it [01;31m[Kisn[m[K't necessary to limit the blocking time

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    88[m[K	 * [01;31m[Kisn[m[K't a gateway defined) then return eCantSendPacket.

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   265[m[K	 *            Having a well randomised [01;31m[KISN[m[K is important to avoid spoofing

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   412[m[K	        /* Enable FMC [01;31m[KISP[m[K function */
[01;32m[K   419[m[K	        /* Disable FMC [01;31m[KISP[m[K function */

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K    84[m[K	ipconfigBUFFER_ALLOC_UNLOCK() macros, especially for use form an [01;31m[KISR[m[K.  If these
[01;32m[K   250[m[K					/* _HT_ The function shall not be called from an [01;31m[KISR[m[K. Comment

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   289[m[K	#define REG_INT_STATUS             (0x92)       /* [01;31m[KISR[m[K */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   170[m[K		/* This function is called from an [01;31m[KISR[m[K. The Xilinx [01;31m[KISR[m[K-handler has already
[01;32m[K   172[m[K		But it forgets to do a read-back. Do so now to avoid ever-returning [01;31m[KISR[m[K's. */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K   659[m[K	    /* MAC signals an event, probably from within [01;31m[KISR[m[K */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   275[m[K		/* Called from a non-[01;31m[KISR[m[K context. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   801[m[K	/* Utility function. Process Network Down event from [01;31m[KISR[m[K. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   411[m[K	 * interrupt.  If a non zero value is returned, then the calling [01;31m[KISR[m[K should
[01;32m[K   412[m[K	 * perform a context switch before exiting the [01;31m[KISR[m[K.

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   108[m[K											  * for Tx: initial send sequence number ([01;31m[KISS[m[K)

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K    51[m[K	/* The [01;31m[KItemValue[m[K of the sockets xBoundSocketListItem member holds the socket's

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1766[m[K			/* Thanks to Andrey [01;31m[KIvanov[m[K from swissEmbedded for reporting that the

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1125[m[K	  /* Set the [01;31m[KJD[m[K: bit according to ETH Jabber value */

[1;34m./test/cbmc/proofs/CBMCStubLibrary/tasksStubs.c[39m

[01;32m[K    11[m[K	   as a loop bound. It should be overwritten in the Makefile.[01;31m[Kjson[m[K adapting

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K   148[m[K	     * TODO: We need to make this lower bound explicit in the Makefile.[01;31m[Kjson[m[K

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   810[m[K	#define ETH_DMATXDESC_ES                      ((uint32_t)0x00008000U)  /*!< Error summary: OR of the following bits: UE || ED || EC || LCO || NC || LCA || FF || [01;31m[KJT[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K     6[m[K	  * @date    26-[01;31m[KJune[m[K-2015

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   246[m[K	#define   GMAC_DCFGR_RXBMS_EIGHTH (0x0u << 8) /**< \brief (GMAC_DCFGR) 1 [01;31m[KKbyte[m[K Memory Size */

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   247[m[K	#define   GMAC_DCFGR_RXBMS_QUARTER (0x1u << 8) /**< \brief (GMAC_DCFGR) 2 [01;31m[KKbytes[m[K Memory Size */
[01;32m[K   248[m[K	#define   GMAC_DCFGR_RXBMS_HALF (0x2u << 8) /**< \brief (GMAC_DCFGR) 4 [01;31m[KKbytes[m[K Memory Size */
[01;32m[K   249[m[K	#define   GMAC_DCFGR_RXBMS_FULL (0x3u << 8) /**< \brief (GMAC_DCFGR) 8 [01;31m[KKbytes[m[K Memory Size */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   429[m[K				Use full configured addressable space (4 [01;31m[KKbytes[m[K). */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K   156[m[K	 * stack can only send a UDP message to a remove IP address if it [01;31m[Kknowns[m[K the MAC

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K   155[m[K	 * stack can only send a UDP message to a remove IP address if it [01;31m[Kknowns[m[K the MAC

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   123[m[K	 * Wake On [01;31m[KLan[m[K Control Registers

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K    83[m[K	  RwReg   GMAC_WOL;        /**< \brief (Gmac Offset: 0x0B8) Wake on [01;31m[KLAN[m[K Register */
[01;32m[K   303[m[K	#define GMAC_ISR_WOL (0x1u << 28) /**< \brief (GMAC_ISR) Wake On [01;31m[KLAN[m[K */
[01;32m[K   328[m[K	#define GMAC_IER_WOL (0x1u << 28) /**< \brief (GMAC_IER) Wake On [01;31m[KLAN[m[K */
[01;32m[K   353[m[K	#define GMAC_IDR_WOL (0x1u << 28) /**< \brief (GMAC_IDR) Wake On [01;31m[KLAN[m[K */
[01;32m[K   456[m[K	/* -------- GMAC_WOL : (GMAC Offset: 0x0B8) Wake on [01;31m[KLAN[m[K Register -------- */

[1;34m./portable/NetworkInterface/RX/ether_callback.c[39m

[01;32m[K    67[m[K	    /* Set the callback function ([01;31m[KLAN[m[K cable connect/disconnect event) */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K   176[m[K					/* LLMNR messages are typically used on a [01;31m[KLAN[m[K and they're

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K    81[m[K		 * Note that LLMNR is a better protocol for name services on a [01;31m[KLAN[m[K as it is

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2435[m[K				/* Clear the SYN flag in [01;31m[KlastPacket[m[K. */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   854[m[K		} /* if( [01;31m[KlBytes[m[K > 0 ) */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   878[m[K	#define ETH_DMARXDESC_ES          ((uint32_t)0x00008000U)  /*!< Error summary: OR of the following bits: DE || OE || IPC || [01;31m[KLC[m[K || RWT || RE || CE */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   810[m[K	#define ETH_DMATXDESC_ES                      ((uint32_t)0x00008000U)  /*!< Error summary: OR of the following bits: UE || ED || EC || LCO || NC || [01;31m[KLCA[m[K || FF || JT */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   810[m[K	#define ETH_DMATXDESC_ES                      ((uint32_t)0x00008000U)  /*!< Error summary: OR of the following bits: UE || ED || EC || [01;31m[KLCO[m[K || NC || LCA || FF || JT */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1806[m[K			As long as '[01;31m[KlDataLength[m[K' is unequal to zero, the segment is still occupied. */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    48[m[K		int32_t [01;31m[KlDataLength[m[K;			/* Actual number of bytes */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   357[m[K	 * int32_t [01;31m[KlDistance[m[K = ( int32_t ) ( ulSeq1 - ulSeq2 );

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   442[m[K	#define   PORT_LED_OFF                (0x8000)     /* Turn off all the port [01;31m[KLEDs[m[K (LED3/LED2/LED1/LED0) */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K    65[m[K		 * NOP (0x01), NOP (0x01), SACK (0x05), [01;31m[KLEN[m[K (0x0a),
[01;32m[K    67[m[K		 * where [01;31m[KLEN[m[K is 2 + 2*4 = 10 bytes. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2911[m[K					with [01;31m[Klen[m[K = 1. */

[1;34m./test/cbmc/proofs/DNS/DNSlookup/DNSlookup_harness.c[39m

[01;32m[K    24[m[K			char *pcHostName = safeMalloc([01;31m[Klen[m[K); /* malloc is replaced by safeMalloc */

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName/DNSgetHostByName_harness.c[39m

[01;32m[K    90[m[K	    __CPROVER_assume( [01;31m[Klen[m[K > 0 ); /* prvProcessDNSCache strcmp */

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_a/DNSgetHostByName_a_harness.c[39m

[01;32m[K   101[m[K	    __CPROVER_assume( [01;31m[Klen[m[K > 0 ); /* prvProcessDNSCache strcmp */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   795[m[K						/* RX step8: Drop packet if [01;31m[Klen[m[K is invalid or no descriptor available. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   295[m[K	 * \param [01;31m[Klen[m[K the amount of data to read.
[01;32m[K   380[m[K	 * \param [01;31m[Klen[m[K the amount of dummy data to write.

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   875[m[K	 * @param [in] [01;31m[Klen[m[K length of the data
[01;32m[K   879[m[K	/*static void print_hex(unsigned char *bin_data, size_t [01;31m[Klen[m[K) */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   165[m[K				uint32_t [01;31m[Klen[m[K:13,       /**  0..12  Length of frame including FCS */
[01;32m[K   192[m[K				uint32_t [01;31m[Klen[m[K:14,     /**  0..13 Length of buffer */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   166[m[K				uint32_t [01;31m[Klen[m[K:13,       /**  0..12  Length of frame including FCS */
[01;32m[K   193[m[K				uint32_t [01;31m[Klen[m[K:14,     /**  0..13 Length of buffer */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   603[m[K	 * If [01;31m[KlEndOfFrame[m[K is true then the data being copied is the end of the frame

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   653[m[K	 * If [01;31m[KlEndOfFrame[m[K is true then the data being copied is the end of the frame

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K    31[m[K	 *	If LENGTH defines the size of the buffer, a maximum of ([01;31m[KLENGT[m[K-1) bytes can be stored

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K   617[m[K	                bool [01;31m[KlinkCurr[m[K = ( macObject->TCPIP_MAC_LinkCheck )( macCliHandle ); /* check link status */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2197[m[K		( [01;31m[KLinkLayer[m[K length (14) + IP header length (20) + size of TCP header(20 +) ).*/

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K    78[m[K	 * driver can try out a random [01;31m[KLinkLayer[m[K IP address (169.254.x.x).  It will send out a

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   215[m[K	 * for (trying-out) [01;31m[KLinkLayer[m[K IP-addresses, using the random method: Send
[01;32m[K   373[m[K							a free [01;31m[KLinkLayer[m[K IP-address.  Next state will be
[01;32m[K  1030[m[K			trying-out [01;31m[KLinkLayer[m[K IP-addresses, using the random method. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   345[m[K		 * device will allocate a random [01;31m[KLinkLayer[m[K IP address.

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   375[m[K		 * device will allocate a random [01;31m[KLinkLayer[m[K IP address.

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    61[m[K			eGetLinkLayerAddress,		/* When DHCP didn't respond, try to obtain a [01;31m[KLinkLayer[m[K address 168.254.x.x. */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K   133[m[K	#define GMII_LCSR        0x1D   // [01;31m[KLinkMD[m[K Control/Status

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   195[m[K		/* Check if the [01;31m[KLinkSStatus[m[K in the PHY is still high after 15 seconds of not
[01;32m[K   201[m[K		/* Check if the [01;31m[KLinkSStatus[m[K in the PHY is still low every second. */

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K    62[m[K		/* Check if the [01;31m[KLinkSStatus[m[K in the PHY is still high after 15 seconds of not
[01;32m[K    68[m[K		/* Check if the [01;31m[KLinkSStatus[m[K in the PHY is still low every second. */

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K    55[m[K		/* Check if the [01;31m[KLinkSStatus[m[K in the PHY is still high after 15 seconds of not
[01;32m[K    61[m[K		/* Check if the [01;31m[KLinkSStatus[m[K in the PHY is still low every second. */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K    52[m[K		/* Check if the [01;31m[KLinkSStatus[m[K in the PHY is still high after 15 seconds of not
[01;32m[K    58[m[K		/* Check if the [01;31m[KLinkSStatus[m[K in the PHY is still low every second. */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K    72[m[K	/* Check if the [01;31m[KLinkSStatus[m[K in the PHY is still high after 2 seconds of not
[01;32m[K    78[m[K	    /* Check if the [01;31m[KLinkSStatus[m[K in the PHY is still low every second. */

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K    35[m[K		/* Check if the [01;31m[KLinkStatus[m[K in the PHY is still high after 15 seconds of not
[01;32m[K    41[m[K		/* Check if the [01;31m[KLinkStatus[m[K in the PHY is still low every second. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   680[m[K	  uint32_t                   [01;31m[KLinkStatus[m[K;    /*!< Ethernet link status        */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   204[m[K		the [01;31m[Klinux[m[K thread that sends via the pcap library. */
[01;32m[K   350[m[K		  routed to the [01;31m[KLinux[m[K TCP/IP stack.
[01;32m[K   487[m[K	 * @brief launch 2 [01;31m[Klinux[m[K threads, one for Tx and one for Rx
[01;32m[K   620[m[K	 * @warning this is called from a [01;31m[KLinux[m[K thread, do not attempt any FreeRTOS calls
[01;32m[K   645[m[K	 * @warning this is called from a [01;31m[KLinux[m[K thread, do not attempt any FreeRTOS calls
[01;32m[K   655[m[K		/* Disable signals to this thread since this is a [01;31m[KLinux[m[K pthread to be able to
[01;32m[K   657[m[K		 * suspension mode by the [01;31m[Klinux[m[K port signals
[01;32m[K   683[m[K	 * @warning this is called from a [01;31m[KLinux[m[K thread, do not attempt any FreeRTOS calls

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2689[m[K		/* Set the time-out field, so that we'[01;31m[Kll[m[K be called by the IP-task in case no

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   396[m[K				/* store it in the receive queue, where it'[01;31m[Kll[m[K be processed by a

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1712[m[K						 * IP header options were included, we'[01;31m[Kll[m[K ignore them and cut them out. */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K    87[m[K		/* [01;31m[KLLMNR[m[K constants. */
[01;32m[K   184[m[K	 * The NBNS and the [01;31m[KLLMNR[m[K protocol share this reply function.
[01;32m[K   648[m[K		/* If [01;31m[KLLMNR[m[K is being used then determine if the host name includes a '.' -
[01;32m[K   649[m[K		if not then [01;31m[KLLMNR[m[K can be used as the lookup method. */
[01;32m[K   711[m[K						/* Use [01;31m[KLLMNR[m[K addressing. */
[01;32m[K  1353[m[K					/* If this is not a reply to our DNS request, it might an [01;31m[KLLMNR[m[K

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   398[m[K			/* The [01;31m[KLLMNR[m[K IP-address has a fixed virtual MAC address. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   390[m[K			/* [01;31m[KLLMNR[m[K and NBNS depend on DNS because those protocols share a lot of code. */
[01;32m[K   424[m[K		/* Include support for [01;31m[KLLMNR[m[K: Link-local Multicast Name Resolution (non-Microsoft) */

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K   177[m[K				/* Also add [01;31m[KLLMNR[m[K multicast MAC address. */

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   140[m[K	/* [01;31m[KLLMNR[m[K multicast address. */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   186[m[K	/* [01;31m[KLLMNR[m[K multicast address. */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   177[m[K		 * For [01;31m[KLLMNR[m[K, an extra MAC-address must be configured to
[01;32m[K   459[m[K					/* Program the [01;31m[KLLMNR[m[K address at index 1. */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K   176[m[K					/* [01;31m[KLLMNR[m[K messages are typically used on a LAN and they're
[01;32m[K   386[m[K				/* A [01;31m[KLLMNR[m[K request, check for the destination port. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1308[m[K			/* The packet is a request for [01;31m[KLLMNR[m[K - process it. */
[01;32m[K  1577[m[K					/* Is it the [01;31m[KLLMNR[m[K multicast address? */

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K    38[m[K	/* The Link-local Multicast Name Resolution ([01;31m[KLLMNR[m[K)
[01;32m[K    51[m[K	#define	ipLLMNR_PORT	5355 /* Standard [01;31m[KLLMNR[m[K port. */
[01;32m[K    67[m[K	 * [01;31m[KLLMNR[m[K is very similar to DNS, so is handled by the DNS routines.
[01;32m[K    72[m[K		/* The [01;31m[KLLMNR[m[K MAC address is 01:00:5e:00:00:fc */
[01;32m[K    81[m[K		 * Note that [01;31m[KLLMNR[m[K is a better protocol for name services on a LAN as it is

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   420[m[K			/* [01;31m[KLLMNR[m[K and NBNS depend on DNS because those protocols share a lot of code. */
[01;32m[K   462[m[K		/* Include support for [01;31m[KLLMNR[m[K: Link-local Multicast Name Resolution (non-Microsoft) */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1130[m[K	  /* Set the [01;31m[KLM[m[K bit according to ETH LoopbackMode value */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1101[m[K						its maximum length '[01;31m[KlMax[m[K'. */
[01;32m[K  1803[m[K			/* [01;31m[KlMax[m[K would indicate the size of the txStream. */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    47[m[K		int32_t [01;31m[KlMaxLength[m[K;				/* Maximum space, number of bytes which can be stored in this segment */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2705[m[K				( lRxSpace >= [01;31m[KlMinLength[m[K ) &&						/* There is Rx space for more data. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2266[m[K			called later to store an out-of-order packet (in case [01;31m[KlOffset[m[K is
[01;32m[K  2282[m[K				if the head marker in rxStream may be advanced,	only if [01;31m[KlOffset[m[K == 0.

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   438[m[K	#define   PORT_REMOTE_LOOPBACK        (0x0200)     /* Enable remote [01;31m[Kloopback[m[K at PHY */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K   153[m[K	#define GMII_LOOPBACK          (1 << 14) // 1=[01;31m[Kloopback[m[K Enabled; 0=Normal Operation

[1;34m./portable/NetworkInterface/M487/m480_eth.h[39m

[01;32m[K    60[m[K	#define BMCR_LOOPBACK           0x4000  /* TXD [01;31m[Kloopback[m[K bits           */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   488[m[K	  uint32_t             LoopbackMode;              /*!< Selects or not the internal MAC MII [01;31m[KLoopback[m[K mode.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1130[m[K	  /* Set the LM bit according to ETH [01;31m[KLoopbackMode[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   488[m[K	  uint32_t             [01;31m[KLoopbackMode[m[K;              /*!< Selects or not the internal MAC MII Loopback mode.

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   729[m[K			} /* while( [01;31m[KlPacketCount[m[K == 0 ) */

[1;34m./portable/NetworkInterface/M487/m480_eth.h[39m

[01;32m[K    45[m[K	#define MII_LBRERROR        0x18        /* [01;31m[KLpback[m[K, rx, bypass error    */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K    44[m[K	/* [01;31m[KLPCOpen[m[K includes. */
[01;32m[K   242[m[K		/* Call the [01;31m[KLPCOpen[m[K function to initialise the hardware. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2195[m[K		/* Calculate [01;31m[KlReceiveLength[m[K - the length of the TCP data received.  This is

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   155[m[K		int32_t [01;31m[KlRxBufSize[m[K;	/* Unit: bytes */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2705[m[K				( [01;31m[KlRxSpace[m[K >= lMinLength ) &&						/* There is Rx space for more data. */
[01;32m[K  2722[m[K					( [01;31m[KlRxSpace[m[K < ipNUMERIC_CAST( int32_t, 2U * pxSocket->u.xTCP.usCurMSS ) ) )	/* There are less than 2 x MSS space in the Rx buffer. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1615[m[K							pxSocket->u.xTCP.uxRxWinSize = ( uint32_t )pxProps->[01;31m[KlRxWinSize[m[K;	/* Fixed value: size of the TCP reception window */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   156[m[K		int32_t [01;31m[KlRxWinSize[m[K;	/* Unit: MSS */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   239[m[K		 * Receive buffer manager writes are burst of 2 words => 3 [01;31m[Klsb[m[K bits

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   242[m[K		 * Receive buffer manager writes are burst of 2 words => 3 [01;31m[Klsb[m[K bits

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K    99[m[K		 * 1K Boundaries. Receive buffer manager write operations are burst of 2 words => 3 [01;31m[Klsb[m[K bits

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   261[m[K		 * Receive buffer manager writes are burst of 2 words => 3 [01;31m[Klsb[m[K bits

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   137[m[K		 * 1K Boundaries. Receive buffer manager write operations are burst of 2 words => 3 [01;31m[Klsb[m[K bits

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1271[m[K					'1 * [01;31m[KlSRTT[m[K' ms for an ACK. A second time it will wait '2 * [01;31m[KlSRTT[m[K' ms,

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   118[m[K		int32_t [01;31m[KlSRTT[m[K;						/* Smoothed Round Trip Time, it may increment quickly and it decrements slower */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   659[m[K	  ETH_DMADescTypeDef *[01;31m[KLSRxDesc[m[K;          /*!< Last Segment Rx Desc */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    49[m[K		int32_t [01;31m[KlStreamPos[m[K;				/* reference to the [t|r]xStream of the socket */

[1;34m./FreeRTOS_Stream_Buffer.c[39m

[01;32m[K   126[m[K	 * 'uxOffset' can be used to read data located at a certain offset from '[01;31m[KlTail[m[K'.
[01;32m[K   127[m[K	 * If 'pucData' equals NULL, the function is called to advance '[01;31m[KlTail[m[K' only.
[01;32m[K   128[m[K	 * if 'xPeek' is pdTRUE, or if 'uxOffset' is non-zero, the '[01;31m[KlTail[m[K' pointer will

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2265[m[K			ack (SACK) option to confirm it.  In that case, [01;31m[KlTCPAddRxdata[m[K() will be
[01;32m[K  2303[m[K				/* Now [01;31m[KlTCPAddRxdata[m[K() will move the rxHead pointer forward

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   802[m[K			/* If [01;31m[KlTCPWindowRxCheck[m[K( ) returns == 0, the packet will be passed

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   696[m[K		maintained by [01;31m[KlTCPWindowTxAdd[m[K(). */

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K     2[m[K	 * FreeRTOS+TCP Labs Build 160919 (C) 2016 Real Time Engineers [01;31m[Kltd[m[K.
[01;32m[K    16[m[K	 ***   coding and style standards mandated by Real Time Engineers [01;31m[Kltd[m[K., and  ***
[01;32m[K    21[m[K	 ***   the sole discretion of Real Time Engineers [01;31m[KLtd[m[K., be offered versions  ***
[01;32m[K    47[m[K	 * PURPOSE. Real Time Engineers [01;31m[KLtd[m[K. disclaims all conditions and terms, be they

[1;34m./portable/NetworkInterface/esp32/NetworkInterface.c[39m

[01;32m[K     1[m[K	// Copyright 2018 Espressif Systems (Shanghai) PTE [01;31m[KLTD[m[K

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   151[m[K		int32_t [01;31m[KlTxBufSize[m[K;	/* Unit: bytes */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1616[m[K							pxSocket->u.xTCP.uxTxWinSize = ( uint32_t )pxProps->[01;31m[KlTxWinSize[m[K;	/* Fixed value: size of the TCP transmit window */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   152[m[K		int32_t [01;31m[KlTxWinSize[m[K;	/* Unit: MSS */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   640[m[K				/* Make sure [01;31m[KlwIP[m[K is well configured so one NetworkBufferDescriptor_t can contain the maximum packet size. */
[01;32m[K   643[m[K				/* Save NetworkBufferDescriptor_t pointer to be sent to [01;31m[KlwIP[m[K upper layer. */
[01;32m[K   656[m[K	 * \param netif the [01;31m[KlwIP[m[K network interface structure for this ethernetif.
[01;32m[K  1047[m[K	 * \param netif the [01;31m[KlwIP[m[K network interface structure for this ethernetif.
[01;32m[K  1077[m[K	 * \param netif the [01;31m[KlwIP[m[K network interface structure for this ethernetif.

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_hw.h[39m

[01;32m[K    23[m[K	//#include "[01;31m[Klwip[m[K/netif.h"

[1;34m./portable/NetworkInterface/mw300_rd/NetworkInterface.c[39m

[01;32m[K    53[m[K	#if 0 //this is [01;31m[Klwip[m[K structure.

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K   635[m[K			"\t.ulType = 0x%[01;31m[KlX[m[K, /* %s */\n",

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   189[m[K	 * Let ARP look-up the [01;31m[KMAC[m[K-address of the peer and initialise the first SYN
[01;32m[K   909[m[K			/* Fill in the destination [01;31m[KMAC[m[K addresses. */
[01;32m[K   914[m[K			/* The source [01;31m[KMAC[m[K addresses is fixed to 'ipLOCAL_MAC_ADDRESS'. */
[01;32m[K  1051[m[K			/* The [01;31m[KMAC[m[K-address of the peer (or gateway) has been found,

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K    63[m[K	 * Lookup an [01;31m[KMAC[m[K address in the ARP cache from the IP address.
[01;32m[K    84[m[K		/* [01;31m[KMAC[m[K-address of the other device containing the same IP-address. */
[01;32m[K   128[m[K							/* Give the sources [01;31m[KMAC[m[K address the value of the broadcast address, will be swapped later */
[01;32m[K   154[m[K							/* Remember the [01;31m[KMAC[m[K-address of the other device which has the same IP-address. */
[01;32m[K   258[m[K					/* See if the [01;31m[KMAC[m[K-address also matches. */
[01;32m[K   270[m[K					/* Found an entry containing ulIPAddress, but the [01;31m[KMAC[m[K address
[01;32m[K   273[m[K					given [01;31m[KMAC[m[K address.ucBytes.  If found, either of the two entries
[01;32m[K   279[m[K					/* Found an entry with the given [01;31m[KMAC[m[K-address, but the IP-address
[01;32m[K   283[m[K					/* If ARP stores the [01;31m[KMAC[m[K address of IP addresses outside the
[01;32m[K   284[m[K					network, than the [01;31m[KMAC[m[K address of the gateway should not be
[01;32m[K   320[m[K					/* Both the [01;31m[KMAC[m[K address as well as the IP address were found in
[01;32m[K   328[m[K				/* An entry containing the IP-address was found, but it had a different [01;31m[KMAC[m[K address */
[01;32m[K   373[m[K				/* Does this row in the ARP cache table hold an entry for the [01;31m[KMAC[m[K
[01;32m[K   398[m[K			/* The LLMNR IP-address has a fixed virtual [01;31m[KMAC[m[K address. */
[01;32m[K   414[m[K			/* This is a broadcast so it uses the broadcast [01;31m[KMAC[m[K address. */
[01;32m[K   438[m[K					the [01;31m[KMAC[m[K address is known. */
[01;32m[K   547[m[K					/* This entry will get removed soon.  See if the [01;31m[KMAC[m[K address is
[01;32m[K   752[m[K					/* See if the [01;31m[KMAC[m[K-address also matches, and we're all happy */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   664[m[K					/* Target [01;31m[KMAC[m[K address doesn't match. */

[1;34m./test/unit-test/stubs/FreeRTOS_ARP_stubs.c[39m

[01;32m[K     5[m[K	/* For convenience, a [01;31m[KMAC[m[K address of all 0xffs is defined const for quick
[01;32m[K   104[m[K			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 	/* Ethernet source [01;31m[KMAC[m[K address. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K   155[m[K	/* The ARP cache is a table that maps IP addresses to [01;31m[KMAC[m[K addresses.  The IP
[01;32m[K   156[m[K	 * stack can only send a UDP message to a remove IP address if it knowns the [01;31m[KMAC[m[K
[01;32m[K   157[m[K	 * address associated with the IP address, or the [01;31m[KMAC[m[K address of the router used to
[01;32m[K   159[m[K	 * address the [01;31m[KMAC[m[K address and IP address are added to the ARP cache.  When a UDP
[01;32m[K   162[m[K	 * required [01;31m[KMAC[m[K address information.  ipconfigARP_CACHE_ENTRIES defines the maximum
[01;32m[K   266[m[K	/* The windows simulator cannot really simulate [01;31m[KMAC[m[K interrupts, and needs to

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K   184[m[K	/* Default [01;31m[KMAC[m[K address configuration.  The demo creates a virtual network
[01;32m[K   185[m[K	 * connection that uses this [01;31m[KMAC[m[K address by accessing the raw Ethernet/WiFi data

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K   154[m[K	/* The ARP cache is a table that maps IP addresses to [01;31m[KMAC[m[K addresses.  The IP
[01;32m[K   155[m[K	 * stack can only send a UDP message to a remove IP address if it knowns the [01;31m[KMAC[m[K
[01;32m[K   156[m[K	 * address associated with the IP address, or the [01;31m[KMAC[m[K address of the router used to
[01;32m[K   158[m[K	 * address the [01;31m[KMAC[m[K address and IP address are added to the ARP cache.  When a UDP
[01;32m[K   161[m[K	 * required [01;31m[KMAC[m[K address information.  ipconfigARP_CACHE_ENTRIES defines the maximum
[01;32m[K   275[m[K	/* The windows simulator cannot really simulate [01;31m[KMAC[m[K interrupts, and needs to

[1;34m./portable/NetworkInterface/SH2A/NetworkInterface.c[39m

[01;32m[K    85[m[K		/* Initialise the [01;31m[KMAC[m[K. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    59[m[K	 * [01;31m[KMAC[m[K Registers
[01;32m[K   120[m[K	#define   GLOBAL_SOFTWARE_RESET       (0x0001)    /* Global soft reset (PHY, [01;31m[KMAC[m[K, QMU) */
[01;32m[K   192[m[K	#define   RX_CTRL_MAC_FILTER          (0x0800)    /* Receive with address that pass [01;31m[KMAC[m[K address filtering */
[01;32m[K   198[m[K	#define   RX_CTRL_UNICAST             (0x0020)    /* Receive unicast frames that match the device [01;31m[KMAC[m[K address */
[01;32m[K   212[m[K	#define   RX_CTRL_BLOCK_MAC           (0x0001)    /* Receive drop frame if the SA is same as device [01;31m[KMAC[m[K address */
[01;32m[K   299[m[K	 * [01;31m[KMAC[m[K Address Hash Table Control Registers

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K  1079[m[K	 * \return a pbuf filled with the received packet (including [01;31m[KMAC[m[K header).

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   403[m[K		/* Init step2-4: write QMU [01;31m[KMAC[m[K address (low, middle then high). */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   345[m[K		  Open in promiscuous mode as the [01;31m[KMAC[m[K and
[01;32m[K   347[m[K		  not be the real [01;31m[KMAC[m[K and IP address.  This allows

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K   106[m[K	 * A deferred interrupt handler for all [01;31m[KMAC[m[K/DMA interrupt sources.
[01;32m[K   172[m[K			/* Initialize the [01;31m[Kmac[m[K and set the [01;31m[KMAC[m[K address. */
[01;32m[K   177[m[K				/* Also add LLMNR multicast [01;31m[KMAC[m[K address. */
[01;32m[K   186[m[K			/* Setting the operating speed of the [01;31m[KMAC[m[K needs a delay. */

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K   131[m[K	/* The [01;31m[KMAC[m[K address initially set to the constants defined in FreeRTOSConfig.h. */
[01;32m[K   313[m[K												PCAP_OPENFLAG_PROMISCUOUS,	/* Open in promiscuous mode as the [01;31m[KMAC[m[K and
[01;32m[K   315[m[K																			not be the real [01;31m[KMAC[m[K and IP address.  This allows

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K    83[m[K	        eMACInit,                               /* Must initialise [01;31m[KMAC[m[K. */
[01;32m[K    90[m[K	    static const TCPIP_MAC_OBJECT * macObject; /* the one and only [01;31m[KMAC[m[K object; */
[01;32m[K    92[m[K	    static SYS_MODULE_OBJ macObjHandle;        /* the [01;31m[KMAC[m[K object instance, obtained at initialization */
[01;32m[K    94[m[K	    static volatile SYS_STATUS macObjStatus;   /* current [01;31m[KMAC[m[K status */
[01;32m[K   113[m[K	    /* the PIC32 [01;31m[KMAC[m[K task function */
[01;32m[K   116[m[K	    /* [01;31m[KMAC[m[K interrupt event function */
[01;32m[K   123[m[K	    /* [01;31m[KMAC[m[K RX packets functions */
[01;32m[K   221[m[K	                /* Indicate that the [01;31m[KMAC[m[K initialisation succeeded. */
[01;32m[K   273[m[K	                pxDescriptor->pucEthernetBuffer = 0; /* it will be released by the [01;31m[KMAC[m[K driver once it's transmitted */
[01;32m[K   334[m[K	        macObject = TCPIP_HOSTS_CONFIGURATION[ 0 ].pMacObject; /* the [01;31m[KMAC[m[K object we use */
[01;32m[K   359[m[K	            /* Initialize the [01;31m[KMAC[m[K. [01;31m[KMAC[m[K address is defined to 0x000000000000 in
[01;32m[K   361[m[K	             * factory programmed [01;31m[KMAC[m[K address. */
[01;32m[K   363[m[K	            /* Set the [01;31m[Kmac[m[K address in the FreeRTOS+TCP stack. */
[01;32m[K   382[m[K	            /* open the [01;31m[KMAC[m[K */
[01;32m[K   398[m[K	            /* completed the [01;31m[KMAC[m[K initialization */
[01;32m[K   408[m[K	            /* spawn the PIC32 [01;31m[KMAC[m[K task function */
[01;32m[K   493[m[K	        uint8_t unsetMACAddr[ 6 ] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };     /* not set [01;31m[KMAC[m[K address */
[01;32m[K   583[m[K	        /* perform the [01;31m[KMAC[m[K initialization */
[01;32m[K   586[m[K	            /* process the underlying [01;31m[KMAC[m[K module tasks */
[01;32m[K   658[m[K	    /* [01;31m[KMAC[m[K interrupt event function */
[01;32m[K   659[m[K	    /* [01;31m[KMAC[m[K signals an event, probably from within ISR */
[01;32m[K   686[m[K	    /* receive packets from the [01;31m[KMAC[m[K driver */
[01;32m[K   691[m[K	        /* get all the new [01;31m[KMAC[m[K packets */
[01;32m[K   782[m[K	            /* acknowledge the packet to the [01;31m[KMAC[m[K driver */

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   135[m[K	    /* [01;31m[KMAC[m[K packet acknowledgment, once [01;31m[KMAC[m[K is done with it */
[01;32m[K   139[m[K	    /* allocates a [01;31m[KMAC[m[K packet that holds a data buffer that can be used by both: */
[01;32m[K   141[m[K	    /*  - the Harmony [01;31m[KMAC[m[K driver: TCPIP_MAC_PACKET->pDSeg->segLoad */
[01;32m[K   144[m[K	    /*      - 4 bytes pointer to the [01;31m[KMAC[m[K packet (pic32_NetworkInterface.c) */
[01;32m[K   145[m[K	    /*      - 2 bytes offset from the [01;31m[KMAC[m[K packet (Harmony [01;31m[KMAC[m[K driver: segLoadOffset) */
[01;32m[K   150[m[K	    /*       These are added by the [01;31m[KMAC[m[K packet allocation! */
[01;32m[K   162[m[K	        /* set the [01;31m[KMAC[m[K packet pointer in the packet */
[01;32m[K   183[m[K	    /* standard PIC32 [01;31m[KMAC[m[K allocation function for a [01;31m[KMAC[m[K packet */
[01;32m[K   199[m[K	    /* standard PIC32 [01;31m[KMAC[m[K packet acknowledgment */
[01;32m[K   200[m[K	    /* function called once [01;31m[KMAC[m[K is done with it */
[01;32m[K   211[m[K	    /* associates the current [01;31m[KMAC[m[K packet with a network descriptor */
[01;32m[K   248[m[K	    /*  - the Harmony [01;31m[KMAC[m[K driver: TCPIP_MAC_PACKET */
[01;32m[K   253[m[K	    /*       These are added by the [01;31m[KMAC[m[K packet allocation! */

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   146[m[K	/* [01;31m[KMAC[m[K address to use. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K     4[m[K	 * \brief GMAC (Ethernet [01;31m[KMAC[m[K) driver for SAM.
[01;32m[K    93[m[K	/** The [01;31m[KMAC[m[K can support frame lengths up to 1536 bytes */
[01;32m[K   219[m[K		/* [01;31m[KMAC[m[K address */
[01;32m[K  1005[m[K	 * \brief Set [01;31m[KMAC[m[K Address.
[01;32m[K  1023[m[K	 * \brief Set [01;31m[KMAC[m[K Address via 2 dword.
[01;32m[K  1038[m[K	 * \brief Set [01;31m[KMAC[m[K Address via int64.
[01;32m[K  1100[m[K	 * This is the quickstart guide for the \ref gmac_group "Ethernet [01;31m[KMAC[m[K",
[01;32m[K  1114[m[K	 * - [01;31m[KMAC[m[K address is set to 00-04-25-1c-a0-02
[01;32m[K  1216[m[K	 * -# Define the [01;31m[KMAC[m[K address. 00:04:25:1C:A0:02 is the address reserved

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K    46[m[K	/**  SOFTWARE API DEFINITION FOR Gigabit Ethernet [01;31m[KMAC[m[K */
[01;32m[K    48[m[K	/** \addtogroup SAM4E_GMAC Gigabit Ethernet [01;31m[KMAC[m[K */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K     4[m[K	 * \brief GMAC (Ethernet [01;31m[KMAC[m[K) driver for SAM.
[01;32m[K    94[m[K	/** The [01;31m[KMAC[m[K can support frame lengths up to 1536 bytes */
[01;32m[K   220[m[K		/* [01;31m[KMAC[m[K address */
[01;32m[K  1008[m[K	 * \brief Set [01;31m[KMAC[m[K Address.
[01;32m[K  1026[m[K	 * \brief Set [01;31m[KMAC[m[K Address via 2 dword.
[01;32m[K  1041[m[K	 * \brief Set [01;31m[KMAC[m[K Address via int64.
[01;32m[K  1103[m[K	 * This is the quickstart guide for the \ref gmac_group "Ethernet [01;31m[KMAC[m[K",
[01;32m[K  1117[m[K	 * - [01;31m[KMAC[m[K address is set to 00-04-25-1c-a0-02
[01;32m[K  1219[m[K	 * -# Define the [01;31m[KMAC[m[K address. 00:04:25:1C:A0:02 is the address reserved

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K     4[m[K	 * \brief GMAC (Ethernet [01;31m[KMAC[m[K) driver for SAM.

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   192[m[K	/* [01;31m[KMAC[m[K address to use. */
[01;32m[K   619[m[K				/* Configure the [01;31m[KMAC[m[K with the Duplex Mode fixed by the
[01;32m[K   630[m[K				/* Configure the [01;31m[KMAC[m[K with the speed fixed by the

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K     4[m[K	 * \brief GMAC (Ethernet [01;31m[KMAC[m[K) driver for SAM.
[01;32m[K    96[m[K	/** The [01;31m[KMAC[m[K can support frame lengths up to 1536 bytes */
[01;32m[K   243[m[K		/* [01;31m[KMAC[m[K address */
[01;32m[K  1016[m[K	 * \brief Set [01;31m[KMAC[m[K Address.
[01;32m[K  1034[m[K	 * \brief Set [01;31m[KMAC[m[K Address via 2 dword.
[01;32m[K  1049[m[K	 * \brief Set [01;31m[KMAC[m[K Address via int64.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K     4[m[K	 * \brief GMAC (Ethernet [01;31m[KMAC[m[K) driver for SAM.
[01;32m[K   452[m[K		/* Set [01;31m[KMac[m[K Address */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   162[m[K	 * Sets up the [01;31m[KMAC[m[K with the results of an auto-negotiation.
[01;32m[K   167[m[K	 * Generates a CRC for a [01;31m[KMAC[m[K address that is then used to generate a hash index.
[01;32m[K   172[m[K	 * Generates a hash index when setting a filter to permit a [01;31m[KMAC[m[K address.
[01;32m[K   177[m[K	 * Update the hash table to allow a [01;31m[KMAC[m[K address.
[01;32m[K   245[m[K		/* Save [01;31m[KMAC[m[K address. */
[01;32m[K   248[m[K		/* Clear all [01;31m[KMAC[m[K address hash entries. */
[01;32m[K   298[m[K			/* Enable [01;31m[KMAC[m[K interrupts. */

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K    93[m[K	    /* Enable [01;31m[KMAC[m[K and DMA transmission and reception */

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   248[m[K	    // Reset [01;31m[KMAC[m[K
[01;32m[K   258[m[K	    /* Configure the [01;31m[KMAC[m[K interrupt enable register. */
[01;32m[K   269[m[K	    /* Configure the [01;31m[KMAC[m[K control register. */
[01;32m[K   396[m[K	// Provide ethernet devices with a semi-unique [01;31m[KMAC[m[K address
[01;32m[K   403[m[K	    // we only want bottom 16 bits of word1 ([01;31m[KMAC[m[K bits 32-47)
[01;32m[K   405[m[K	    // Locally administered [01;31m[KMAC[m[K, reduced conflicts
[01;32m[K   409[m[K	    if( word0 == 0xFFFFFFFF )		// Not burn any [01;31m[Kmac[m[K address at 1st 2 words of Data Flash
[01;32m[K   411[m[K	        // with a semi-unique [01;31m[KMAC[m[K address from the UUID

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   151[m[K	    eMACInit,   /* Must initialise [01;31m[KMAC[m[K. */
[01;32m[K   177[m[K		 * For LLMNR, an extra [01;31m[KMAC[m[K-address must be configured to
[01;32m[K   235[m[K	/* [01;31m[KMAC[m[K buffers: ---------------------------------------------------------*/
[01;32m[K   624[m[K		/* Calculate the selected [01;31m[KMAC[m[K address high register. */
[01;32m[K   627[m[K		/* Load the selected [01;31m[KMAC[m[K address high register. */
[01;32m[K   630[m[K		/* Calculate the selected [01;31m[KMAC[m[K address low register. */
[01;32m[K   633[m[K		/* Load the selected [01;31m[KMAC[m[K address low register */
[01;32m[K  1093[m[K				/* Configure the [01;31m[KMAC[m[K with the Duplex Mode fixed by the
[01;32m[K  1104[m[K				/* Configure the [01;31m[KMAC[m[K with the speed fixed by the
[01;32m[K  1145[m[K			/* ETHERNET [01;31m[KMAC[m[K Re-Configuration */
[01;32m[K  1148[m[K			/* Restart [01;31m[KMAC[m[K interface */
[01;32m[K  1153[m[K			/* Stop [01;31m[KMAC[m[K interface */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K    25[m[K	      (#)Call HAL_ETH_Init() API to initialize the Ethernet peripheral ([01;31m[KMAC[m[K, DMA, ...)
[01;32m[K    41[m[K	      (#)Enable [01;31m[KMAC[m[K and DMA transmission and reception:
[01;32m[K    45[m[K	         the frame to [01;31m[KMAC[m[K TX FIFO:
[01;32m[K    61[m[K	      (#) Configure the Ethernet [01;31m[KMAC[m[K after ETH peripheral initialization
[01;32m[K    62[m[K	          HAL_ETH_ConfigMAC(); all [01;31m[KMAC[m[K parameters should be filled.
[01;32m[K   188[m[K	  * @brief  Initializes the Ethernet [01;31m[KMAC[m[K and DMA according to default
[01;32m[K   226[m[K		/* Set the SWR bit: resets all [01;31m[KMAC[m[K subsystem internal registers and logic */
[01;32m[K   237[m[K		/*-------------------------------- [01;31m[KMAC[m[K Initialization ----------------------*/
[01;32m[K   273[m[K		/* Write to ETHERNET [01;31m[KMAC[m[K MIIAR: Configure the ETHERNET CSR Clock Range */
[01;32m[K   279[m[K		/* Config [01;31m[KMAC[m[K and DMA */
[01;32m[K   622[m[K	      (+) Enable [01;31m[KMAC[m[K and DMA transmission and reception.
[01;32m[K   624[m[K	      (+) Disable [01;31m[KMAC[m[K and DMA transmission and reception.
[01;32m[K   626[m[K	      (+) Set the [01;31m[KMAC[m[K configuration in runtime mode
[01;32m[K   636[m[K	  * @brief  Enables Ethernet [01;31m[KMAC[m[K and DMA reception/transmission
[01;32m[K   649[m[K		/* Enable transmit state machine of the [01;31m[KMAC[m[K for transmission on the MII */
[01;32m[K   652[m[K		/* Enable receive state machine of the [01;31m[KMAC[m[K for reception from the MII */
[01;32m[K   675[m[K	  * @brief  Stop Ethernet [01;31m[KMAC[m[K and DMA reception/transmission
[01;32m[K   694[m[K	  /* Disable receive state machine of the [01;31m[KMAC[m[K for reception from the MII */
[01;32m[K   700[m[K	  /* Disable transmit state machine of the [01;31m[KMAC[m[K for transmission on the MII */
[01;32m[K   737[m[K		/* Enable the [01;31m[KMAC[m[K transmission */
[01;32m[K   752[m[K		/* Enable the [01;31m[KMAC[m[K transmission */
[01;32m[K   767[m[K		/* Enable the [01;31m[KMAC[m[K transmission */
[01;32m[K   781[m[K	  * @brief  Set ETH [01;31m[KMAC[m[K Configuration.
[01;32m[K   784[m[K	  * @param  macconf: [01;31m[KMAC[m[K Configuration structure
[01;32m[K  1060[m[K	  * @brief  Configures Ethernet [01;31m[KMAC[m[K and DMA with default parameters.
[01;32m[K  1081[m[K	  /* Ethernet [01;31m[KMAC[m[K default initialization **************************************/
[01;32m[K  1294[m[K	     /* Initialize [01;31m[KMAC[m[K address in ethernet [01;31m[KMAC[m[K */
[01;32m[K  1299[m[K	  * @brief  Configures the selected [01;31m[KMAC[m[K address.
[01;32m[K  1302[m[K	  * @param  MacAddr: The [01;31m[KMAC[m[K address to configure
[01;32m[K  1304[m[K	  *             @arg ETH_MAC_Address0: [01;31m[KMAC[m[K Address0
[01;32m[K  1305[m[K	  *             @arg ETH_MAC_Address1: [01;31m[KMAC[m[K Address1
[01;32m[K  1306[m[K	  *             @arg ETH_MAC_Address2: [01;31m[KMAC[m[K Address2
[01;32m[K  1307[m[K	  *             @arg ETH_MAC_Address3: [01;31m[KMAC[m[K Address3
[01;32m[K  1308[m[K	  * @param  Addr: Pointer to [01;31m[KMAC[m[K address buffer data (6 bytes)
[01;32m[K  1320[m[K		/* Calculate the selected [01;31m[KMAC[m[K address high register */
[01;32m[K  1323[m[K		/* Load the selected [01;31m[KMAC[m[K address high register */
[01;32m[K  1325[m[K		/* Calculate the selected [01;31m[KMAC[m[K address low register */
[01;32m[K  1328[m[K		/* Load the selected [01;31m[KMAC[m[K address low register */
[01;32m[K  1333[m[K	  * @brief  Enables the [01;31m[KMAC[m[K transmission.
[01;32m[K  1346[m[K	  * @brief  Disables the [01;31m[KMAC[m[K transmission.
[01;32m[K  1359[m[K	  * @brief  Enables the [01;31m[KMAC[m[K reception.
[01;32m[K  1372[m[K	  * @brief  Disables the [01;31m[KMAC[m[K reception.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   353[m[K	/* Ethernet [01;31m[KMAC[m[K address offsets */
[01;32m[K   354[m[K	#define ETH_MAC_ADDR_HBASE    (uint32_t)(ETH_MAC_BASE + (uint32_t)0x40U)  /* Ethernet [01;31m[KMAC[m[K address high offset */
[01;32m[K   355[m[K	#define ETH_MAC_ADDR_LBASE    (uint32_t)(ETH_MAC_BASE + (uint32_t)0x44U)  /* Ethernet [01;31m[KMAC[m[K address low offset */
[01;32m[K   441[m[K	  uint32_t             DuplexMode;                /*!< Selects the [01;31m[KMAC[m[K duplex mode: Half-Duplex or Full-Duplex mode
[01;32m[K   447[m[K	  uint8_t             *MACAddr;                   /*!< [01;31m[KMAC[m[K Address of used Hardware: must be pointer on an array of 6 bytes */
[01;32m[K   462[m[K	  * @brief  ETH [01;31m[KMAC[m[K Configuration Structure definition
[01;32m[K   468[m[K	                                                           When enabled, the [01;31m[KMAC[m[K allows no more then 2048 bytes to be received.
[01;32m[K   469[m[K	                                                           When disabled, the [01;31m[KMAC[m[K can receive up to 16384 bytes.
[01;32m[K   473[m[K	                                                           When enabled, the [01;31m[KMAC[m[K allows no more then 2048 bytes to be sent.
[01;32m[K   474[m[K	                                                           When disabled, the [01;31m[KMAC[m[K can send up to 16384 bytes.
[01;32m[K   488[m[K	  uint32_t             LoopbackMode;              /*!< Selects or not the internal [01;31m[KMAC[m[K MII Loopback mode.
[01;32m[K   494[m[K	  uint32_t             RetryTransmission;         /*!< Selects or not the [01;31m[KMAC[m[K attempt retries transmission, based on the settings of BL,
[01;32m[K   498[m[K	  uint32_t             AutomaticPadCRCStrip;      /*!< Selects or not the Automatic [01;31m[KMAC[m[K Pad/CRC Stripping.
[01;32m[K   507[m[K	  uint32_t             ReceiveAll;                /*!< Selects or not all frames reception by the [01;31m[KMAC[m[K (No filtering).
[01;32m[K   547[m[K	  uint32_t             UnicastPauseFrameDetect;   /*!< Selects or not the [01;31m[KMAC[m[K detection of the Pause frames (with [01;31m[KMAC[m[K Address0
[01;32m[K   551[m[K	  uint32_t             ReceiveFlowControl;        /*!< Enables or disables the [01;31m[KMAC[m[K to decode the received Pause frame and
[01;32m[K   555[m[K	  uint32_t             TransmitFlowControl;       /*!< Enables or disables the [01;31m[KMAC[m[K to transmit Pause frames (Full-Duplex mode)
[01;32m[K   556[m[K	                                                           or the [01;31m[KMAC[m[K back-pressure operation (Half-Duplex mode)
[01;32m[K   893[m[K	#define ETH_DMARXDESC_MAMPCE      ((uint32_t)0x00000001U)  /*!< Rx [01;31m[KMAC[m[K Address/Payload Checksum Error: Rx [01;31m[KMAC[m[K address matched/ Rx Payload Checksum Error */
[01;32m[K  1135[m[K	#define ETH_PASSCONTROLFRAMES_BLOCKALL                ((uint32_t)0x00000040U)  /*!< [01;31m[KMAC[m[K filters all control frames from reaching the application */
[01;32m[K  1136[m[K	#define ETH_PASSCONTROLFRAMES_FORWARDALL              ((uint32_t)0x00000080U)  /*!< [01;31m[KMAC[m[K forwards all control frames to application even if they fail the Address Filter */
[01;32m[K  1137[m[K	#define ETH_PASSCONTROLFRAMES_FORWARDPASSEDADDRFILTER ((uint32_t)0x000000C0U)  /*!< [01;31m[KMAC[m[K forwards control frames that pass the Address Filter. */
[01;32m[K  1246[m[K	/** @defgroup ETH_MAC_addresses ETH [01;31m[KMAC[m[K addresses
[01;32m[K  1257[m[K	/** @defgroup ETH_MAC_addresses_filter_SA_DA ETH [01;31m[KMAC[m[K addresses filter SA DA
[01;32m[K  1266[m[K	/** @defgroup ETH_MAC_addresses_filter_Mask_bytes ETH [01;31m[KMAC[m[K addresses filter Mask bytes
[01;32m[K  1269[m[K	#define ETH_MAC_ADDRESSMASK_BYTE6      ((uint32_t)0x20000000U)  /*!< Mask [01;31m[KMAC[m[K Address high reg bits [15:8] */
[01;32m[K  1270[m[K	#define ETH_MAC_ADDRESSMASK_BYTE5      ((uint32_t)0x10000000U)  /*!< Mask [01;31m[KMAC[m[K Address high reg bits [7:0] */
[01;32m[K  1271[m[K	#define ETH_MAC_ADDRESSMASK_BYTE4      ((uint32_t)0x08000000U)  /*!< Mask [01;31m[KMAC[m[K Address low reg bits [31:24] */
[01;32m[K  1272[m[K	#define ETH_MAC_ADDRESSMASK_BYTE3      ((uint32_t)0x04000000U)  /*!< Mask [01;31m[KMAC[m[K Address low reg bits [23:16] */
[01;32m[K  1273[m[K	#define ETH_MAC_ADDRESSMASK_BYTE2      ((uint32_t)0x02000000U)  /*!< Mask [01;31m[KMAC[m[K Address low reg bits [15:8] */
[01;32m[K  1274[m[K	#define ETH_MAC_ADDRESSMASK_BYTE1      ((uint32_t)0x01000000U)  /*!< Mask [01;31m[KMAC[m[K Address low reg bits [70] */
[01;32m[K  1279[m[K	/** @defgroup ETH_MAC_Debug_flags ETH [01;31m[KMAC[m[K Debug flags
[01;32m[K  1287[m[K		#define ETH_MAC_TXFIFO_READ     ((uint32_t)0x00100000)  /* Tx FIFO read status: Read (transferring data to the [01;31m[KMAC[m[K transmitter) */
[01;32m[K  1288[m[K		#define ETH_MAC_TXFIFO_WAITING  ((uint32_t)0x00200000)  /* Tx FIFO read status: Waiting for TxStatus from [01;31m[KMAC[m[K transmitter */
[01;32m[K  1290[m[K		#define ETH_MAC_TRANSMISSION_PAUSE     ((uint32_t)0x00080000)  /* [01;31m[KMAC[m[K transmitter in pause */
[01;32m[K  1291[m[K		#define ETH_MAC_TRANSMITFRAMECONTROLLER_IDLE            ((uint32_t)0x00000000)  /* [01;31m[KMAC[m[K transmit frame controller: Idle */
[01;32m[K  1292[m[K		#define ETH_MAC_TRANSMITFRAMECONTROLLER_WAITING         ((uint32_t)0x00020000)  /* [01;31m[KMAC[m[K transmit frame controller: Waiting for Status of previous frame or IFG/backoff period to be over */
[01;32m[K  1293[m[K		#define ETH_MAC_TRANSMITFRAMECONTROLLER_GENRATING_PCF   ((uint32_t)0x00040000)  /* [01;31m[KMAC[m[K transmit frame controller: Generating and transmitting a Pause control frame (in full duplex mode) */
[01;32m[K  1294[m[K		#define ETH_MAC_TRANSMITFRAMECONTROLLER_TRANSFERRING    ((uint32_t)0x00060000)  /* [01;31m[KMAC[m[K transmit frame controller: Transferring input frame for transmission */
[01;32m[K  1295[m[K		#define ETH_MAC_MII_TRANSMIT_ACTIVE      ((uint32_t)0x00010000)  /* [01;31m[KMAC[m[K MII transmit engine active */
[01;32m[K  1305[m[K		#define ETH_MAC_SMALL_FIFO_NOTACTIVE    ((uint32_t)0x00000000)  /* [01;31m[KMAC[m[K small FIFO read / write controllers not active */
[01;32m[K  1306[m[K		#define ETH_MAC_SMALL_FIFO_READ_ACTIVE  ((uint32_t)0x00000002)  /* [01;31m[KMAC[m[K small FIFO read controller active */
[01;32m[K  1307[m[K		#define ETH_MAC_SMALL_FIFO_WRITE_ACTIVE ((uint32_t)0x00000004)  /* [01;31m[KMAC[m[K small FIFO write controller active */
[01;32m[K  1308[m[K		#define ETH_MAC_SMALL_FIFO_RW_ACTIVE    ((uint32_t)0x00000006)  /* [01;31m[KMAC[m[K small FIFO read / write controllers active */
[01;32m[K  1309[m[K		#define ETH_MAC_MII_RECEIVE_PROTOCOL_ACTIVE   ((uint32_t)0x00000001)  /* [01;31m[KMAC[m[K MII receive protocol engine active */
[01;32m[K  1542[m[K	/** @defgroup ETH_MAC_Flags ETH [01;31m[KMAC[m[K Flags
[01;32m[K  1545[m[K	#define ETH_MAC_FLAG_TST     ((uint32_t)0x00000200U)  /*!< Time stamp trigger flag (on [01;31m[KMAC[m[K) */
[01;32m[K  1548[m[K	#define ETH_MAC_FLAG_MMC     ((uint32_t)0x00000010U)  /*!< MMC flag (on [01;31m[KMAC[m[K) */
[01;32m[K  1549[m[K	#define ETH_MAC_FLAG_PMT     ((uint32_t)0x00000008U)  /*!< PMT flag (on [01;31m[KMAC[m[K) */
[01;32m[K  1582[m[K	/** @defgroup ETH_MAC_Interrupts ETH [01;31m[KMAC[m[K Interrupts
[01;32m[K  1585[m[K	#define ETH_MAC_IT_TST       ((uint32_t)0x00000200U)  /*!< Time stamp trigger interrupt (on [01;31m[KMAC[m[K) */
[01;32m[K  1588[m[K	#define ETH_MAC_IT_MMC       ((uint32_t)0x00000010U)  /*!< MMC interrupt (on [01;31m[KMAC[m[K) */
[01;32m[K  1589[m[K	#define ETH_MAC_IT_PMT       ((uint32_t)0x00000008U)  /*!< PMT interrupt (on [01;31m[KMAC[m[K) */
[01;32m[K  1789[m[K	 * @brief  Enables the specified Ethernet [01;31m[KMAC[m[K interrupts.
[01;32m[K  1791[m[K	  * @param  __INTERRUPT__: specifies the Ethernet [01;31m[KMAC[m[K interrupt sources to be
[01;32m[K  1801[m[K	  * @brief  Disables the specified Ethernet [01;31m[KMAC[m[K interrupts.
[01;32m[K  1803[m[K	  * @param  __INTERRUPT__: specifies the Ethernet [01;31m[KMAC[m[K interrupt sources to be
[01;32m[K  1827[m[K	  * @brief  Enables the [01;31m[KMAC[m[K Back Pressure operation activation (Half-duplex only).
[01;32m[K  1834[m[K	  * @brief  Disables the [01;31m[KMAC[m[K BackPressure operation activation (Half-duplex only).
[01;32m[K  1841[m[K	  * @brief  Checks whether the specified Ethernet [01;31m[KMAC[m[K flag is set or not.
[01;32m[K  1850[m[K	  * @retval The state of Ethernet [01;31m[KMAC[m[K flag.
[01;32m[K  1916[m[K	  * @brief  Enables any unicast packet filtered by the [01;31m[KMAC[m[K address
[01;32m[K  1924[m[K	  * @brief  Disables any unicast packet filtered by the [01;31m[KMAC[m[K address
[01;32m[K  1932[m[K	  * @brief  Enables the [01;31m[KMAC[m[K Wake-Up Frame Detection.
[01;32m[K  1939[m[K	  * @brief  Disables the [01;31m[KMAC[m[K Wake-Up Frame Detection.
[01;32m[K  1946[m[K	  * @brief  Enables the [01;31m[KMAC[m[K Magic Packet Detection.
[01;32m[K  1953[m[K	  * @brief  Disables the [01;31m[KMAC[m[K Magic Packet Detection.
[01;32m[K  1960[m[K	  * @brief  Enables the [01;31m[KMAC[m[K Power Down.
[01;32m[K  1967[m[K	  * @brief  Disables the [01;31m[KMAC[m[K Power Down.

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K    87[m[K	    eMACInit,   /* Must initialise [01;31m[KMAC[m[K. */
[01;32m[K   139[m[K	            /* Indicate that the [01;31m[KMAC[m[K initialisation succeeded. */
[01;32m[K   295[m[K	        /* Wait for the Ethernet [01;31m[KMAC[m[K interrupt to indicate that another packet

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K    61[m[K			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 	/* Ethernet source [01;31m[KMAC[m[K address. */
[01;32m[K   152[m[K				 * Offset the memcpy by the size of a [01;31m[KMAC[m[K address to start at the packet's
[01;32m[K   153[m[K				 * Ethernet header 'source' [01;31m[KMAC[m[K address; the preceding 'destination' should not be altered.

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   252[m[K	/* For convenience, a [01;31m[KMAC[m[K address of all 0xffs is defined const for quick
[01;32m[K   569[m[K			messages from the [01;31m[KMAC[m[K to the TCP/IP stack. */
[01;32m[K  1007[m[K				/* Store the local IP and [01;31m[KMAC[m[K address. */
[01;32m[K  1035[m[K				/* The [01;31m[KMAC[m[K address is stored in the start of the default packet
[01;32m[K  1739[m[K					/* Add the IP and [01;31m[KMAC[m[K addresses to the ARP table if they are not
[01;32m[K  1744[m[K						/* Refresh the ARP cache with the IP/[01;31m[KMAC[m[K-address of the received
[01;32m[K  2583[m[K			/* Swap source and destination [01;31m[KMAC[m[K addresses. */
[01;32m[K  2708[m[K		/* Copy the [01;31m[KMAC[m[K address at the start of the default packet header fragment. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   298[m[K	/* For convenience, a [01;31m[KMAC[m[K address of all zeros and another of all 0xffs are
[01;32m[K   332[m[K	/* The local [01;31m[KMAC[m[K address is accessed from within xDefaultPartUDPPacketHeader,

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    45[m[K		MACAddress_t xMACAddress;	/* The [01;31m[KMAC[m[K address of an ARP cache entry. */
[01;32m[K    68[m[K		/* [01;31m[KMAC[m[K-address of the other device containing the same IP-address. */
[01;32m[K    76[m[K		 * known [01;31m[KMAC[m[K address to make sure it gets refreshed.
[01;32m[K    84[m[K	 * associated [01;31m[KMAC[m[K address into pxMACAddress, refresh the ARP cache entry's
[01;32m[K    94[m[K		/* Lookup an IP-address if only the [01;31m[KMAC[m[K-address is known */

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K    78[m[K	/* The number of octets in the [01;31m[KMAC[m[K and IP addresses respectively. */
[01;32m[K   326[m[K	/* Set the [01;31m[KMAC[m[K-address that belongs to a given IPv4 multi-cast address. */

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K    40[m[K	 * Note that a special [01;31m[KMAC[m[K address is required in addition to the NIC's actual
[01;32m[K    41[m[K	 * [01;31m[KMAC[m[K address: 01:00:5E:00:00:FC
[01;32m[K    72[m[K		/* The LLMNR [01;31m[KMAC[m[K address is 01:00:5e:00:00:fc */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1302[m[K	  * @param  [01;31m[KMacAddr[m[K: The MAC address to configure

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   447[m[K	  uint8_t             *[01;31m[KMACAddr[m[K;                   /*!< MAC Address of used Hardware: must be pointer on an array of 6 bytes */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   276[m[K		/* Initialise the [01;31m[KMACB[m[K and set all PHY properties */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K    93[m[K	    static TCPIP_MAC_HANDLE [01;31m[KmacCliHandle[m[K;      /* client handle */
[01;32m[K   617[m[K	                bool linkCurr = ( macObject->TCPIP_MAC_LinkCheck )( [01;31m[KmacCliHandle[m[K ); /* check link status */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   784[m[K	  * @param  [01;31m[Kmacconf[m[K: MAC Configuration structure
[01;32m[K   907[m[K		else /* [01;31m[Kmacconf[m[K == NULL : here we just configure Speed and Duplex mode */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   831[m[K			/*------------------------ ETHERNET [01;31m[KMACCR[m[K Configuration --------------------*/
[01;32m[K   832[m[K			/* Get the ETHERNET [01;31m[KMACCR[m[K value */
[01;32m[K   852[m[K			/* Write to ETHERNET [01;31m[KMACCR[m[K */
[01;32m[K   909[m[K			/*------------------------ ETHERNET [01;31m[KMACCR[m[K Configuration --------------------*/
[01;32m[K   910[m[K			/* Get the ETHERNET [01;31m[KMACCR[m[K value */
[01;32m[K   918[m[K			/* Write to ETHERNET [01;31m[KMACCR[m[K */
[01;32m[K  1119[m[K	  /*------------------------ ETHERNET [01;31m[KMACCR[m[K Configuration --------------------*/
[01;32m[K  1120[m[K	  /* Get the ETHERNET [01;31m[KMACCR[m[K value */
[01;32m[K  1151[m[K	  /* Write to ETHERNET [01;31m[KMACCR[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   360[m[K	/* Ethernet [01;31m[KMACCR[m[K register Mask */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   879[m[K			/*----------------------- ETHERNET [01;31m[KMACFCR[m[K Configuration --------------------*/
[01;32m[K   881[m[K			/* Get the ETHERNET [01;31m[KMACFCR[m[K value */
[01;32m[K   894[m[K			/* Write to ETHERNET [01;31m[KMACFCR[m[K */
[01;32m[K  1185[m[K	   /*----------------------- ETHERNET [01;31m[KMACFCR[m[K Configuration -------------------*/
[01;32m[K  1187[m[K	   /* Get the ETHERNET [01;31m[KMACFCR[m[K value */
[01;32m[K  1205[m[K	   /* Write to ETHERNET [01;31m[KMACFCR[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   363[m[K	/* Ethernet [01;31m[KMACFCR[m[K register Mask */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   855[m[K			/*----------------------- ETHERNET [01;31m[KMACFFR[m[K Configuration --------------------*/
[01;32m[K   856[m[K			/* Write to ETHERNET [01;31m[KMACFFR[m[K */
[01;32m[K  1154[m[K	  /*----------------------- ETHERNET [01;31m[KMACFFR[m[K Configuration --------------------*/
[01;32m[K  1163[m[K	  /* Write to ETHERNET [01;31m[KMACFFR[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   873[m[K			/*--------------- ETHERNET [01;31m[KMACHTHR[m[K and MACHTLR Configuration ---------------*/
[01;32m[K   874[m[K			/* Write to ETHERNET [01;31m[KMACHTHR[m[K */
[01;32m[K  1179[m[K	   /*--------------- ETHERNET [01;31m[KMACHTHR[m[K and MACHTLR Configuration --------------*/
[01;32m[K  1180[m[K	   /* Write to ETHERNET [01;31m[KMACHTHR[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   873[m[K			/*--------------- ETHERNET MACHTHR and [01;31m[KMACHTLR[m[K Configuration ---------------*/
[01;32m[K   877[m[K			/* Write to ETHERNET [01;31m[KMACHTLR[m[K */
[01;32m[K  1179[m[K	   /*--------------- ETHERNET MACHTHR and [01;31m[KMACHTLR[m[K Configuration --------------*/
[01;32m[K  1183[m[K	   /* Write to ETHERNET [01;31m[KMACHTLR[m[K */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K   100[m[K	    static bool [01;31m[KmacLinkStatus[m[K;              /* true if link is ON */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   238[m[K		/* Get the ETHERNET [01;31m[KMACMIIAR[m[K value */
[01;32m[K   479[m[K			/* Get the ETHERNET [01;31m[KMACMIIAR[m[K value */
[01;32m[K   561[m[K			/* Get the ETHERNET [01;31m[KMACMIIAR[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   357[m[K	/* Ethernet [01;31m[KMACMIIAR[m[K register Mask */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   504[m[K					/* Get [01;31m[KMACMIIDR[m[K value */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K    90[m[K	    static const TCPIP_MAC_OBJECT * [01;31m[KmacObject[m[K; /* the one and only MAC object; */
[01;32m[K   334[m[K	        [01;31m[KmacObject[m[K = TCPIP_HOSTS_CONFIGURATION[ 0 ].pMacObject; /* the MAC object we use */
[01;32m[K   617[m[K	                bool linkCurr = ( [01;31m[KmacObject[m[K->TCPIP_MAC_LinkCheck )( macCliHandle ); /* check link status */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K    92[m[K	    static SYS_MODULE_OBJ [01;31m[KmacObjHandle[m[K;        /* the MAC object instance, obtained at initialization */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K    94[m[K	    static volatile SYS_STATUS [01;31m[KmacObjStatus[m[K;   /* current MAC status */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   897[m[K			/*----------------------- ETHERNET [01;31m[KMACVLANTR[m[K Configuration -----------------*/
[01;32m[K  1208[m[K	   /*----------------------- ETHERNET [01;31m[KMACVLANTR[m[K Configuration ----------------*/

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1242[m[K	 * -# Configure the PHY [01;31m[Kmaintainance[m[K interface.

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1245[m[K	 * -# Configure the PHY [01;31m[Kmaintainance[m[K interface.

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2858[m[K		/* Storing data may result in a fatal error if [01;31m[Kmalloc[m[K() fails. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   234[m[K	/* [01;31m[KMalloc[m[K functions. Within most applications of FreeRTOS, the couple

[1;34m./test/cbmc/proofs/Socket/vSocketBind/DONT_ALLOW_SOCKET_SEND_WITHOUT_BIND/vSocketBind_harness.c[39m

[01;32m[K    54[m[K		/* [01;31m[Kmalloc[m[K instead of safeMalloc since we do not allow socket without binding. */

[1;34m./test/cbmc/proofs/parsing/ProcessReceivedUDPPacket/ProcessReceivedUDPPacket_harness.c[39m

[01;32m[K    23[m[K	/* Implementation of safe [01;31m[Kmalloc[m[K */

[1;34m./test/cbmc/proofs/parsing/ProcessReceivedTCPPacket/ProcessReceivedTCPPacket_harness.c[39m

[01;32m[K    18[m[K	/* Implementation of safe [01;31m[Kmalloc[m[K */

[1;34m./test/cbmc/proofs/DNS/DNSlookup/DNSlookup_harness.c[39m

[01;32m[K    24[m[K			char *pcHostName = safeMalloc(len); /* [01;31m[Kmalloc[m[K is replaced by safeMalloc */

[1;34m./test/cbmc/proofs/utility/memory_assignments.c[39m

[01;32m[K     5[m[K	/* Implementation of safe [01;31m[Kmalloc[m[K which returns NULL if the requested size is 0.
[01;32m[K     6[m[K	 Warning: The behavior of [01;31m[Kmalloc[m[K(0) is platform dependent.
[01;32m[K     7[m[K	 It is possible for [01;31m[Kmalloc[m[K(0) to return an address without allocating memory.*/

[1;34m./test/cbmc/stubs/cbmc.c[39m

[01;32m[K     4[m[K	 * Model a [01;31m[Kmalloc[m[K that can fail (CBMC [01;31m[Kmalloc[m[K does not fail) and

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   527[m[K				often not use a [01;31m[Kmalloc[m[K() failed hook as the TCP stack will recover
[01;32m[K   593[m[K			not use a [01;31m[Kmalloc[m[K failed hook as the TCP stack will recover from

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   103[m[K	would be desirable, as defined by ipconfigPACKET_FILLER_SIZE.  So the [01;31m[Kmalloc[m[K'd

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   237[m[K	/* [01;31m[KMalloc[m[K functions. Within most applications of FreeRTOS, the couple

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   238[m[K	 * [01;31m[KMallocLarge[m[K is used to allocate large TCP buffers (for Rx/Tx)

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   241[m[K	 * [01;31m[KMallocLarge[m[K is used to allocate large TCP buffers (for Rx/Tx)

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   239[m[K	 * [01;31m[KMallocSocket[m[K is used to allocate the space for the sockets

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   242[m[K	 * [01;31m[KMallocSocket[m[K is used to allocate the space for the sockets

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    83[m[K	#define REG_MAC_ADDR_4             (0x14)       /* [01;31m[KMARH[m[K */
[01;32m[K    84[m[K	#define REG_MAC_ADDR_5             (0x15)       /* [01;31m[KMARH[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    79[m[K	#define REG_MAC_ADDR_0             (0x10)       /* [01;31m[KMARL[m[K */
[01;32m[K    80[m[K	#define REG_MAC_ADDR_1             (0x11)       /* [01;31m[KMARL[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    81[m[K	#define REG_MAC_ADDR_2             (0x12)       /* [01;31m[KMARM[m[K */
[01;32m[K    82[m[K	#define REG_MAC_ADDR_3             (0x13)       /* [01;31m[KMARM[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   110[m[K	#define REG_MEM_BIST_INFO          (0x24)       /* [01;31m[KMBIR[m[K */

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K   107[m[K	#define phyADVERTISE_CSMA			0x0001U	/* Supports IEEE 802.3u: Fast Ethernet at 100 [01;31m[KMbit[m[K/s */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   719[m[K		 * The workaround requires a delay of four TX_CLK/RX_CLK clock cycles. For a 10 [01;31m[KMbit[m[K connection,

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_physpeed.c[39m

[01;32m[K   204[m[K		/* Advertise PHY speed of 100 and 10 [01;31m[KMbps[m[K */
[01;32m[K   428[m[K			/* Dont advertise PHY speed of 1000 [01;31m[KMbps[m[K */
[01;32m[K   430[m[K			/* Dont advertise PHY speed of 10 [01;31m[KMbps[m[K */
[01;32m[K   437[m[K			/* Dont advertise PHY speed of 1000 [01;31m[KMbps[m[K */
[01;32m[K   440[m[K			/* Dont advertise PHY speed of 100 [01;31m[KMbps[m[K */

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K   583[m[K						/* 10 [01;31m[KMbps[m[K. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   438[m[K	  uint32_t             Speed;                     /*!< Sets the Ethernet speed: 10/100 [01;31m[KMbps[m[K.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K     4[m[K	  * @author  [01;31m[KMCD[m[K Application Team

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K     4[m[K	  * @author  [01;31m[KMCD[m[K Application Team

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K   226[m[K	 * \param ul_mck GMAC [01;31m[KMCK[m[K.

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   636[m[K	 * \param ul_mck   GMAC [01;31m[KMCK[m[K.

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   209[m[K	#define   GMAC_NCFGR_CLK_MCK_8 (0x0u << 18) /**< \brief (GMAC_NCFGR) [01;31m[KMCK[m[K divided by 8 ([01;31m[KMCK[m[K up to 20 MHz) */
[01;32m[K   210[m[K	#define   GMAC_NCFGR_CLK_MCK_16 (0x1u << 18) /**< \brief (GMAC_NCFGR) [01;31m[KMCK[m[K divided by 16 ([01;31m[KMCK[m[K up to 40 MHz) */
[01;32m[K   211[m[K	#define   GMAC_NCFGR_CLK_MCK_32 (0x2u << 18) /**< \brief (GMAC_NCFGR) [01;31m[KMCK[m[K divided by 32 ([01;31m[KMCK[m[K up to 80 MHz) */
[01;32m[K   212[m[K	#define   GMAC_NCFGR_CLK_MCK_48 (0x3u << 18) /**< \brief (GMAC_NCFGR) [01;31m[KMCK[m[K divided by 48 ([01;31m[KMCK[m[K up to 120MHz) */
[01;32m[K   213[m[K	#define   GMAC_NCFGR_CLK_MCK_64 (0x4u << 18) /**< \brief (GMAC_NCFGR) [01;31m[KMCK[m[K divided by 64 ([01;31m[KMCK[m[K up to 160 MHz) */
[01;32m[K   214[m[K	#define   GMAC_NCFGR_CLK_MCK_96 (0x5u << 18) /**< \brief (GMAC_NCFGR) [01;31m[KMCK[m[K divided by 96 ([01;31m[KMCK[m[K up to 240 MHz) */
[01;32m[K   215[m[K	#define   GMAC_NCFGR_CLK_MCK_128 (0x6u << 18) /**< \brief (GMAC_NCFGR) [01;31m[KMCK[m[K divided by 128 ([01;31m[KMCK[m[K up to 320 MHz) */
[01;32m[K   216[m[K	#define   GMAC_NCFGR_CLK_MCK_224 (0x7u << 18) /**< \brief (GMAC_NCFGR) [01;31m[KMCK[m[K divided by 224 ([01;31m[KMCK[m[K up to 540 MHz) */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K   152[m[K	 * \param ul_mck GMAC [01;31m[KMCK[m[K.

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   639[m[K	 * \param ul_mck   GMAC [01;31m[KMCK[m[K.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   633[m[K	 * \param ul_mck   GMAC [01;31m[KMCK[m[K.

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K    55[m[K	/* Define the byte order of the target [01;31m[KMCU[m[K (the [01;31m[KMCU[m[K FreeRTOS+TCP is executing

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K    52[m[K	/* Define the byte order of the target [01;31m[KMCU[m[K (the [01;31m[KMCU[m[K FreeRTOS+TCP is executing

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2423[m[K		/* Small [01;31m[KMCUs[m[K often spend up to 30% of the time doing checksum calculations

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K    46[m[K	See also tools/tcp_mem_stats.[01;31m[Kmd[m[K */

[1;34m./tools/tcp_mem_stats.c[39m

[01;32m[K    28[m[K	 * See tools/tcp_mem_stats.[01;31m[Kmd[m[K for further description.

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K    29[m[K	 * See tools/tcp_dump_packets.[01;31m[Kmd[m[K for further description.

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   633[m[K	 * \brief Set [01;31m[KMDC[m[K clock divider.

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   208[m[K	#define GMAC_NCFGR_CLK_Msk (0x7u << GMAC_NCFGR_CLK_Pos) /**< \brief (GMAC_NCFGR) [01;31m[KMDC[m[K CLock Division */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   636[m[K	 * \brief Set [01;31m[KMDC[m[K clock divider.

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   559[m[K			/* Set [01;31m[KMDC[m[K clock divider. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   630[m[K	 * \brief Set [01;31m[KMDC[m[K clock divider.

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   206[m[K	    // Configure [01;31m[KMDC[m[K clock rate to HCLK / (127 + 1) = 1.25 MHz if system is running at 160 MH

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   392[m[K	#define   PHY_HP_MDIX                 (0x0020)     /* Set PHY in HP auto [01;31m[KMDI[m[K-X mode */
[01;32m[K   393[m[K	#define   PHY_FORCE_MDIX              (0x0010)     /* Force [01;31m[KMDI[m[K-X */
[01;32m[K   394[m[K	#define   PHY_AUTO_MDIX_DISABLE       (0x0008)     /* Disable auto [01;31m[KMDI[m[K-X */
[01;32m[K   446[m[K	#define   PORT_AUTO_MDIX_DISABLE      (0x0400)     /* Disable auto [01;31m[KMDI[m[K-X */
[01;32m[K   447[m[K	#define   PORT_FORCE_MDIX             (0x0200)     /* Force [01;31m[KMDI[m[K-X */
[01;32m[K   458[m[K	#define   PORT_HP_MDIX                (0x8000)     /* Set PHY in HP auto [01;31m[KMDI[m[K-X mode */
[01;32m[K   464[m[K	#define   PORT_MDIX_STATUS            (0x0080)     /* Is [01;31m[KMDI[m[K */

[1;34m./portable/NetworkInterface/include/phyHandling.h[39m

[01;32m[K    37[m[K		uint8_t ucMDI_X;		/* [01;31m[KMDI[m[K-X : Medium Dependent Interface - Crossover */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   780[m[K	 * \brief Get [01;31m[KMDIO[m[K IN pin status.
[01;32m[K   784[m[K	 * \return [01;31m[KMDIO[m[K IN pin status.

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   229[m[K	#define GMAC_NSR_MDIO (0x1u << 1) /**< \brief (GMAC_NSR) [01;31m[KMDIO[m[K Input Status */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   783[m[K	 * \brief Get [01;31m[KMDIO[m[K IN pin status.
[01;32m[K   787[m[K	 * \return [01;31m[KMDIO[m[K IN pin status.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   779[m[K	 * \brief Get [01;31m[KMDIO[m[K IN pin status.
[01;32m[K   783[m[K	 * \return [01;31m[KMDIO[m[K IN pin status.

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K    81[m[K	#define PHYCR_MDIX_EN				0x8000U	/* Enable Auto [01;31m[KMDIX[m[K. */
[01;32m[K    82[m[K	#define PHYCR_MDIX_FORCE			0x4000U	/* Force [01;31m[KMDIX[m[K crossed. */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K    96[m[K	 * advertised, properties like [01;31m[KMDIX[m[K and duplex.

[1;34m./portable/NetworkInterface/include/phyHandling.h[39m

[01;32m[K    58[m[K	/* Some defines used internally here to indicate preferences about speed, [01;31m[KMDIX[m[K

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   455[m[K	  uint32_t             [01;31m[KMediaInterface[m[K    ;               /*!< Selects the media-independent interface or the reduced media-independent interface.

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   660[m[K				/* Or [01;31m[KMemcopy[m[K... */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   696[m[K				/* Or [01;31m[Kmemcopy[m[K... */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   813[m[K		 * pointers with [01;31m[Kmemcpy[m[K() to put the information in to correct place. */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   640[m[K	packet to be filled in using a simple [01;31m[Kmemcpy[m[K() instead of individual writes. */
[01;32m[K   666[m[K		/* [01;31m[Kmemcpy[m[K the const part of the header information into the correct

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K    51[m[K			This assumption is required for a [01;31m[Kmemcpy[m[K function that copies uxOptionsLength

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1179[m[K	 *       [01;31m[Kmemcpy[m[K(gmac_option.uc_mac_addr, gs_uc_mac_address, sizeof(gs_uc_mac_address));
[01;32m[K  1256[m[K	 *         [01;31m[Kmemcpy[m[K(gmac_option.uc_mac_addr, gs_uc_mac_address, sizeof(gs_uc_mac_address));

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1182[m[K	 *       [01;31m[Kmemcpy[m[K(gmac_option.uc_mac_addr, gs_uc_mac_address, sizeof(gs_uc_mac_address));
[01;32m[K  1259[m[K	 *         [01;31m[Kmemcpy[m[K(gmac_option.uc_mac_addr, gs_uc_mac_address, sizeof(gs_uc_mac_address));

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   560[m[K		/* The frame will be copied in 1 or 2 [01;31m[Kmemcpy[m[K's */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   590[m[K			/* The frame will be copied in 1 or 2 [01;31m[Kmemcpy[m[K's */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   229[m[K	 * The method using [01;31m[Kmemcpy[m[K is slower and probaly uses more RAM memory.

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K    55[m[K	packet to be filled in using a simple [01;31m[Kmemcpy[m[K() instead of individual writes. */
[01;32m[K   130[m[K				/* [01;31m[Kmemcpy[m[K() the constant parts of the header information into
[01;32m[K   145[m[K				/* Save options now, as they will be overwritten by [01;31m[Kmemcpy[m[K */
[01;32m[K   152[m[K				 * Offset the [01;31m[Kmemcpy[m[K by the size of a MAC address to start at the packet's

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K    32[m[K	 *	In order to add or read data from the buffer, [01;31m[Kmemcpy[m[K() will be called at most 2 times

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   111[m[K	#define   TX_MEM_TEST_FINISHED        (0x1000)    /* TX [01;31m[Kmemeory[m[K BIST test finish */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   517[m[K				Currently the [01;31m[Kmemset[m[K above will have set it to NULL. */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   548[m[K	            [01;31m[Kmemset[m[K( ( pwrite_buffer + length ), 0, ( ETHER_BUFSIZE_MIN - length ) ); /*padding*/

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1173[m[K					/* Just [01;31m[Kmemset[m[K the data to a fixed value. */

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   206[m[K	    // Configure MDC clock rate to HCLK / (127 + 1) = 1.25 MHz if system is running at 160 [01;31m[KMH[m[K

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    87[m[K	#define   BUS_CLOCK_166               (0x0004)    /* 166 [01;31m[KMHz[m[K on-chip bus clock (defaul is 125MHz) */
[01;32m[K    94[m[K	#define   BUS_SPEED_166_MHZ           (0x0004)    /* Set bus speed to 166 [01;31m[KMHz[m[K */
[01;32m[K    95[m[K	#define   BUS_SPEED_125_MHZ           (0x0000)    /* Set bus speed to 125 [01;31m[KMHz[m[K */
[01;32m[K    96[m[K	#define   BUS_SPEED_83_MHZ            (0x0005)    /* Set bus speed to 83 [01;31m[KMHz[m[K (166/2)*/
[01;32m[K    97[m[K	#define   BUS_SPEED_62_5_MHZ          (0x0001)    /* Set bus speed to 62.5 [01;31m[KMHz[m[K (125/2) */
[01;32m[K    98[m[K	#define   BUS_SPEED_53_3_MHZ          (0x0006)    /* Set bus speed to 53.3 [01;31m[KMHz[m[K (166/3) */
[01;32m[K    99[m[K	#define   BUS_SPEED_41_7_MHZ          (0x0002)    /* Set bus speed to 41.67 [01;31m[KMHz[m[K (125/3) */
[01;32m[K   100[m[K	#define   BUS_SPEED_33_2_MHZ          (0x0007)    /* Set bus speed to 33.2 [01;31m[KMHz[m[K (166/5) */
[01;32m[K   101[m[K	#define   BUS_SPEED_25_MHZ            (0x0003)    /* Set bus speed to 25 [01;31m[KMHz[m[K (125/5) */

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   209[m[K	#define   GMAC_NCFGR_CLK_MCK_8 (0x0u << 18) /**< \brief (GMAC_NCFGR) MCK divided by 8 (MCK up to 20 [01;31m[KMHz[m[K) */
[01;32m[K   210[m[K	#define   GMAC_NCFGR_CLK_MCK_16 (0x1u << 18) /**< \brief (GMAC_NCFGR) MCK divided by 16 (MCK up to 40 [01;31m[KMHz[m[K) */
[01;32m[K   211[m[K	#define   GMAC_NCFGR_CLK_MCK_32 (0x2u << 18) /**< \brief (GMAC_NCFGR) MCK divided by 32 (MCK up to 80 [01;31m[KMHz[m[K) */
[01;32m[K   213[m[K	#define   GMAC_NCFGR_CLK_MCK_64 (0x4u << 18) /**< \brief (GMAC_NCFGR) MCK divided by 64 (MCK up to 160 [01;31m[KMHz[m[K) */
[01;32m[K   214[m[K	#define   GMAC_NCFGR_CLK_MCK_96 (0x5u << 18) /**< \brief (GMAC_NCFGR) MCK divided by 96 (MCK up to 240 [01;31m[KMHz[m[K) */
[01;32m[K   215[m[K	#define   GMAC_NCFGR_CLK_MCK_128 (0x6u << 18) /**< \brief (GMAC_NCFGR) MCK divided by 128 (MCK up to 320 [01;31m[KMHz[m[K) */
[01;32m[K   216[m[K	#define   GMAC_NCFGR_CLK_MCK_224 (0x7u << 18) /**< \brief (GMAC_NCFGR) MCK divided by 224 (MCK up to 540 [01;31m[KMHz[m[K) */

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K    60[m[K	// Addend register = 2^32 * tick_freq / (84MHz), where tick_freq = (2^31 / 215) [01;31m[KMHz[m[K
[01;32m[K   206[m[K	    // Configure MDC clock rate to HCLK / (127 + 1) = 1.25 [01;31m[KMHz[m[K if system is running at 160 MH

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   249[m[K			/* CSR Clock Range between 20-35 [01;31m[KMHz[m[K */
[01;32m[K   254[m[K		/* CSR Clock Range between 35-60 [01;31m[KMHz[m[K */
[01;32m[K   259[m[K			/* CSR Clock Range between 60-100 [01;31m[KMHz[m[K */
[01;32m[K   264[m[K			/* CSR Clock Range between 100-150 [01;31m[KMHz[m[K */
[01;32m[K   269[m[K			/* CSR Clock Range between 150-183 [01;31m[KMHz[m[K */
[01;32m[K   720[m[K		 * these clocks are running at 2.5 [01;31m[KMHz[m[K, so this delay would be at most 1.6 microseconds.
[01;32m[K   721[m[K		 * 180 [01;31m[KMhz[m[K = 288 loops
[01;32m[K   722[m[K		 * 168 [01;31m[KMhz[m[K = 269 loops
[01;32m[K   723[m[K		 * 100 [01;31m[KMhz[m[K = 160 loops
[01;32m[K   724[m[K		 *  84 [01;31m[KMhz[m[K = 134 loops
[01;32m[K   727[m[K		#define CPU_MAX_FREQ	SystemCoreClock	/* 84, 100, 168 or 180 [01;31m[KMHz[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   344[m[K	#define   TABLE_MIB                   (0x0C00)     /* Select [01;31m[KMIB[m[K counter table */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   244[m[K		/** Set to 1 when owner is software (ready to read), 0 for [01;31m[KMicrel[m[K. */
[01;32m[K   246[m[K		/** Set to 1 when owner is [01;31m[KMicrel[m[K, 0 for software. */
[01;32m[K   401[m[K			/* The descriptor is now owned by [01;31m[KMicrel[m[K. */
[01;32m[K   429[m[K	/* This [01;31m[KMicrel[m[K has numbered it's PHY registers in a different way.
[01;32m[K   645[m[K				/* Pass it to [01;31m[KMicrel[m[K for reception. */
[01;32m[K   654[m[K	 * \brief Update [01;31m[KMicrel[m[K state machine and perform required actions.
[01;32m[K   757[m[K					/* Don't break [01;31m[KMicrel[m[K state machine, wait for a free descriptor first! */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   525[m[K		/* Reset the [01;31m[KMicrel[m[K in a proper state. */
[01;32m[K   555[m[K		/* Reset the [01;31m[KMicrel[m[K in a proper state. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    27[m[K	 *    Atmel [01;31m[Kmicrocontroller[m[K product.

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K    27[m[K	 *    Atmel [01;31m[Kmicrocontroller[m[K product.

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.h[39m

[01;32m[K    27[m[K	 *    Atmel [01;31m[Kmicrocontroller[m[K product.

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K    26[m[K	 *    Atmel [01;31m[Kmicrocontroller[m[K product.

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K    26[m[K	 *    Atmel [01;31m[Kmicrocontroller[m[K product.

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K    24[m[K	 *    Atmel [01;31m[Kmicrocontroller[m[K product.

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K    26[m[K	 *    Atmel [01;31m[Kmicrocontroller[m[K product.

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K    26[m[K	 *    Atmel [01;31m[Kmicrocontroller[m[K product.

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K    26[m[K	 *    Atmel [01;31m[Kmicrocontroller[m[K product.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K    26[m[K	 *    Atmel [01;31m[Kmicrocontroller[m[K product.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K    26[m[K	 *    Atmel [01;31m[Kmicrocontroller[m[K product.

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2393[m[K	 * This logic is optimized for [01;31m[Kmicrocontrollers[m[K which have limited resources, so the logic looks odd.

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   424[m[K		/* Include support for LLMNR: Link-local Multicast Name Resolution (non-[01;31m[KMicrosoft[m[K) */

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   462[m[K		/* Include support for LLMNR: Link-local Multicast Name Resolution (non-[01;31m[KMicrosoft[m[K) */

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K     4[m[K	 * a Media-Independent Interface ([01;31m[KMII[m[K), or a Reduced Media-Independent Interface (RMII).

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K    81[m[K		#define	PHY_REG_11_MICR       0x11	// 17	RW		[01;31m[KMII[m[K Interrupt Control Register
[01;32m[K    82[m[K		#define	PHY_REG_12_MISR       0x12	// 18	RO		[01;31m[KMII[m[K Interrupt Status Register
[01;32m[K   173[m[K	#define GMII_MF_PREAMB_SUPPR   (1 << 6)  // [01;31m[KMII[m[K Frame Preamble Suppression
[01;32m[K   219[m[K	 * The COL pin is used to select [01;31m[KMII[m[K mode on reset (pulled up for Reduced [01;31m[KMII[m[K).

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   143[m[K	 * \brief Media Independent Interface ([01;31m[KMII[m[K) type.
[01;32m[K   146[m[K		GMAC_PHY_MII = 0,         /** [01;31m[KMII[m[K mode */
[01;32m[K   147[m[K		GMAC_PHY_RMII = 1,    /** Reduced [01;31m[KMII[m[K mode */
[01;32m[K  1111[m[K	 * - GMAC uses [01;31m[KMII[m[K mode

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K   145[m[K	 * The COL pin is used to select [01;31m[KMII[m[K mode on reset (pulled up for Reduced [01;31m[KMII[m[K).
[01;32m[K   242[m[K			/* Set [01;31m[KMII[m[K for 100BaseTX and Half Duplex */
[01;32m[K   247[m[K			/* Set [01;31m[KMII[m[K for 10BaseT and Full Duplex */
[01;32m[K   252[m[K			/* Set [01;31m[KMII[m[K for 10BaseT and Half Duplex */
[01;32m[K   307[m[K		 * [01;31m[KMII[m[K advertising for Next page.
[01;32m[K   379[m[K			/* Set [01;31m[KMII[m[K for 100BaseTX and Full Duplex */
[01;32m[K   383[m[K			/* Set [01;31m[KMII[m[K for 10BaseT and Full Duplex */
[01;32m[K   387[m[K			/* Set [01;31m[KMII[m[K for 100BaseTX and half Duplex */
[01;32m[K   391[m[K			/* Set [01;31m[KMII[m[K for 10BaseT and half Duplex */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   144[m[K	 * \brief Media Independent Interface ([01;31m[KMII[m[K) type.
[01;32m[K   147[m[K		GMAC_PHY_MII = 0,         /** [01;31m[KMII[m[K mode */
[01;32m[K   148[m[K		GMAC_PHY_RMII = 1,    /** Reduced [01;31m[KMII[m[K mode */
[01;32m[K  1114[m[K	 * - GMAC uses [01;31m[KMII[m[K mode

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   150[m[K	 * \brief Media Independent Interface ([01;31m[KMII[m[K) type.
[01;32m[K   153[m[K		GMAC_PHY_MII = 0,         /** [01;31m[KMII[m[K mode */
[01;32m[K   154[m[K		GMAC_PHY_RMII = 1,    /** Reduced [01;31m[KMII[m[K mode */

[1;34m./portable/NetworkInterface/M487/m480_eth.h[39m

[01;32m[K    30[m[K	/* Generic [01;31m[KMII[m[K registers. */
[01;32m[K    56[m[K	#define BMCR_ISOLATE            0x0400  /* Disconnect DP83840 from [01;31m[KMII[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   133[m[K	/* Two choices must be made: RMII versus [01;31m[KMII[m[K,

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   221[m[K		/* Select [01;31m[KMII[m[K or RMII Mode*/
[01;32m[K   485[m[K			/* Prepare the [01;31m[KMII[m[K address register value */
[01;32m[K   489[m[K			tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the [01;31m[KMII[m[K Busy bit         */
[01;32m[K   491[m[K			/* Write the result value into the [01;31m[KMII[m[K Address register */
[01;32m[K   567[m[K			/* Prepare the [01;31m[KMII[m[K register address value */
[01;32m[K   571[m[K			tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the [01;31m[KMII[m[K Busy bit */
[01;32m[K   573[m[K			/* Give the value to the [01;31m[KMII[m[K data register */
[01;32m[K   576[m[K			/* Write the result value into the [01;31m[KMII[m[K Address register */
[01;32m[K   649[m[K		/* Enable transmit state machine of the MAC for transmission on the [01;31m[KMII[m[K */
[01;32m[K   652[m[K		/* Enable receive state machine of the MAC for reception from the [01;31m[KMII[m[K */
[01;32m[K   694[m[K	  /* Disable receive state machine of the MAC for reception from the [01;31m[KMII[m[K */
[01;32m[K   700[m[K	  /* Disable transmit state machine of the MAC for transmission on the [01;31m[KMII[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   488[m[K	  uint32_t             LoopbackMode;              /*!< Selects or not the internal MAC [01;31m[KMII[m[K Loopback mode.
[01;32m[K   890[m[K	#define ETH_DMARXDESC_RE          ((uint32_t)0x00000008U)  /*!< Receive error: error reported by [01;31m[KMII[m[K interface  */
[01;32m[K  1295[m[K		#define ETH_MAC_MII_TRANSMIT_ACTIVE      ((uint32_t)0x00010000)  /* MAC [01;31m[KMII[m[K transmit engine active */
[01;32m[K  1309[m[K		#define ETH_MAC_MII_RECEIVE_PROTOCOL_ACTIVE   ((uint32_t)0x00000001)  /* MAC [01;31m[KMII[m[K receive protocol engine active */

[1;34m./portable/NetworkInterface/include/phyHandling.h[39m

[01;32m[K     4[m[K	 * a Media-Independent Interface ([01;31m[KMII[m[K), or a Reduced Media-Independent Interface (RMII).

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   273[m[K		/* Write to ETHERNET MAC [01;31m[KMIIAR[m[K: Configure the ETHERNET CSR Clock Range */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   376[m[K	#define   WAKEUP_TIME                 (0xFF00)    /* [01;31m[KMin[m[K time (sec) wake-uo after detected energy */
[01;32m[K   377[m[K	#define   GOSLEEP_TIME                (0x00FF)    /* [01;31m[KMin[m[K time (sec) before goto sleep when in energy mode */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K    63[m[K	/*lint -e750  local macro not referenced [[01;31m[KMISRA[m[K 2012 Rule 2.5, advisory] */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K   316[m[K			if( xReturn == pdPASS )	/*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [[01;31m[KMISRA[m[K 2012 Rule 14.3, required. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2124[m[K		 * Note: [01;31m[KMISRA[m[K prohibits use of 'goto', thus replaced with breaks. */
[01;32m[K  2414[m[K	/* [01;31m[KMISRA[m[K/PC-lint doesn't like the use of unions. Here, they are a great

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   318[m[K	extern NetworkAddressingParameters_t xDefaultAddressing;	/*lint !e9003 could define variable 'xDefaultAddressing' at block scope [[01;31m[KMISRA[m[K 2012 Rule 8.9, advisory]. */
[01;32m[K   338[m[K	 * In order to suppress [01;31m[KMISRA[m[K warnings, do the cast within a macro,
[01;32m[K   341[m[K	 * 3 required by [01;31m[KMISRA[m[K:
[01;32m[K   342[m[K	 * -emacro(740,ipPOINTER_CAST)    // 750:  Unusual pointer cast (incompatible indirect types) [[01;31m[KMISRA[m[K 2012 Rule 1.3, required])
[01;32m[K   342[m[K	 * -emacro(740,ipPOINTER_CAST)    // 750:  Unusual pointer cast (incompatible indirect types) [[01;31m[KMISRA[m[K 2012 Rule 1.3, required])
[01;32m[K   343[m[K	 * -emacro(9005,ipPOINTER_CAST)   // 9005: attempt to cast away const/volatile from a pointer or reference [[01;31m[KMISRA[m[K 2012 Rule 11.8, required]
[01;32m[K   343[m[K	 * -emacro(9005,ipPOINTER_CAST)   // 9005: attempt to cast away const/volatile from a pointer or reference [[01;31m[KMISRA[m[K 2012 Rule 11.8, required]
[01;32m[K   344[m[K	 * -emacro(9087,ipPOINTER_CAST)   // 9087: cast performed between a pointer to object type and a pointer to a different object type [[01;31m[KMISRA[m[K 2012 Rule 11.3, required]
[01;32m[K   344[m[K	 * -emacro(9087,ipPOINTER_CAST)   // 9087: cast performed between a pointer to object type and a pointer to a different object type [[01;31m[KMISRA[m[K 2012 Rule 11.3, required]
[01;32m[K   346[m[K	 * 2 advisory by [01;31m[KMISRA[m[K:
[01;32m[K   347[m[K	 * -emacro(9079,ipPOINTER_CAST)   // 9079: conversion from pointer to void to pointer to other type [[01;31m[KMISRA[m[K 2012 Rule 11.5, advisory])
[01;32m[K   347[m[K	 * -emacro(9079,ipPOINTER_CAST)   // 9079: conversion from pointer to void to pointer to other type [[01;31m[KMISRA[m[K 2012 Rule 11.5, advisory])
[01;32m[K   350[m[K	 * The [01;31m[KMISRA[m[K warnings can safely be suppressed because all casts are planned with care.
[01;32m[K   359[m[K	 * 1 required by [01;31m[KMISRA[m[K:
[01;32m[K   360[m[K	 * -emacro(9033,ipNUMERIC_CAST) // 9033: Impermissible cast of composite expression (different essential type categories) [[01;31m[KMISRA[m[K 2012 Rule 10.8, required])
[01;32m[K   360[m[K	 * -emacro(9033,ipNUMERIC_CAST) // 9033: Impermissible cast of composite expression (different essential type categories) [[01;31m[KMISRA[m[K 2012 Rule 10.8, required])
[01;32m[K   362[m[K	 * 1 advisory by [01;31m[KMISRA[m[K:
[01;32m[K   363[m[K	 * -emacro(9030,ipNUMERIC_CAST) // 9030: Impermissible cast; cannot cast from 'essentially Boolean' to 'essentially signed' [[01;31m[KMISRA[m[K 2012 Rule 10.5, advisory])
[01;32m[K   363[m[K	 * -emacro(9030,ipNUMERIC_CAST) // 9030: Impermissible cast; cannot cast from 'essentially Boolean' to 'essentially signed' [[01;31m[KMISRA[m[K 2012 Rule 10.5, advisory])
[01;32m[K   726[m[K	 * Going by [01;31m[KMISRA[m[K rules, these utility functions should not be defined

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   153[m[K	/* [01;31m[KMISRA[m[K check: some modules refer to this typedef even though
[01;32m[K   276[m[K	/* [01;31m[KMISRA[m[K defining 'FreeRTOS_SendPingRequest' should be dependent on 'ipconfigSUPPORT_OUTGOING_PINGS'.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K  1522[m[K	/** @defgroup ETH_MMC_Tx_Interrupts ETH [01;31m[KMMC[m[K Tx Interrupts
[01;32m[K  1532[m[K	/** @defgroup ETH_MMC_Rx_Interrupts ETH [01;31m[KMMC[m[K Rx Interrupts
[01;32m[K  1546[m[K	#define ETH_MAC_FLAG_MMCT    ((uint32_t)0x00000040U)  /*!< [01;31m[KMMC[m[K transmit flag  */
[01;32m[K  1547[m[K	#define ETH_MAC_FLAG_MMCR    ((uint32_t)0x00000020U)  /*!< [01;31m[KMMC[m[K receive flag */
[01;32m[K  1548[m[K	#define ETH_MAC_FLAG_MMC     ((uint32_t)0x00000010U)  /*!< [01;31m[KMMC[m[K flag (on MAC) */
[01;32m[K  1559[m[K	#define ETH_DMA_FLAG_MMC               ((uint32_t)0x08000000U)  /*!< [01;31m[KMMC[m[K interrupt (on DMA) */
[01;32m[K  1586[m[K	#define ETH_MAC_IT_MMCT      ((uint32_t)0x00000040U)  /*!< [01;31m[KMMC[m[K transmit interrupt */
[01;32m[K  1587[m[K	#define ETH_MAC_IT_MMCR      ((uint32_t)0x00000020U)  /*!< [01;31m[KMMC[m[K receive interrupt */
[01;32m[K  1588[m[K	#define ETH_MAC_IT_MMC       ((uint32_t)0x00000010U)  /*!< [01;31m[KMMC[m[K interrupt (on MAC) */
[01;32m[K  1599[m[K	#define ETH_DMA_IT_MMC       ((uint32_t)0x08000000U)  /*!< [01;31m[KMMC[m[K interrupt (on DMA) */
[01;32m[K  1846[m[K	  *     @arg ETH_MAC_FLAG_MMCT : [01;31m[KMMC[m[K transmit flag
[01;32m[K  1847[m[K	  *     @arg ETH_MAC_FLAG_MMCR : [01;31m[KMMC[m[K receive flag
[01;32m[K  1848[m[K	  *     @arg ETH_MAC_FLAG_MMC  : [01;31m[KMMC[m[K flag
[01;32m[K  1986[m[K	  * @brief  Preset and Initialize the [01;31m[KMMC[m[K counters to almost-full value: 0xFFFF_FFF0 (full - 16)
[01;32m[K  1993[m[K	  * @brief  Preset and Initialize the [01;31m[KMMC[m[K counters to almost-half value: 0x7FFF_FFF0 (half - 16)
[01;32m[K  2001[m[K	  * @brief  Enables the [01;31m[KMMC[m[K Counter Freeze.
[01;32m[K  2008[m[K	  * @brief  Disables the [01;31m[KMMC[m[K Counter Freeze.
[01;32m[K  2015[m[K	  * @brief  Enables the [01;31m[KMMC[m[K Reset On Read.
[01;32m[K  2022[m[K	  * @brief  Disables the [01;31m[KMMC[m[K Reset On Read.
[01;32m[K  2029[m[K	  * @brief  Enables the [01;31m[KMMC[m[K Counter Stop Rollover.
[01;32m[K  2036[m[K	  * @brief  Disables the [01;31m[KMMC[m[K Counter Stop Rollover.
[01;32m[K  2043[m[K	  * @brief  Resets the [01;31m[KMMC[m[K Counters.
[01;32m[K  2050[m[K	  * @brief  Enables the specified Ethernet [01;31m[KMMC[m[K Rx interrupts.
[01;32m[K  2052[m[K	  * @param  __INTERRUPT__: specifies the Ethernet [01;31m[KMMC[m[K interrupt sources to be enabled or disabled.
[01;32m[K  2061[m[K	  * @brief  Disables the specified Ethernet [01;31m[KMMC[m[K Rx interrupts.
[01;32m[K  2063[m[K	  * @param  __INTERRUPT__: specifies the Ethernet [01;31m[KMMC[m[K interrupt sources to be enabled or disabled.
[01;32m[K  2072[m[K	  * @brief  Enables the specified Ethernet [01;31m[KMMC[m[K Tx interrupts.
[01;32m[K  2074[m[K	  * @param  __INTERRUPT__: specifies the Ethernet [01;31m[KMMC[m[K interrupt sources to be enabled or disabled.
[01;32m[K  2084[m[K	  * @brief  Disables the specified Ethernet [01;31m[KMMC[m[K Tx interrupts.
[01;32m[K  2086[m[K	  * @param  __INTERRUPT__: specifies the Ethernet [01;31m[KMMC[m[K interrupt sources to be enabled or disabled.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1321[m[K		/* Register ETH_MACA0HR: Bit 31 [01;31m[KMO[m[K: Always 1. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K   297[m[K	/* The socket semaphore is used to unblock the [01;31m[KMQTT[m[K task. */

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K   306[m[K	/* The socket semaphore is used to unblock the [01;31m[KMQTT[m[K task. */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1277[m[K						/* A segment must be sent after this amount of [01;31m[Kmsecs[m[K */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   186[m[K	 *     #define FreeRTOS_debug_printf( [01;31m[KMSG[m[K )			my_printf [01;31m[KMSG[m[K
[01;32m[K   208[m[K	 *     #define FreeRTOS_printf( [01;31m[KMSG[m[K )			my_printf [01;31m[KMSG[m[K

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   189[m[K	 *     #define FreeRTOS_debug_printf( [01;31m[KMSG[m[K )			my_printf [01;31m[KMSG[m[K
[01;32m[K   211[m[K	 *     #define FreeRTOS_printf( [01;31m[KMSG[m[K )			my_printf [01;31m[KMSG[m[K

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2975[m[K								a [01;31m[KMSL[m[K (maximum segment lifetime).]  These states are

[1;34m./include/FreeRTOS_TCP_IP.h[39m

[01;32m[K    59[m[K							 stay in TIME-WAIT for a maximum of four minutes known as a [01;31m[KMSL[m[K (maximum segment lifetime).] */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   314[m[K	  * @brief  Initializes the ETH [01;31m[KMSP[m[K.
[01;32m[K   328[m[K	  * @brief  DeInitializes ETH [01;31m[KMSP[m[K.

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K    84[m[K		 * size of the transmission window to at most 2 times [01;31m[KMSS[m[K.
[01;32m[K  1068[m[K						will be filled-up to a maximum of [01;31m[KMSS[m[K (maximum segment size). */
[01;32m[K  1116[m[K					([01;31m[KMSS[m[K). */
[01;32m[K  1228[m[K				more new segment of size [01;31m[KMSS[m[K.  xSize.ulTxWindowLength is the self-imposed
[01;32m[K  1302[m[K						driver will only sent completely filled packets (of [01;31m[KMSS[m[K
[01;32m[K  1386[m[K						has a full size of [01;31m[KMSS[m[K. */
[01;32m[K  1459[m[K				size of the transmission window to at most 2 times [01;31m[KMSS[m[K. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K    91[m[K	#define tcpTCP_OPT_MSS_LEN			4U   /* Length of TCP [01;31m[KMSS[m[K option. */
[01;32m[K   127[m[K	 * The [01;31m[KMSS[m[K (Maximum Segment Size) will be taken as large as possible. However, packets with
[01;32m[K   128[m[K	 * an [01;31m[KMSS[m[K of 1460 bytes won't be transported through the internet.  The [01;31m[KMSS[m[K will be reduced
[01;32m[K   229[m[K	 * value of [01;31m[KMSS[m[K and whether SACK allowed.  Will be transmitted in the state
[01;32m[K   327[m[K	 * Set the initial value for [01;31m[KMSS[m[K (Maximum Segment Size) to be used.
[01;32m[K   624[m[K				the proper options: The size of [01;31m[KMSS[m[K and whether SACK's are
[01;32m[K   782[m[K				/* If possible, advertise an RX window size of at least 1 [01;31m[KMSS[m[K, otherwise
[01;32m[K   955[m[K	 * Size ([01;31m[KMSS[m[K) in use.
[01;32m[K  1269[m[K				/* An [01;31m[KMSS[m[K option with the correct option length.  FreeRTOS_htons()
[01;32m[K  1276[m[K					/* Perform a basic check on the the new [01;31m[KMSS[m[K. */
[01;32m[K  1295[m[K						/* our [01;31m[KMSS[m[K was bigger than the [01;31m[KMSS[m[K of the other party: adapt it. */
[01;32m[K  1299[m[K							/* The peer advertises a smaller [01;31m[KMSS[m[K than this socket was
[01;32m[K  1413[m[K			/* 'xTCP.uxRxWinSize' is the size of the reception window in units of [01;31m[KMSS[m[K. */
[01;32m[K  1436[m[K	 * communicate what [01;31m[KMSS[m[K (Maximum Segment Size) they intend to use.   [01;31m[KMSS[m[K is the
[01;32m[K  1811[m[K			Why check for [01;31m[KMSS[m[K > 1 ?
[01;32m[K  2357[m[K			/* TCP options must be sent because the [01;31m[KMSS[m[K has changed. */
[01;32m[K  2722[m[K					( lRxSpace < ipNUMERIC_CAST( int32_t, 2U * pxSocket->u.xTCP.usCurMSS ) ) )	/* There are less than 2 x [01;31m[KMSS[m[K space in the Rx buffer. */
[01;32m[K  2829[m[K		1. in the SYN phase, we shall communicate the [01;31m[KMSS[m[K
[01;32m[K  3040[m[K			the internet.  Limit the [01;31m[KMSS[m[K to 1400 bytes or less. */
[01;32m[K  3236[m[K				/* _HT_ : if we're in the SYN phase, and peer does not send a [01;31m[KMSS[m[K option,
[01;32m[K  3237[m[K				then we MUST assume an [01;31m[KMSS[m[K size of 536 bytes for backward compatibility. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   357[m[K							/* Round up buffer sizes to nearest multiple of [01;31m[KMSS[m[K */
[01;32m[K  1372[m[K				/* Round up to nearest [01;31m[KMSS[m[K size */
[01;32m[K  1576[m[K				case FREERTOS_SO_SNDBUF:	/* Set the size of the send buffer, in units of [01;31m[KMSS[m[K (TCP only) */
[01;32m[K  1577[m[K				case FREERTOS_SO_RCVBUF:	/* Set the size of the receive buffer, in units of [01;31m[KMSS[m[K (TCP only) */
[01;32m[K  1674[m[K				case FREERTOS_SO_SET_FULL_SIZE:		/* Refuse to send packets smaller than [01;31m[KMSS[m[K  */
[01;32m[K  3576[m[K		/* Returns the actual size of [01;31m[KMSS[m[K being used. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   519[m[K					bMssChange : 1,		/* This socket has seen a change in [01;31m[KMSS[m[K */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   121[m[K	#define FREERTOS_SO_SET_FULL_SIZE		( 14 )		/* Refuse to send packets smaller than [01;31m[KMSS[m[K  */
[01;32m[K   152[m[K		int32_t lTxWinSize;	/* Unit: [01;31m[KMSS[m[K */
[01;32m[K   156[m[K		int32_t lRxWinSize;	/* Unit: [01;31m[KMSS[m[K */
[01;32m[K   259[m[K		/* Returns the actual size of [01;31m[KMSS[m[K being used. */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    99[m[K					bSendFullSize : 1,	/* May only send packets with a size equal to [01;31m[KMSS[m[K (for optimisation) */
[01;32m[K   134[m[K		uint16_t usMSS;						/* Current accepted [01;31m[KMSS[m[K */
[01;32m[K   135[m[K		uint16_t usMSSInit;					/* [01;31m[KMSS[m[K as configured by the socket owner */

[1;34m./test/unit-test/ConfigFiles/portmacro.h[39m

[01;32m[K   132[m[K		__pragma( warning( disable:4211 ) ) /* Nonstandard extension used, as extern is only nonstandard to [01;31m[KMSVC[m[K. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   812[m[K	#define ETH_DMATXDESC_FF                      ((uint32_t)0x00002000U)  /*!< Frame Flushed: DMA/[01;31m[KMTL[m[K flushed the frame due to SW flush */
[01;32m[K  1356[m[K	#define ETH_TRANSMITTHRESHOLDCONTROL_64BYTES     ((uint32_t)0x00000000U)  /*!< threshold level of the [01;31m[KMTL[m[K Transmit FIFO is 64 Bytes */
[01;32m[K  1357[m[K	#define ETH_TRANSMITTHRESHOLDCONTROL_128BYTES    ((uint32_t)0x00004000U)  /*!< threshold level of the [01;31m[KMTL[m[K Transmit FIFO is 128 Bytes */
[01;32m[K  1358[m[K	#define ETH_TRANSMITTHRESHOLDCONTROL_192BYTES    ((uint32_t)0x00008000U)  /*!< threshold level of the [01;31m[KMTL[m[K Transmit FIFO is 192 Bytes */
[01;32m[K  1359[m[K	#define ETH_TRANSMITTHRESHOLDCONTROL_256BYTES    ((uint32_t)0x0000C000U)  /*!< threshold level of the [01;31m[KMTL[m[K Transmit FIFO is 256 Bytes */
[01;32m[K  1360[m[K	#define ETH_TRANSMITTHRESHOLDCONTROL_40BYTES     ((uint32_t)0x00010000U)  /*!< threshold level of the [01;31m[KMTL[m[K Transmit FIFO is 40 Bytes */
[01;32m[K  1361[m[K	#define ETH_TRANSMITTHRESHOLDCONTROL_32BYTES     ((uint32_t)0x00014000U)  /*!< threshold level of the [01;31m[KMTL[m[K Transmit FIFO is 32 Bytes */
[01;32m[K  1362[m[K	#define ETH_TRANSMITTHRESHOLDCONTROL_24BYTES     ((uint32_t)0x00018000U)  /*!< threshold level of the [01;31m[KMTL[m[K Transmit FIFO is 24 Bytes */
[01;32m[K  1363[m[K	#define ETH_TRANSMITTHRESHOLDCONTROL_16BYTES     ((uint32_t)0x0001C000U)  /*!< threshold level of the [01;31m[KMTL[m[K Transmit FIFO is 16 Bytes */
[01;32m[K  1389[m[K	#define ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES      ((uint32_t)0x00000000U)  /*!< threshold level of the [01;31m[KMTL[m[K Receive FIFO is 64 Bytes */
[01;32m[K  1390[m[K	#define ETH_RECEIVEDTHRESHOLDCONTROL_32BYTES      ((uint32_t)0x00000008U)  /*!< threshold level of the [01;31m[KMTL[m[K Receive FIFO is 32 Bytes */
[01;32m[K  1391[m[K	#define ETH_RECEIVEDTHRESHOLDCONTROL_96BYTES      ((uint32_t)0x00000010U)  /*!< threshold level of the [01;31m[KMTL[m[K Receive FIFO is 96 Bytes */
[01;32m[K  1392[m[K	#define ETH_RECEIVEDTHRESHOLDCONTROL_128BYTES     ((uint32_t)0x00000018U)  /*!< threshold level of the [01;31m[KMTL[m[K Receive FIFO is 128 Bytes */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1437[m[K	 * nett size of the payload, always smaller than [01;31m[KMTU[m[K.
[01;32m[K  1696[m[K			[01;31m[KMTU[m[K. */
[01;32m[K  2645[m[K			/* _HT_ patch: since the [01;31m[KMTU[m[K has be fixed at 1500 in stead of 1526, TCP

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K   228[m[K	/* The [01;31m[KMTU[m[K is the maximum number of bytes the payload of a network frame can
[01;32m[K   229[m[K	 * contain.  For normal Ethernet V2 frames the maximum [01;31m[KMTU[m[K is 1500.  Setting a

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K   235[m[K	/* The [01;31m[KMTU[m[K is the maximum number of bytes the payload of a network frame can
[01;32m[K   236[m[K	 * contain.  For normal Ethernet V2 frames the maximum [01;31m[KMTU[m[K is 1500.  Setting a

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K    65[m[K		pxDMA_tx_buffers: these are character arrays, each one is big enough to hold 1 [01;31m[KMTU[m[K.

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   980[m[K			/* Check if [01;31m[KMTU[m[K is big enough. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1161[m[K	  /* Set the PM, HMC and HPF bits according to ETH [01;31m[KMulticastFramesFilter[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   525[m[K	  uint32_t             [01;31m[KMulticastFramesFilter[m[K;     /*!< Selects the Multicast Frames filter mode: None/HashTableFilter/PerfectFilter/PerfectHashTableFilter.

[1;34m./test/cbmc/include/queue_init.h[39m

[01;32m[K   125[m[K	/* Create a mostly unconstrained [01;31m[KMutex[m[K */

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K   170[m[K			/* In case alternative locking is used, the [01;31m[Kmutexes[m[K can be initialised

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K  1105[m[K	 * \param [01;31m[Knanosec[m[K     Nanosecond Comparison

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K    75[m[K	/* [01;31m[KNBNS[m[K flags. */
[01;32m[K    92[m[K	/* [01;31m[KNBNS[m[K constants. */
[01;32m[K   100[m[K		/* If the queried [01;31m[KNBNS[m[K name matches with the device's name,
[01;32m[K   184[m[K	 * The [01;31m[KNBNS[m[K and the LLMNR protocol share this reply function.
[01;32m[K  1489[m[K				/* For [01;31m[KNBNS[m[K a name is 16 bytes long, written with capitals only.

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   390[m[K			/* LLMNR and [01;31m[KNBNS[m[K depend on DNS because those protocols share a lot of code. */

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   420[m[K			/* LLMNR and [01;31m[KNBNS[m[K depend on DNS because those protocols share a lot of code. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   810[m[K	#define ETH_DMATXDESC_ES                      ((uint32_t)0x00008000U)  /*!< Error summary: OR of the following bits: UE || ED || EC || LCO || [01;31m[KNC[m[K || LCA || FF || JT */

[1;34m./portable/NetworkInterface/M487/m480_eth.h[39m

[01;32m[K    41[m[K	#define MII_NWAYTEST        0x14        /* N-way auto-[01;31m[Kneg[m[K test reg     */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   323[m[K			uint16_t usNbFlags;     /* [01;31m[KNetBIOS[m[K flags 0x6000 : IP-address, big-endian */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K   397[m[K				/* a [01;31m[KNetBIOS[m[K request, check for the destination port */

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K    55[m[K	#define	ipNBNS_PORT		137	/* [01;31m[KNetBIOS[m[K Name Service. */
[01;32m[K    79[m[K		 * Inspect a [01;31m[KNetBIOS[m[K Names-Service message.  If the name matches with ours

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   656[m[K	 * \param [01;31m[Knetif[m[K the lwIP network interface structure for this ethernetif.
[01;32m[K  1047[m[K	 * \param [01;31m[Knetif[m[K the lwIP network interface structure for this ethernetif.
[01;32m[K  1077[m[K	 * \param [01;31m[Knetif[m[K the lwIP network interface structure for this ethernetif.

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_hw.h[39m

[01;32m[K    23[m[K	//#include "lwip/[01;31m[Knetif[m[K.h"
[01;32m[K    31[m[K	//void init_emacps(xemacpsif_s *xemacpsif, struct [01;31m[Knetif[m[K *[01;31m[Knetif[m[K);

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif.h[39m

[01;32m[K    41[m[K	//#include "[01;31m[Knetif[m[K/xpqueue.h"
[01;32m[K    46[m[K	//int 	xemacpsif_init(struct [01;31m[Knetif[m[K *[01;31m[Knetif[m[K);
[01;32m[K    47[m[K	//int 	xemacpsif_input(struct [01;31m[Knetif[m[K *[01;31m[Knetif[m[K);
[01;32m[K    77[m[K	/* structure within each [01;31m[Knetif[m[K, encapsulating all information required for

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   980[m[K	 * target IP address is not within the [01;31m[Knetmask[m[K, the hardware address of the

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   208[m[K		and [01;31m[Knetmask[m[K are still unknown. */
[01;32m[K   213[m[K			a different [01;31m[Knetmask[m[K will also be stored.  After when replying to a UDP
[01;32m[K   214[m[K			message from a different [01;31m[Knetmask[m[K, the IP address can be looped up and a
[01;32m[K   437[m[K					belonging to a different the [01;31m[Knetmask[m[K.  prvCacheLookup() returned a hit, so

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   165[m[K		/* Define the [01;31m[Knetmask[m[K used: 255.255.0.0 */

[1;34m./test/unit-test/stubs/FreeRTOS_ARP_stubs.c[39m

[01;32m[K     9[m[K	/* Structure that stores the [01;31m[Knetmask[m[K, gateway address and DNS server addresses. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K   130[m[K	 * address, [01;31m[Knetmask[m[K, DNS server address and gateway address from a DHCP server.  If

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K   218[m[K	/* Default [01;31m[Knetmask[m[K configuration.  Used in ipconfigUSE_DHCP is set to 0, or

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K   129[m[K	 * address, [01;31m[Knetmask[m[K, DNS server address and gateway address from a DHCP server.  If

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   256[m[K	/* Structure that stores the [01;31m[Knetmask[m[K, gateway address and DNS server addresses. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   311[m[K	/* Structure that stores the [01;31m[Knetmask[m[K, gateway address and DNS server addresses. */
[01;32m[K   314[m[K	/* Structure that stores the defaults for [01;31m[Knetmask[m[K, gateway address and DNS.

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   228[m[K	 * An example of this is the [01;31m[Knetstat[m[K command, which produces many lines of logging

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   240[m[K		eTCPNetStat,			/* 8: IP-task is asked to produce a [01;31m[Knetstat[m[K listing. */

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   231[m[K	 * An example of this is the [01;31m[Knetstat[m[K command, which produces many lines of logging

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1437[m[K	 * [01;31m[Knett[m[K size of the payload, always smaller than MTU.

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   772[m[K	 * Returns a pointer to the original [01;31m[KNetworkBuffer[m[K from a pointer to a UDP

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   186[m[K	    /* see [01;31m[KNetworkBufferAllocate[m[K */
[01;32m[K   261[m[K	    /* with [01;31m[KNetworkBufferAllocate[m[K */

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_OutputARPRequest/OutputARPRequest_harness.c[39m

[01;32m[K    48[m[K	 * to get a [01;31m[KNetworkBufferDescriptor[m[K. Then it calls vARPGenerateRequestPacket

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   483[m[K	 *			xNetworkInterfaceOutput()	// Sends data to the NIC ( declared in portable/[01;31m[KNetworkInterface[m[K/xxx )
[01;32m[K   483[m[K	 *			xNetworkInterfaceOutput()	// Sends data to the NIC ( declared in portable/[01;31m[KNetworkInterface[m[K/xxx )

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K    61[m[K	/* Defined in [01;31m[KNetworkInterface[m[K.c */
[01;32m[K    79[m[K		./portable/[01;31m[KNetworkInterface[m[K/Zynq/[01;31m[KNetworkInterface[m[K.c
[01;32m[K   176[m[K		"isr_events". The task in [01;31m[KNetworkInterface[m[K will wake-up and do the necessary work.

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   237[m[K	/* All PHY handling code has now been separated from the [01;31m[KNetworkInterface[m[K.c,

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   167[m[K	/* Two call-back functions that should be defined in [01;31m[KNetworkInterface[m[K.c */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K    21[m[K	* File Name    : [01;31m[KNetworkInterface[m[K.c
[01;32m[K   628[m[K	 * End of file "[01;31m[KNetworkInterface[m[K.c"

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K   120[m[K	in [01;31m[KNetworkInterface[m[K.c as follows:

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   543[m[K		int32_t [01;31m[KnextIdx[m[K;	/* A copy of the Rx-index 'ul_rx_idx' */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   566[m[K		int32_t [01;31m[KnextIdx[m[K;	/* A copy of the Rx-index 'ul_rx_idx' */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   135[m[K	 * the number 5 (words) in the higher [01;31m[Kniblle[m[K of the TCP-offset byte.

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1669[m[K			/* Important: tell [01;31m[KNIC[m[K driver how many bytes must be sent */
[01;32m[K  1684[m[K			/* Important: tell [01;31m[KNIC[m[K driver how many bytes must be sent */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   483[m[K	 *			xNetworkInterfaceOutput()	// Sends data to the [01;31m[KNIC[m[K ( declared in portable/NetworkInterface/xxx )
[01;32m[K   483[m[K	 *			xNetworkInterfaceOutput()	// Sends data to the [01;31m[KNIC[m[K ( declared in portable/NetworkInterface/xxx )
[01;32m[K   699[m[K	 * the data to the [01;31m[KNIC[m[K.
[01;32m[K   881[m[K			/* Important: tell [01;31m[KNIC[m[K driver how many bytes must be sent. */
[01;32m[K  3057[m[K	 *				xNetworkInterfaceOutput()	// Sends data to the [01;31m[KNIC[m[K
[01;32m[K  3057[m[K	 *				xNetworkInterfaceOutput()	// Sends data to the [01;31m[KNIC[m[K
[01;32m[K  3060[m[K	 *			xNetworkInterfaceOutput()	// Sends data to the [01;31m[KNIC[m[K
[01;32m[K  3060[m[K	 *			xNetworkInterfaceOutput()	// Sends data to the [01;31m[KNIC[m[K

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1595[m[K			/* Some drivers of [01;31m[KNIC[m[K's with checksum-offloading will enable the above
[01;32m[K  1817[m[K									by the [01;31m[KNIC[m[K driver. */
[01;32m[K  2676[m[K		/* Returns the IP address of the [01;31m[KNIC[m[K. */
[01;32m[K  2683[m[K		/* Sets the IP address of the [01;31m[KNIC[m[K. */

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K    40[m[K	 * Note that a special MAC address is required in addition to the [01;31m[KNIC[m[K's actual

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   217[m[K		/* Enable/Disable [01;31m[KNoBroadCast[m[K */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   218[m[K		/* Enable/Disable [01;31m[KNoBroadCast[m[K */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   241[m[K		/* Enable/Disable [01;31m[KNoBroadCast[m[K */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   364[m[K			 * '[01;31m[KNoEvent[m[K' value. */

[1;34m./test/cbmc/proofs/CBMCStubLibrary/tasksStubs.c[39m

[01;32m[K    35[m[K	   to a max limits of calls. Therefore this Stub models a [01;31m[Knondet[m[K timeout in

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K   268[m[K	          * NOTE: Using this bound with --[01;31m[Knondet[m[K-static requires setting

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./test/unit-test/ConfigFiles/pack_struct_start.h[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./test/unit-test/ConfigFiles/portmacro.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K    14[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./test/unit-test/ConfigFiles/pack_struct_end.h[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./test/unit-test/ConfigFiles/FreeRTOS_errno_TCP.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./test/unit-test/ConfigFiles/NetworkInterface.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./test/unit-test/ConfigFiles/NetworkBufferManagement.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./test/unit-test/ConfigFiles/IPTraceMacroDefaults.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_OutputARPRequest/OutputARPRequest_harness.c[39m

[01;32m[K    19[m[K	 * [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

[1;34m./test/cbmc/proofs/IP/SendEventToIPTask/SendEventToIPTask_harness.c[39m

[01;32m[K    19[m[K	 * [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

[1;34m./test/cbmc/proofs/TCP/prvTCPReturnPacket/TCPReturnPacket_harness.c[39m

[01;32m[K    19[m[K	 * [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

[1;34m./test/cbmc/proofs/TCP/prvTCPPrepareSend/TCPPrepareSend_harness.c[39m

[01;32m[K    19[m[K	 * [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K    19[m[K	 * [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

[1;34m./test/cbmc/proofs/DHCP/IsDHCPSocket/IsDHCPSocket_harness.c[39m

[01;32m[K    19[m[K	 * [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

[1;34m./test/cbmc/proofs/DHCP/DHCPProcess/DHCPProcess_harness.c[39m

[01;32m[K    19[m[K	  * [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./tools/tcp_mem_stats.c[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./FreeRTOS_Stream_Buffer.c[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/NetworkInterface/SH2A/NetworkInterface.c[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.c[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/NetworkInterface/mw300_rd/NetworkInterface.c[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_wifi.c[39m

[01;32m[K    26[m[K	*  FITNESS FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K    26[m[K	*  FITNESS FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K    22[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/NetworkInterface/board_family/NetworkInterface.c[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/Compiler/Keil/pack_struct_start.h[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/Compiler/Keil/pack_struct_end.h[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/Compiler/Renesas/pack_struct_start.h[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/Compiler/Renesas/pack_struct_end.h[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/Compiler/GCC/pack_struct_start.h[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/Compiler/GCC/pack_struct_end.h[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/Compiler/MSVC/pack_struct_start.h[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/Compiler/MSVC/pack_struct_end.h[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/Compiler/CompilerName/pack_struct_start.h[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/Compiler/CompilerName/pack_struct_end.h[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/Compiler/IAR/pack_struct_start.h[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./portable/Compiler/IAR/pack_struct_end.h[39m

[01;32m[K    17[m[K	FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./include/FreeRTOS_errno_TCP.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./include/NetworkInterface.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./include/NetworkBufferManagement.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./include/tcp_dump_packets.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./include/IPTraceMacroDefaults.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./include/FreeRTOS_TCP_IP.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./include/tcp_mem_stats.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./include/FreeRTOS_UDP_IP.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    17[m[K	 * FOR A PARTICULAR PURPOSE AND [01;31m[KNONINFRINGEMENT[m[K. IN NO EVENT SHALL THE AUTHORS OR

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K    65[m[K		 * [01;31m[KNOP[m[K (0x01), [01;31m[KNOP[m[K (0x01), SACK (0x05), LEN (0x0a),

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1230[m[K			/* [01;31m[KNOP[m[K option, inserted to make the length a multiple of 4. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2188[m[K		byte, needs no [01;31m[Kntoh[m[K() translation).  A shift-right 2: is the same as

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   325[m[K					/* Clear the entire space to avoid [01;31m[Knulling[m[K individual entries. */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K  1054[m[K		/* Enable [01;31m[KNVIC[m[K interrupts. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   132[m[K		/* Enable [01;31m[KNVIC[m[K interrupts. */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   325[m[K				/* Enable interrupts in the [01;31m[KNVIC[m[K. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K    35[m[K	          (##) Configure Ethernet [01;31m[KNVIC[m[K interrupt (IT mode)
[01;32m[K   214[m[K			/* Init the low level hardware : GPIO, CLOCK, [01;31m[KNVIC[m[K. */
[01;32m[K   300[m[K		/* De-Init the low level hardware : GPIO, CLOCK, [01;31m[KNVIC[m[K. */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   110[m[K			uint32_t ulCurrentSequenceNumber;/* Tx/Rx: the oldest sequence number not yet confirmed, also SND.UNA / RCV.[01;31m[KNXT[m[K

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    86[m[K	#define REG_BUS_CLOCK_CTRL         (0x20)       /* [01;31m[KOBCR[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   249[m[K	#define   RXQ_STAT_TIME_INT           (0x1000)    /* RX interrupt is [01;31m[Koccured[m[K by timer duration */
[01;32m[K   250[m[K	#define   RXQ_STAT_BYTE_CNT_INT       (0x0800)    /* RX interrupt is [01;31m[Koccured[m[K by byte count threshold */
[01;32m[K   251[m[K	#define   RXQ_STAT_FRAME_CNT_INT      (0x0400)    /* RX interrupt is [01;31m[Koccured[m[K by frame count threshold */

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   320[m[K	    if ((cur_entry == (uint32_t)cur_rx_desc_ptr) && (!(m_status & EMAC_INTSTS_RDUIF_Msk)))  // cur_entry may equal to cur_rx_desc_ptr if RDU [01;31m[Koccures[m[K

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   878[m[K	#define ETH_DMARXDESC_ES          ((uint32_t)0x00008000U)  /*!< Error summary: OR of the following bits: DE || [01;31m[KOE[m[K || IPC || LC || RWT || RE || CE */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2635[m[K				/* TCP-[01;31m[Koffsett[m[K equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2703[m[K			/* lint e9007 is [01;31m[KOK[m[K because 'uxIPHeaderSizeSocket()' has no side-effects. */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   466[m[K						/* ARP [01;31m[KOK[m[K. proceed. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   157[m[K		 * It may return: -EINPROGRESS, -EAGAIN, or 0 for [01;31m[KOK[m[K.
[01;32m[K  2239[m[K				xResult = bMayConnect( pxSocket ); /* -EINPROGRESS, -EAGAIN, or 0 for [01;31m[KOK[m[K */
[01;32m[K  2697[m[K				Return [01;31m[KOK[m[K in order not to get closed/deleted too quickly */

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K   252[m[K					So the printf()is [01;31m[KOK[m[K here. */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   773[m[K						is [01;31m[Kok[m[K to call the task level function here, but note that
[01;32m[K   800[m[K									is [01;31m[Kok[m[K to use the task level function here, but

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   323[m[K			This is a deferred handler taskr, not a real interrupt, so it is [01;31m[Kok[m[K to

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K   579[m[K						is [01;31m[Kok[m[K to call the task level function here, but note that
[01;32m[K   613[m[K									is [01;31m[Kok[m[K to use the task level function here, but

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K    45[m[K	/* As the following 3 macro's are [01;31m[KOK[m[K in most situations, and so they're not

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   133[m[K		GMAC_OK = 0,         /** 0  Operation [01;31m[KOK[m[K */
[01;32m[K  1337[m[K			{ MK_PAIR( HRESP ) }, /* Enable Hresp not [01;31m[KOK[m[K interrupt. */

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   265[m[K	#define GMAC_TSR_HRESP (0x1u << 8) /**< \brief (GMAC_TSR) HRESP Not [01;31m[KOK[m[K */
[01;32m[K   278[m[K	#define GMAC_RSR_HNO (0x1u << 3) /**< \brief (GMAC_RSR) HRESP Not [01;31m[KOK[m[K */
[01;32m[K   289[m[K	#define GMAC_ISR_HRESP (0x1u << 11) /**< \brief (GMAC_ISR) HRESP Not [01;31m[KOK[m[K */
[01;32m[K   314[m[K	#define GMAC_IER_HRESP (0x1u << 11) /**< \brief (GMAC_IER) HRESP Not [01;31m[KOK[m[K */
[01;32m[K   339[m[K	#define GMAC_IDR_HRESP (0x1u << 11) /**< \brief (GMAC_IDR) HRESP Not [01;31m[KOK[m[K */
[01;32m[K   364[m[K	#define GMAC_IMR_HRESP (0x1u << 11) /**< \brief (GMAC_IMR) HRESP Not [01;31m[KOK[m[K */
[01;32m[K   685[m[K	#define GMAC_ISRPQ_HRESP (0x1u << 11) /**< \brief (GMAC_ISRPQ[7]) HRESP Not [01;31m[KOK[m[K */
[01;32m[K   725[m[K	#define GMAC_IERPQ_HRESP (0x1u << 11) /**< \brief (GMAC_IERPQ[7]) HRESP Not [01;31m[KOK[m[K */
[01;32m[K   733[m[K	#define GMAC_IDRPQ_HRESP (0x1u << 11) /**< \brief (GMAC_IDRPQ[7]) HRESP Not [01;31m[KOK[m[K */
[01;32m[K   741[m[K	#define GMAC_IMRPQ_HRESP (0x1u << 11) /**< \brief (GMAC_IMRPQ[7]) HRESP Not [01;31m[KOK[m[K */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   134[m[K		GMAC_OK = 0,         /** 0  Operation [01;31m[KOK[m[K */
[01;32m[K  1340[m[K			{ MK_PAIR( HRESP ) }, /* Enable Hresp not [01;31m[KOK[m[K interrupt. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   332[m[K				GMAC_IER_HRESP | /* Enable Hresp not [01;31m[KOK[m[K interrupt. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   139[m[K		GMAC_OK = 0,         /** 0  Operation [01;31m[KOK[m[K */
[01;32m[K  1409[m[K			{ MK_PAIR( HRESP ) }, /* Enable Hresp not [01;31m[KOK[m[K interrupt. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   357[m[K				GMAC_IER_HRESP | /* Enable Hresp not [01;31m[KOK[m[K interrupt. */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   851[m[K			This is a deferred handler taskr, not a real interrupt, so it is [01;31m[Kok[m[K to

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   240[m[K		the IP-task will still check if the length fields are [01;31m[KOK[m[K. */
[01;32m[K   272[m[K	being called by a task (in which case it is [01;31m[Kok[m[K to block) or by the IP task
[01;32m[K   273[m[K	itself (in which case it is not [01;31m[Kok[m[K to block). */
[01;32m[K  1614[m[K					/* The checksum of the received packet is [01;31m[KOK[m[K. */
[01;32m[K  1988[m[K		the IP-task will still check if the length fields are [01;31m[KOK[m[K. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1508[m[K	 * resetting the alive timer, calling the user's [01;31m[KOnConnect[m[K handler to notify
[01;32m[K  1570[m[K								Postpone a call the [01;31m[KOnConnect[m[K event until the end of this function. */
[01;32m[K  1674[m[K				/* The 'connected' state has changed, call the [01;31m[KOnConnect[m[K handler of the parent. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   788[m[K	 * actions like calling a [01;31m[KOnConnected[m[K handler to notify the socket owner.

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3352[m[K						/* The socket owner has installed an [01;31m[KOnReceive[m[K handler. Pass the

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1390[m[K				/* In case the socket owner has installed an [01;31m[KOnSent[m[K handler,
[01;32m[K  2555[m[K					/* In case the socket owner has installed an [01;31m[KOnSent[m[K handler,

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   862[m[K			/* Invoke callbacks which can be useful to wake [01;31m[Kop[m[K a task */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   317[m[K		 * [01;31m[KOP[m[K: Operation: 10 is read. 01 is write.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   856[m[K			/* Invoke callbacks which can be useful to wake [01;31m[Kop[m[K a task */

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K   326[m[K	        // ack of tx done, no-[01;31m[Kop[m[K in this stage

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   357[m[K	    // FIX ME: for tx-event, no-[01;31m[Kop[m[K at this stage

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K   210[m[K	/* Default DNS server configuration.  [01;31m[KOpenDNS[m[K addresses are 208.67.222.222 and

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1301[m[K						/* 'bSendFullSize' is a special [01;31m[Koptimisation[m[K.  If true, the

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   264[m[K						[01;31m[Koptimisation[m[K. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   576[m[K			/* An [01;31m[Koptimisation[m[K that is useful when there is high network traffic.

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   134[m[K			struct xNETWORK_BUFFER *pxNextBuffer; /* Possible [01;31m[Koptimisation[m[K for expert users - requires network driver support. */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    99[m[K					bSendFullSize : 1,	/* May only send packets with a size equal to MSS (for [01;31m[Koptimisation[m[K) */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2415[m[K	aid though to [01;31m[Koptimise[m[K the calculations. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1542[m[K		/* or else, the parameter won't be used and the function will be [01;31m[Koptimised[m[K
[01;32m[K  2424[m[K		This function is [01;31m[Koptimised[m[K for 32-bit CPUs; Each time it will try to fetch

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2592[m[K					/* Refusing FIN: Rx incomp 1 [01;31m[Koptlen[m[K 4 tx done 1. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3901[m[K					/* The [01;31m[KORed[m[K value will be used to set the bits in the event

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K   315[m[K	 * A "challenge ACK" is as per https://tools.ietf.[01;31m[Korg[m[K/html/rfc5961#section-3.2,
[01;32m[K   315[m[K	 * A "challenge ACK" is as per https://tools.ietf.[01;31m[Korg[m[K/html/rfc5961#section-3.2,
[01;32m[K  3170[m[K						/* Implement https://tools.ietf.[01;31m[Korg[m[K/html/rfc5961#section-3.2. */
[01;32m[K  3170[m[K						/* Implement https://tools.ietf.[01;31m[Korg[m[K/html/rfc5961#section-3.2. */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K   602[m[K		https://www.ietf.[01;31m[Korg[m[K/rfc/rfc2131.txt, Transaction ID should be a random
[01;32m[K   602[m[K		https://www.ietf.[01;31m[Korg[m[K/rfc/rfc2131.txt, Transaction ID should be a random

[1;34m./test/unit-test/ConfigFiles/pack_struct_start.h[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./test/unit-test/ConfigFiles/portmacro.h[39m

[01;32m[K    22[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    22[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K   136[m[K	/* Task function macros as described on the FreeRTOS.[01;31m[Korg[m[K WEB site. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K    22[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    22[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    40[m[K	 * FreeRTOS API DOCUMENTATION AVAILABLE ON THE FreeRTOS.[01;31m[Korg[m[K WEB SITE.  See
[01;32m[K    41[m[K	 * http://www.freertos.[01;31m[Korg[m[K/a00110.html
[01;32m[K    41[m[K	 * http://www.freertos.[01;31m[Korg[m[K/a00110.html

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K    19[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    19[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    26[m[K	* http://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K    26[m[K	* http://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K    97[m[K	 * http://www.freertos.[01;31m[Korg[m[K/Stacks-and-stack-overflow-checking.html. */
[01;32m[K    97[m[K	 * http://www.freertos.[01;31m[Korg[m[K/Stacks-and-stack-overflow-checking.html. */
[01;32m[K   111[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/vApplicationIPNetworkEventHook.shtml.
[01;32m[K   111[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/vApplicationIPNetworkEventHook.shtml.

[1;34m./test/unit-test/ConfigFiles/pack_struct_end.h[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./test/unit-test/ConfigFiles/FreeRTOS_errno_TCP.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./test/unit-test/ConfigFiles/NetworkInterface.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./test/unit-test/ConfigFiles/NetworkBufferManagement.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./test/unit-test/ConfigFiles/IPTraceMacroDefaults.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    28[m[K	http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Trace.html */
[01;32m[K    28[m[K	http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Trace.html */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K    22[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    22[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K   129[m[K		#error ipconfigDHCP_USES_USER_HOOK and its associated callback have been superceeded - see http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html#ipconfigUSE_DHCP_HOOK
[01;32m[K   409[m[K			/* Per https://tools.ietf.[01;31m[Korg[m[K/html/rfc1035, 253 is the maximum string length
[01;32m[K   409[m[K			/* Per https://tools.ietf.[01;31m[Korg[m[K/html/rfc1035, 253 is the maximum string length

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_OutputARPRequest/OutputARPRequest_harness.c[39m

[01;32m[K    26[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    26[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./test/cbmc/proofs/IP/SendEventToIPTask/SendEventToIPTask_harness.c[39m

[01;32m[K    26[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    26[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./test/cbmc/proofs/TCP/prvTCPReturnPacket/TCPReturnPacket_harness.c[39m

[01;32m[K    26[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    26[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./test/cbmc/proofs/TCP/prvTCPPrepareSend/TCPPrepareSend_harness.c[39m

[01;32m[K    26[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    26[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K    26[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    26[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./test/cbmc/proofs/DHCP/IsDHCPSocket/IsDHCPSocket_harness.c[39m

[01;32m[K    26[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    26[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./test/cbmc/proofs/DHCP/DHCPProcess/DHCPProcess_harness.c[39m

[01;32m[K    26[m[K	  * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    26[m[K	  * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    36[m[K	* FreeRTOS API DOCUMENTATION AVAILABLE ON THE FreeRTOS.[01;31m[Korg[m[K WEB SITE.
[01;32m[K    37[m[K	* http://www.freertos.[01;31m[Korg[m[K/a00110.html
[01;32m[K    37[m[K	* http://www.freertos.[01;31m[Korg[m[K/a00110.html
[01;32m[K   176[m[K	 * http://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_Echo_Clients.html,
[01;32m[K   176[m[K	 * http://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_Echo_Clients.html,
[01;32m[K   177[m[K	 * http://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/UDP_Echo_Clients.html. */
[01;32m[K   177[m[K	 * http://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/UDP_Echo_Clients.html. */

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    30[m[K	* http://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K    30[m[K	* http://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K    96[m[K	 * http://www.freertos.[01;31m[Korg[m[K/Stacks-and-stack-overflow-checking.html. */
[01;32m[K    96[m[K	 * http://www.freertos.[01;31m[Korg[m[K/Stacks-and-stack-overflow-checking.html. */
[01;32m[K   110[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/vApplicationIPNetworkEventHook.shtml.
[01;32m[K   110[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/vApplicationIPNetworkEventHook.shtml.

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K    30[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/socket.html
[01;32m[K    30[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/socket.html
[01;32m[K    46[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/setsockopt.html
[01;32m[K    46[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/setsockopt.html
[01;32m[K    64[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/close.html
[01;32m[K    64[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/close.html
[01;32m[K    76[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/bind.html
[01;32m[K    76[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/bind.html
[01;32m[K    92[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/inet_addr.html
[01;32m[K    92[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/inet_addr.html
[01;32m[K   104[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/recvfrom.html
[01;32m[K   104[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/recvfrom.html
[01;32m[K   177[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/sendto.html
[01;32m[K   177[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/sendto.html
[01;32m[K   198[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/FreeRTOS_GetUDPPayloadBuffer.html
[01;32m[K   198[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/FreeRTOS_GetUDPPayloadBuffer.html
[01;32m[K   219[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/FreeRTOS_ReleaseUDPPayloadBuffer.html
[01;32m[K   219[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/FreeRTOS_ReleaseUDPPayloadBuffer.html
[01;32m[K   235[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/pxGetNetworkBufferWithDescriptor.html
[01;32m[K   235[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/pxGetNetworkBufferWithDescriptor.html
[01;32m[K   306[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/vReleaseNetworkBufferAndDescriptor.html
[01;32m[K   306[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/vReleaseNetworkBufferAndDescriptor.html
[01;32m[K   324[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/FreeRTOS_GetAddressConfiguration.html
[01;32m[K   324[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/FreeRTOS_GetAddressConfiguration.html
[01;32m[K   362[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/vApplicationIPNetworkEventHook.html
[01;32m[K   362[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/vApplicationIPNetworkEventHook.html
[01;32m[K   371[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K   371[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K   384[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Porting.html#xNetworkInterfaceOutput
[01;32m[K   384[m[K	 * https://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Porting.html#xNetworkInterfaceOutput

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    66[m[K	Per https://tools.ietf.[01;31m[Korg[m[K/html/rfc6056, "the dynamic ports consist of the range
[01;32m[K    66[m[K	Per https://tools.ietf.[01;31m[Korg[m[K/html/rfc6056, "the dynamic ports consist of the range
[01;32m[K  1736[m[K	/* Find an available port number per https://tools.ietf.[01;31m[Korg[m[K/html/rfc6056. */
[01;32m[K  1736[m[K	/* Find an available port number per https://tools.ietf.[01;31m[Korg[m[K/html/rfc6056. */

[1;34m./tools/tcp_mem_stats.c[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./FreeRTOS_Stream_Buffer.c[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    30[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html
[01;32m[K    30[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K    22[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    22[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    32[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html
[01;32m[K    32[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html

[1;34m./portable/NetworkInterface/SH2A/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    73[m[K	http://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html */
[01;32m[K    73[m[K	http://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html */

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.c[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./portable/NetworkInterface/mw300_rd/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K    20[m[K	 ***   URL: http://www.FreeRTOS.[01;31m[Korg[m[K/contact  Active early adopters may, at   ***
[01;32m[K    20[m[K	 ***   URL: http://www.FreeRTOS.[01;31m[Korg[m[K/contact  Active early adopters may, at   ***
[01;32m[K    39[m[K	 * The FreeRTOS+TCP License Information Page: http://www.FreeRTOS.[01;31m[Korg[m[K/tcp_license
[01;32m[K    39[m[K	 * The FreeRTOS+TCP License Information Page: http://www.FreeRTOS.[01;31m[Korg[m[K/tcp_license
[01;32m[K    40[m[K	 * The FreeRTOS Open Source License: http://www.FreeRTOS.[01;31m[Korg[m[K/license
[01;32m[K    40[m[K	 * The FreeRTOS Open Source License: http://www.FreeRTOS.[01;31m[Korg[m[K/license
[01;32m[K    41[m[K	 * The GNU General Public License Version 2: http://www.FreeRTOS.[01;31m[Korg[m[K/gpl-2.0.txt
[01;32m[K    41[m[K	 * The GNU General Public License Version 2: http://www.FreeRTOS.[01;31m[Korg[m[K/gpl-2.0.txt
[01;32m[K    52[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    52[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    53[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/plus
[01;32m[K    53[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/plus
[01;32m[K    54[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/labs
[01;32m[K    54[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/labs
[01;32m[K    62[m[K	* http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html
[01;32m[K    62[m[K	* http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    73[m[K	http://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html */
[01;32m[K    73[m[K	http://www.freertos.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html */

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   406[m[K	    // http://en.wikipedia.[01;31m[Korg[m[K/wiki/MAC_address

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K    28[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    28[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./portable/NetworkInterface/board_family/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./portable/NetworkInterface/esp32/NetworkInterface.c[39m

[01;32m[K     7[m[K	//     http://www.apache.[01;31m[Korg[m[K/licenses/LICENSE-2.0

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./portable/Compiler/Keil/pack_struct_start.h[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/Keil/pack_struct_end.h[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/Renesas/pack_struct_start.h[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/Renesas/pack_struct_end.h[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/GCC/pack_struct_start.h[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/GCC/pack_struct_end.h[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/MSVC/pack_struct_start.h[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/MSVC/pack_struct_end.h[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/CompilerName/pack_struct_start.h[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/CompilerName/pack_struct_end.h[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/IAR/pack_struct_start.h[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/IAR/pack_struct_end.h[39m

[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K  1361[m[K		/* Per the ARP Cache Validation section of https://tools.ietf.[01;31m[Korg[m[K/html/rfc1122, 
[01;32m[K  1361[m[K		/* Per the ARP Cache Validation section of https://tools.ietf.[01;31m[Korg[m[K/html/rfc1122, 
[01;32m[K  2138[m[K			/* Per https://tools.ietf.[01;31m[Korg[m[K/html/rfc791, the four-bit Internet Header
[01;32m[K  2138[m[K			/* Per https://tools.ietf.[01;31m[Korg[m[K/html/rfc791, the four-bit Internet Header

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./include/FreeRTOS_errno_TCP.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./include/NetworkInterface.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K   257[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/FreeRTOS_TCP_API_Functions.html
[01;32m[K   257[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/FreeRTOS_TCP_API_Functions.html

[1;34m./include/NetworkBufferManagement.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./include/tcp_dump_packets.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K   218[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/FreeRTOS_TCP_API_Functions.html
[01;32m[K   218[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/FreeRTOS_TCP_API_Functions.html

[1;34m./include/IPTraceMacroDefaults.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    28[m[K	http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Trace.html */
[01;32m[K    28[m[K	http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Trace.html */

[1;34m./include/FreeRTOS_TCP_IP.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    38[m[K		 * http://en.wikipedia.[01;31m[Korg[m[K/wiki/Transmission_Control_Protocol */
[01;32m[K    38[m[K		 * http://en.wikipedia.[01;31m[Korg[m[K/wiki/Transmission_Control_Protocol */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./include/tcp_mem_stats.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./include/FreeRTOS_UDP_IP.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K    22[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    22[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K   132[m[K		#error ipconfigDHCP_USES_USER_HOOK and its associated callback have been superceeded - see http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html#ipconfigUSE_DHCP_HOOK
[01;32m[K   439[m[K			/* Per https://tools.ietf.[01;31m[Korg[m[K/html/rfc1035, 253 is the maximum string length
[01;32m[K   439[m[K			/* Per https://tools.ietf.[01;31m[Korg[m[K/html/rfc1035, 253 is the maximum string length

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    23[m[K	 * http://www.FreeRTOS.[01;31m[Korg[m[K
[01;32m[K    97[m[K		http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html#ipconfigUSE_DHCP_HOOK
[01;32m[K    97[m[K		http://www.FreeRTOS.[01;31m[Korg[m[K/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html#ipconfigUSE_DHCP_HOOK

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1251[m[K	    /* Set the [01;31m[KOSF[m[K bit according to ETH SecondFrameOperate value */

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K   602[m[K		_fprintf( [01;31m[Koutfile[m[K, "\n/* Packet_%04d */\n", uxNextPacketNumber );

[1;34m./test/cbmc/proofs/CBMCStubLibrary/tasksStubs.c[39m

[01;32m[K    26[m[K	/* This function is another method apart from [01;31m[Koverwritting[m[K the defines to init the max

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   745[m[K			handles [01;31m[Kpacap[m[K Rx into the FreeRTOS simulator contain another packet? */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1701[m[K				case FREERTOS_SO_STOP_RX:		/* Refuse to receive more [01;31m[Kpackts[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   621[m[K	 * \[01;31m[Kparam[m[K p_ksz8851snl_dev Pointer to driver data structure.
[01;32m[K   656[m[K	 * \[01;31m[Kparam[m[K netif the lwIP network interface structure for this ethernetif.
[01;32m[K  1047[m[K	 * \[01;31m[Kparam[m[K netif the lwIP network interface structure for this ethernetif.
[01;32m[K  1077[m[K	 * \[01;31m[Kparam[m[K netif the lwIP network interface structure for this ethernetif.

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K    87[m[K	 * \[01;31m[Kparam[m[K reg the register address to modify.
[01;32m[K    88[m[K	 * \[01;31m[Kparam[m[K bits_to_set bitmask to apply.
[01;32m[K   102[m[K	 * \[01;31m[Kparam[m[K reg the register address to modify.
[01;32m[K   103[m[K	 * \[01;31m[Kparam[m[K bits_to_set bitmask to apply.
[01;32m[K   143[m[K	 * \[01;31m[Kparam[m[K reg the register address to modify.
[01;32m[K   216[m[K	 * \[01;31m[Kparam[m[K reg the register address to modify.
[01;32m[K   217[m[K	 * \[01;31m[Kparam[m[K wrdata the new register value.
[01;32m[K   294[m[K	 * \[01;31m[Kparam[m[K buf the buffer to store the data from the fifo buffer.
[01;32m[K   295[m[K	 * \[01;31m[Kparam[m[K len the amount of data to read.
[01;32m[K   330[m[K	 * \[01;31m[Kparam[m[K buf the buffer to send to the fifo buffer.
[01;32m[K   331[m[K	 * \[01;31m[Kparam[m[K ulActualLength the total amount of data to write.
[01;32m[K   332[m[K	 * \[01;31m[Kparam[m[K ulFIFOLength the size of the first pbuf to write from the pbuf chain.
[01;32m[K   380[m[K	 * \[01;31m[Kparam[m[K len the amount of dummy data to write.

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   245[m[K	 * @[01;31m[Kparam[m[K[in]   pxAllNetworkInterfaces interface structure list to print
[01;32m[K   398[m[K	 * @[01;31m[Kparam[m[K [in] pucName interface  name to pen
[01;32m[K   455[m[K	 * @[01;31m[Kparam[m[K [in] pxAllNetworkInterfaces network interface list to choose from
[01;32m[K   617[m[K	 * @[01;31m[Kparam[m[K [in] user data sent to pcap_dispatch
[01;32m[K   618[m[K	 * @[01;31m[Kparam[m[K [in] pkt_header received packet header
[01;32m[K   619[m[K	 * @[01;31m[Kparam[m[K [in] pkt_data received packet data
[01;32m[K   643[m[K	 * @[01;31m[Kparam[m[K [in] pvParam not used
[01;32m[K   681[m[K	 * @[01;31m[Kparam[m[K [in] pvParam not used
[01;32m[K   727[m[K	 * @[01;31m[Kparam[m[K [in] pvParameters not used
[01;32m[K   838[m[K	 * @[01;31m[Kparam[m[K [out] pcBuffer buffer to fill up
[01;32m[K   839[m[K	 * @[01;31m[Kparam[m[K [in] aBuflen length of pcBuffer
[01;32m[K   840[m[K	 * @[01;31m[Kparam[m[K [in] pcMessage original message
[01;32m[K   874[m[K	 * @[01;31m[Kparam[m[K [in] bin_daa data to print
[01;32m[K   875[m[K	 * @[01;31m[Kparam[m[K [in] len length of the data

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K   224[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   225[m[K	 * \[01;31m[Kparam[m[K uc_phy_addr PHY address.
[01;32m[K   226[m[K	 * \[01;31m[Kparam[m[K ul_mck GMAC MCK.
[01;32m[K   237[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   238[m[K	 * \[01;31m[Kparam[m[K uc_phy_addr PHY address.
[01;32m[K   239[m[K	 * \[01;31m[Kparam[m[K uc_apply_setting_flag Set to 0 to not apply the PHY configurations, else to apply.
[01;32m[K   250[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   251[m[K	 * \[01;31m[Kparam[m[K uc_phy_addr PHY address.
[01;32m[K   260[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   261[m[K	 * \[01;31m[Kparam[m[K uc_phy_addr PHY address.

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   277[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   278[m[K	 * \[01;31m[Kparam[m[K ul_ncr   Network control value.
[01;32m[K   288[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   299[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   300[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable GMAC receiver, else to enable it.
[01;32m[K   314[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   315[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable GMAC transmit, else to enable it.
[01;32m[K   329[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   330[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable GMAC management, else to enable it.
[01;32m[K   344[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   354[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   364[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   365[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the statistics registers writing, else to enable it.
[01;32m[K   380[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   381[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the back pressure, else to enable it.
[01;32m[K   395[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   405[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   415[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   425[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   435[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   445[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   446[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to normal operation, else to enable the store.
[01;32m[K   460[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   461[m[K	 * \[01;31m[Kparam[m[K uc_enable   1 to set the reception, 0 to disable.
[01;32m[K   475[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   485[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   495[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   496[m[K	  * \[01;31m[Kparam[m[K ul_cfg   Network configuration value.
[01;32m[K   506[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   530[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   531[m[K	 * \[01;31m[Kparam[m[K uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
[01;32m[K   545[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   546[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the Full-Duplex mode, else to enable it.
[01;32m[K   560[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   561[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable copying all valid frames, else to enable it.
[01;32m[K   575[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   576[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the jumbo frames, else to enable it.
[01;32m[K   590[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   591[m[K	 * \[01;31m[Kparam[m[K uc_enable   1 to disable the broadcast, else to enable it.
[01;32m[K   605[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   606[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the multicast hash, else to enable it.
[01;32m[K   620[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   621[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable big frames else to enable it.
[01;32m[K   635[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   636[m[K	 * \[01;31m[Kparam[m[K ul_mck   GMAC MCK.
[01;32m[K   667[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   668[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the GMAC receiver, else to enable it.
[01;32m[K   682[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   683[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable pause frame, else to enable it.
[01;32m[K   697[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   708[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   709[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable receive length field checking, else to enable it.
[01;32m[K   723[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   724[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable discarding FCS field of received frames, else to enable it.
[01;32m[K   740[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   741[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the received in half-duplex mode, else to enable it.
[01;32m[K   755[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   756[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable ignore RX FCS, else to enable it.
[01;32m[K   770[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   782[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   794[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   806[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   818[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   819[m[K	 * \[01;31m[Kparam[m[K ul_status   Transmit status.
[01;32m[K   829[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   839[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   840[m[K	 * \[01;31m[Kparam[m[K ul_status   Receive status.
[01;32m[K   850[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   851[m[K	 * \[01;31m[Kparam[m[K ul_addr   Rx queue address.
[01;32m[K   861[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   873[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   874[m[K	 * \[01;31m[Kparam[m[K ul_addr  Tx queue address.
[01;32m[K   884[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   896[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   897[m[K	 * \[01;31m[Kparam[m[K ul_source   Interrupt source(s) to be enabled.
[01;32m[K   907[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   908[m[K	 * \[01;31m[Kparam[m[K ul_source   Interrupt source(s) to be disabled.
[01;32m[K   918[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   930[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   942[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   943[m[K	 * \[01;31m[Kparam[m[K uc_phy_addr   PHY address.
[01;32m[K   944[m[K	 * \[01;31m[Kparam[m[K uc_reg_addr   Register address.
[01;32m[K   945[m[K	 * \[01;31m[Kparam[m[K uc_rw   1 to Read, 0 to write.
[01;32m[K   946[m[K	 * \[01;31m[Kparam[m[K us_data   Data to be performed, write only.
[01;32m[K   966[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   981[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   982[m[K	 * \[01;31m[Kparam[m[K ul_hash_top   Hash top.
[01;32m[K   983[m[K	 * \[01;31m[Kparam[m[K ul_hash_bottom   Hash bottom.
[01;32m[K   995[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   996[m[K	 * \[01;31m[Kparam[m[K ull_hash   64 bits hash value.
[01;32m[K  1007[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1008[m[K	 * \[01;31m[Kparam[m[K uc_index  GMAC specific address register index.
[01;32m[K  1009[m[K	 * \[01;31m[Kparam[m[K p_mac_addr  GMAC address.
[01;32m[K  1025[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1026[m[K	 * \[01;31m[Kparam[m[K uc_index  GMAC specific address register index.
[01;32m[K  1027[m[K	 * \[01;31m[Kparam[m[K ul_mac_top  GMAC top address.
[01;32m[K  1028[m[K	 * \[01;31m[Kparam[m[K ul_mac_bottom  GMAC bottom address.
[01;32m[K  1040[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1041[m[K	 * \[01;31m[Kparam[m[K uc_index  GMAC specific address register index.
[01;32m[K  1042[m[K	 * \[01;31m[Kparam[m[K ull_mac  64-bit GMAC address.
[01;32m[K  1054[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1055[m[K	 * \[01;31m[Kparam[m[K mode   Media independent interface mode.

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K    91[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K    92[m[K	 * \[01;31m[Kparam[m[K uc_phy_addr PHY address.
[01;32m[K    93[m[K	 * \[01;31m[Kparam[m[K uc_start_addr Start address of the PHY to be searched.
[01;32m[K   150[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   151[m[K	 * \[01;31m[Kparam[m[K uc_phy_addr PHY address.
[01;32m[K   152[m[K	 * \[01;31m[Kparam[m[K ul_mck GMAC MCK.
[01;32m[K   186[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   187[m[K	 * \[01;31m[Kparam[m[K uc_phy_addr PHY address.
[01;32m[K   188[m[K	 * \[01;31m[Kparam[m[K uc_apply_setting_flag Set to 0 to not apply the PHY configurations, else to apply.
[01;32m[K   270[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   271[m[K	 * \[01;31m[Kparam[m[K uc_phy_addr PHY address.
[01;32m[K   413[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   414[m[K	 * \[01;31m[Kparam[m[K uc_phy_addr PHY address.

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   280[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   281[m[K	 * \[01;31m[Kparam[m[K ul_ncr   Network control value.
[01;32m[K   291[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   302[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   303[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable GMAC receiver, else to enable it.
[01;32m[K   317[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   318[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable GMAC transmit, else to enable it.
[01;32m[K   332[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   333[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable GMAC management, else to enable it.
[01;32m[K   347[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   357[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   367[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   368[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the statistics registers writing, else to enable it.
[01;32m[K   383[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   384[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the back pressure, else to enable it.
[01;32m[K   398[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   408[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   418[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   428[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   438[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   448[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   449[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to normal operation, else to enable the store.
[01;32m[K   463[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   464[m[K	 * \[01;31m[Kparam[m[K uc_enable   1 to set the reception, 0 to disable.
[01;32m[K   478[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   488[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   498[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   499[m[K	  * \[01;31m[Kparam[m[K ul_cfg   Network configuration value.
[01;32m[K   509[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   533[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   534[m[K	 * \[01;31m[Kparam[m[K uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
[01;32m[K   548[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   549[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the Full-Duplex mode, else to enable it.
[01;32m[K   563[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   564[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable copying all valid frames, else to enable it.
[01;32m[K   578[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   579[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the jumbo frames, else to enable it.
[01;32m[K   593[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   594[m[K	 * \[01;31m[Kparam[m[K uc_enable   1 to disable the broadcast, else to enable it.
[01;32m[K   608[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   609[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the multicast hash, else to enable it.
[01;32m[K   623[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   624[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable big frames else to enable it.
[01;32m[K   638[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   639[m[K	 * \[01;31m[Kparam[m[K ul_mck   GMAC MCK.
[01;32m[K   670[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   671[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the GMAC receiver, else to enable it.
[01;32m[K   685[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   686[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable pause frame, else to enable it.
[01;32m[K   700[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   711[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   712[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable receive length field checking, else to enable it.
[01;32m[K   726[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   727[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable discarding FCS field of received frames, else to enable it.
[01;32m[K   743[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   744[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the received in half-duplex mode, else to enable it.
[01;32m[K   758[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   759[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable ignore RX FCS, else to enable it.
[01;32m[K   773[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   785[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   797[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   809[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   821[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   822[m[K	 * \[01;31m[Kparam[m[K ul_status   Transmit status.
[01;32m[K   832[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   842[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   843[m[K	 * \[01;31m[Kparam[m[K ul_status   Receive status.
[01;32m[K   853[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   854[m[K	 * \[01;31m[Kparam[m[K ul_addr   Rx queue address.
[01;32m[K   864[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   876[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   877[m[K	 * \[01;31m[Kparam[m[K ul_addr  Tx queue address.
[01;32m[K   887[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   899[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   900[m[K	 * \[01;31m[Kparam[m[K ul_source   Interrupt source(s) to be enabled.
[01;32m[K   910[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   911[m[K	 * \[01;31m[Kparam[m[K ul_source   Interrupt source(s) to be disabled.
[01;32m[K   921[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   933[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   945[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   946[m[K	 * \[01;31m[Kparam[m[K uc_phy_addr   PHY address.
[01;32m[K   947[m[K	 * \[01;31m[Kparam[m[K uc_reg_addr   Register address.
[01;32m[K   948[m[K	 * \[01;31m[Kparam[m[K uc_rw   1 to Read, 0 to write.
[01;32m[K   949[m[K	 * \[01;31m[Kparam[m[K us_data   Data to be performed, write only.
[01;32m[K   969[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   984[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   985[m[K	 * \[01;31m[Kparam[m[K ul_hash_top   Hash top.
[01;32m[K   986[m[K	 * \[01;31m[Kparam[m[K ul_hash_bottom   Hash bottom.
[01;32m[K   998[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   999[m[K	 * \[01;31m[Kparam[m[K ull_hash   64 bits hash value.
[01;32m[K  1010[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1011[m[K	 * \[01;31m[Kparam[m[K uc_index  GMAC specific address register index.
[01;32m[K  1012[m[K	 * \[01;31m[Kparam[m[K p_mac_addr  GMAC address.
[01;32m[K  1028[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1029[m[K	 * \[01;31m[Kparam[m[K uc_index  GMAC specific address register index.
[01;32m[K  1030[m[K	 * \[01;31m[Kparam[m[K ul_mac_top  GMAC top address.
[01;32m[K  1031[m[K	 * \[01;31m[Kparam[m[K ul_mac_bottom  GMAC bottom address.
[01;32m[K  1043[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1044[m[K	 * \[01;31m[Kparam[m[K uc_index  GMAC specific address register index.
[01;32m[K  1045[m[K	 * \[01;31m[Kparam[m[K ull_mac  64-bit GMAC address.
[01;32m[K  1057[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1058[m[K	 * \[01;31m[Kparam[m[K mode   Media independent interface mode.

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   159[m[K	 * \[01;31m[Kparam[m[K p_gmac HW controller address.
[01;32m[K   160[m[K	 * \[01;31m[Kparam[m[K ul_retry The retry times, 0 to wait forever until completeness.
[01;32m[K   190[m[K	 * \[01;31m[Kparam[m[K p_dev Pointer to GMAC driver instance.
[01;32m[K   231[m[K	 * \[01;31m[Kparam[m[K p_drv Pointer to GMAC Driver instance.
[01;32m[K   267[m[K	 * \[01;31m[Kparam[m[K p_gmac Pointer to GMAC instance.
[01;32m[K   268[m[K	 * \[01;31m[Kparam[m[K p_gmac_dev Pointer to GMAC device instance.
[01;32m[K   269[m[K	 * \[01;31m[Kparam[m[K p_dev_mm Pointer to the GMAC memory management control block.
[01;32m[K   270[m[K	 * \[01;31m[Kparam[m[K p_tx_cb Pointer to allocated TX callback list.
[01;32m[K   342[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   343[m[K	 * \[01;31m[Kparam[m[K uc_phy_address PHY address.
[01;32m[K   344[m[K	 * \[01;31m[Kparam[m[K uc_address Register address.
[01;32m[K   345[m[K	 * \[01;31m[Kparam[m[K p_value Pointer to a 32-bit location to store read data.
[01;32m[K   364[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   365[m[K	 * \[01;31m[Kparam[m[K uc_phy_address PHY Address.
[01;32m[K   366[m[K	 * \[01;31m[Kparam[m[K uc_address Register Address.
[01;32m[K   367[m[K	 * \[01;31m[Kparam[m[K ul_value Data to write, actually 16-bit data.
[01;32m[K   385[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   386[m[K	 * \[01;31m[Kparam[m[K p_gmac_dev Pointer to the GMAC device instance.
[01;32m[K   387[m[K	 * \[01;31m[Kparam[m[K p_opt GMAC configure options.
[01;32m[K   533[m[K	 * \[01;31m[Kparam[m[K p_gmac_dev Pointer to the GMAC device instance.
[01;32m[K   534[m[K	 * \[01;31m[Kparam[m[K p_frame Address of the frame buffer.
[01;32m[K   535[m[K	 * \[01;31m[Kparam[m[K ul_frame_size  Length of the frame.
[01;32m[K   536[m[K	 * \[01;31m[Kparam[m[K p_rcv_size   Received frame size.
[01;32m[K   606[m[K	 * \[01;31m[Kparam[m[K p_gmac_dev Pointer to the GMAC device instance.
[01;32m[K   607[m[K	 * \[01;31m[Kparam[m[K p_buffer       Pointer to the data buffer.
[01;32m[K   608[m[K	 * \[01;31m[Kparam[m[K ul_size    Length of the frame.
[01;32m[K   609[m[K	 * \[01;31m[Kparam[m[K func_tx_cb  Transmit callback function.
[01;32m[K   697[m[K	 * \[01;31m[Kparam[m[K p_gmac_dev Pointer to the GMAC device instance.
[01;32m[K   724[m[K	 * \[01;31m[Kparam[m[K p_gmac_dev Pointer to the GMAC device instance.
[01;32m[K   725[m[K	 * \[01;31m[Kparam[m[K func_tx_cb  Receive callback function.
[01;32m[K   754[m[K	 * \[01;31m[Kparam[m[K p_gmac_dev   Pointer to GMAC device instance.
[01;32m[K   755[m[K	 * \[01;31m[Kparam[m[K func_wakeup    Pointer to wakeup callback function.
[01;32m[K   756[m[K	 * \[01;31m[Kparam[m[K uc_threshold Number of free transmit descriptor before wakeup callback invoked.
[01;32m[K   782[m[K	 * \[01;31m[Kparam[m[K p_gmac_dev   Pointer to GMAC device instance.
[01;32m[K   806[m[K	 * \[01;31m[Kparam[m[K p_gmac_dev   Pointer to GMAC device instance.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   284[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   285[m[K	 * \[01;31m[Kparam[m[K ul_ncr   Network control value.
[01;32m[K   295[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   306[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   307[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable GMAC receiver, else to enable it.
[01;32m[K   321[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   322[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable GMAC transmit, else to enable it.
[01;32m[K   336[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   337[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable GMAC management, else to enable it.
[01;32m[K   351[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   361[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   371[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   372[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the statistics registers writing, else to enable it.
[01;32m[K   387[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   388[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the back pressure, else to enable it.
[01;32m[K   402[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   413[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   423[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   433[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   443[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   444[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to normal operation, else to enable the store.
[01;32m[K   458[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   459[m[K	 * \[01;31m[Kparam[m[K uc_enable   1 to set the reception, 0 to disable.
[01;32m[K   473[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   483[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   493[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   494[m[K	  * \[01;31m[Kparam[m[K ul_cfg   Network configuration value.
[01;32m[K   515[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   527[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   528[m[K	 * \[01;31m[Kparam[m[K uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
[01;32m[K   542[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   543[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the Full-Duplex mode, else to enable it.
[01;32m[K   557[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   558[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable copying all valid frames, else to enable it.
[01;32m[K   572[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   573[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the jumbo frames, else to enable it.
[01;32m[K   587[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   588[m[K	 * \[01;31m[Kparam[m[K uc_enable   1 to disable the broadcast, else to enable it.
[01;32m[K   602[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   603[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the multicast hash, else to enable it.
[01;32m[K   617[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   618[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable big frames else to enable it.
[01;32m[K   632[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   633[m[K	 * \[01;31m[Kparam[m[K ul_mck   GMAC MCK.
[01;32m[K   666[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   667[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the GMAC receiver, else to enable it.
[01;32m[K   681[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   682[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable pause frame, else to enable it.
[01;32m[K   696[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   707[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   708[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable receive length field checking, else to enable it.
[01;32m[K   722[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   723[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable discarding FCS field of received frames, else to enable it.
[01;32m[K   739[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   740[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable the received in half-duplex mode, else to enable it.
[01;32m[K   754[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   755[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable ignore RX FCS, else to enable it.
[01;32m[K   769[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   781[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   793[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   805[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   817[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   818[m[K	 * \[01;31m[Kparam[m[K ul_status   Transmit status.
[01;32m[K   828[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   838[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   839[m[K	 * \[01;31m[Kparam[m[K ul_status   Receive status.
[01;32m[K   849[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   850[m[K	 * \[01;31m[Kparam[m[K ul_addr   Rx queue address.
[01;32m[K   860[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   861[m[K	 * \[01;31m[Kparam[m[K ul_addr   Rx buffer.
[01;32m[K   872[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   884[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   885[m[K	 * \[01;31m[Kparam[m[K ul_addr  Tx queue address.
[01;32m[K   895[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   907[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   908[m[K	 * \[01;31m[Kparam[m[K ul_source   Interrupt source(s) to be enabled.
[01;32m[K   918[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   919[m[K	 * \[01;31m[Kparam[m[K ul_source   Interrupt source(s) to be disabled.
[01;32m[K   929[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   941[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   953[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   954[m[K	 * \[01;31m[Kparam[m[K uc_phy_addr   PHY address.
[01;32m[K   955[m[K	 * \[01;31m[Kparam[m[K uc_reg_addr   Register address.
[01;32m[K   956[m[K	 * \[01;31m[Kparam[m[K uc_rw   1 to Read, 0 to write.
[01;32m[K   957[m[K	 * \[01;31m[Kparam[m[K us_data   Data to be performed, write only.
[01;32m[K   977[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   992[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   993[m[K	 * \[01;31m[Kparam[m[K ul_hash_top   Hash top.
[01;32m[K   994[m[K	 * \[01;31m[Kparam[m[K ul_hash_bottom   Hash bottom.
[01;32m[K  1006[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1007[m[K	 * \[01;31m[Kparam[m[K ull_hash   64 bits hash value.
[01;32m[K  1018[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1019[m[K	 * \[01;31m[Kparam[m[K uc_index  GMAC specific address register index.
[01;32m[K  1020[m[K	 * \[01;31m[Kparam[m[K p_mac_addr  GMAC address.
[01;32m[K  1036[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1037[m[K	 * \[01;31m[Kparam[m[K uc_index  GMAC specific address register index.
[01;32m[K  1038[m[K	 * \[01;31m[Kparam[m[K ul_mac_top  GMAC top address.
[01;32m[K  1039[m[K	 * \[01;31m[Kparam[m[K ul_mac_bottom  GMAC bottom address.
[01;32m[K  1051[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1052[m[K	 * \[01;31m[Kparam[m[K uc_index  GMAC specific address register index.
[01;32m[K  1053[m[K	 * \[01;31m[Kparam[m[K ull_mac  64-bit GMAC address.
[01;32m[K  1065[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1066[m[K	 * \[01;31m[Kparam[m[K mode   Media independent interface mode.
[01;32m[K  1102[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1103[m[K	 * \[01;31m[Kparam[m[K seconds47   Second comparison high
[01;32m[K  1104[m[K	 * \[01;31m[Kparam[m[K seconds31   Second comparison low
[01;32m[K  1105[m[K	 * \[01;31m[Kparam[m[K nanosec     Nanosecond Comparison
[01;32m[K  1117[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1118[m[K	 * \[01;31m[Kparam[m[K queue_idx   Index of queue, start from 1
[01;32m[K  1130[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1131[m[K	 * \[01;31m[Kparam[m[K queue_idx   Index of queue, start from 1
[01;32m[K  1141[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1142[m[K	 * \[01;31m[Kparam[m[K queue_idx   Index of queue, start from 1
[01;32m[K  1154[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1155[m[K	 * \[01;31m[Kparam[m[K queue_idx   Index of queue, start from 1
[01;32m[K  1165[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1166[m[K	 * \[01;31m[Kparam[m[K queue_idx   Index of queue, start from 1
[01;32m[K  1178[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1179[m[K	 * \[01;31m[Kparam[m[K queue_idx   Index of queue, start from 1
[01;32m[K  1189[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1190[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable, 1 to enable it
[01;32m[K  1204[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1205[m[K	 * \[01;31m[Kparam[m[K uc_enable   0 to disable, 1 to enable it
[01;32m[K  1219[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1220[m[K	 * \[01;31m[Kparam[m[K idleslope_a   Value for queue A in bytes/second
[01;32m[K  1230[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1231[m[K	 * \[01;31m[Kparam[m[K idleslope_b   Value for queue B in bytes/second
[01;32m[K  1241[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1242[m[K	 * \[01;31m[Kparam[m[K reg_val  Value for screening type 1
[01;32m[K  1243[m[K	 * \[01;31m[Kparam[m[K index    Index of register
[01;32m[K  1253[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1254[m[K	 * \[01;31m[Kparam[m[K reg_val  Value for screening type 2
[01;32m[K  1255[m[K	 * \[01;31m[Kparam[m[K index    Index of register
[01;32m[K  1265[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1266[m[K	 * \[01;31m[Kparam[m[K ul_source   Interrupt source(s) to be enabled.
[01;32m[K  1267[m[K	 * \[01;31m[Kparam[m[K queue_idx   Index of queue, start from 1
[01;32m[K  1277[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1278[m[K	 * \[01;31m[Kparam[m[K ul_source   Interrupt source(s) to be disabled.
[01;32m[K  1279[m[K	 * \[01;31m[Kparam[m[K queue_idx   Index of queue, start from 1
[01;32m[K  1289[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1290[m[K	 * \[01;31m[Kparam[m[K queue_idx   Index of queue, start from 1
[01;32m[K  1302[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1303[m[K	 * \[01;31m[Kparam[m[K ethertype  Ethertype compare value
[01;32m[K  1304[m[K	 * \[01;31m[Kparam[m[K index    Index of register
[01;32m[K  1314[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K  1315[m[K	 * \[01;31m[Kparam[m[K c0reg    Compare value 0
[01;32m[K  1316[m[K	 * \[01;31m[Kparam[m[K c1reg    Compare value 1
[01;32m[K  1317[m[K	 * \[01;31m[Kparam[m[K index    Index of register

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   186[m[K	 * \[01;31m[Kparam[m[K p_gmac HW controller address.
[01;32m[K   187[m[K	 * \[01;31m[Kparam[m[K ul_retry The retry times, 0 to wait forever until completeness.
[01;32m[K   217[m[K	 * \[01;31m[Kparam[m[K p_dev Pointer to GMAC driver instance.
[01;32m[K   275[m[K	 * \[01;31m[Kparam[m[K p_dev Pointer to GMAC Driver instance.
[01;32m[K   322[m[K	 * \[01;31m[Kparam[m[K p_gmac Pointer to GMAC instance.
[01;32m[K   323[m[K	 * \[01;31m[Kparam[m[K p_gmac_dev Pointer to GMAC device instance.
[01;32m[K   324[m[K	 * \[01;31m[Kparam[m[K p_dev_mm Pointer to the GMAC memory management control block.
[01;32m[K   368[m[K	 * \[01;31m[Kparam[m[K p_gmac   Pointer to the GMAC instance.
[01;32m[K   369[m[K	 * \[01;31m[Kparam[m[K p_gmac_dev Pointer to the GMAC device instance.
[01;32m[K   370[m[K	 * \[01;31m[Kparam[m[K p_opt GMAC configure options.
[01;32m[K   555[m[K	 * \[01;31m[Kparam[m[K p_gmac_dev Pointer to the GMAC device instance.
[01;32m[K   556[m[K	 * \[01;31m[Kparam[m[K p_frame Address of the frame buffer.
[01;32m[K   557[m[K	 * \[01;31m[Kparam[m[K ul_frame_size  Length of the frame.
[01;32m[K   558[m[K	 * \[01;31m[Kparam[m[K p_rcv_size   Received frame size.
[01;32m[K   656[m[K	 * \[01;31m[Kparam[m[K p_gmac_dev Pointer to the GMAC device instance.
[01;32m[K   657[m[K	 * \[01;31m[Kparam[m[K p_buffer       Pointer to the data buffer.
[01;32m[K   658[m[K	 * \[01;31m[Kparam[m[K ul_size    Length of the frame.
[01;32m[K   733[m[K	 * \[01;31m[Kparam[m[K p_gmac_dev Pointer to the GMAC device instance.
[01;32m[K   757[m[K	 * \[01;31m[Kparam[m[K p_gmac_dev   Pointer to GMAC device instance.
[01;32m[K   758[m[K	 * \[01;31m[Kparam[m[K func_wakeup    Pointer to wakeup callback function.
[01;32m[K   759[m[K	 * \[01;31m[Kparam[m[K uc_threshold Number of free transmit descriptor before wakeup callback invoked.
[01;32m[K   785[m[K	 * \[01;31m[Kparam[m[K p_gmac_dev   Pointer to GMAC device instance.
[01;32m[K   809[m[K	 * \[01;31m[Kparam[m[K p_gmac_dev   Pointer to GMAC device instance.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   190[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K   291[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K   315[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K   329[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K   406[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K   420[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K   434[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K   448[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K   450[m[K	  * @[01;31m[Kparam[m[K PHYReg: PHY register address, is the index of one of the 32 PHY register.
[01;32m[K   455[m[K	  * @[01;31m[Kparam[m[K RegValue: PHY register value
[01;32m[K   531[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K   533[m[K	  * @[01;31m[Kparam[m[K  PHYReg: PHY register address, is the index of one of the 32 PHY register.
[01;32m[K   537[m[K	  * @[01;31m[Kparam[m[K  RegValue: the value to write
[01;32m[K   637[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K   676[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K   782[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K   784[m[K	  * @[01;31m[Kparam[m[K  macconf: MAC Configuration structure
[01;32m[K   934[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K   936[m[K	  * @[01;31m[Kparam[m[K  dmaconf: DMA Configuration structure
[01;32m[K  1037[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K  1061[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K  1063[m[K	  * @[01;31m[Kparam[m[K  err: Ethernet Init error
[01;32m[K  1300[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K  1302[m[K	  * @[01;31m[Kparam[m[K  MacAddr: The MAC address to configure
[01;32m[K  1308[m[K	  * @[01;31m[Kparam[m[K  Addr: Pointer to MAC address buffer data (6 bytes)
[01;32m[K  1334[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K  1347[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K  1360[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K  1373[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K  1386[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K  1400[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K  1414[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K  1428[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains
[01;32m[K  1442[m[K	  * @[01;31m[Kparam[m[K  heth: pointer to a ETH_HandleTypeDef structure that contains

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K  1677[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: specifies the ETH handle.
[01;32m[K  1684[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1685[m[K	  * @[01;31m[Kparam[m[K  __FLAG__: specifies the flag of TDES0 to check.
[01;32m[K  1692[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1693[m[K	  * @[01;31m[Kparam[m[K  __FLAG__: specifies the flag of RDES0 to check.
[01;32m[K  1700[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1707[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1714[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1721[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1728[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1735[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1742[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1749[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1750[m[K	  * @[01;31m[Kparam[m[K  __CHECKSUM__: specifies is the DMA Tx desc checksum insertion.
[01;32m[K  1762[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1769[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1776[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1783[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1790[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__   : ETH Handle
[01;32m[K  1791[m[K	  * @[01;31m[Kparam[m[K  __INTERRUPT__: specifies the Ethernet MAC interrupt sources to be
[01;32m[K  1802[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__   : ETH Handle
[01;32m[K  1803[m[K	  * @[01;31m[Kparam[m[K  __INTERRUPT__: specifies the Ethernet MAC interrupt sources to be
[01;32m[K  1814[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1821[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1828[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1835[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1842[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1843[m[K	  * @[01;31m[Kparam[m[K  __FLAG__: specifies the flag to check.
[01;32m[K  1856[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__   : ETH Handle
[01;32m[K  1857[m[K	  * @[01;31m[Kparam[m[K  __INTERRUPT__: specifies the Ethernet DMA interrupt sources to be
[01;32m[K  1865[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__   : ETH Handle
[01;32m[K  1866[m[K	  * @[01;31m[Kparam[m[K  __INTERRUPT__: specifies the Ethernet DMA interrupt sources to be
[01;32m[K  1874[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__   : ETH Handle
[01;32m[K  1875[m[K	  * @[01;31m[Kparam[m[K  __INTERRUPT__: specifies the interrupt pending bit to clear. @ref ETH_DMA_Interrupts
[01;32m[K  1882[m[K	* @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1883[m[K	  * @[01;31m[Kparam[m[K  __FLAG__: specifies the flag to check. @ref ETH_DMA_Flags
[01;32m[K  1890[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1891[m[K	  * @[01;31m[Kparam[m[K  __FLAG__: specifies the flag to clear. @ref ETH_DMA_Flags
[01;32m[K  1898[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1899[m[K	  * @[01;31m[Kparam[m[K  __OVERFLOW__: specifies the DMA overflow flag to check.
[01;32m[K  1909[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1910[m[K	  * @[01;31m[Kparam[m[K  __VALUE__: DMA Receive status watchdog timer register value
[01;32m[K  1918[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle.
[01;32m[K  1926[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle.
[01;32m[K  1933[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle.
[01;32m[K  1940[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle.
[01;32m[K  1947[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle.
[01;32m[K  1954[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle.
[01;32m[K  1961[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1968[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle
[01;32m[K  1975[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle.
[01;32m[K  1976[m[K	  * @[01;31m[Kparam[m[K  __FLAG__: specifies the flag to check.
[01;32m[K  1987[m[K	  * @[01;31m[Kparam[m[K   __HANDLE__: ETH Handle.
[01;32m[K  1994[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle.
[01;32m[K  2002[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle.
[01;32m[K  2009[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle.
[01;32m[K  2016[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle.
[01;32m[K  2023[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle.
[01;32m[K  2030[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle.
[01;32m[K  2037[m[K	  * @[01;31m[Kparam[m[K  __HANDLE__: ETH Handle.
[01;32m[K  2044[m[K	  * @[01;31m[Kparam[m[K   __HANDLE__: ETH Handle.
[01;32m[K  2051[m[K	  * @[01;31m[Kparam[m[K   __HANDLE__: ETH Handle.
[01;32m[K  2052[m[K	  * @[01;31m[Kparam[m[K  __INTERRUPT__: specifies the Ethernet MMC interrupt sources to be enabled or disabled.
[01;32m[K  2062[m[K	  * @[01;31m[Kparam[m[K   __HANDLE__: ETH Handle.
[01;32m[K  2063[m[K	  * @[01;31m[Kparam[m[K  __INTERRUPT__: specifies the Ethernet MMC interrupt sources to be enabled or disabled.
[01;32m[K  2073[m[K	  * @[01;31m[Kparam[m[K   __HANDLE__: ETH Handle.
[01;32m[K  2074[m[K	  * @[01;31m[Kparam[m[K  __INTERRUPT__: specifies the Ethernet MMC interrupt sources to be enabled or disabled.
[01;32m[K  2085[m[K	  * @[01;31m[Kparam[m[K   __HANDLE__: ETH Handle.
[01;32m[K  2086[m[K	  * @[01;31m[Kparam[m[K  __INTERRUPT__: specifies the Ethernet MMC interrupt sources to be enabled or disabled.

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   493[m[K	    eth_ret = R_ETHER_Control( CONTROL_POWER_ON, [01;31m[Kparam[m[K ); /* PHY mode settings, module stop cancellation */

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName/DNSgetHostByName_harness.c[39m

[01;32m[K    41[m[K	 * Abstract prvParseDNSReply proved memory save in [01;31m[KParseDNSReply[m[K.

[1;34m./test/cbmc/proofs/DNS/DNSHandlePacket/DNShandlePacket_harness.c[39m

[01;32m[K    11[m[K	The proof can be found here: https://github.com/aws/amazon-freertos/tree/master/tools/cbmc/proofs/[01;31m[KParseDNSReply[m[K */
[01;32m[K    11[m[K	The proof can be found here: https://github.com/aws/amazon-freertos/tree/master/tools/cbmc/proofs/[01;31m[KParseDNSReply[m[K */

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_a/DNSgetHostByName_a_harness.c[39m

[01;32m[K    41[m[K	 * Abstract prvParseDNSReply proved memory safe in [01;31m[KParseDNSReply[m[K.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1157[m[K	  /* Set the PCF bit according to ETH [01;31m[KPassControlFrames[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   513[m[K	  uint32_t             [01;31m[KPassControlFrames[m[K;         /*!< Sets the forwarding mode of the control frames (including unicast and multicast PAUSE frames)

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1194[m[K	   /* Set the PLT bit according to ETH [01;31m[KPauseLowThreshold[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   543[m[K	  uint32_t             [01;31m[KPauseLowThreshold[m[K;         /*!< This field configures the threshold of the PAUSE to be checked for

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1192[m[K	   /* Set the PT bit according to ETH [01;31m[KPauseTime[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   537[m[K	  uint32_t             [01;31m[KPauseTime[m[K;                 /*!< This field holds the value to be used in the Pause Time field in the transmit control frame.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   995[m[K		ETH_DMABMR_USP); /* Enable use of separate [01;31m[KPBL[m[K for Rx and Tx */
[01;32m[K  1268[m[K	    /* Set the RPBL and 4*[01;31m[KPBL[m[K bits according to ETH RxDMABurstLength value */
[01;32m[K  1269[m[K	    /* Set the [01;31m[KPBL[m[K and 4*[01;31m[KPBL[m[K bits according to ETH TxDMABurstLength value */
[01;32m[K  1280[m[K	                                          ETH_DMABMR_USP); /* Enable use of separate [01;31m[KPBL[m[K for Rx and Tx */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K  1075[m[K	 * \brief Use pre-allocated [01;31m[Kpbuf[m[K as DMA source and return the incoming packet.
[01;32m[K  1079[m[K	 * \return a [01;31m[Kpbuf[m[K filled with the received packet (including MAC header).
[01;32m[K  1094[m[K			/* Remove this [01;31m[Kpbuf[m[K from its descriptor. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   332[m[K	 * \param ulFIFOLength the size of the first [01;31m[Kpbuf[m[K to write from the [01;31m[Kpbuf[m[K chain.

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   619[m[K	 * \brief Populate the RX descriptor ring buffers with [01;31m[Kpbufs[m[K.

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   907[m[K				The macro 'ipNUMERIC_CAST' will prevent [01;31m[KPC[m[K-lint from complaining. */

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K   186[m[K	 * to and from a real network connection on the host [01;31m[KPC[m[K.  See the

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K    28[m[K	 * Used in the [01;31m[KPC[m[K/Win project to dump Ethernet packets, along with some description.

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2414[m[K	/* MISRA/[01;31m[KPC[m[K-lint doesn't like the use of unions. Here, they are a great

[1;34m./include/tcp_dump_packets.h[39m

[01;32m[K    28[m[K	 * Used in the [01;31m[KPC[m[K/Win project to dump Ethernet packets, along with some description.

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_cancel/DNSgetHostByName_cancel_harness.c[39m

[01;32m[K    47[m[K		vDNSSetCallBack( pcHostName, &pvSearchID, [01;31m[KpCallback[m[K, xTimeout, xIdentifier); /* Add an item to be able to check the cancel function if the list is non-empty. */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   349[m[K			FOnDNSEvent [01;31m[KpCallbackFunction[m[K;	/* Function to be called when the address has been found or when a timeout has beeen reached */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   154[m[K		tasks and the pthread that sends data via the [01;31m[Kpcap[m[K library.  Drop
[01;32m[K   204[m[K		the linux thread that sends via the [01;31m[Kpcap[m[K library. */
[01;32m[K   222[m[K			via the [01;31m[Kpcap[m[K library to the FreeRTOS task. */
[01;32m[K   502[m[K			/* Create event used to signal the  [01;31m[Kpcap[m[K Tx thread. */
[01;32m[K   507[m[K				/* Create the thread that handles [01;31m[Kpcap[m[K  Rx. */
[01;32m[K   519[m[K				/* Create the thread that handles [01;31m[Kpcap[m[K  Tx. */
[01;32m[K   554[m[K	 *        and the pthreads that are handling [01;31m[Kpcap[m[K as well as the FreeRTOS task
[01;32m[K   642[m[K	 * @brief infinite loop pthread to read from [01;31m[Kpcap[m[K

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K    40[m[K	/* Thread-safe circular buffers are being used to pass data to and from the [01;31m[KPCAP[m[K
[01;32m[K   116[m[K	/* _HT_ made the [01;31m[KPCAP[m[K interface number configurable through the program's
[01;32m[K   120[m[K	/* Handles to the Windows threads that handle the [01;31m[KPCAP[m[K IO. */
[01;32m[K   127[m[K	/* Circular buffers used by the [01;31m[KPCAP[m[K Win32 threads. */

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K   370[m[K	 * Abstract [01;31m[KpcApplicationHostnameHook[m[K

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   837[m[K	 * @brief remove spacces from pcMessage into [01;31m[KpcBuffer[m[K
[01;32m[K   838[m[K	 * @param [out] [01;31m[KpcBuffer[m[K buffer to fill up
[01;32m[K   839[m[K	 * @param [in] aBuflen length of [01;31m[KpcBuffer[m[K

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   834[m[K			/* Clear WD, [01;31m[KPCE[m[K, PS, TE and RE bits */
[01;32m[K  1122[m[K	  /* Clear WD, [01;31m[KPCE[m[K, PS, TE and RE bits */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1157[m[K	  /* Set the [01;31m[KPCF[m[K bit according to ETH PassControlFrames value */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   601[m[K	 * \brief Send ulLength bytes from [01;31m[KpcFrom[m[K. This copies the buffer to one of the

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   651[m[K	 * \brief Send ulLength bytes from [01;31m[KpcFrom[m[K. This copies the buffer to one of the

[1;34m./test/cbmc/proofs/DNS/DNSlookup/DNSlookup_harness.c[39m

[01;32m[K    24[m[K			char *[01;31m[KpcHostName[m[K = safeMalloc(len); /* malloc is replaced by safeMalloc */
[01;32m[K    28[m[K			if ([01;31m[KpcHostName[m[K) { /* guarding against NULL pointer */

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName/DNSgetHostByName_harness.c[39m

[01;32m[K    35[m[K	 * This proof assumes the length of [01;31m[KpcHostName[m[K is bounded by

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_a/DNSgetHostByName_a_harness.c[39m

[01;32m[K    35[m[K	 * This proof assumes the length of [01;31m[KpcHostName[m[K is bounded by

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_cancel/DNSgetHostByName_cancel_harness.c[39m

[01;32m[K    12[m[K	/* This proof assumes the length of [01;31m[KpcHostName[m[K is bounded by MAX_HOSTNAME_LEN. This also abstracts the concurrency. */ 
[01;32m[K    47[m[K		vDNSSetCallBack( [01;31m[KpcHostName[m[K, &pvSearchID, pCallback, xTimeout, xIdentifier); /* Add an item to be able to check the cancel function if the list is non-empty. */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   837[m[K	 * @brief remove spacces from [01;31m[KpcMessage[m[K into pcBuffer
[01;32m[K   840[m[K	 * @param [in] [01;31m[KpcMessage[m[K original message

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   214[m[K			char [01;31m[KpcName[m[K[ ipconfigDNS_CACHE_NAME_LENGTH ]; /* The name of the host */
[01;32m[K  1169[m[K						/* Skip the variable length [01;31m[KpcName[m[K field. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2817[m[K			case pdFREERTOS_ERRNO_EWOULDBLOCK:    [01;31m[KpcName[m[K = "EWOULDBLOCK"; break; /* same as EAGAIN */

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K   105[m[K		typedef void (* FOnDNSEvent ) ( const char * /* [01;31m[KpcName[m[K */, void * /* pvSearchID */, uint32_t /* ulIPAddress */ );

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   330[m[K	                 * received data into [01;31m[KpcNetworkBuffer[m[K->pucEthernetBuffer.  Here it

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K    86[m[K		#define	PHY_REG_16_PCSR       0x16	// 22	RW		[01;31m[KPCS[m[K Sub-Layer Configuration and Status Register
[01;32m[K   127[m[K	//#define GMII_DPPSR      19   // Digital PMA/[01;31m[KPCS[m[K Status

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   528[m[K	 * Read ul_frame_size bytes from the GMAC receive buffers to [01;31m[KpcTo[m[K.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   550[m[K	 * Read ul_frame_size bytes from the GMAC receive buffers to [01;31m[KpcTo[m[K.

[1;34m./test/unit-test/ConfigFiles/FreeRTOS_errno_TCP.h[39m

[01;32m[K    30[m[K	future versions of FreeRTOS - hence the '[01;31m[Kpd[m[K' (ProjDefs) prefix - at which time

[1;34m./include/FreeRTOS_errno_TCP.h[39m

[01;32m[K    30[m[K	future versions of FreeRTOS - hence the '[01;31m[Kpd[m[K' (ProjDefs) prefix - at which time

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   584[m[K											 		 * typedef void (* FOnTCPReceive_t) (Socket_t xSocket, void *[01;31m[KpData[m[K, size_t xLength );
[01;32m[K   607[m[K												 * typedef void (* FOnUDPReceive_t) (Socket_t xSocket, void *[01;31m[KpData[m[K, size_t xLength, struct freertos_sockaddr *pxAddr );

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   322[m[K		 *		static BaseType_t xOnTCPReceive( Socket_t xSocket, void * [01;31m[KpData[m[K, size_t uxLength )

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   279[m[K	/* SPI [01;31m[KPDC[m[K register base.
[01;32m[K   283[m[K	/* Temporary buffer for [01;31m[KPDC[m[K reception.
[01;32m[K   662[m[K	/* Check for free [01;31m[KPDC[m[K. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K    67[m[K	/* SPI [01;31m[KPDC[m[K register base. */
[01;32m[K    72[m[K	/* Temporary buffer for [01;31m[KPDC[m[K reception. */
[01;32m[K   180[m[K			/* Prepare [01;31m[KPDC[m[K transfer. */
[01;32m[K   252[m[K			/* Prepare [01;31m[KPDC[m[K transfer. */
[01;32m[K   308[m[K		/* Prepare [01;31m[KPDC[m[K transfer. */
[01;32m[K   352[m[K		/* Prepare [01;31m[KPDC[m[K transfer. */
[01;32m[K   387[m[K		/* Prepare [01;31m[KPDC[m[K transfer. */
[01;32m[K   516[m[K		/* Get pointer to UART [01;31m[KPDC[m[K register base. */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   581[m[K	    if( [01;31m[Kpdecode[m[K->status_eesr & 0x00040000 ) /* EDMAC FR (Frame Receive Event) interrupt */

[1;34m./portable/NetworkInterface/RX/ether_callback.c[39m

[01;32m[K   100[m[K	    channel = [01;31m[Kpdecode[m[K->channel;                             /* Get Ethernet channel number */

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   298[m[K	#define GMAC_ISR_PDRQFR (0x1u << 22) /**< \brief (GMAC_ISR) [01;31m[KPDelay[m[K Request Frame Received */
[01;32m[K   299[m[K	#define GMAC_ISR_PDRSFR (0x1u << 23) /**< \brief (GMAC_ISR) [01;31m[KPDelay[m[K Response Frame Received */
[01;32m[K   300[m[K	#define GMAC_ISR_PDRQFT (0x1u << 24) /**< \brief (GMAC_ISR) [01;31m[KPDelay[m[K Request Frame Transmitted */
[01;32m[K   301[m[K	#define GMAC_ISR_PDRSFT (0x1u << 25) /**< \brief (GMAC_ISR) [01;31m[KPDelay[m[K Response Frame Transmitted */
[01;32m[K   323[m[K	#define GMAC_IER_PDRQFR (0x1u << 22) /**< \brief (GMAC_IER) [01;31m[KPDelay[m[K Request Frame Received */
[01;32m[K   324[m[K	#define GMAC_IER_PDRSFR (0x1u << 23) /**< \brief (GMAC_IER) [01;31m[KPDelay[m[K Response Frame Received */
[01;32m[K   325[m[K	#define GMAC_IER_PDRQFT (0x1u << 24) /**< \brief (GMAC_IER) [01;31m[KPDelay[m[K Request Frame Transmitted */
[01;32m[K   326[m[K	#define GMAC_IER_PDRSFT (0x1u << 25) /**< \brief (GMAC_IER) [01;31m[KPDelay[m[K Response Frame Transmitted */
[01;32m[K   348[m[K	#define GMAC_IDR_PDRQFR (0x1u << 22) /**< \brief (GMAC_IDR) [01;31m[KPDelay[m[K Request Frame Received */
[01;32m[K   349[m[K	#define GMAC_IDR_PDRSFR (0x1u << 23) /**< \brief (GMAC_IDR) [01;31m[KPDelay[m[K Response Frame Received */
[01;32m[K   350[m[K	#define GMAC_IDR_PDRQFT (0x1u << 24) /**< \brief (GMAC_IDR) [01;31m[KPDelay[m[K Request Frame Transmitted */
[01;32m[K   351[m[K	#define GMAC_IDR_PDRSFT (0x1u << 25) /**< \brief (GMAC_IDR) [01;31m[KPDelay[m[K Response Frame Transmitted */
[01;32m[K   373[m[K	#define GMAC_IMR_PDRQFR (0x1u << 22) /**< \brief (GMAC_IMR) [01;31m[KPDelay[m[K Request Frame Received */
[01;32m[K   374[m[K	#define GMAC_IMR_PDRSFR (0x1u << 23) /**< \brief (GMAC_IMR) [01;31m[KPDelay[m[K Response Frame Received */
[01;32m[K   375[m[K	#define GMAC_IMR_PDRQFT (0x1u << 24) /**< \brief (GMAC_IMR) [01;31m[KPDelay[m[K Request Frame Transmitted */
[01;32m[K   376[m[K	#define GMAC_IMR_PDRSFT (0x1u << 25) /**< \brief (GMAC_IMR) [01;31m[KPDelay[m[K Response Frame Transmitted */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   932[m[K	  #define ETH_DMAPTPRXDESC_PTPMT_PDELAYREQ_ANNOUNCE        ((uint32_t)0x00000500U)  /* [01;31m[KPdelayReq[m[K message (peer-to-peer transparent clock) or Announce message (Ordinary or Boundary clock) */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   933[m[K	  #define ETH_DMAPTPRXDESC_PTPMT_PDELAYRESP_MANAG          ((uint32_t)0x00000600U)  /* [01;31m[KPdelayResp[m[K message (peer-to-peer transparent clock) or Management message (Ordinary or Boundary clock)  */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   934[m[K	  #define ETH_DMAPTPRXDESC_PTPMT_PDELAYRESPFOLLOWUP_SIGNAL ((uint32_t)0x00000700U)  /* [01;31m[KPdelayRespFollowUp[m[K message (peer-to-peer transparent clock) or Signaling message (Ordinary or Boundary clock) */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  3229[m[K				/* pxSocket is not NULL when xResult != [01;31m[KpdFAIL[m[K. */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   101[m[K	 * @return pdPASS if successful else [01;31m[KpdFAIL[m[K
[01;32m[K   338[m[K	 * @returns pdPASS on success [01;31m[KpdFAIL[m[K on failure
[01;32m[K   399[m[K	 * @returns pdPASS on success [01;31m[KpdFAIL[m[K on failure
[01;32m[K   456[m[K	 * @returns pdPASS on success or [01;31m[KpdFAIL[m[K when something goes wrong
[01;32m[K   490[m[K	 * @return pdPASS on success otherwise [01;31m[KpdFAIL[m[K
[01;32m[K   556[m[K	 * @returns pdPASS when successful and [01;31m[KpdFAIL[m[K when there is a failure

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   485[m[K			/* EMAC initialisation failed, return [01;31m[KpdFAIL[m[K. */
[01;32m[K   498[m[K				/* For now [01;31m[KpdFAIL[m[K will be returned. But prvEMACHandlerTask() is running

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   119[m[K	 * Return Value : pdPASS, [01;31m[KpdFAIL[m[K

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K   294[m[K						xReturn = [01;31m[KpdFAIL[m[K; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
[01;32m[K   309[m[K						xReturn = [01;31m[KpdFAIL[m[K; /* we did not consume or release the buffer */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1056[m[K				/* The parameter [01;31m[KpdFALSE[m[K indicates that the reply was not expected. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   208[m[K	 * the header. This function returns pdTRUE or [01;31m[KpdFALSE[m[K depending on whether the
[01;32m[K  1599[m[K			else  /* bAfter == [01;31m[KpdFALSE[m[K, connection is closed. */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   253[m[K						"ucValid == [01;31m[KpdFALSE[m[K". */
[01;32m[K   271[m[K					doesn't match.  Might be an entry with ucValid=[01;31m[KpdFALSE[m[K, waiting
[01;32m[K   298[m[K				Shouldn't we test for xARPCache[ x ].ucValid == [01;31m[KpdFALSE[m[K here ? */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K  1062[m[K			xARPHadIPClash = [01;31m[KpdFALSE[m[K;	   /* reset flag that shows if have ARP clash. */

[1;34m./test/unit-test/ConfigFiles/portmacro.h[39m

[01;32m[K    82[m[K	/* Simulated interrupts return [01;31m[KpdFALSE[m[K if no context switch should be performed,

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   675[m[K								pdTRUE /*xClearOnExit*/, [01;31m[KpdFALSE[m[K /*xWaitAllBits*/, socketDONT_BLOCK );
[01;32m[K   697[m[K					pdTRUE /*xClearOnExit*/, [01;31m[KpdFALSE[m[K /*xWaitAllBits*/, xRemainingTime );
[01;32m[K  1005[m[K				( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, [01;31m[KpdFALSE[m[K /*xWaitAllBits*/, portMAX_DELAY );
[01;32m[K  2340[m[K					( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_CONNECT, pdTRUE /*xClearOnExit*/, [01;31m[KpdFALSE[m[K /*xWaitAllBits*/, xRemainingTime );
[01;32m[K  2468[m[K					( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_ACCEPT, pdTRUE /*xClearOnExit*/, [01;31m[KpdFALSE[m[K /*xWaitAllBits*/, xRemainingTime );
[01;32m[K  2563[m[K									pdTRUE /*xClearOnExit*/, [01;31m[KpdFALSE[m[K /*xWaitAllBits*/, socketDONT_BLOCK );
[01;32m[K  2590[m[K						pdTRUE /*xClearOnExit*/, [01;31m[KpdFALSE[m[K /*xWaitAllBits*/, xRemainingTime );
[01;32m[K  2911[m[K						pdTRUE /*xClearOnExit*/, [01;31m[KpdFALSE[m[K /*xWaitAllBits*/, xRemainingTime );

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K    69[m[K					if( ( tx_busy[ us_tx_tail ] != [01;31m[KpdFALSE[m[K ) &&
[01;32m[K   109[m[K						tx_busy[ us_tx_tail ] = [01;31m[KpdFALSE[m[K;

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   142[m[K	 * @return pdTRUE if successful else [01;31m[KpdFALSE[m[K

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   165[m[K	 * Return Value : pdTRUE, [01;31m[KpdFALSE[m[K
[01;32m[K   471[m[K	 * Return Value : pdTRUE, [01;31m[KpdFALSE[m[K

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   282[m[K	/* Simple set to pdTRUE or [01;31m[KpdFALSE[m[K depending on whether the network is up or

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   464[m[K	 * returns [01;31m[KpdFALSE[m[K.
[01;32m[K   760[m[K	 * [01;31m[KpdFALSE[m[K.

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    47[m[K	    uint8_t ucValid;			/* pdTRUE: xMACAddress is valid, [01;31m[KpdFALSE[m[K: waiting for ARP reply */

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   343[m[K	[01;31m[KpdFALSE[m[K.

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  3287[m[K				/* Return [01;31m[KpdPASS[m[K to tell that the network buffer is 'consumed'. */
[01;32m[K  3291[m[K		/* [01;31m[KpdPASS[m[K being returned means the buffer has been consumed. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  2051[m[K			/* lint: ucOctet has been set because xResult == [01;31m[KpdPASS[m[K. */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   101[m[K	 * @return [01;31m[KpdPASS[m[K if successful else pdFAIL
[01;32m[K   338[m[K	 * @returns [01;31m[KpdPASS[m[K on success pdFAIL on failure
[01;32m[K   399[m[K	 * @returns [01;31m[KpdPASS[m[K on success pdFAIL on failure
[01;32m[K   456[m[K	 * @returns [01;31m[KpdPASS[m[K on success or pdFAIL when something goes wrong
[01;32m[K   490[m[K	 * @return [01;31m[KpdPASS[m[K on success otherwise pdFAIL
[01;32m[K   556[m[K	 * @returns [01;31m[KpdPASS[m[K when successful and pdFAIL when there is a failure

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   119[m[K	 * Return Value : [01;31m[KpdPASS[m[K, pdFAIL

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K   316[m[K			if( xReturn == [01;31m[KpdPASS[m[K )	/*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
[01;32m[K   318[m[K			/* xReturn is still [01;31m[KpdPASS[m[K. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   759[m[K	 * zero.  Return [01;31m[KpdPASS[m[K if the message was sent successfully, otherwise return

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   141[m[K	    /*  - the Harmony MAC driver: TCPIP_MAC_PACKET->[01;31m[KpDSeg[m[K->segLoad */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   463[m[K		call the handler.  Returns [01;31m[KpdTRUE[m[K if uxIdentifier was recognised. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   208[m[K	 * the header. This function returns [01;31m[KpdTRUE[m[K or pdFALSE depending on whether the
[01;32m[K   619[m[K				prvTCPPrepareConnect() prepares 'xPacket' and returns [01;31m[KpdTRUE[m[K if

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   107[m[K	 * Return [01;31m[KpdTRUE[m[K only if pxSocket is valid and bound, as far as can be
[01;32m[K   675[m[K								[01;31m[KpdTRUE[m[K /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, socketDONT_BLOCK );
[01;32m[K   697[m[K					[01;31m[KpdTRUE[m[K /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
[01;32m[K  1005[m[K				( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, [01;31m[KpdTRUE[m[K /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
[01;32m[K  2340[m[K					( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_CONNECT, [01;31m[KpdTRUE[m[K /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
[01;32m[K  2468[m[K					( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_ACCEPT, [01;31m[KpdTRUE[m[K /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
[01;32m[K  2563[m[K									[01;31m[KpdTRUE[m[K /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, socketDONT_BLOCK );
[01;32m[K  2590[m[K						[01;31m[KpdTRUE[m[K /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
[01;32m[K  2911[m[K						[01;31m[KpdTRUE[m[K /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
[01;32m[K  3547[m[K		/* Returns [01;31m[KpdTRUE[m[K if TCP socket is connected. */

[1;34m./FreeRTOS_Stream_Buffer.c[39m

[01;32m[K   128[m[K	 * if 'xPeek' is [01;31m[KpdTRUE[m[K, or if 'uxOffset' is non-zero, the 'lTail' pointer will

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K    62[m[K					tx_busy[ us_tx_head ] = [01;31m[KpdTRUE[m[K;
[01;32m[K   177[m[K						rx_ready[ rxHead ] = [01;31m[KpdTRUE[m[K;

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   142[m[K	 * @return [01;31m[KpdTRUE[m[K if successful else pdFALSE

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K   214[m[K		/* Only return [01;31m[KpdTRUE[m[K when the Link Status of the PHY is high, otherwise the

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   165[m[K	 * Return Value : [01;31m[KpdTRUE[m[K, pdFALSE
[01;32m[K   471[m[K	 * Return Value : [01;31m[KpdTRUE[m[K, pdFALSE
[01;32m[K   588[m[K	        /* If xHigherPriorityTaskWoken is now set to [01;31m[KpdTRUE[m[K then a context switch

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   282[m[K	/* Simple set to [01;31m[KpdTRUE[m[K or pdFALSE depending on whether the network is up or
[01;32m[K   305[m[K	/* Set to [01;31m[KpdTRUE[m[K when the IP task is ready to start processing packets. */
[01;32m[K  1483[m[K				/* parameter [01;31m[KpdTRUE[m[K: the buffer must be released once

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   463[m[K	 * Returns [01;31m[KpdTRUE[m[K if the IP task has been created and is initialised.  Otherwise
[01;32m[K   794[m[K	/* Returns [01;31m[KpdTRUE[m[K is this function is called from the IP-task */

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    47[m[K	    uint8_t ucValid;			/* [01;31m[KpdTRUE[m[K: xMACAddress is valid, pdFALSE: waiting for ARP reply */
[01;32m[K   128[m[K			return [01;31m[KpdTRUE[m[K;

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   323[m[K	/* Return [01;31m[KpdTRUE[m[K if the IPv4 address is a multicast address. */
[01;32m[K   342[m[K	and return [01;31m[KpdTRUE[m[K. When the random number generator is broken, it shall return

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   256[m[K		/* Returns [01;31m[KpdTRUE[m[K if TCP socket is connected. */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    60[m[K					bIsForRx : 1;		/* [01;31m[KpdTRUE[m[K if segment is used for reception */
[01;32m[K   187[m[K	 * it will return [01;31m[KpdTRUE[m[K */

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K   224[m[K	 * xPeek -		If set to [01;31m[KpdTRUE[m[K the data will remain in the buffer.

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   150[m[K	 * Define a maximum [01;31m[Kperdiod[m[K of time (ms) to leave a TCP-socket unattended.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   525[m[K	  uint32_t             MulticastFramesFilter;     /*!< Selects the Multicast Frames filter mode: None/HashTableFilter/[01;31m[KPerfectFilter[m[K/PerfectHashTableFilter.
[01;32m[K   528[m[K	  uint32_t             UnicastFramesFilter;       /*!< Selects the Unicast Frames filter mode: HashTableFilter/[01;31m[KPerfectFilter[m[K/PerfectHashTableFilter.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   525[m[K	  uint32_t             MulticastFramesFilter;     /*!< Selects the Multicast Frames filter mode: None/HashTableFilter/PerfectFilter/[01;31m[KPerfectHashTableFilter[m[K.
[01;32m[K   528[m[K	  uint32_t             UnicastFramesFilter;       /*!< Selects the Unicast Frames filter mode: HashTableFilter/PerfectFilter/[01;31m[KPerfectHashTableFilter[m[K.

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   458[m[K	 * \brief Enable [01;31m[KPFC[m[K priority-based pause reception.
[01;32m[K   473[m[K	 * \brief Transmit [01;31m[KPFC[m[K priority-based pause reception.

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K    86[m[K	  RwReg   GMAC_TPFCP;      /**< \brief (Gmac Offset: 0x0C4) Transmit [01;31m[KPFC[m[K Pause Register */
[01;32m[K   185[m[K	#define GMAC_NCR_ENPBPR (0x1u << 16) /**< \brief (GMAC_NCR) Enable [01;31m[KPFC[m[K Priority-based Pause Reception */
[01;32m[K   186[m[K	#define GMAC_NCR_TXPBPF (0x1u << 17) /**< \brief (GMAC_NCR) Transmit [01;31m[KPFC[m[K Priority-based Pause Frame */
[01;32m[K   473[m[K	/* -------- GMAC_TPFCP : (GMAC Offset: 0x0C4) Transmit [01;31m[KPFC[m[K Pause Register -------- */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   461[m[K	 * \brief Enable [01;31m[KPFC[m[K priority-based pause reception.
[01;32m[K   476[m[K	 * \brief Transmit [01;31m[KPFC[m[K priority-based pause reception.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   456[m[K	 * \brief Enable [01;31m[KPFC[m[K priority-based pause reception.
[01;32m[K   471[m[K	 * \brief Transmit [01;31m[KPFC[m[K priority-based pause reception.

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1338[m[K			{ MK_PAIR( [01;31m[KPFNZ[m[K  ) }, /* Enable pause frame received interrupt. */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1341[m[K			{ MK_PAIR( [01;31m[KPFNZ[m[K  ) }, /* Enable pause frame received interrupt. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K  1410[m[K			{ MK_PAIR( [01;31m[KPFNZ[m[K  ) }, /* Enable pause frame received interrupt. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   120[m[K	#define   GLOBAL_SOFTWARE_RESET       (0x0001)    /* Global soft reset ([01;31m[KPHY[m[K, MAC, QMU) */
[01;32m[K   380[m[K	 * [01;31m[KPHY[m[K Control Registers
[01;32m[K   384[m[K	#define   PHY_RESET                   (0x0001)    /* Reset [01;31m[KPHY[m[K */
[01;32m[K   387[m[K	#define   PHY_SPEED_100MBIT           (0x2000)     /* Force [01;31m[KPHY[m[K 100Mbps */
[01;32m[K   388[m[K	#define   PHY_AUTO_NEG_ENABLE         (0x1000)     /* Enable [01;31m[KPHY[m[K auto-negotiation */
[01;32m[K   389[m[K	#define   PHY_POWER_DOWN              (0x0800)     /* Set [01;31m[KPHY[m[K power-down */
[01;32m[K   390[m[K	#define   PHY_AUTO_NEG_RESTART        (0x0200)     /* Restart [01;31m[KPHY[m[K auto-negotiation */
[01;32m[K   391[m[K	#define   PHY_FULL_DUPLEX             (0x0100)     /* Force [01;31m[KPHY[m[K in full duplex mode */
[01;32m[K   392[m[K	#define   PHY_HP_MDIX                 (0x0020)     /* Set [01;31m[KPHY[m[K in HP auto MDI-X mode */
[01;32m[K   395[m[K	#define   PHY_TRANSMIT_DISABLE        (0x0002)     /* Disable [01;31m[KPHY[m[K transmit */
[01;32m[K   396[m[K	#define   PHY_LED_DISABLE             (0x0001)     /* Disable [01;31m[KPHY[m[K LED */
[01;32m[K   406[m[K	#define   PHY_LINK_UP                 (0x0004)     /* [01;31m[KPHY[m[K link is up */
[01;32m[K   407[m[K	#define   PHY_EXTENDED_CAPABILITY     (0x0001)     /* [01;31m[KPHY[m[K extended register capable */
[01;32m[K   438[m[K	#define   PORT_REMOTE_LOOPBACK        (0x0200)     /* Enable remote loopback at [01;31m[KPHY[m[K */
[01;32m[K   449[m[K	#define   PORT_FORCE_100_MBIT         (0x0040)     /* Force [01;31m[KPHY[m[K 100Mbps */
[01;32m[K   450[m[K	#define   PORT_FORCE_FULL_DUPLEX      (0x0020)     /* Force [01;31m[KPHY[m[K in full duplex mode */
[01;32m[K   458[m[K	#define   PORT_HP_MDIX                (0x8000)     /* Set [01;31m[KPHY[m[K in HP auto MDI-X mode */
[01;32m[K   466[m[K	#define   PORT_STATUS_LINK_GOOD       (0x0020)     /* [01;31m[KPHY[m[K link is up */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   195[m[K		/* Check if the LinkSStatus in the [01;31m[KPHY[m[K is still high after 15 seconds of not
[01;32m[K   201[m[K		/* Check if the LinkSStatus in the [01;31m[KPHY[m[K is still low every second. */
[01;32m[K   322[m[K	/* A copy of [01;31m[KPHY[m[K register 1: 'PHY_REG_01_BMSR' */
[01;32m[K   348[m[K			/* Wait at most 5 seconds for a Link Status in the [01;31m[KPHY[m[K. */
[01;32m[K   369[m[K		/* This function returns true if the Link Status in the [01;31m[KPHY[m[K is high. */
[01;32m[K   429[m[K	/* This Micrel has numbered it's [01;31m[KPHY[m[K registers in a different way.
[01;32m[K  1242[m[K				/* A packet was received. No need to check for the [01;31m[KPHY[m[K status now,

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K    62[m[K		/* Check if the LinkSStatus in the [01;31m[KPHY[m[K is still high after 15 seconds of not
[01;32m[K    68[m[K		/* Check if the LinkSStatus in the [01;31m[KPHY[m[K is still low every second. */
[01;32m[K    76[m[K	/* Naming and numbering of [01;31m[KPHY[m[K registers. */
[01;32m[K   136[m[K	/* A copy of [01;31m[KPHY[m[K register 1: 'PHY_REG_01_BMSR' */
[01;32m[K   214[m[K		/* Only return pdTRUE when the Link Status of the [01;31m[KPHY[m[K is high, otherwise the
[01;32m[K   429[m[K				/* A packet was received. No need to check for the [01;31m[KPHY[m[K status now,

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_physpeed.c[39m

[01;32m[K   204[m[K		/* Advertise [01;31m[KPHY[m[K speed of 100 and 10 Mbps */
[01;32m[K   215[m[K		/* Read [01;31m[KPHY[m[K control and status registers is successful. */
[01;32m[K   428[m[K			/* Dont advertise [01;31m[KPHY[m[K speed of 1000 Mbps */
[01;32m[K   430[m[K			/* Dont advertise [01;31m[KPHY[m[K speed of 10 Mbps */
[01;32m[K   437[m[K			/* Dont advertise [01;31m[KPHY[m[K speed of 1000 Mbps */
[01;32m[K   440[m[K			/* Dont advertise [01;31m[KPHY[m[K speed of 100 Mbps */

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K     2[m[K	 * Handling of Ethernet [01;31m[KPHY[m[K's
[01;32m[K     3[m[K	 * [01;31m[KPHY[m[K's communicate with an EMAC either through
[01;32m[K     5[m[K	 * The EMAC can poll for [01;31m[KPHY[m[K ports on 32 different addresses. Each of the [01;31m[KPHY[m[K ports
[01;32m[K    35[m[K		/* Check if the LinkStatus in the [01;31m[KPHY[m[K is still high after 15 seconds of not
[01;32m[K    41[m[K		/* Check if the LinkStatus in the [01;31m[KPHY[m[K is still low every second. */
[01;32m[K    60[m[K	/* Naming and numbering of basic [01;31m[KPHY[m[K registers. */
[01;32m[K    67[m[K	/* Naming and numbering of extended [01;31m[KPHY[m[K registers. */
[01;32m[K    68[m[K	#define PHYREG_10_PHYSTS			0x10U	/* 16 [01;31m[KPHY[m[K status register Offset */
[01;32m[K    69[m[K	#define	phyREG_19_PHYCR				0x19U	/* 25 RW [01;31m[KPHY[m[K Control Register */
[01;32m[K    70[m[K	#define	phyREG_1F_PHYSPCS			0x1FU	/* 31 RW [01;31m[KPHY[m[K Special Control Status */
[01;32m[K    78[m[K	#define phyBMCR_RESET				0x8000U	/* Reset the [01;31m[KPHY[m[K. */
[01;32m[K    80[m[K	/* Bit fields for 'phyREG_19_PHYCR', the '[01;31m[KPHY[m[K Control Register'. */
[01;32m[K    88[m[K	#define phyPHYSTS_LINK_STATUS		0x0001U	/* [01;31m[KPHY[m[K Link mask */
[01;32m[K    89[m[K	#define phyPHYSTS_SPEED_STATUS		0x0002U	/* [01;31m[KPHY[m[K Speed mask */
[01;32m[K    90[m[K	#define phyPHYSTS_DUPLEX_STATUS		0x0004U	/* [01;31m[KPHY[m[K Duplex mask */
[01;32m[K   117[m[K	/* Send a reset command to a set of [01;31m[KPHY[m[K-ports. */
[01;32m[K   137[m[K				/* Most [01;31m[KPHY[m[K's have a 1F_PHYSPCS */
[01;32m[K   159[m[K				/* Most [01;31m[KPHY[m[K's do not have a 19_PHYCR */
[01;32m[K   167[m[K	/* Initialise the struct and assign a [01;31m[KPHY[m[K-read and -write function. */
[01;32m[K   177[m[K	/* Discover all [01;31m[KPHY[m[K's connected by polling 32 indexes ( zero-based ) */
[01;32m[K   189[m[K			/* A valid [01;31m[KPHY[m[K id can not be all zeros or all ones. */
[01;32m[K   219[m[K	/* Send a reset command to a set of [01;31m[KPHY[m[K-ports. */
[01;32m[K   227[m[K		/* A bit-mask of [01;31m[KPHY[m[K ports that are ready. */
[01;32m[K   361[m[K		/* Send a reset command to a set of [01;31m[KPHY[m[K-ports. */
[01;32m[K   415[m[K				/* Read [01;31m[KPHY[m[K Control register. */
[01;32m[K   435[m[K				/* update [01;31m[KPHY[m[K Control Register. */
[01;32m[K   452[m[K	The [01;31m[KPHY[m[K register phyREG_00_BMCR will be set for every connected [01;31m[KPHY[m[K that matches
[01;32m[K   610[m[K				/* 31 RW [01;31m[KPHY[m[K Special Control Status */
[01;32m[K   667[m[K			/* A packet was received. No need to check for the [01;31m[KPHY[m[K status now,
[01;32m[K   683[m[K			/* Frequent checking the [01;31m[KPHY[m[K Link Status can affect for the performance of Ethernet controller.
[01;32m[K   710[m[K				/* The link status is high, so don't poll the [01;31m[KPHY[m[K too often. */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K     4[m[K	 * \brief KSZ8051MNL (Ethernet [01;31m[KPHY[m[K) driver for SAM.
[01;32m[K    56[m[K	#define GMII_PHYID1      0x02   // [01;31m[KPHY[m[K Idendifier 1
[01;32m[K    57[m[K	#define GMII_PHYID2      0x03   // [01;31m[KPHY[m[K Idendifier 2
[01;32m[K    80[m[K		#define	PHY_REG_10_PHYSTS     0x10	// 16	RO		[01;31m[KPHY[m[K Status Register
[01;32m[K    89[m[K		#define	PHY_REG_19_PHYCR      0x19	// 25	RW		[01;31m[KPHY[m[K Control Register
[01;32m[K   136[m[K	#define GMII_PCR1       0x1E   // [01;31m[KPHY[m[K Control 1
[01;32m[K   137[m[K	#define GMII_PCR2       0x1F   // [01;31m[KPHY[m[K Control 2
[01;32m[K   182[m[K	// Bit definitions: GMII_PHYID1 0x02 [01;31m[KPHY[m[K Idendifier 1
[01;32m[K   183[m[K	// Bit definitions: GMII_PHYID2 0x03 [01;31m[KPHY[m[K Idendifier 2
[01;32m[K   215[m[K	 * \brief Perform a HW initialization to the [01;31m[KPHY[m[K and set up clocks.
[01;32m[K   217[m[K	 * This should be called only once to initialize the [01;31m[KPHY[m[K pre-settings.
[01;32m[K   218[m[K	 * The [01;31m[KPHY[m[K address is the reset status of CRS, RXD[3:0] (the GmacPins' pullups).
[01;32m[K   225[m[K	 * \param uc_phy_addr [01;31m[KPHY[m[K address.
[01;32m[K   238[m[K	 * \param uc_phy_addr [01;31m[KPHY[m[K address.
[01;32m[K   239[m[K	 * \param uc_apply_setting_flag Set to 0 to not apply the [01;31m[KPHY[m[K configurations, else to apply.
[01;32m[K   248[m[K	 * \brief Issue an auto negotiation of the [01;31m[KPHY[m[K.
[01;32m[K   251[m[K	 * \param uc_phy_addr [01;31m[KPHY[m[K address.
[01;32m[K   258[m[K	 * \brief Issue a SW reset to reset all registers of the [01;31m[KPHY[m[K.
[01;32m[K   261[m[K	 * \param uc_phy_addr [01;31m[KPHY[m[K address.

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K    55[m[K		/* Check if the LinkSStatus in the [01;31m[KPHY[m[K is still high after 15 seconds of not
[01;32m[K    61[m[K		/* Check if the LinkSStatus in the [01;31m[KPHY[m[K is still low every second. */
[01;32m[K   131[m[K	/* A copy of [01;31m[KPHY[m[K register 1: 'PHY_REG_01_BMSR' */
[01;32m[K   135[m[K	/* ethernet_phy_addr: the address of the [01;31m[KPHY[m[K in use.
[01;32m[K   216[m[K			/* Wait at most 5 seconds for a Link Status in the [01;31m[KPHY[m[K. */
[01;32m[K   246[m[K		/* This function returns true if the Link Status in the [01;31m[KPHY[m[K is high. */
[01;32m[K   326[m[K		/* Contact the Ethernet [01;31m[KPHY[m[K and store it's address in 'ethernet_phy_addr' */
[01;32m[K   608[m[K				/* A packet was received. No need to check for the [01;31m[KPHY[m[K status now,

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   792[m[K	 * \brief Check if [01;31m[KPHY[m[K is idle.
[01;32m[K   796[m[K	 * \return  1 if [01;31m[KPHY[m[K is idle.
[01;32m[K   940[m[K	 * \brief Execute [01;31m[KPHY[m[K maintenance command.
[01;32m[K   943[m[K	 * \param uc_phy_addr   [01;31m[KPHY[m[K address.
[01;32m[K   964[m[K	 * \brief Get [01;31m[KPHY[m[K maintenance data returned.
[01;32m[K   968[m[K	 * \return Get [01;31m[KPHY[m[K data.
[01;32m[K  1110[m[K	 * - [01;31m[KPHY[m[K component KSZ8051MNL is used
[01;32m[K  1119[m[K	 * - [01;31m[KPHY[m[K operation max retry count is 1000000
[01;32m[K  1128[m[K	 * -# \ref ksz8051mnl_ethernet_phy_group "[01;31m[KPHY[m[K component (KSZ8051MNL)"
[01;32m[K  1212[m[K	 * -# Define maximum retry time for a [01;31m[KPHY[m[K read/write operation.
[01;32m[K  1242[m[K	 * -# Configure the [01;31m[KPHY[m[K maintainance interface.
[01;32m[K  1267[m[K	 * -# Initialize the [01;31m[KPHY[m[K component:

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K    73[m[K	  RwReg   GMAC_MAN;        /**< \brief (Gmac Offset: 0x034) [01;31m[KPHY[m[K Maintenance Register */
[01;32m[K   230[m[K	#define GMAC_NSR_IDLE (0x1u << 2) /**< \brief (GMAC_NSR) [01;31m[KPHY[m[K Management Logic Idle */
[01;32m[K   377[m[K	/* -------- GMAC_MAN : (GMAC Offset: 0x034) [01;31m[KPHY[m[K Maintenance Register -------- */
[01;32m[K   379[m[K	#define GMAC_MAN_DATA_Msk (0xffffu << GMAC_MAN_DATA_Pos) /**< \brief (GMAC_MAN) [01;31m[KPHY[m[K Data */
[01;32m[K   388[m[K	#define GMAC_MAN_PHYA_Msk (0x1fu << GMAC_MAN_PHYA_Pos) /**< \brief (GMAC_MAN) [01;31m[KPHY[m[K Address */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K     4[m[K	 * \brief API driver for KSZ8051MNL [01;31m[KPHY[m[K component.
[01;32m[K    65[m[K	 * \defgroup ksz8051mnl_ethernet_phy_group [01;31m[KPHY[m[K component (KSZ8051MNL)
[01;32m[K    68[m[K	 * features of the [01;31m[KPHY[m[K.
[01;32m[K    79[m[K	/* Max [01;31m[KPHY[m[K number */
[01;32m[K    82[m[K	/* Ethernet [01;31m[KPHY[m[K operation max retry count */
[01;32m[K    85[m[K	/* Ethernet [01;31m[KPHY[m[K operation timeout */
[01;32m[K    89[m[K	 * \brief Find a valid [01;31m[KPHY[m[K Address ( from addrStart to 31 ).
[01;32m[K    92[m[K	 * \param uc_phy_addr [01;31m[KPHY[m[K address.
[01;32m[K    93[m[K	 * \param uc_start_addr Start address of the [01;31m[KPHY[m[K to be searched.
[01;32m[K    95[m[K	 * \return 0xFF when no valid [01;31m[KPHY[m[K address is found.
[01;32m[K   114[m[K		/* Check the current [01;31m[KPHY[m[K address */
[01;32m[K   141[m[K	 * \brief Perform a HW initialization to the [01;31m[KPHY[m[K and set up clocks.
[01;32m[K   143[m[K	 * This should be called only once to initialize the [01;31m[KPHY[m[K pre-settings.
[01;32m[K   144[m[K	 * The [01;31m[KPHY[m[K address is the reset status of CRS, RXD[3:0] (the emacPins' pullups).
[01;32m[K   151[m[K	 * \param uc_phy_addr [01;31m[KPHY[m[K address.
[01;32m[K   169[m[K		/* Check [01;31m[KPHY[m[K Address */
[01;32m[K   187[m[K	 * \param uc_phy_addr [01;31m[KPHY[m[K address.
[01;32m[K   188[m[K	 * \param uc_apply_setting_flag Set to 0 to not apply the [01;31m[KPHY[m[K configurations, else to apply.
[01;32m[K   206[m[K			/* Disable [01;31m[KPHY[m[K management and start the GMAC transfer */
[01;32m[K   212[m[K			/* Disable [01;31m[KPHY[m[K management and start the GMAC transfer */
[01;32m[K   219[m[K			/* Disable [01;31m[KPHY[m[K management and start the GMAC transfer */
[01;32m[K   230[m[K			/* Disable [01;31m[KPHY[m[K management and start the GMAC transfer */
[01;32m[K   268[m[K	 * \brief Issue an auto negotiation of the [01;31m[KPHY[m[K.
[01;32m[K   271[m[K	 * \param uc_phy_addr [01;31m[KPHY[m[K address.
[01;32m[K   297[m[K		ul_value |= (uint32_t)GMII_ISOLATE; /* Electrically isolate [01;31m[KPHY[m[K */
[01;32m[K   411[m[K	 * \brief Issue a SW reset to reset all registers of the [01;31m[KPHY[m[K.
[01;32m[K   414[m[K	 * \param uc_phy_addr [01;31m[KPHY[m[K address.

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   795[m[K	 * \brief Check if [01;31m[KPHY[m[K is idle.
[01;32m[K   799[m[K	 * \return  1 if [01;31m[KPHY[m[K is idle.
[01;32m[K   943[m[K	 * \brief Execute [01;31m[KPHY[m[K maintenance command.
[01;32m[K   946[m[K	 * \param uc_phy_addr   [01;31m[KPHY[m[K address.
[01;32m[K   967[m[K	 * \brief Get [01;31m[KPHY[m[K maintenance data returned.
[01;32m[K   971[m[K	 * \return Get [01;31m[KPHY[m[K data.
[01;32m[K  1113[m[K	 * - [01;31m[KPHY[m[K component KSZ8051MNL is used
[01;32m[K  1122[m[K	 * - [01;31m[KPHY[m[K operation max retry count is 1000000
[01;32m[K  1131[m[K	 * -# \ref ksz8051mnl_ethernet_phy_group "[01;31m[KPHY[m[K component (KSZ8051MNL)"
[01;32m[K  1215[m[K	 * -# Define maximum retry time for a [01;31m[KPHY[m[K read/write operation.
[01;32m[K  1245[m[K	 * -# Configure the [01;31m[KPHY[m[K maintainance interface.
[01;32m[K  1270[m[K	 * -# Initialize the [01;31m[KPHY[m[K component:

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   157[m[K	 * \brief Wait [01;31m[KPHY[m[K operation to be completed.
[01;32m[K   180[m[K			/* Block the task to allow other tasks to execute while the [01;31m[KPHY[m[K
[01;32m[K   340[m[K	 * \brief Read the [01;31m[KPHY[m[K register.
[01;32m[K   343[m[K	 * \param uc_phy_address [01;31m[KPHY[m[K address.
[01;32m[K   362[m[K	 * \brief Write the [01;31m[KPHY[m[K register.
[01;32m[K   365[m[K	 * \param uc_phy_address [01;31m[KPHY[m[K Address.

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K    71[m[K		if something has to be done, mostly checking if the [01;31m[KPHY[m[K has a
[01;32m[K   140[m[K	 * Access functions to the [01;31m[KPHY[m[K's: read() and write() to be used by
[01;32m[K   183[m[K	/* A copy of [01;31m[KPHY[m[K register 1: 'PHY_REG_01_BMSR' */
[01;32m[K   208[m[K	/* For local use only: describe the [01;31m[KPHY[m[K's properties: */
[01;32m[K   237[m[K	/* All [01;31m[KPHY[m[K handling code has now been separated from the NetworkInterface.c,

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   791[m[K	 * \brief Check if [01;31m[KPHY[m[K is idle.
[01;32m[K   795[m[K	 * \return  1 if [01;31m[KPHY[m[K is idle.
[01;32m[K   951[m[K	 * \brief Execute [01;31m[KPHY[m[K maintenance command.
[01;32m[K   954[m[K	 * \param uc_phy_addr   [01;31m[KPHY[m[K address.
[01;32m[K   975[m[K	 * \brief Get [01;31m[KPHY[m[K maintenance data returned.
[01;32m[K   979[m[K	 * \return Get [01;31m[KPHY[m[K data.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   184[m[K	 * \brief Wait [01;31m[KPHY[m[K operation to be completed.
[01;32m[K   207[m[K			/* Block the task to allow other tasks to execute while the [01;31m[KPHY[m[K

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K    52[m[K		/* Check if the LinkSStatus in the [01;31m[KPHY[m[K is still high after 15 seconds of not
[01;32m[K    58[m[K		/* Check if the LinkSStatus in the [01;31m[KPHY[m[K is still low every second. */
[01;32m[K   195[m[K	/* A copy of [01;31m[KPHY[m[K register 1: 'PHY_REG_01_BMSR' */
[01;32m[K  1040[m[K				/* A packet was received. No need to check for the [01;31m[KPHY[m[K status now,

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K   101[m[K	        /* Timer task to monitor [01;31m[KPHY[m[K Link status */

[1;34m./portable/NetworkInterface/M487/m480_eth.h[39m

[01;32m[K    46[m[K	#define MII_PHYADDR         0x19        /* [01;31m[KPHY[m[K address                 */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K    93[m[K	 * Most users will want a [01;31m[KPHY[m[K that negotiates about
[01;32m[K   134[m[K	and the index of the [01;31m[KPHY[m[K in use ( between 0 and 31 ). */
[01;32m[K   275[m[K	/* For local use only: describe the [01;31m[KPHY[m[K's properties: */
[01;32m[K   499[m[K				and it will keep on checking the [01;31m[KPHY[m[K and set 'ulLinkStatusMask' when necessary. */
[01;32m[K   748[m[K				/* The [01;31m[KPHY[m[K has no Link Status, packet shall be dropped. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K    55[m[K	      (#) Communicate with external [01;31m[KPHY[m[K device:
[01;32m[K    56[m[K	         (##) Read a specific register from the [01;31m[KPHY[m[K
[01;32m[K   276[m[K		/* Initialise the MACB and set all [01;31m[KPHY[m[K properties */
[01;32m[K   358[m[K	        (+) Read from an External [01;31m[KPHY[m[K register
[01;32m[K   360[m[K	        (+) Write to an External [01;31m[KPHY[m[K register
[01;32m[K   447[m[K	  * @brief  Reads a [01;31m[KPHY[m[K register
[01;32m[K   450[m[K	  * @param PHYReg: [01;31m[KPHY[m[K register address, is the index of one of the 32 [01;31m[KPHY[m[K register.
[01;32m[K   454[m[K	  *                   More [01;31m[KPHY[m[K register could be read depending on the used [01;31m[KPHY[m[K
[01;32m[K   455[m[K	  * @param RegValue: [01;31m[KPHY[m[K register value
[01;32m[K   486[m[K			tmpreg |= ( ( ( uint32_t )heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA );    /* Set the [01;31m[KPHY[m[K device address   */
[01;32m[K   487[m[K			tmpreg |= ( ( ( uint32_t )PHYReg << 6 ) & ETH_MACMIIAR_MR );                   /* Set the [01;31m[KPHY[m[K register address */
[01;32m[K   530[m[K	  * @brief  Writes to a [01;31m[KPHY[m[K register.
[01;32m[K   533[m[K	  * @param  PHYReg: [01;31m[KPHY[m[K register address, is the index of one of the 32 [01;31m[KPHY[m[K register.
[01;32m[K   536[m[K	  *             More [01;31m[KPHY[m[K register could be written depending on the used [01;31m[KPHY[m[K
[01;32m[K   568[m[K			tmpreg |= ( ( ( uint32_t ) heth->Init.PhyAddress << 11 ) & ETH_MACMIIAR_PA ); /* Set the [01;31m[KPHY[m[K device address */
[01;32m[K   569[m[K			tmpreg |= ( ( ( uint32_t ) PHYReg << 6 ) & ETH_MACMIIAR_MR );                 /* Set the [01;31m[KPHY[m[K register address */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   433[m[K	  uint32_t             AutoNegotiation;           /*!< Selects or not the AutoNegotiation mode for the external [01;31m[KPHY[m[K
[01;32m[K   444[m[K	  uint16_t             PhyAddress;                /*!< Ethernet [01;31m[KPHY[m[K address.
[01;32m[K  2206[m[K	/* Communication with [01;31m[KPHY[m[K functions*/

[1;34m./portable/NetworkInterface/include/phyHandling.h[39m

[01;32m[K     2[m[K	 * Handling of Ethernet [01;31m[KPHY[m[K's
[01;32m[K     3[m[K	 * [01;31m[KPHY[m[K's communicate with an EMAC either through
[01;32m[K     5[m[K	 * The EMAC can poll for [01;31m[KPHY[m[K ports on 32 different addresses. Each of the [01;31m[KPHY[m[K ports
[01;32m[K    20[m[K		/* There can be at most 32 [01;31m[KPHY[m[K ports, but in most cases there are 4 or less. */
[01;32m[K    24[m[K	/* A generic user-provided function that reads from the [01;31m[KPHY[m[K-port at 'xAddress'( 0-based ). A 16-bit value shall be stored in
[01;32m[K    25[m[K	  '*pulValue'. xRegister is the register number ( 0 .. 31 ). In fact all [01;31m[KPHY[m[K registers are 16-bit.
[01;32m[K    30[m[K	   [01;31m[KPHY[m[K-port at 'xAddress' ( 0-based ). xRegister is the register number ( 0 .. 31 ).
[01;32m[K    76[m[K	/* ID's of supported [01;31m[KPHY[m[K's : */
[01;32m[K    90[m[K	/* Initialise the struct and assign a [01;31m[KPHY[m[K-read and -write function. */
[01;32m[K    93[m[K	/* Discover all [01;31m[KPHY[m[K's connected by polling 32 indexes ( zero-based ) */
[01;32m[K    96[m[K	/* Send a reset command to the connected [01;31m[KPHY[m[K ports and send configuration. */
[01;32m[K    99[m[K	/* Give a command to start auto negotiation on a set of [01;31m[KPHY[m[K port's. */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K    72[m[K	/* Check if the LinkSStatus in the [01;31m[KPHY[m[K is still high after 2 seconds of not
[01;32m[K    78[m[K	    /* Check if the LinkSStatus in the [01;31m[KPHY[m[K is still low every second. */
[01;32m[K   129[m[K	         * Ethernet hardware, initialize DMA descriptors, and perform a [01;31m[KPHY[m[K auto-negotiation to obtain a network link.
[01;32m[K   191[m[K	        /* As the [01;31m[KPHY[m[K Link Status is low, it makes no sense trying to deliver a packet. */
[01;32m[K   276[m[K	    /* Some variables related to monitoring the [01;31m[KPHY[m[K. */
[01;32m[K   393[m[K	            /* A packet was received. No need to check for the [01;31m[KPHY[m[K status now,
[01;32m[K   455[m[K	 * Description  : Function will be called when the Link Status of the [01;31m[Kphy[m[K has changed ( see ether_callback.c )
[01;32m[K   493[m[K	    eth_ret = R_ETHER_Control( CONTROL_POWER_ON, param ); /* [01;31m[KPHY[m[K mode settings, module stop cancellation */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   406[m[K				/* Value of [01;31m[KPhyAddress[m[K doesn't matter, will be probed for. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   486[m[K			tmpreg |= ( ( ( uint32_t )heth->Init.[01;31m[KPhyAddress[m[K << 11) & ETH_MACMIIAR_PA );    /* Set the PHY device address   */
[01;32m[K   568[m[K			tmpreg |= ( ( ( uint32_t ) heth->Init.[01;31m[KPhyAddress[m[K << 11 ) & ETH_MACMIIAR_PA ); /* Set the PHY device address */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   444[m[K	  uint16_t             [01;31m[KPhyAddress[m[K;                /*!< Ethernet PHY address.

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   141[m[K	 * [01;31m[KphyHandling[m[K.c.
[01;32m[K   238[m[K	see "../Common/[01;31m[KphyHandling[m[K.c". */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   450[m[K	  * @param [01;31m[KPHYReg[m[K: PHY register address, is the index of one of the 32 PHY register.
[01;32m[K   487[m[K			tmpreg |= ( ( ( uint32_t )[01;31m[KPHYReg[m[K << 6 ) & ETH_MACMIIAR_MR );                   /* Set the PHY register address */
[01;32m[K   533[m[K	  * @param  [01;31m[KPHYReg[m[K: PHY register address, is the index of one of the 32 PHY register.
[01;32m[K   569[m[K			tmpreg |= ( ( ( uint32_t ) [01;31m[KPHYReg[m[K << 6 ) & ETH_MACMIIAR_MR );                 /* Set the PHY register address */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   383[m[K	#define REG_PHY_RESET              (0xD8)       /* [01;31m[KPHYRR[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   184[m[K	#define PHY_REG_02_PHYSID1         0x02 // [01;31m[KPHYS[m[K ID 1
[01;32m[K   185[m[K	#define PHY_REG_03_PHYSID2         0x03 // [01;31m[KPHYS[m[K ID 2

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_physpeed.c[39m

[01;32m[K    95[m[K	//#define PHY_REG_02_PHYSID1         0x02 // [01;31m[KPHYS[m[K ID 1
[01;32m[K    96[m[K	//#define PHY_REG_03_PHYSID2         0x03 // [01;31m[KPHYS[m[K ID 2

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K    63[m[K	#define phyREG_02_PHYSID1			0x02U	/* [01;31m[KPHYS[m[K ID 1 */
[01;32m[K    64[m[K	#define phyREG_03_PHYSID2			0x03U	/* [01;31m[KPHYS[m[K ID 2 */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K    72[m[K		#define PHY_REG_02_PHYSID1         0x02 // [01;31m[KPHYS[m[K ID 1
[01;32m[K    73[m[K		#define PHY_REG_03_PHYSID2         0x03 // [01;31m[KPHYS[m[K ID 2

[1;34m./portable/NetworkInterface/M487/m480_eth.h[39m

[01;32m[K    34[m[K	#define MII_PHYSID1         0x02        /* [01;31m[KPHYS[m[K ID 1                   */
[01;32m[K    35[m[K	#define MII_PHYSID2         0x03        /* [01;31m[KPHYS[m[K ID 2                   */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   604[m[K			/* Clear the [01;31m[KPIO[m[K interrupt flags. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   122[m[K		/* Configure [01;31m[KPIO[m[K clock. */
[01;32m[K   125[m[K		/* Adjust [01;31m[KPIO[m[K debounce filter parameters, uses 10 Hz filter. */
[01;32m[K   128[m[K		/* Initialize [01;31m[KPIO[m[K interrupt handlers, see [01;31m[KPIO[m[K definition in board.h. */
[01;32m[K   136[m[K		/* Enable [01;31m[KPIO[m[K interrupts. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1248[m[K	 * -# Enable [01;31m[KPIO[m[K configurations for GMAC:

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1251[m[K	 * -# Enable [01;31m[KPIO[m[K configurations for GMAC:

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   120[m[K	//	pio_set_input([01;31m[KPIOA[m[K, PIO_PA11_IDX, PIO_PULLUP);

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K    57[m[K	// PTP source clock is 84MHz (Real chip using [01;31m[KPLL[m[K). Each tick is 11.90ns

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1194[m[K	   /* Set the [01;31m[KPLT[m[K bit according to ETH PauseLowThreshold value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1161[m[K	  /* Set the [01;31m[KPM[m[K, HMC and HPF bits according to ETH MulticastFramesFilter value */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K   127[m[K	//#define GMII_DPPSR      19   // Digital [01;31m[KPMA[m[K/PCS Status

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K   334[m[K	        macObject = TCPIP_HOSTS_CONFIGURATION[ 0 ].[01;31m[KpMacObject[m[K; /* the MAC object we use */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1127[m[K	 * -# \ref pmc_group "Power Management Controller ([01;31m[Kpmc[m[K)"
[01;32m[K  1250[m[K	 * -# Enable [01;31m[KPMC[m[K clock for GMAC:

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1130[m[K	 * -# \ref pmc_group "Power Management Controller ([01;31m[Kpmc[m[K)"
[01;32m[K  1253[m[K	 * -# Enable [01;31m[KPMC[m[K clock for GMAC:

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   355[m[K	#define   PME_DELAY_ENABLE            (0x4000)    /* Enable the [01;31m[KPME[m[K output pin assertion delay */
[01;32m[K   356[m[K	#define   PME_ACTIVE_HIGHT            (0x1000)    /* [01;31m[KPME[m[K output pin is active high */
[01;32m[K   357[m[K	#define   PME_FROM_WKFRAME            (0x0800)    /* [01;31m[KPME[m[K asserted when wake-up frame is detected */
[01;32m[K   358[m[K	#define   PME_FROM_MAGIC              (0x0400)    /* [01;31m[KPME[m[K asserted when magic packet is detected */
[01;32m[K   359[m[K	#define   PME_FROM_LINKUP             (0x0200)    /* [01;31m[KPME[m[K asserted when link up is detected */
[01;32m[K   360[m[K	#define   PME_FROM_ENERGY             (0x0100)    /* [01;31m[KPME[m[K asserted when energy is detected */
[01;32m[K   361[m[K	#define   PME_EVENT_MASK              (0x0F00)    /* [01;31m[KPME[m[K asserted event mask */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   354[m[K	#define REG_POWER_CNTL             (0xD4)       /* [01;31m[KPMECR[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K  1512[m[K	/** @defgroup ETH_PMT_Flags ETH [01;31m[KPMT[m[K Flags
[01;32m[K  1549[m[K	#define ETH_MAC_FLAG_PMT     ((uint32_t)0x00000008U)  /*!< [01;31m[KPMT[m[K flag (on MAC) */
[01;32m[K  1558[m[K	#define ETH_DMA_FLAG_PMT               ((uint32_t)0x10000000U)  /*!< [01;31m[KPMT[m[K interrupt (on DMA) */
[01;32m[K  1589[m[K	#define ETH_MAC_IT_PMT       ((uint32_t)0x00000008U)  /*!< [01;31m[KPMT[m[K interrupt (on MAC) */
[01;32m[K  1598[m[K	#define ETH_DMA_IT_PMT       ((uint32_t)0x10000000U)  /*!< [01;31m[KPMT[m[K interrupt (on DMA) */
[01;32m[K  1795[m[K	  *     @arg ETH_MAC_IT_PMT : [01;31m[KPMT[m[K interrupt
[01;32m[K  1807[m[K	  *     @arg ETH_MAC_IT_PMT : [01;31m[KPMT[m[K interrupt
[01;32m[K  1849[m[K	  *     @arg ETH_MAC_FLAG_PMT  : [01;31m[KPMT[m[K flag
[01;32m[K  1974[m[K	  * @brief  Checks whether the specified Ethernet [01;31m[KPMT[m[K flag is set or not.
[01;32m[K  1981[m[K	  * @retval The new state of Ethernet [01;31m[KPMT[m[K Flag (SET or RESET).

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   647[m[K	 *          sleep byt the [01;31m[Kposix[m[K port

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   326[m[K		/* Make [01;31m[Kpostive[m[K to define the maximum number of packets which will be buffered

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   356[m[K		/* Make [01;31m[Kpostive[m[K to define the maximum number of packets which will be buffered

[1;34m./portable/NetworkInterface/M487/m480_eth.h[39m

[01;32m[K    57[m[K	#define BMCR_PDOWN              0x0800  /* [01;31m[KPowerdown[m[K the DP83840       */

[1;34m./portable/NetworkInterface/RX/ether_callback.c[39m

[01;32m[K    90[m[K	* Arguments    : [01;31m[Kpparam[m[K -

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   168[m[K	            *[01;31m[Kppkt[m[K = [01;31m[KpPkt[m[K; /* store the packet it comes from */

[1;34m./tools/tcp_mem_stats.c[39m

[01;32m[K   406[m[K		// name;object;size;Heap;[01;31m[KPpointer[m[K;HeapMin;HeapDur;Comment

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   508[m[K					/* See [01;31m[KPR[m[K #53 on github/freertos/freertos */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   258[m[K		/* Promiscuous flag ([01;31m[KPR[m[K) and Receive All flag (RA) set to zero.  The

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1160[m[K	  /* Set the [01;31m[KPR[m[K bit according to ETH PromiscuousMode value */
[01;32m[K  1272[m[K	    /* Set the [01;31m[KPR[m[K and DA bits according to ETH DMAArbitration value */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K   193[m[K	 * to a [01;31m[Kpre[m[K-determinable value. */

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K   194[m[K	 * to a [01;31m[Kpre[m[K-determinable value. */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K  1075[m[K	 * \brief Use [01;31m[Kpre[m[K-allocated pbuf as DMA source and return the incoming packet.
[01;32m[K  1091[m[K			/* Fetch [01;31m[Kpre[m[K-allocated buffer */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K   525[m[K	        { /* if unspecified we use the factory [01;31m[Kpre[m[K-programmed address */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K   217[m[K	 * This should be called only once to initialize the PHY [01;31m[Kpre[m[K-settings.

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K   143[m[K	 * This should be called only once to initialize the PHY [01;31m[Kpre[m[K-settings.

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   183[m[K	 * The macro will be called in the [01;31m[Kprintf[m[K() style. Users can define

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K   248[m[K					/* _RB_ Can [01;31m[Kprintf[m[K() be called from an interrupt?  (comment
[01;32m[K   252[m[K					So the [01;31m[Kprintf[m[K()is OK here. */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   261[m[K				a little.  [01;31m[Kprintf[m[K() can only be used here because the network is not
[01;32m[K   656[m[K		 * [01;31m[Kprintf[m[K and other blocking operations without being interruped and put in

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K   257[m[K					a little.  [01;31m[Kprintf[m[K() can only be used here because the network is not

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   186[m[K	 * The macro will be called in the [01;31m[Kprintf[m[K() style. Users can define

[1;34m./test/cbmc/include/cbmc.h[39m

[01;32m[K    62[m[K	/* CBMC debugging: [01;31m[Kprintfs[m[K for expressions */
[01;32m[K    67[m[K	/* CBMC debugging: [01;31m[Kprintfs[m[K for pointer expressions */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   229[m[K	 * The method using memcpy is slower and [01;31m[Kprobaly[m[K uses more RAM memory.

[1;34m./test/cbmc/proofs/DHCP/DHCPProcess/DHCPProcess_harness.c[39m

[01;32m[K    62[m[K	 * Abstract prvProcessDHCPReplies proved memory safe in [01;31m[KProcessDHCPReplies[m[K.

[1;34m./test/cbmc/proofs/prvProcessEthernetPacket/prvProcessEthernetPacket_harness.c[39m

[01;32m[K    45[m[K	/* This function has been proved to be memory safe in another proof (in parsing/[01;31m[KProcessIPPacket[m[K). Hence we assume it to be correct here. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOS_errno_TCP.h[39m

[01;32m[K    30[m[K	future versions of FreeRTOS - hence the 'pd' ([01;31m[KProjDefs[m[K) prefix - at which time

[1;34m./include/FreeRTOS_errno_TCP.h[39m

[01;32m[K    30[m[K	future versions of FreeRTOS - hence the 'pd' ([01;31m[KProjDefs[m[K) prefix - at which time

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   245[m[K		/* Temporary solution: eventually the defines below will appear in 'Source\include\[01;31m[Kprojdefs[m[K.h' */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1160[m[K	  /* Set the PR bit according to ETH [01;31m[KPromiscuousMode[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   522[m[K	  uint32_t             [01;31m[KPromiscuousMode[m[K;           /*!< Selects or not the Promiscuous Mode

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   233[m[K	/* The function '[01;31m[KprvAllowIPPacket[m[K()' checks if a packets should be processed. */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   437[m[K					belonging to a different the netmask.  [01;31m[KprvCacheLookup[m[K() returned a hit, so

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   492[m[K						the next time [01;31m[KprvCheckNetworkTimers[m[K() is called. */

[1;34m./test/cbmc/proofs/parsing/ProcessReceivedTCPPacket/ProcessReceivedTCPPacket_harness.c[39m

[01;32m[K    14[m[K	It also assumes prvSingleStepTCPHeaderOptions, [01;31m[KprvCheckOptions[m[K, prvTCPPrepareSend,

[1;34m./test/cbmc/proofs/ParseDNSReply/ParseDNSReply_harness.c[39m

[01;32m[K    58[m[K	   * fails because [01;31m[KprvCheckOptions[m[K called prvReadNameField with the

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2166[m[K	 * [01;31m[KprvCheckRxData[m[K(): called from prvTCPHandleState()
[01;32m[K  2806[m[K	 *		[01;31m[KprvCheckRxData[m[K()

[1;34m./test/cbmc/include/queue_init.h[39m

[01;32m[K    13[m[K	/* Using [01;31m[KprvCopyDataToQueue[m[K together with prvNotifyQueueSetContainer
[01;32m[K    15[m[K	   and a sepearted proof on [01;31m[KprvCopyDataToQueue[m[K to deal with it.

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName/DNSgetHostByName_harness.c[39m

[01;32m[K    33[m[K	 *   [01;31m[KprvCreateDNSMessage[m[K
[01;32m[K    62[m[K	 * Abstract [01;31m[KprvCreateDNSMessage[m[K

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_a/DNSgetHostByName_a_harness.c[39m

[01;32m[K    33[m[K	 *   [01;31m[KprvCreateDNSMessage[m[K
[01;32m[K    62[m[K	 * Abstract [01;31m[KprvCreateDNSMessage[m[K

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   257[m[K	 * Function Name: [01;31m[KprvEMACDeferredInterruptHandlerTask[m[K ()
[01;32m[K   428[m[K	} /* End of function [01;31m[KprvEMACDeferredInterruptHandlerTask[m[K() */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   934[m[K				/* Tell [01;31m[KprvEMACHandlerTask[m[K that RX packets are available. */

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K    55[m[K		/* Define the priority of the task [01;31m[KprvEMACHandlerTask[m[K(). */

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   186[m[K			/* let the [01;31m[KprvEMACHandlerTask[m[K know that there was an RX event. */
[01;32m[K   188[m[K			/* Only an RX interrupt can wakeup [01;31m[KprvEMACHandlerTask[m[K. */
[01;32m[K   198[m[K			/* let the [01;31m[KprvEMACHandlerTask[m[K know that there was an RX event. */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K    70[m[K		/* The task '[01;31m[KprvEMACHandlerTask[m[K()' will wake-up every 100 ms, to see
[01;32m[K   265[m[K			/* let the [01;31m[KprvEMACHandlerTask[m[K know that there was an RX event. */
[01;32m[K   267[m[K			/* Only an RX interrupt can wakeup [01;31m[KprvEMACHandlerTask[m[K. */
[01;32m[K   288[m[K			/* let the [01;31m[KprvEMACHandlerTask[m[K know that there was an TX event. */
[01;32m[K   290[m[K			/* Wakeup [01;31m[KprvEMACHandlerTask[m[K. */

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K   318[m[K	    /* Wakeup the [01;31m[KprvEMACHandlerTask[m[K. */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   314[m[K		/* Wakeup the [01;31m[KprvEMACHandlerTask[m[K. */
[01;32m[K   333[m[K		/* Wakeup the [01;31m[KprvEMACHandlerTask[m[K. */
[01;32m[K   498[m[K				/* For now pdFAIL will be returned. But [01;31m[KprvEMACHandlerTask[m[K() is running

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   150[m[K	 * Check if hostname is already known. If not, call [01;31m[KprvGetHostByName[m[K() to send a DNS request.
[01;32m[K   584[m[K						/* [01;31m[KprvGetHostByName[m[K will be called to start a DNS lookup. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2499[m[K	 * [01;31m[KprvHandleEstablished[m[K(): called from prvTCPHandleState()
[01;32m[K  2810[m[K	 *		[01;31m[KprvHandleEstablished[m[K()

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  3151[m[K						/* [01;31m[KprvHandleListen[m[K() will either return a newly created socket

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2381[m[K	 * [01;31m[KprvHandleSynReceived[m[K(): called from prvTCPHandleState()
[01;32m[K  2809[m[K	 *		[01;31m[KprvHandleSynReceived[m[K()

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   272[m[K					/* See if [01;31m[KprvInitialiseDHCP[m[K() has creates a socket. */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   454[m[K	 * Function Name: [01;31m[KprvLinkStatusChange[m[K ()

[1;34m./test/cbmc/include/queue_init.h[39m

[01;32m[K    13[m[K	/* Using prvCopyDataToQueue together with [01;31m[KprvNotifyQueueSetContainer[m[K
[01;32m[K    16[m[K	   As [01;31m[KprvNotifyQueueSetContainer[m[K is disabled if configUSE_QUEUE_SETS != 1,

[1;34m./test/cbmc/proofs/ParseDNSReply/ParseDNSReply_harness.c[39m

[01;32m[K   110[m[K	 * Proof of [01;31m[KprvParseDNSReply[m[K

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName/DNSgetHostByName_harness.c[39m

[01;32m[K    31[m[K	 *   [01;31m[KprvParseDNSReply[m[K proved memory safe elsewhere
[01;32m[K    41[m[K	 * Abstract [01;31m[KprvParseDNSReply[m[K proved memory save in ParseDNSReply.

[1;34m./test/cbmc/proofs/DNS/DNSHandlePacket/DNShandlePacket_harness.c[39m

[01;32m[K    10[m[K	/* Function [01;31m[KprvParseDNSReply[m[K is proven to be correct separately.

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_a/DNSgetHostByName_a_harness.c[39m

[01;32m[K    31[m[K	 *   [01;31m[KprvParseDNSReply[m[K proved memory safe elsewhere
[01;32m[K    41[m[K	 * Abstract [01;31m[KprvParseDNSReply[m[K proved memory safe in ParseDNSReply.

[1;34m./test/cbmc/proofs/DHCP/DHCPProcess/DHCPProcess_harness.c[39m

[01;32m[K    62[m[K	 * Abstract [01;31m[KprvProcessDHCPReplies[m[K proved memory safe in ProcessDHCPReplies.

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName/DNSgetHostByName_harness.c[39m

[01;32m[K    90[m[K	    __CPROVER_assume( len > 0 ); /* [01;31m[KprvProcessDNSCache[m[K strcmp */

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_a/DNSgetHostByName_a_harness.c[39m

[01;32m[K   101[m[K	    __CPROVER_assume( len > 0 ); /* [01;31m[KprvProcessDNSCache[m[K strcmp */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   749[m[K				The validity of `xDataLength` [01;31m[KprvProcessIPPacket[m[K has been confirmed
[01;32m[K   750[m[K				in '[01;31m[KprvProcessIPPacket[m[K()'. */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K   287[m[K					/* The value of 'xDataLength' was proven to be at least the size of a UDP packet in [01;31m[KprvProcessIPPacket[m[K(). */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1881[m[K			/* Checksum has already been checked before in [01;31m[KprvProcessIPPacket[m[K */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   539[m[K				calling [01;31m[KprvProcessNetworkDownEvent[m[K(). */

[1;34m./test/cbmc/proofs/ReadNameField/ReadNameField_harness.c[39m

[01;32m[K    38[m[K	/* [01;31m[KprvReadNameField[m[K is defined in this configuration */
[01;32m[K    42[m[K	/* [01;31m[KprvReadNameField[m[K is not defined in this configuration, stub it. */
[01;32m[K    56[m[K	 * Proof of [01;31m[KprvReadNameField[m[K function contract

[1;34m./test/cbmc/proofs/ParseDNSReply/ParseDNSReply_harness.c[39m

[01;32m[K    32[m[K	 * Abstraction of [01;31m[KprvReadNameField[m[K proved in ReadNameField
[01;32m[K    57[m[K	  /* This precondition in the function contract for [01;31m[KprvReadNameField[m[K
[01;32m[K    58[m[K	   * fails because prvCheckOptions called [01;31m[KprvReadNameField[m[K with the

[1;34m./test/cbmc/proofs/CheckOptionsOuter/CheckOptionsOuter_harness.c[39m

[01;32m[K    34[m[K	 * accessed by the preconditions of [01;31m[KprvReadSackOption[m[K, and give the

[1;34m./test/cbmc/proofs/CheckOptionsInner/CheckOptionsInner_harness.c[39m

[01;32m[K    32[m[K	 * Proof of [01;31m[KprvReadSackOption[m[K function contract

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   171[m[K		/* gmac_handler() may call [01;31m[KprvRxCallback[m[K() which may change
[01;32m[K   332[m[K		/* The GMAC driver will call a hook [01;31m[KprvRxCallback[m[K(), which

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2811[m[K	 *		[01;31m[KprvSendData[m[K()

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2808[m[K	 *		[01;31m[KprvSetOptions[m[K()

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   623[m[K				/* About to send a SYN packet.  Call [01;31m[KprvSetSynAckOptions[m[K() to set

[1;34m./test/cbmc/proofs/CheckOptions/CheckOptions_harness.c[39m

[01;32m[K    32[m[K	 * accessed by the preconditions of [01;31m[KprvSingleStepTCPHeaderOptions[m[K, and

[1;34m./test/cbmc/proofs/CheckOptionsOuter/CheckOptionsOuter_harness.c[39m

[01;32m[K    64[m[K	 * Proof of [01;31m[KprvSingleStepTCPHeaderOptions[m[K function contract

[1;34m./test/cbmc/proofs/parsing/ProcessReceivedTCPPacket/ProcessReceivedTCPPacket_harness.c[39m

[01;32m[K    14[m[K	It also assumes [01;31m[KprvSingleStepTCPHeaderOptions[m[K, prvCheckOptions, prvTCPPrepareSend,

[1;34m./test/cbmc/proofs/SkipNameField/SkipNameField_harness.c[39m

[01;32m[K    30[m[K	 * Proof of [01;31m[KprvSkipNameField[m[K function contract

[1;34m./test/cbmc/proofs/ParseDNSReply/ParseDNSReply_harness.c[39m

[01;32m[K    82[m[K	 * Abstraction of [01;31m[KprvSkipNameField[m[K proved in SkipNameField

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2240[m[K	 * [01;31m[KprvStoreRxData[m[K(): called from prvTCPHandleState()
[01;32m[K  2807[m[K	 *		[01;31m[KprvStoreRxData[m[K()

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2068[m[K	 * [01;31m[KprvTCPHandleFin[m[K() will be called to handle socket closure

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   263[m[K	 * Called from [01;31m[KprvTCPHandleState[m[K().  Find the TCP payload data and check and
[01;32m[K   269[m[K	 * Called from [01;31m[KprvTCPHandleState[m[K().  Check if the payload data may be accepted.
[01;32m[K   281[m[K	 * Called from [01;31m[KprvTCPHandleState[m[K() as long as the TCP status is eSYN_RECEIVED to
[01;32m[K   288[m[K	 * Called from [01;31m[KprvTCPHandleState[m[K() as long as the TCP status is eESTABLISHED.
[01;32m[K   294[m[K	 * Called from [01;31m[KprvTCPHandleState[m[K().  There is data to be sent.
[01;32m[K  2166[m[K	 * prvCheckRxData(): called from [01;31m[KprvTCPHandleState[m[K()
[01;32m[K  2240[m[K	 * prvStoreRxData(): called from [01;31m[KprvTCPHandleState[m[K()
[01;32m[K  2381[m[K	 * prvHandleSynReceived(): called from [01;31m[KprvTCPHandleState[m[K()
[01;32m[K  2499[m[K	 * prvHandleEstablished(): called from [01;31m[KprvTCPHandleState[m[K()
[01;32m[K  2666[m[K	 * Called from [01;31m[KprvTCPHandleState[m[K().  There is data to be sent.  If
[01;32m[K  2801[m[K	 * [01;31m[KprvTCPHandleState[m[K()
[01;32m[K  3054[m[K	 *		[01;31m[KprvTCPHandleState[m[K()
[01;32m[K  3260[m[K				/* In [01;31m[KprvTCPHandleState[m[K() the incoming messages will be handled
[01;32m[K  3264[m[K					/* [01;31m[KprvTCPHandleState[m[K() has sent a message, see if there are more to

[1;34m./test/cbmc/proofs/parsing/ProcessReceivedTCPPacket/ProcessReceivedTCPPacket_harness.c[39m

[01;32m[K    15[m[K	[01;31m[KprvTCPHandleState[m[K and prvTCPReturnPacket are correct. These functions are

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   619[m[K				[01;31m[KprvTCPPrepareConnect[m[K() prepares 'xPacket' and returns pdTRUE if

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   670[m[K			/* [01;31m[KprvTCPPrepareSend[m[K() might allocate a network buffer if there is data
[01;32m[K  2651[m[K				/* [01;31m[KprvTCPPrepareSend[m[K might allocate a bigger network buffer, if
[01;32m[K  3055[m[K	 *			[01;31m[KprvTCPPrepareSend[m[K()

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K    40[m[K	/* This proof assumes that [01;31m[KprvTCPPrepareSend[m[K and prvTCPReturnPacket are correct.

[1;34m./test/cbmc/proofs/parsing/ProcessReceivedTCPPacket/ProcessReceivedTCPPacket_harness.c[39m

[01;32m[K    14[m[K	It also assumes prvSingleStepTCPHeaderOptions, prvCheckOptions, [01;31m[KprvTCPPrepareSend[m[K,

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   482[m[K	 *			[01;31m[KprvTCPReturnPacket[m[K()		// Prepare for returning
[01;32m[K   482[m[K	 *			[01;31m[KprvTCPReturnPacket[m[K()		// Prepare for returning
[01;32m[K  1068[m[K			[01;31m[KprvTCPReturnPacket[m[K(). */
[01;32m[K  1081[m[K			/* Addresses and ports will be stored swapped because [01;31m[KprvTCPReturnPacket[m[K
[01;32m[K  3056[m[K	 *				[01;31m[KprvTCPReturnPacket[m[K()
[01;32m[K  3059[m[K	 *			[01;31m[KprvTCPReturnPacket[m[K()		// Prepare for returning
[01;32m[K  3059[m[K	 *			[01;31m[KprvTCPReturnPacket[m[K()		// Prepare for returning

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K    40[m[K	/* This proof assumes that prvTCPPrepareSend and [01;31m[KprvTCPReturnPacket[m[K are correct.

[1;34m./test/cbmc/proofs/parsing/ProcessReceivedTCPPacket/ProcessReceivedTCPPacket_harness.c[39m

[01;32m[K    15[m[K	prvTCPHandleState and [01;31m[KprvTCPReturnPacket[m[K are correct. These functions are

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   479[m[K	 *		xTCPSocketCheck()				// Either send a delayed ACK or call [01;31m[KprvTCPSendPacket[m[K()
[01;32m[K   479[m[K	 *		xTCPSocketCheck()				// Either send a delayed ACK or call [01;31m[KprvTCPSendPacket[m[K()
[01;32m[K   480[m[K	 *		[01;31m[KprvTCPSendPacket[m[K()				// Either send a SYN or call prvTCPSendRepeated ( regular messages )
[01;32m[K   480[m[K	 *		[01;31m[KprvTCPSendPacket[m[K()				// Either send a SYN or call prvTCPSendRepeated ( regular messages )
[01;32m[K   539[m[K					the	delayed	ACK.  The function [01;31m[KprvTCPSendPacket[m[K() will send the
[01;32m[K   578[m[K	 * [01;31m[KprvTCPSendPacket[m[K() will be called when the socket time-out has been reached.

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   168[m[K	 * Either sends a SYN or calls [01;31m[KprvTCPSendRepeated[m[K (for regular messages).
[01;32m[K   480[m[K	 *		prvTCPSendPacket()				// Either send a SYN or call [01;31m[KprvTCPSendRepeated[m[K ( regular messages )
[01;32m[K   480[m[K	 *		prvTCPSendPacket()				// Either send a SYN or call [01;31m[KprvTCPSendRepeated[m[K ( regular messages )
[01;32m[K   481[m[K	 *		[01;31m[KprvTCPSendRepeated[m[K()			// Send at most 8 messages on a row
[01;32m[K   481[m[K	 *		[01;31m[KprvTCPSendRepeated[m[K()			// Send at most 8 messages on a row
[01;32m[K   592[m[K			/* [01;31m[KprvTCPSendRepeated[m[K() will only create a network buffer if necessary,
[01;32m[K   658[m[K	 * [01;31m[KprvTCPSendRepeated[m[K will try to send a series of messages, as long as there is
[01;32m[K  3058[m[K	 *		[01;31m[KprvTCPSendRepeated[m[K()

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   862[m[K				/* When pxSocket is NULL, this function is called by [01;31m[KprvTCPSendReset[m[K()

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   339[m[K	 * The copying takes place in [01;31m[KprvTCPSocketCopy[m[K.

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   361[m[K	/* [01;31m[KprvTCPSocketIsActive[m[K() returns true if the socket must be checked.

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   344[m[K	 * [01;31m[KprvTCPStatusAgeCheck[m[K() will see if the socket has been in a non-connected

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   887[m[K					xTxCallback(ul_tx_status_flag, (void*)p_tx_td->addr); // Function call [01;31m[KprvTxCallback[m[K

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  2664[m[K			} /* [01;31m[KprvValidSocket[m[K() */

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K   408[m[K				[01;31m[KprvWinPcapRecvThread[m[K,	/* Pointer to thread function. */

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K   420[m[K				[01;31m[KprvWinPcapSendThread[m[K,	/* Pointer to thread function. */

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K   246[m[K				/* The Windows thread '[01;31m[KprvWritePackets[m[K()' had received enough packets.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   834[m[K			/* Clear WD, PCE, [01;31m[KPS[m[K, TE and RE bits */
[01;32m[K  1122[m[K	  /* Clear WD, PCE, [01;31m[KPS[m[K, TE and RE bits */

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K   153[m[K	    //SendData: [01;31m[Kpt[m[K = pxDescriptor->pucBuffer, length = pxDescriptor->xDataLength

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1192[m[K	   /* Set the [01;31m[KPT[m[K bit according to ETH PauseTime value */

[1;34m./portable/NetworkInterface/esp32/NetworkInterface.c[39m

[01;32m[K     1[m[K	// Copyright 2018 Espressif Systems (Shanghai) [01;31m[KPTE[m[K LTD

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   154[m[K		tasks and the [01;31m[Kpthread[m[K that sends data via the pcap library.  Drop
[01;32m[K   221[m[K			/* The buffer used to pass received data from the [01;31m[Kpthread[m[K that receives
[01;32m[K   642[m[K	 * @brief infinite loop [01;31m[Kpthread[m[K to read from pcap
[01;32m[K   655[m[K		/* Disable signals to this thread since this is a Linux [01;31m[Kpthread[m[K to be able to
[01;32m[K   705[m[K			used to pass data from the FreeRTOS simulator into this [01;31m[Kpthread[m[K?*/
[01;32m[K   744[m[K			/* Does the circular buffer used to pass data from the [01;31m[Kpthread[m[K thread that

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   554[m[K	 *        and the [01;31m[Kpthreads[m[K that are handling pcap as well as the FreeRTOS task

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   142[m[K	  RoReg   GMAC_EFTS;       /**< \brief (Gmac Offset: 0x1E0) [01;31m[KPTP[m[K Event Frame Transmitted Seconds */
[01;32m[K   143[m[K	  RoReg   GMAC_EFTN;       /**< \brief (Gmac Offset: 0x1E4) [01;31m[KPTP[m[K Event Frame Transmitted Nanoseconds */
[01;32m[K   144[m[K	  RoReg   GMAC_EFRS;       /**< \brief (Gmac Offset: 0x1E8) [01;31m[KPTP[m[K Event Frame Received Seconds */
[01;32m[K   145[m[K	  RoReg   GMAC_EFRN;       /**< \brief (Gmac Offset: 0x1EC) [01;31m[KPTP[m[K Event Frame Received Nanoseconds */
[01;32m[K   146[m[K	  RoReg   GMAC_PEFTS;      /**< \brief (Gmac Offset: 0x1F0) [01;31m[KPTP[m[K Peer Event Frame Transmitted Seconds */
[01;32m[K   147[m[K	  RoReg   GMAC_PEFTN;      /**< \brief (Gmac Offset: 0x1F4) [01;31m[KPTP[m[K Peer Event Frame Transmitted Nanoseconds */
[01;32m[K   148[m[K	  RoReg   GMAC_PEFRS;      /**< \brief (Gmac Offset: 0x1F8) [01;31m[KPTP[m[K Peer Event Frame Received Seconds */
[01;32m[K   149[m[K	  RoReg   GMAC_PEFRN;      /**< \brief (Gmac Offset: 0x1FC) [01;31m[KPTP[m[K Peer Event Frame Received Nanoseconds */
[01;32m[K   294[m[K	#define GMAC_ISR_DRQFR (0x1u << 18) /**< \brief (GMAC_ISR) [01;31m[KPTP[m[K Delay Request Frame Received */
[01;32m[K   295[m[K	#define GMAC_ISR_SFR (0x1u << 19) /**< \brief (GMAC_ISR) [01;31m[KPTP[m[K Sync Frame Received */
[01;32m[K   296[m[K	#define GMAC_ISR_DRQFT (0x1u << 20) /**< \brief (GMAC_ISR) [01;31m[KPTP[m[K Delay Request Frame Transmitted */
[01;32m[K   297[m[K	#define GMAC_ISR_SFT (0x1u << 21) /**< \brief (GMAC_ISR) [01;31m[KPTP[m[K Sync Frame Transmitted */
[01;32m[K   319[m[K	#define GMAC_IER_DRQFR (0x1u << 18) /**< \brief (GMAC_IER) [01;31m[KPTP[m[K Delay Request Frame Received */
[01;32m[K   320[m[K	#define GMAC_IER_SFR (0x1u << 19) /**< \brief (GMAC_IER) [01;31m[KPTP[m[K Sync Frame Received */
[01;32m[K   321[m[K	#define GMAC_IER_DRQFT (0x1u << 20) /**< \brief (GMAC_IER) [01;31m[KPTP[m[K Delay Request Frame Transmitted */
[01;32m[K   322[m[K	#define GMAC_IER_SFT (0x1u << 21) /**< \brief (GMAC_IER) [01;31m[KPTP[m[K Sync Frame Transmitted */
[01;32m[K   344[m[K	#define GMAC_IDR_DRQFR (0x1u << 18) /**< \brief (GMAC_IDR) [01;31m[KPTP[m[K Delay Request Frame Received */
[01;32m[K   345[m[K	#define GMAC_IDR_SFR (0x1u << 19) /**< \brief (GMAC_IDR) [01;31m[KPTP[m[K Sync Frame Received */
[01;32m[K   346[m[K	#define GMAC_IDR_DRQFT (0x1u << 20) /**< \brief (GMAC_IDR) [01;31m[KPTP[m[K Delay Request Frame Transmitted */
[01;32m[K   347[m[K	#define GMAC_IDR_SFT (0x1u << 21) /**< \brief (GMAC_IDR) [01;31m[KPTP[m[K Sync Frame Transmitted */
[01;32m[K   369[m[K	#define GMAC_IMR_DRQFR (0x1u << 18) /**< \brief (GMAC_IMR) [01;31m[KPTP[m[K Delay Request Frame Received */
[01;32m[K   370[m[K	#define GMAC_IMR_SFR (0x1u << 19) /**< \brief (GMAC_IMR) [01;31m[KPTP[m[K Sync Frame Received */
[01;32m[K   371[m[K	#define GMAC_IMR_DRQFT (0x1u << 20) /**< \brief (GMAC_IMR) [01;31m[KPTP[m[K Delay Request Frame Transmitted */
[01;32m[K   372[m[K	#define GMAC_IMR_SFT (0x1u << 21) /**< \brief (GMAC_IMR) [01;31m[KPTP[m[K Sync Frame Transmitted */
[01;32m[K   654[m[K	/* -------- GMAC_EFTS : (GMAC Offset: 0x1E0) [01;31m[KPTP[m[K Event Frame Transmitted Seconds -------- */
[01;32m[K   657[m[K	/* -------- GMAC_EFTN : (GMAC Offset: 0x1E4) [01;31m[KPTP[m[K Event Frame Transmitted Nanoseconds -------- */
[01;32m[K   660[m[K	/* -------- GMAC_EFRS : (GMAC Offset: 0x1E8) [01;31m[KPTP[m[K Event Frame Received Seconds -------- */
[01;32m[K   663[m[K	/* -------- GMAC_EFRN : (GMAC Offset: 0x1EC) [01;31m[KPTP[m[K Event Frame Received Nanoseconds -------- */
[01;32m[K   666[m[K	/* -------- GMAC_PEFTS : (GMAC Offset: 0x1F0) [01;31m[KPTP[m[K Peer Event Frame Transmitted Seconds -------- */
[01;32m[K   669[m[K	/* -------- GMAC_PEFTN : (GMAC Offset: 0x1F4) [01;31m[KPTP[m[K Peer Event Frame Transmitted Nanoseconds -------- */
[01;32m[K   672[m[K	/* -------- GMAC_PEFRS : (GMAC Offset: 0x1F8) [01;31m[KPTP[m[K Peer Event Frame Received Seconds -------- */
[01;32m[K   675[m[K	/* -------- GMAC_PEFRN : (GMAC Offset: 0x1FC) [01;31m[KPTP[m[K Peer Event Frame Received Nanoseconds -------- */

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K    57[m[K	// [01;31m[KPTP[m[K source clock is 84MHz (Real chip using PLL). Each tick is 11.90ns

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K    67[m[K	      -@- The [01;31m[KPTP[m[K protocol and the DMA descriptors ring mode are not supported

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   640[m[K	  /*!< Enhanced Ethernet DMA [01;31m[KPTP[m[K Descriptors */
[01;32m[K   641[m[K	  uint32_t   ExtendedStatus;        /*!< Extended status for [01;31m[KPTP[m[K receive descriptor */
[01;32m[K   925[m[K	#define ETH_DMAPTPRXDESC_PTPV                            ((uint32_t)0x00002000U)  /* [01;31m[KPTP[m[K Version */
[01;32m[K   926[m[K	#define ETH_DMAPTPRXDESC_PTPFT                           ((uint32_t)0x00001000U)  /* [01;31m[KPTP[m[K Frame Type */
[01;32m[K   927[m[K	#define ETH_DMAPTPRXDESC_PTPMT                           ((uint32_t)0x00000F00U)  /* [01;31m[KPTP[m[K Message Type */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K   267[m[K	            [01;31m[KpTxPkt[m[K->next = 0; /* unlink it */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1339[m[K			{ MK_PAIR( [01;31m[KPTZ[m[K   ) }  /* Enable pause time zero interrupt. */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1342[m[K			{ MK_PAIR( [01;31m[KPTZ[m[K   ) }  /* Enable pause time zero interrupt. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K  1411[m[K			{ MK_PAIR( [01;31m[KPTZ[m[K   ) }  /* Enable pause time zero interrupt. */

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.c[39m

[01;32m[K    34[m[K	 * ucIsCachedMemory( [01;31m[KpucBuffer[m[K ) returns non-zero if a given pointer is NOT

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.h[39m

[01;32m[K     9[m[K	 * ucIsCachedMemory( [01;31m[KpucBuffer[m[K ) returns non-zero if a given pointer is NOT

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K   153[m[K	    //SendData: pt = pxDescriptor->[01;31m[KpucBuffer[m[K, length = pxDescriptor->xDataLength

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   526[m[K	 * Arguments    : [01;31m[KpucBuffer[m[K, length

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   885[m[K		/* uxCount gets the valus from [01;31m[KpucByte[m[K and counts down to 0.
[01;32m[K   886[m[K		No need to have a different type than that of [01;31m[KpucByte[m[K */
[01;32m[K   998[m[K			/* [01;31m[KpucByte[m[K points to the full name. Walk over the string. */
[01;32m[K  1267[m[K							/* Mapping [01;31m[KpucByte[m[K to a DNSAnswerRecord allows easy access of the

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3300[m[K			/* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, [01;31m[KpucData[m[K, aCount )
[01;32m[K  3301[m[K			if( [01;31m[KpucData[m[K != NULL ) copy data the the buffer
[01;32m[K  3302[m[K			if( [01;31m[KpucData[m[K == NULL ) no copying, just advance rxHead

[1;34m./FreeRTOS_Stream_Buffer.c[39m

[01;32m[K    45[m[K	 * If '[01;31m[KpucData[m[K' equals NULL, the function is called to advance 'uxHead' only.
[01;32m[K   127[m[K	 * If '[01;31m[KpucData[m[K' equals NULL, the function is called to advance 'lTail' only.

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K   212[m[K	 * [01;31m[KpucData[m[K -	A pointer to the data to be added.
[01;32m[K   222[m[K	 * [01;31m[KpucData[m[K -	A pointer to the buffer into which data will be read.

[1;34m./test/cbmc/proofs/ARP/ARPGenerateRequestPacket/ARPGenerateRequestPacket_harness.c[39m

[01;32m[K    13[m[K		 * The assumption made here is that the buffer pointed by [01;31m[KpucEthernerBuffer[m[K

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_OutputARPRequest/OutputARPRequest_harness.c[39m

[01;32m[K    50[m[K	 * casts the pointer xNetworkBuffer.[01;31m[KpucEthernetBuffer[m[K into an ARPPacket_t pointer

[1;34m./test/cbmc/proofs/TCP/prvTCPPrepareSend/TCPPrepareSend_harness.c[39m

[01;32m[K    49[m[K			/* The code does not expect [01;31m[KpucEthernetBuffer[m[K to be equal to NULL if
[01;32m[K    64[m[K			/* The code does not expect [01;31m[KpucEthernetBuffer[m[K to be equal to NULL if

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K    76[m[K						ksz8851_fifo_write( pxNetworkBuffer->[01;31m[KpucEthernetBuffer[m[K, xLength, xLength );
[01;32m[K   141[m[K							ksz8851_fifo_read( pxNetworkBuffer->[01;31m[KpucEthernetBuffer[m[K, xReadLength );

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K   273[m[K	                pxDescriptor->[01;31m[KpucEthernetBuffer[m[K = 0; /* it will be released by the MAC driver once it's transmitted */

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   140[m[K	    /*  - the FreeRTOSIP (NetworkBufferDescriptor_t->[01;31m[KpucEthernetBuffer[m[K) */
[01;32m[K   247[m[K	    /*  - the FreeRTOSIP (NetworkBufferDescriptor_t->[01;31m[KpucEthernetBuffer[m[K) */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   381[m[K					/* B1ADD points to a [01;31m[KpucEthernetBuffer[m[K of a Network Buffer descriptor. */
[01;32m[K   725[m[K							/* 'B1ADD' contained the address of a '[01;31m[KpucEthernetBuffer[m[K' that

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   178[m[K	     * by pxDescriptor->[01;31m[KpucEthernetBuffer[m[K.  The length of the data is located
[01;32m[K   328[m[K	                /* pxBufferDescriptor->[01;31m[KpucEthernetBuffer[m[K now points to an Ethernet
[01;32m[K   330[m[K	                 * received data into pcNetworkBuffer->[01;31m[KpucEthernetBuffer[m[K.  Here it
[01;32m[K   337[m[K	                /*ReceiveData( pxBufferDescriptor->[01;31m[KpucEthernetBuffer[m[K ); */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   452[m[K	 * payload size (excluding packet headers) and that the packet in [01;31m[KpucEthernetBuffer[m[K 

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   108[m[K		uchar_8 dest[6];    // start of [01;31m[KpucEthernetBuffer[m[K
[01;32m[K   108[m[K		uchar_8 dest[6];    // start of [01;31m[KpucEthernetBuffer[m[K
[01;32m[K   129[m[K		uint8_t *[01;31m[KpucEthernetBuffer[m[K; 	/* Pointer to the start of the Ethernet frame. */

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.c[39m

[01;32m[K    31[m[K	 * [01;31m[KpucGetUncachedMemory[m[K( ulSize ) returns a trunc of this memory with a length

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.h[39m

[01;32m[K     6[m[K	 * [01;31m[KpucGetUncachedMemory[m[K( ulSize ) returns a trunc of this memory with a length

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K   311[m[K		pxOpenedInterfaceHandle = pcap_open(	[01;31m[KpucInterfaceName[m[K,          	/* The name of the selected interface. */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   398[m[K	 * @param [in] [01;31m[KpucName[m[K interface  name to pen

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1392[m[K						/* The test on '[01;31m[KpucNewBuffer[m[K' is only to satisfy lint. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2407[m[K	 *   [01;31m[KpucNextData[m[K: This argument contains the address of the first byte which this
[01;32m[K  2434[m[K		/* The object pointer expression "[01;31m[KpucNextData[m[K" of type "uint8_t const *" is cast to an integer type "unsigned int". */
[01;32m[K  2435[m[K		ulAlignBits = ( ( ( uint32_t ) [01;31m[KpucNextData[m[K ) & 0x03U ); /*lint !e9078 !e923*/	/* gives 0, 1, 2, or 3 */
[01;32m[K  2530[m[K			/* Quite unlikely, but [01;31m[KpucNextData[m[K might be non-aligned, which would

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   444[m[K	 * Return the checksum generated over xDataLengthBytes from [01;31m[KpucNextData[m[K.

[1;34m./test/cbmc/proofs/CheckOptionsInner/CheckOptionsInner_harness.c[39m

[01;32m[K    37[m[K	    /* [01;31m[KpucPtr[m[K points into a buffer */
[01;32m[K    83[m[K	    /* pointer offset of the pointer [01;31m[KpucPtr[m[K + uxIndex + 8 */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2192[m[K		/* Let [01;31m[KpucRecvData[m[K point to the first byte received. */
[01;32m[K  2837[m[K		[01;31m[KpucRecvData[m[K will point to the first byte of the TCP payload. */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   836[m[K		[01;31m[KpucStart[m[K holds the address of the byte count.  Walking the string
[01;32m[K   849[m[K			/* Fill in the byte count, then move the [01;31m[KpucStart[m[K pointer up to

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   636[m[K		/* Passing the address of a pointer ([01;31m[KpucUDPPayload[m[K) because FREERTOS_ZERO_COPY is used. */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1568[m[K					/* Should not occur: [01;31m[KpucUDPPayloadBuffer[m[K is part of a xNetworkBufferDescriptor */

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   451[m[K				/* Point [01;31m[KpucUseBuffer[m[K to the buffer pointed to by the descriptor. */
[01;32m[K   461[m[K			/* Read the next packet from the hardware into [01;31m[KpucUseBuffer[m[K. */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   721[m[K				/* Point [01;31m[KpucUseBuffer[m[K to the buffer pointed to by the descriptor. */
[01;32m[K   731[m[K			/* Read the next packet from the hardware into [01;31m[KpucUseBuffer[m[K. */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1256[m[K				there are priority segments.  *[01;31m[KpulDelay[m[K equals zero, meaning it must

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   411[m[K		else if( ( *[01;31m[KpulIPAddress[m[K == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
[01;32m[K   412[m[K			( *[01;31m[KpulIPAddress[m[K == xNetworkAddressing.ulBroadcastAddress ) )/* Or a local broadcast address, eg 192.168.1.255? */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K   218[m[K	 * The PHY address is the reset status of CRS, RXD[3:0] (the GmacPins' [01;31m[Kpullups[m[K).

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K   144[m[K	 * The PHY address is the reset status of CRS, RXD[3:0] (the emacPins' [01;31m[Kpullups[m[K).

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   341[m[K	/* This xApplicationGetRandomNumber() will set *[01;31m[KpulNumber[m[K to a random number,

[1;34m./portable/NetworkInterface/include/phyHandling.h[39m

[01;32m[K    25[m[K	  '*[01;31m[KpulValue[m[K'. xRegister is the register number ( 0 .. 31 ). In fact all PHY registers are 16-bit.

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   693[m[K		/* disable signals to avoid treating this thread as a FreeRTOS task and [01;31m[Kputing[m[K

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K   122[m[K	     * [01;31m[KpvBuffer[m[K does not point to a buffer and xBufferLength is not

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   780[m[K					/* The zero copy flag was set.  [01;31m[KpvBuffer[m[K is not a buffer into which
[01;32m[K   876[m[K					/* When zero copy is used, [01;31m[KpvBuffer[m[K is a pointer to the
[01;32m[K  2501[m[K				/* In zero-copy mode, [01;31m[KpvBuffer[m[K is a pointer to a pointer ( not NULL ). */
[01;32m[K  2656[m[K						/* Zero-copy reception of data: [01;31m[KpvBuffer[m[K is a pointer to a pointer. */

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K   285[m[K	            /* [01;31m[KpvData[m[K is used to point to the network buffer descriptor that

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   353[m[K	                    /* [01;31m[KpvData[m[K is used to point to the network buffer descriptor that

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   397[m[K					pointer to the received buffer is located in the [01;31m[KpvData[m[K member
[01;32m[K   442[m[K					pointer to the generated buffer is located in the [01;31m[KpvData[m[K
[01;32m[K   500[m[K					check if the listening socket (communicated in [01;31m[KpvData[m[K) actually

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   767[m[K	 *		void *[01;31m[KpvData[m[K;

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1449[m[K				/* Turn calculating of the UDP checksum on/off for this socket. If [01;31m[KpvOptionValue[m[K

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   643[m[K	 * @param [in] [01;31m[KpvParam[m[K not used
[01;32m[K   681[m[K	 * @param [in] [01;31m[KpvParam[m[K not used

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   727[m[K	 * @param [in] [01;31m[KpvParameters[m[K not used

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   259[m[K	 * Arguments    : [01;31m[KpvParameters[m[K

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   317[m[K	/* Coverity want to make [01;31m[KpvParameters[m[K const, which would make it incompatible. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   235[m[K	 * [01;31m[KpvPortMalloc[m[K()/vPortFree() will be used.

[1;34m./test/cbmc/proofs/ARP/ARP_OutputARPRequest_buffer_alloc1/OutputARPRequest_harness.c[39m

[01;32m[K    38[m[K	/* The code expects that the Semaphore creation relying on [01;31m[KpvPortMalloc[m[K
[01;32m[K    42[m[K	   it is assumed for now, that [01;31m[KpvPortMalloc[m[K doesn't fail. Using a model allowing

[1;34m./test/cbmc/include/cbmc.h[39m

[01;32m[K    73[m[K	  * An assertion that [01;31m[KpvPortMalloc[m[K returns NULL when asked to allocate 0 bytes.
[01;32m[K    81[m[K	  * A stub for [01;31m[KpvPortMalloc[m[K that nondeterministically chooses to return

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   296[m[K			By default it points to the FreeRTOS function '[01;31m[KpvPortMalloc[m[K()'. */

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   238[m[K	 * [01;31m[KpvPortMalloc[m[K()/vPortFree() will be used.

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   295[m[K			define '[01;31m[KpvPortMallocSocket[m[K' will used to allocate the necessary space.

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   375[m[K		In case [01;31m[KpvSearchID[m[K is supplied, the user wants to cancel a DNS request

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_cancel/DNSgetHostByName_cancel_harness.c[39m

[01;32m[K    47[m[K		vDNSSetCallBack( pcHostName, &[01;31m[KpvSearchID[m[K, pCallback, xTimeout, xIdentifier); /* Add an item to be able to check the cancel function if the list is non-empty. */

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K   105[m[K		typedef void (* FOnDNSEvent ) ( const char * /* pcName */, void * /* [01;31m[KpvSearchID[m[K */, uint32_t /* ulIPAddress */ );

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2761[m[K				/* The ack will not be postponed, and there was no stored ack ( in '[01;31m[KpxAckMessage[m[K' ). */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   607[m[K												 * typedef void (* FOnUDPReceive_t) (Socket_t xSocket, void *pData, size_t xLength, struct freertos_sockaddr *[01;31m[KpxAddr[m[K );

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1050[m[K			/* [01;31m[KpxAddress[m[K will be NULL if sendto() was called on a socket without the
[01;32m[K  1069[m[K		/* [01;31m[KpxAddress[m[K is not NULL, no testing needed. */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   245[m[K	 * @param[in]   [01;31m[KpxAllNetworkInterfaces[m[K interface structure list to print
[01;32m[K   455[m[K	 * @param [in] [01;31m[KpxAllNetworkInterfaces[m[K network interface list to choose from

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1409[m[K							vSetField16( [01;31m[KpxAnswer[m[K, LLMNRAnswer_t, usType, dnsTYPE_A_HOST ); /* Type A: host */
[01;32m[K  1410[m[K							vSetField16( [01;31m[KpxAnswer[m[K, LLMNRAnswer_t, usClass, dnsCLASS_IN );   /* 1: Class IN */
[01;32m[K  1588[m[K						vSetField16( [01;31m[KpxAnswer[m[K, NBNSAnswer_t, usType, usType );            /* Type */
[01;32m[K  1589[m[K						vSetField16( [01;31m[KpxAnswer[m[K, NBNSAnswer_t, usClass, dnsNBNS_CLASS_IN ); /* Class */
[01;32m[K  1591[m[K						vSetField16( [01;31m[KpxAnswer[m[K, NBNSAnswer_t, usDataLength, 6 );           /* 6 bytes including the length field */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   696[m[K	 * Return (or send) a packet the the peer.  The data is stored in [01;31m[KpxBuffer[m[K,
[01;32m[K   937[m[K				/* Swap-back some fields, as [01;31m[KpxBuffer[m[K probably points to a socket field

[1;34m./test/cbmc/proofs/TCP/prvTCPPrepareSend/TCPPrepareSend_harness.c[39m

[01;32m[K    50[m[K			[01;31m[KpxBuffer[m[K is not NULL. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3300[m[K			/* int32_t uxStreamBufferAdd( [01;31m[KpxBuffer[m[K, uxOffset, pucData, aCount )

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   584[m[K				/* Store a pointer to the buffer after [01;31m[KpxBuffer[m[K for use later on. */

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K   209[m[K	 * [01;31m[KpxBuffer[m[K -	The buffer to which the bytes will be added.
[01;32m[K   220[m[K	 * [01;31m[KpxBuffer[m[K -	The buffer from which the bytes will be read.

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   328[m[K	                /* [01;31m[KpxBufferDescriptor[m[K->pucEthernetBuffer now points to an Ethernet
[01;32m[K   337[m[K	                /*ReceiveData( [01;31m[KpxBufferDescriptor[m[K->pucEthernetBuffer ); */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K   273[m[K	                [01;31m[KpxDescriptor[m[K->pucEthernetBuffer = 0; /* it will be released by the MAC driver once it's transmitted */

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   284[m[K				/* Confirm that the [01;31m[KpxDescriptor[m[K may be kept by the driver. */
[01;32m[K   293[m[K				/* Confirm that the [01;31m[KpxDescriptor[m[K may be kept by the driver. */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   504[m[K				/* Confirm that the [01;31m[KpxDescriptor[m[K may be kept by the driver. */
[01;32m[K   521[m[K				/* Confirm that the [01;31m[KpxDescriptor[m[K may be kept by the driver. */

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K   136[m[K	//    FreeRTOS_printf(("<-- dataLength=%d\n",[01;31m[KpxDescriptor[m[K->xDataLength));
[01;32m[K   153[m[K	    //SendData: pt = [01;31m[KpxDescriptor[m[K->pucBuffer, length = [01;31m[KpxDescriptor[m[K->xDataLength

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   672[m[K				contained in '[01;31m[KpxDescriptor[m[K' that is passed to the function. */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   164[m[K	 * Arguments    : [01;31m[KpxDescriptor[m[K, xReleaseAfterSend
[01;32m[K   178[m[K	     * by [01;31m[KpxDescriptor[m[K->pucEthernetBuffer.  The length of the data is located
[01;32m[K   179[m[K	     * by [01;31m[KpxDescriptor[m[K->xDataLength. */

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K   122[m[K		if( xCheckLoopback( [01;31m[KpxDescriptor[m[K, bReleaseAfterSend ) != 0 )

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1399[m[K							vSetField16( [01;31m[KpxDNSMessageHeader[m[K, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE ); /* Set the response flag */
[01;32m[K  1400[m[K							vSetField16( [01;31m[KpxDNSMessageHeader[m[K, DNSMessage_t, usAnswers, 1 );                       /* Provide a single answer */
[01;32m[K  1401[m[K							vSetField16( [01;31m[KpxDNSMessageHeader[m[K, DNSMessage_t, usAuthorityRRs, 0 );                  /* No authority */
[01;32m[K  1402[m[K							vSetField16( [01;31m[KpxDNSMessageHeader[m[K, DNSMessage_t, usAdditionalRRs, 0 );                 /* No additional info */

[1;34m./test/cbmc/proofs/TCP/prvTCPReturnPacket/TCPReturnPacket_harness.c[39m

[01;32m[K    40[m[K	/* This proof assumes that [01;31m[KpxDuplicateNetworkBufferWithDescriptor[m[K is implemented correctly. */
[01;32m[K    44[m[K	/* Abstraction of [01;31m[KpxDuplicateNetworkBufferWithDescriptor[m[K*/

[1;34m./test/cbmc/proofs/ARP/ARPAgeCache/ARPAgeCache_harness.c[39m

[01;32m[K    10[m[K	//We assume that the [01;31m[KpxGetNetworkBufferWithDescriptor[m[K function is implemented correctly and returns a valid data structure.

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_OutputARPRequest/OutputARPRequest_harness.c[39m

[01;32m[K    43[m[K	 * We assume that the [01;31m[KpxGetNetworkBufferWithDescriptor[m[K function is
[01;32m[K    47[m[K	 * FreeRTOS_OutputARPRequest calls [01;31m[KpxGetNetworkBufferWithDescriptor[m[K

[1;34m./test/cbmc/proofs/TCP/prvTCPPrepareSend/TCPPrepareSend_harness.c[39m

[01;32m[K    41[m[K	/* This proof assumes that [01;31m[KpxGetNetworkBufferWithDescriptor[m[K is implemented correctly. */
[01;32m[K    44[m[K	/* Abstraction of [01;31m[KpxGetNetworkBufferWithDescriptor[m[K. It creates a buffer. */

[1;34m./test/cbmc/proofs/parsing/ProcessReceivedTCPPacket/ProcessReceivedTCPPacket_harness.c[39m

[01;32m[K    12[m[K	[01;31m[KpxGetNetworkBufferWithDescriptor[m[K are implemented correctly.
[01;32m[K    42[m[K	/* Abstraction of [01;31m[KpxGetNetworkBufferWithDescriptor[m[K */

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K   234[m[K	 * Abstract [01;31m[KpxGetNetworkBufferWithDescriptor[m[K.
[01;32m[K   235[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/[01;31m[KpxGetNetworkBufferWithDescriptor[m[K.html
[01;32m[K   235[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/[01;31m[KpxGetNetworkBufferWithDescriptor[m[K.html
[01;32m[K   305[m[K	 * Abstract [01;31m[KpxGetNetworkBufferWithDescriptor[m[K.

[1;34m./portable/NetworkInterface/mw300_rd/NetworkInterface.c[39m

[01;32m[K   122[m[K	    pxNetworkBuffer = [01;31m[KpxGetNetworkBufferWithDescriptor[m[K(/*payload_len*/datalen, xDescriptorWaitTime);

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   587[m[K				FOnConnected_t [01;31m[KpxHandleConnected[m[K;	/* Actually type: typedef void (* FOnConnected_t) (Socket_t xSocket, BaseType_t ulConnected ); */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   582[m[K				FOnTCPReceive_t [01;31m[KpxHandleReceive[m[K;	/*
[01;32m[K   605[m[K			FOnUDPReceive_t [01;31m[KpxHandleReceive[m[K;	/*

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   470[m[K	//	if(([01;31m[KpxHead[m[K->addr.val & GMAC_RXD_OWNERSHIP) != 0)
[01;32m[K   537[m[K				/* Let ulIndex/[01;31m[KpxHead[m[K point to the next buffer. */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1129[m[K					/* Let '[01;31m[KpxHeadSegment[m[K' point to this segment if there is still
[01;32m[K  1399[m[K						/* Don't let [01;31m[KpxHeadSegment[m[K point to this segment any more,

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   124[m[K		TCPSegment_t *[01;31m[KpxHeadSegment[m[K;		/* points to a segment which has not been transmitted and it's size is still growing (user data being added) */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1725[m[K						[01;31m[KpxIPHeader[m[K->ucVersionHeaderLength = ( [01;31m[KpxIPHeader[m[K->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3905[m[K				}	/* for( [01;31m[KpxIterator[m[K ... ) */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  2729[m[K		'*[01;31m[KpxLength[m[K' will contain the number of bytes that may be written. */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   294[m[K	 * '*[01;31m[KpxLength[m[K' will contain the number of bytes that may be written.

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   309[m[K		/* Insert a new list item into [01;31m[KpxList[m[K, it does not sort the list,

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   101[m[K	 * Return the list item from within [01;31m[KpxList[m[K that has an item value of

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1054[m[K			[[01;31m[KpxListFindListItemWithValue[m[K()] will result in an error being returned. */
[01;32m[K  1797[m[K	/* [01;31m[KpxListFindListItemWithValue[m[K: find a list item in a bound socket list

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   251[m[K						/* In case the parameter [01;31m[KpxMACAddress[m[K is NULL, an entry will be reserved to

[1;34m./test/unit-test/stubs/FreeRTOS_ARP_stubs.c[39m

[01;32m[K    39[m[K		[01;31m[KpxMACAddress[m[K->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU );	/* Use 7 bits. */
[01;32m[K    40[m[K		[01;31m[KpxMACAddress[m[K->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >>  8 ) & 0xffU );	/* Use 8 bits. */
[01;32m[K    41[m[K		[01;31m[KpxMACAddress[m[K->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP       ) & 0xffU );	/* Use 8 bits. */

[1;34m./test/cbmc/proofs/prvProcessEthernetPacket/prvProcessEthernetPacket_harness.c[39m

[01;32m[K    33[m[K		/* [01;31m[KpxMACAddress[m[K can be NULL or non-NULL. No need to assert. */

[1;34m./test/cbmc/proofs/UDP/vProcessGeneratedUDPPacket/vProcessGeneratedUDPPacket_harness.c[39m

[01;32m[K    50[m[K		/* [01;31m[KpxMACAddress[m[K can be NULL or Non-NULL, no need to assert. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1528[m[K		[01;31m[KpxMACAddress[m[K->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU );	/* Use 7 bits. */
[01;32m[K  1529[m[K		[01;31m[KpxMACAddress[m[K->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >>  8 ) & 0xffU );	/* Use 8 bits. */
[01;32m[K  1530[m[K		[01;31m[KpxMACAddress[m[K->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP       ) & 0xffU );	/* Use 8 bits. */

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    84[m[K	 * associated MAC address into [01;31m[KpxMACAddress[m[K, refresh the ARP cache entry's

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1576[m[K						vSetField16( [01;31m[KpxMessage[m[K, DNSMessage_t, usFlags, dnsNBNS_QUERY_RESPONSE_FLAGS ); /* 0x8500 */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   947[m[K		} /* if( [01;31m[KpxNetworkBuffer[m[K != NULL ) */
[01;32m[K  1763[m[K			configASSERT( [01;31m[KpxNetworkBuffer[m[K != NULL );	/* to tell lint: when xResize is false, [01;31m[KpxNetworkBuffer[m[K is not NULL. */

[1;34m./test/cbmc/proofs/CheckOptions/CheckOptions_harness.c[39m

[01;32m[K    81[m[K	    /* [01;31m[KpxNetworkBuffer[m[K can be any buffer descriptor with any buffer */

[1;34m./test/cbmc/proofs/TCP/prvTCPPrepareSend/TCPPrepareSend_harness.c[39m

[01;32m[K    65[m[K			[01;31m[KpxNetworkBuffer[m[K is not NULL. */

[1;34m./test/cbmc/proofs/parsing/ProcessIPPacket/ProcessIPPacket_harness.c[39m

[01;32m[K    25[m[K		/* Minimum length of the [01;31m[KpxNetworkBuffer[m[K->xDataLength is at least the size of the IPPacket_t. */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K    61[m[K					tx_buffers[ us_tx_head ] = [01;31m[KpxNetworkBuffer[m[K;
[01;32m[K    76[m[K						ksz8851_fifo_write( [01;31m[KpxNetworkBuffer[m[K->pucEthernetBuffer, xLength, xLength );
[01;32m[K    78[m[K						tx_cur_buffer = [01;31m[KpxNetworkBuffer[m[K;
[01;32m[K   106[m[K						vReleaseNetworkBufferAndDescriptor( [01;31m[KpxNetworkBuffer[m[K );
[01;32m[K   141[m[K							ksz8851_fifo_read( [01;31m[KpxNetworkBuffer[m[K->pucEthernetBuffer, xReadLength );
[01;32m[K   641[m[K				//LWIP_ASSERT("ksz8851snl_rx_populate_queue: NetworkBufferDescriptor_t size too small!", pbuf_clen([01;31m[KpxNetworkBuffer[m[K) <= 1);

[1;34m./portable/NetworkInterface/mw300_rd/NetworkInterface.c[39m

[01;32m[K   122[m[K	    [01;31m[KpxNetworkBuffer[m[K = pxGetNetworkBufferWithDescriptor(/*payload_len*/datalen, xDescriptorWaitTime);

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K   141[m[K				if( [01;31m[KpxNetworkBuffer[m[K->xDataLength < EMAC_ETH_MAX_FLEN ) /*_RB_ The size needs to come from FreeRTOSIPConfig.h. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1811[m[K									/* Fields in [01;31m[KpxNetworkBuffer[m[K (usPort, ulIPAddress) are network order. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   451[m[K	 * The caller must ensure that [01;31m[KpxNetworkBuffer[m[K->xDataLength is the UDP packet 

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K   105[m[K	 * Send out an ARP request for the IP address contained in [01;31m[KpxNetworkBuffer[m[K, and

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   434[m[K	 * Arguments    : [01;31m[KpxNetworkBuffers[m[K

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   579[m[K			the IP task in one go.  The packets are chained using the [01;31m[KpxNextBuffer[m[K

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   134[m[K			struct xNETWORK_BUFFER *[01;31m[KpxNextBuffer[m[K; /* Possible optimisation for expert users - requires network driver support. */

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   442[m[K			/* If [01;31m[KpxNextNetworkBufferDescriptor[m[K was not left pointing at a valid
[01;32m[K   456[m[K				/* As long as [01;31m[KpxNextNetworkBufferDescriptor[m[K is NULL, the incoming

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   712[m[K			/* If [01;31m[KpxNextNetworkBufferDescriptor[m[K was not left pointing at a valid
[01;32m[K   726[m[K				/* As long as [01;31m[KpxNextNetworkBufferDescriptor[m[K is NULL, the incoming

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   355[m[K			FOnConnected_t	[01;31m[KpxOnTCPConnected[m[K;	/* FREERTOS_SO_TCP_CONN_HANDLER */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   356[m[K			FOnTCPReceive_t	[01;31m[KpxOnTCPReceive[m[K;		/* FREERTOS_SO_TCP_RECV_HANDLER */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   357[m[K			FOnTCPSent_t	[01;31m[KpxOnTCPSent[m[K;		/* FREERTOS_SO_TCP_SENT_HANDLER */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   358[m[K			FOnUDPReceive_t	[01;31m[KpxOnUDPReceive[m[K;		/* FREERTOS_SO_UDP_RECV_HANDLER */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   359[m[K			FOnUDPSent_t	[01;31m[KpxOnUDPSent[m[K;		/* FREERTOS_SO_UDP_SENT_HANDLER */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   452[m[K	 *	       Calling this function will set the [01;31m[KpxOpenedInterfaceHandle[m[K variable
[01;32m[K   453[m[K	 *	       If, after calling this function, [01;31m[KpxOpenedInterfaceHandle[m[K

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K   150[m[K		Calling this function will set the [01;31m[KpxOpenedInterfaceHandle[m[K variable.  If,
[01;32m[K   151[m[K		after calling this function, [01;31m[KpxOpenedInterfaceHandle[m[K is equal to NULL, then
[01;32m[K   311[m[K		[01;31m[KpxOpenedInterfaceHandle[m[K = pcap_open(	pucInterfaceName,          	/* The name of the selected interface. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1578[m[K					reference '[01;31m[KpxPeerSocket[m[K' may be cleared. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   557[m[K			struct xSOCKET *[01;31m[KpxPeerSocket[m[K;	/* for server socket: child, for child socket: parent */

[1;34m./portable/NetworkInterface/include/phyHandling.h[39m

[01;32m[K   102[m[K	/* Do not use auto negotiation but use predefined values from '[01;31m[KpxPhyObject[m[K->xPhyPreferences'. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1615[m[K							pxSocket->u.xTCP.uxRxWinSize = ( uint32_t )[01;31m[KpxProps[m[K->lRxWinSize;	/* Fixed value: size of the TCP reception window */
[01;32m[K  1616[m[K							pxSocket->u.xTCP.uxTxWinSize = ( uint32_t )[01;31m[KpxProps[m[K->lTxWinSize;	/* Fixed value: size of the TCP transmit window */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1951[m[K			[01;31m[KpxProtocolHeaders[m[K->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1645[m[K						/* [01;31m[KpxProtPack[m[K will point to the offset were the protocols begin. */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   137[m[K	 *  Free entry [01;31m[KpxSegment[m[K because it's not used anymore
[01;32m[K   554[m[K			/*  Free entry [01;31m[KpxSegment[m[K because it's not used any more.  The ownership
[01;32m[K   762[m[K				'ulSequenceNumber' <= '[01;31m[KpxSegment[m[K->ulSequenceNumber' < 'ulNextSequenceNumber'
[01;32m[K  1443[m[K				/* [01;31m[KpxSegment[m[K is not NULL when ulReturn != 0UL. */
[01;32m[K  1601[m[K				/* [01;31m[KpxSegment[m[K->u.bits.bAcked is now true.  Is it located at the left

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   609[m[K					[01;31m[KpxSocket[m[K->u.xTCP.ulRemoteIP,		/* IP address of remote machine. */
[01;32m[K   610[m[K					[01;31m[KpxSocket[m[K->u.xTCP.usRemotePort ) );	/* Port on remote machine. */
[01;32m[K   862[m[K				/* When [01;31m[KpxSocket[m[K is NULL, this function is called by prvTCPSendReset()
[01;32m[K  1515[m[K	BaseType_t bBefore = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) [01;31m[KpxSocket[m[K->u.xTCP.ucTCPState ) );	/* Was it connected ? */
[01;32m[K  1906[m[K				if( [01;31m[KpxSocket[m[K->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
[01;32m[K  1909[m[K						[01;31m[KpxSocket[m[K->u.xTCP.ulRemoteIP,			/* IP address of remote machine. */
[01;32m[K  1910[m[K						[01;31m[KpxSocket[m[K->u.xTCP.usRemotePort ) );	/* Port on remote machine. */
[01;32m[K  2706[m[K				( [01;31m[KpxSocket[m[K->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
[01;32m[K  2707[m[K				( xSendLength == ipNUMERIC_CAST( BaseType_t, uxIPHeaderSizeSocket( [01;31m[KpxSocket[m[K ) + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */
[01;32m[K  2708[m[K				( [01;31m[KpxSocket[m[K->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) &&	/* Connection established. */
[01;32m[K  2721[m[K				if( ( ulReceiveLength < ( uint32_t ) [01;31m[KpxSocket[m[K->u.xTCP.usCurMSS ) ||	/* Received a small message. */
[01;32m[K  2722[m[K					( lRxSpace < ipNUMERIC_CAST( int32_t, 2U * [01;31m[KpxSocket[m[K->u.xTCP.usCurMSS ) ) )	/* There are less than 2 x MSS space in the Rx buffer. */
[01;32m[K  3161[m[K				}	/* if( [01;31m[KpxSocket[m[K->u.xTCP.ucTCPState == eTCP_LISTEN ). */
[01;32m[K  3229[m[K				/* [01;31m[KpxSocket[m[K is not NULL when xResult != pdFAIL. */

[1;34m./test/cbmc/proofs/CheckOptions/CheckOptions_harness.c[39m

[01;32m[K    78[m[K	    /* [01;31m[KpxSocket[m[K can be any socket */

[1;34m./test/cbmc/proofs/CheckOptionsInner/CheckOptionsInner_harness.c[39m

[01;32m[K    44[m[K	    /* [01;31m[KpxSocket[m[K can be any socket with some initialized values */
[01;32m[K    87[m[K	    /* Assuming quite a bit more about the initialization of [01;31m[KpxSocket[m[K */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   107[m[K	 * Return pdTRUE only if [01;31m[KpxSocket[m[K is valid and bound, as far as can be
[01;32m[K   274[m[K		( void )[01;31m[KpxSocket[m[K;	/* Was only use fot sizeof. */
[01;32m[K   350[m[K					[01;31m[KpxSocket[m[K->ucProtocol		= ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
[01;32m[K  1005[m[K				( void ) xEventGroupWaitBits( [01;31m[KpxSocket[m[K->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
[01;32m[K  1557[m[K							/* It is not allowed to access '[01;31m[KpxSocket[m[K->u.xTCP'. */
[01;32m[K  1615[m[K							[01;31m[KpxSocket[m[K->u.xTCP.uxRxWinSize = ( uint32_t )pxProps->lRxWinSize;	/* Fixed value: size of the TCP reception window */
[01;32m[K  1616[m[K							[01;31m[KpxSocket[m[K->u.xTCP.uxTxWinSize = ( uint32_t )pxProps->lTxWinSize;	/* Fixed value: size of the TCP transmit window */
[01;32m[K  1694[m[K							[01;31m[KpxSocket[m[K->u.xTCP.usTimeout = 1U; /* to set/clear bSendFullSize */
[01;32m[K  1717[m[K						[01;31m[KpxSocket[m[K->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
[01;32m[K  2239[m[K				xResult = bMayConnect( [01;31m[KpxSocket[m[K ); /* -EINPROGRESS, -EAGAIN, or 0 for OK */
[01;32m[K  2340[m[K					( void ) xEventGroupWaitBits( [01;31m[KpxSocket[m[K->xEventGroup, ( EventBits_t ) eSOCKET_CONNECT, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
[01;32m[K  2468[m[K					( void ) xEventGroupWaitBits( [01;31m[KpxSocket[m[K->xEventGroup, ( EventBits_t ) eSOCKET_ACCEPT, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
[01;32m[K  2649[m[K								[01;31m[KpxSocket[m[K->u.xTCP.usTimeout = 1U; /* because bLowWater is cleared. */
[01;32m[K  3173[m[K						/* This '[01;31m[KpxSocket[m[K' doesn't match. */
[01;32m[K  3731[m[K						[01;31m[KpxSocket[m[K->usLocalPort,		/* Local port on this machine */
[01;32m[K  3732[m[K						[01;31m[KpxSocket[m[K->u.xTCP.ulRemoteIP,	/* IP address of remote machine */
[01;32m[K  3733[m[K						[01;31m[KpxSocket[m[K->u.xTCP.usRemotePort,	/* Port on remote machine */
[01;32m[K  3895[m[K					}	/* if( [01;31m[KpxSocket[m[K->ucProtocol == FREERTOS_IPPROTO_TCP ) */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   582[m[K		'[01;31m[KpxSocketSet[m[K' */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1142[m[K	 * that: (([01;31m[KpxTCPHeader[m[K->ucTCPOffset & 0xf0) > 0x50), meaning that the TP header
[01;32m[K  1471[m[K			[01;31m[KpxTCPHeader[m[K->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
[01;32m[K  1472[m[K			[01;31m[KpxTCPHeader[m[K->ucOptdata[ uxOptionsLength + 3U ] = 2U;	/* 2: length of this option. */
[01;32m[K  2709[m[K				( [01;31m[KpxTCPHeader[m[K->ucTCPFlags == tcpTCP_FLAG_ACK ) )		/* There are no other flags than an ACK. */

[1;34m./test/cbmc/proofs/CheckOptions/CheckOptions_harness.c[39m

[01;32m[K    96[m[K	    /* Buffer must be big enough to hold pxTCPPacket and [01;31m[KpxTCPHeader[m[K */

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K    52[m[K			data from [01;31m[KpxTCPHeader[m[K->ucOptdata to pxTCPWindow->ulOptionsData.*/

[1;34m./test/cbmc/proofs/CheckOptions/CheckOptions_harness.c[39m

[01;32m[K    96[m[K	    /* Buffer must be big enough to hold [01;31m[KpxTCPPacket[m[K and pxTCPHeader */

[1;34m./test/cbmc/proofs/parsing/ProcessReceivedTCPPacket/ProcessReceivedTCPPacket_harness.c[39m

[01;32m[K    11[m[K	/* This proof assumes FreeRTOS_socket, [01;31m[KpxTCPSocketLookup[m[K and 
[01;32m[K    32[m[K	/* Abstraction of [01;31m[KpxTCPSocketLookup[m[K */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2445[m[K				[01;31m[KpxTCPWindow[m[K->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
[01;32m[K  2926[m[K					[01;31m[KpxTCPWindow[m[K->tx.ulCurrentSequenceNumber = [01;31m[KpxTCPWindow[m[K->tx.ulFirstSequenceNumber + 1UL; /* because we send a TCP_SYN. */

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K    52[m[K			data from pxTCPHeader->ucOptdata to [01;31m[KpxTCPWindow[m[K->ulOptionsData.*/

[1;34m./test/cbmc/proofs/parsing/ProcessReceivedUDPPacket/ProcessReceivedUDPPacket_harness.c[39m

[01;32m[K    12[m[K	/*This proof assumes that [01;31m[KpxUDPSocketLookup[m[K is implemented correctly. */
[01;32m[K    32[m[K	/* Abstraction of [01;31m[KpxUDPSocketLookup[m[K */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   107[m[K	 * segments: '[01;31m[KpxWindow[m[K->xRxSegments'.
[01;32m[K   632[m[K			vListInitialise( &( [01;31m[KpxWindow[m[K->xPriorityQueue ) );	/* Priority queue: segments which must be sent immediately */
[01;32m[K   633[m[K			vListInitialise( &( [01;31m[KpxWindow[m[K->xTxQueue ) );			/* Transmit queue: segments queued for transmission */
[01;32m[K   634[m[K			vListInitialise( &( [01;31m[KpxWindow[m[K->xWaitQueue ) );		/* Waiting queue:  outstanding segments */
[01;32m[K   808[m[K			As a side-effect, [01;31m[KpxWindow[m[K->ulUserDataLength will get set to non-zero,
[01;32m[K  1406[m[K						/* [01;31m[KpxWindow[m[K->tx.highest registers the highest sequence

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   166[m[K	 * But [01;31m[KpxWindow[m[K->ackno should always be used to set "BUF->ackno" */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   119[m[K	#define   QMU_SOFTWARE_RESET          (0x0002)    /* [01;31m[KQMU[m[K soft reset (clear TxQ, RxQ) */
[01;32m[K   120[m[K	#define   GLOBAL_SOFTWARE_RESET       (0x0001)    /* Global soft reset (PHY, MAC, [01;31m[KQMU[m[K) */
[01;32m[K   167[m[K	#define REG_QDR_DUMMY              (0x00)       /* Dummy address to access [01;31m[KQMU[m[K RxQ, TxQ */
[01;32m[K   257[m[K	#define   RXQ_START                   (0x0008)    /* Start [01;31m[KQMU[m[K transfer operation */
[01;32m[K   315[m[K	 * [01;31m[KQMU[m[K Receive Queue Watermark Control Registers
[01;32m[K   319[m[K	#define   RX_LOW_WATERMARK_MASK       (0x0FFF)    /* Set [01;31m[KQMU[m[K RxQ low watermark mask */
[01;32m[K   322[m[K	#define   RX_HIGH_WATERMARK_MASK      (0x0FFF)    /* Set [01;31m[KQMU[m[K RxQ high watermark mask */
[01;32m[K   325[m[K	#define   RX_OVERRUN_WATERMARK_MASK   (0x0FFF)    /* Set [01;31m[KQMU[m[K RxQ overrun watermark mask */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   403[m[K		/* Init step2-4: write [01;31m[KQMU[m[K MAC address (low, middle then high). */
[01;32m[K   408[m[K		/* Init step5: enable [01;31m[KQMU[m[K Transmit Frame Data Pointer Auto Increment. */
[01;32m[K   411[m[K		/* Init step6: configure [01;31m[KQMU[m[K transmit control register. */
[01;32m[K   422[m[K		/* Init step7: enable [01;31m[KQMU[m[K Receive Frame Data Pointer Auto Increment. */
[01;32m[K   425[m[K		/* Init step8: configure [01;31m[KQMU[m[K Receive Frame Threshold for one frame. */
[01;32m[K   428[m[K		/* Init step9: configure [01;31m[KQMU[m[K receive control register1. */
[01;32m[K   455[m[K		/* Init step11: configure [01;31m[KQMU[m[K receive queue: trigger INT and auto-dequeue frame. */
[01;32m[K   476[m[K		/* Init step16: enable [01;31m[KQMU[m[K Transmit. */
[01;32m[K   479[m[K		/* Init step17: enable [01;31m[KQMU[m[K Receive. */

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   700[m[K	#define GMAC_ST1RPQ_QNB_Msk (0xfu << GMAC_ST1RPQ_QNB_Pos) /**< \brief (GMAC_ST1RPQ[16]) [01;31m[KQue[m[K Number (0->7) */
[01;32m[K   712[m[K	#define GMAC_ST2RPQ_QNB_Msk (0xfu << GMAC_ST2RPQ_QNB_Pos) /**< \brief (GMAC_ST2RPQ[16]) [01;31m[KQue[m[K Number (0->7) */

[1;34m./test/cbmc/include/queue_init.h[39m

[01;32m[K    68[m[K		// [01;31m[KQueueGenericCreate[m[K method does not check for multiplication overflow
[01;32m[K   100[m[K		// [01;31m[KQueueGenericCreate[m[K method does not check for multiplication overflow

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1098[m[K	 * \page gmac_quickstart [01;31m[KQuickstart[m[K guide for GMAC driver.
[01;32m[K  1100[m[K	 * This is the [01;31m[Kquickstart[m[K guide for the \ref gmac_group "Ethernet MAC",

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1101[m[K	 * \page gmac_quickstart [01;31m[KQuickstart[m[K guide for GMAC driver.
[01;32m[K  1103[m[K	 * This is the [01;31m[Kquickstart[m[K guide for the \ref gmac_group "Ethernet MAC",

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   258[m[K		/* Promiscuous flag (PR) and Receive All flag ([01;31m[KRA[m[K) set to zero.  The

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1155[m[K	  /* Set the [01;31m[KRA[m[K bit according to ETH ReceiveAll value */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   138[m[K		#define configPLACE_IN_SECTION_RAM	__attribute__ ((section(".[01;31m[Kramfunc[m[K")))

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   262[m[K	 *            Having a well [01;31m[Krandomised[m[K ISN is important to avoid spoofing

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   265[m[K	 *            Having a well [01;31m[Krandomised[m[K ISN is important to avoid spoofing

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   620[m[K			/* There was a problem with the [01;31m[Krandomiser[m[K. */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K  1005[m[K				/* Clear [01;31m[KRBUS[m[K ETHERNET DMA flag. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1334[m[K			{ MK_PAIR( [01;31m[KRCOMP[m[K ) }, /* Receive complete */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1337[m[K			{ MK_PAIR( [01;31m[KRCOMP[m[K ) }, /* Receive complete */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K  1406[m[K			{ MK_PAIR( [01;31m[KRCOMP[m[K ) }, /* Receive complete */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   110[m[K			uint32_t ulCurrentSequenceNumber;/* Tx/Rx: the oldest sequence number not yet confirmed, also SND.UNA / [01;31m[KRCV[m[K.NXT

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   320[m[K	    if ((cur_entry == (uint32_t)cur_rx_desc_ptr) && (!(m_status & EMAC_INTSTS_RDUIF_Msk)))  // cur_entry may equal to cur_rx_desc_ptr if [01;31m[KRDU[m[K occures

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   240[m[K	See [01;31m[KREADME[m[K.TXT in this folder. */

[1;34m./test/cbmc/proofs/ParseDNSReply/ParseDNSReply_harness.c[39m

[01;32m[K    32[m[K	 * Abstraction of prvReadNameField proved in [01;31m[KReadNameField[m[K
[01;32m[K    61[m[K			   "[01;31m[KReadNameField[m[K: uxDestLen <= NAME_SIZE)");

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1155[m[K	  /* Set the RA bit according to ETH [01;31m[KReceiveAll[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   507[m[K	  uint32_t             [01;31m[KReceiveAll[m[K;                /*!< Selects or not all frames reception by the MAC (No filtering).

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   331[m[K	                 * is assumed [01;31m[KReceiveData[m[K() is a peripheral driver function that
[01;32m[K   337[m[K	                /*[01;31m[KReceiveData[m[K( pxBufferDescriptor->pucEthernetBuffer ); */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1196[m[K	   /* Set the RFE bit according to ETH [01;31m[KReceiveFlowControl[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   551[m[K	  uint32_t             [01;31m[KReceiveFlowControl[m[K;        /*!< Enables or disables the MAC to decode the received Pause frame and

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1129[m[K	  /* Set the DO bit according to ETH [01;31m[KReceiveOwn[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   483[m[K	  uint32_t             [01;31m[KReceiveOwn[m[K;                /*!< Selects or not the [01;31m[KReceiveOwn[m[K,
[01;32m[K   484[m[K	                                                           [01;31m[KReceiveOwn[m[K allows the reception of frames when the TX_EN signal is asserted

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1244[m[K	    /* Set the RSF bit according to ETH [01;31m[KReceiveStoreForward[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   577[m[K	  uint32_t             [01;31m[KReceiveStoreForward[m[K;         /*!< Enables or disables the Receive store and forward mode.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1250[m[K	    /* Set the RTC bit according to ETH [01;31m[KReceiveThresholdControl[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   596[m[K	  uint32_t             [01;31m[KReceiveThresholdControl[m[K;     /*!< Selects the threshold level of the Receive FIFO.

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   443[m[K	 * \brief Store [01;31m[Kreceivetime[m[K stamp to memory.

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   446[m[K	 * \brief Store [01;31m[Kreceivetime[m[K stamp to memory.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   441[m[K	 * \brief Store [01;31m[Kreceivetime[m[K stamp to memory.

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   463[m[K		call the handler.  Returns pdTRUE if uxIdentifier was [01;31m[Krecognised[m[K. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   819[m[K					minus 1, which will	be [01;31m[Krecognised[m[K as a keep-alive packet an

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K    71[m[K	#define tcpTCP_FLAG_PSH				( ( uint8_t ) 0x08U ) /* Push function: please push buffered data to the [01;31m[Krecv[m[K application */
[01;32m[K  1129[m[K				( ( uxFlags & ( size_t ) tcpTCP_FLAG_PSH ) != 0 )   ? 'P' : '.',	/* 0x0008: Push function: please push buffered data to the [01;31m[Krecv[m[K application */

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K    74[m[K	#define tcpTCP_FLAG_PSH					0x0008u /* Push function: please push buffered data to the [01;31m[Krecv[m[K application */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   482[m[K						order to interrupt a call to [01;31m[Krecv[m[K() or a call to select(). */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   631[m[K		TickType_t xReceiveBlockTime; /* if [01;31m[Krecv[m[K[to] is called while no data is available, wait this amount of time. Unit in clock-ticks */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   147[m[K	#define FREERTOS_MSG_DONTWAIT			( 16 )		/* Can be used with recvfrom(), sendto(), [01;31m[Krecv[m[K(), and send(). */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   606[m[K						/* The user has provided a callback function, so do not block on [01;31m[Krecvfrom[m[K() */

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K   104[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/[01;31m[Krecvfrom[m[K.html
[01;32m[K   104[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/[01;31m[Krecvfrom[m[K.html
[01;32m[K   133[m[K	     * The code calls [01;31m[Krecvfrom[m[K with these parameters NULL, it is not

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   147[m[K	#define FREERTOS_MSG_DONTWAIT			( 16 )		/* Can be used with [01;31m[Krecvfrom[m[K(), sendto(), recv(), and send(). */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   460[m[K	#define   PORT_RX_FLOW_CTRL           (0x1000)     /* [01;31m[KReeive[m[K flow control feature is active */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   186[m[K	#define PHY_REG_04_ADVERTISE       0x04 // Advertisement control [01;31m[Kreg[m[K
[01;32m[K   187[m[K	#define PHY_REG_05_LPA             0x05 // Link partner ability [01;31m[Kreg[m[K

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K    87[m[K	 * \param [01;31m[Kreg[m[K the register address to modify.
[01;32m[K   102[m[K	 * \param [01;31m[Kreg[m[K the register address to modify.
[01;32m[K   143[m[K	 * \param [01;31m[Kreg[m[K the register address to modify.
[01;32m[K   216[m[K	 * \param [01;31m[Kreg[m[K the register address to modify.

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_physpeed.c[39m

[01;32m[K    97[m[K	//#define PHY_REG_04_ADVERTISE       0x04 // Advertisement control [01;31m[Kreg[m[K

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K    65[m[K	#define phyREG_04_ADVERTISE			0x04U	/* Advertisement control [01;31m[Kreg[m[K */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K    74[m[K		#define PHY_REG_04_ADVERTISE       0x04 // Advertisement control [01;31m[Kreg[m[K
[01;32m[K    75[m[K		#define PHY_REG_05_LPA             0x05 // Link partner ability [01;31m[Kreg[m[K
[01;32m[K   171[m[K	//#define GMII_EXTEND_STATUS     (1 << 8)  // 1 = Extend Status Information In [01;31m[KReg[m[K 15

[1;34m./portable/NetworkInterface/M487/m480_eth.h[39m

[01;32m[K    36[m[K	#define MII_ADVERTISE       0x04        /* Advertisement control [01;31m[Kreg[m[K   */
[01;32m[K    37[m[K	#define MII_LPA             0x05        /* Link partner ability [01;31m[Kreg[m[K    */
[01;32m[K    41[m[K	#define MII_NWAYTEST        0x14        /* N-way auto-neg test [01;31m[Kreg[m[K     */
[01;32m[K    64[m[K	#define BMSR_ERCAP              0x0001  /* Ext-[01;31m[Kreg[m[K capability          */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K  1269[m[K	#define ETH_MAC_ADDRESSMASK_BYTE6      ((uint32_t)0x20000000U)  /*!< Mask MAC Address high [01;31m[Kreg[m[K bits [15:8] */
[01;32m[K  1270[m[K	#define ETH_MAC_ADDRESSMASK_BYTE5      ((uint32_t)0x10000000U)  /*!< Mask MAC Address high [01;31m[Kreg[m[K bits [7:0] */
[01;32m[K  1271[m[K	#define ETH_MAC_ADDRESSMASK_BYTE4      ((uint32_t)0x08000000U)  /*!< Mask MAC Address low [01;31m[Kreg[m[K bits [31:24] */
[01;32m[K  1272[m[K	#define ETH_MAC_ADDRESSMASK_BYTE3      ((uint32_t)0x04000000U)  /*!< Mask MAC Address low [01;31m[Kreg[m[K bits [23:16] */
[01;32m[K  1273[m[K	#define ETH_MAC_ADDRESSMASK_BYTE2      ((uint32_t)0x02000000U)  /*!< Mask MAC Address low [01;31m[Kreg[m[K bits [15:8] */
[01;32m[K  1274[m[K	#define ETH_MAC_ADDRESSMASK_BYTE1      ((uint32_t)0x01000000U)  /*!< Mask MAC Address low [01;31m[Kreg[m[K bits [70] */

[1;34m./portable/NetworkInterface/RX/ether_callback.c[39m

[01;32m[K    56[m[K	* Description  : [01;31m[KRegist[m[K of callback function

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   455[m[K	  * @param [01;31m[KRegValue[m[K: PHY register value
[01;32m[K   537[m[K	  * @param  [01;31m[KRegValue[m[K: the value to write

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   456[m[K			/* [01;31m[KReinit[m[K TX descriptors. */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K     3[m[K	* This software is supplied by [01;31m[KRenesas[m[K Electronics Corporation and is only intended for use with [01;31m[KRenesas[m[K products. No
[01;32m[K     4[m[K	* other uses are authorized. This software is owned by [01;31m[KRenesas[m[K Electronics Corporation and is protected under all
[01;32m[K     6[m[K	* THIS SOFTWARE IS PROVIDED "AS IS" AND [01;31m[KRENESAS[m[K MAKES NO WARRANTIES REGARDING
[01;32m[K     9[m[K	* EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER [01;31m[KRENESAS[m[K ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES
[01;32m[K    11[m[K	* SOFTWARE, EVEN IF [01;31m[KRENESAS[m[K OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
[01;32m[K    12[m[K	* [01;31m[KRenesas[m[K reserves the right, without notice, to make changes to this software and to discontinue the availability of
[01;32m[K    15[m[K	* http://www.[01;31m[Krenesas[m[K.com/disclaimer
[01;32m[K    15[m[K	* http://www.[01;31m[Krenesas[m[K.com/disclaimer
[01;32m[K    17[m[K	* Copyright (C) 2018 [01;31m[KRenesas[m[K Electronics Corporation. All rights reserved.

[1;34m./portable/NetworkInterface/RX/ether_callback.c[39m

[01;32m[K     3[m[K	* This software is supplied by [01;31m[KRenesas[m[K Electronics Corporation and is only intended for use with [01;31m[KRenesas[m[K products. No
[01;32m[K     4[m[K	* other uses are authorized. This software is owned by [01;31m[KRenesas[m[K Electronics Corporation and is protected under all
[01;32m[K     6[m[K	* THIS SOFTWARE IS PROVIDED "AS IS" AND [01;31m[KRENESAS[m[K MAKES NO WARRANTIES REGARDING
[01;32m[K     9[m[K	* EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER [01;31m[KRENESAS[m[K ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES
[01;32m[K    11[m[K	* SOFTWARE, EVEN IF [01;31m[KRENESAS[m[K OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
[01;32m[K    12[m[K	* [01;31m[KRenesas[m[K reserves the right, without notice, to make changes to this software and to discontinue the availability of
[01;32m[K    15[m[K	* http://www.[01;31m[Krenesas[m[K.com/disclaimer
[01;32m[K    15[m[K	* http://www.[01;31m[Krenesas[m[K.com/disclaimer
[01;32m[K    17[m[K	* Copyright (C) 2015 [01;31m[KRenesas[m[K Electronics Corporation. All rights reserved.

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   251[m[K	    /* NOTE: [01;31m[KreqLength[m[K should NOT include the ipBUFFER_PADDING (which should be == 10!) */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K   221[m[K	 * The above pins should be predefined for corresponding settings in [01;31m[KresetPins[m[K.

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K   147[m[K	 * The above pins should be predefined for corresponding settings in [01;31m[KresetPins[m[K.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1133[m[K	  /* Set the DR bit according to ETH [01;31m[KRetryTransmission[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   494[m[K	  uint32_t             [01;31m[KRetryTransmission[m[K;         /*!< Selects or not the MAC attempt retries transmission, based on the settings of BL,

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   192[m[K	  * @[01;31m[Kretval[m[K HAL status
[01;32m[K   293[m[K	  * @[01;31m[Kretval[m[K HAL status
[01;32m[K   317[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K   331[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K   408[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K   422[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K   436[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K   456[m[K	  * @[01;31m[Kretval[m[K HAL status
[01;32m[K   538[m[K	  * @[01;31m[Kretval[m[K HAL status
[01;32m[K   639[m[K	  * @[01;31m[Kretval[m[K HAL status
[01;32m[K   678[m[K	  * @[01;31m[Kretval[m[K HAL status
[01;32m[K   785[m[K	  * @[01;31m[Kretval[m[K HAL status
[01;32m[K   937[m[K	  * @[01;31m[Kretval[m[K HAL status
[01;32m[K  1039[m[K	  * @[01;31m[Kretval[m[K HAL state
[01;32m[K  1064[m[K	  * @[01;31m[Kretval[m[K HAL status
[01;32m[K  1309[m[K	  * @[01;31m[Kretval[m[K HAL status
[01;32m[K  1336[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1349[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1362[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1375[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1388[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1402[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1416[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1430[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1444[m[K	  * @[01;31m[Kretval[m[K None

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K  1678[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1686[m[K	  * @[01;31m[Kretval[m[K the ETH_DMATxDescFlag (SET or RESET).
[01;32m[K  1694[m[K	  * @[01;31m[Kretval[m[K the ETH_DMATxDescFlag (SET or RESET).
[01;32m[K  1701[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1708[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1715[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1722[m[K	  * @[01;31m[Kretval[m[K The Transmit descriptor collision counter value.
[01;32m[K  1729[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1736[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1743[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1756[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1763[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1770[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1777[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1784[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1796[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1808[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1815[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1822[m[K	  * @[01;31m[Kretval[m[K The new state of flow control busy status bit (SET or RESET).
[01;32m[K  1829[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1836[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1850[m[K	  * @[01;31m[Kretval[m[K The state of Ethernet MAC flag.
[01;32m[K  1859[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1868[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1876[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1884[m[K	  * @[01;31m[Kretval[m[K The new state of ETH_DMA_FLAG (SET or RESET).
[01;32m[K  1892[m[K	  * @[01;31m[Kretval[m[K The new state of ETH_DMA_FLAG (SET or RESET).
[01;32m[K  1903[m[K	  * @[01;31m[Kretval[m[K The state of Ethernet DMA overflow Flag (SET or RESET).
[01;32m[K  1911[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1919[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1927[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1934[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1941[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1948[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1955[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1962[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1969[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1981[m[K	  * @[01;31m[Kretval[m[K The new state of Ethernet PMT Flag (SET or RESET).
[01;32m[K  1988[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  1995[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2003[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2010[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2017[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2024[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2031[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2038[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2045[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2057[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2068[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2079[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2091[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2097[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2103[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2109[m[K	  * @[01;31m[Kretval[m[K None.
[01;32m[K  2115[m[K	  * @[01;31m[Kretval[m[K None.
[01;32m[K  2121[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2127[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2133[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2139[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2145[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2151[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2157[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2164[m[K	  * @[01;31m[Kretval[m[K None
[01;32m[K  2171[m[K	  * @[01;31m[Kretval[m[K None.

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  4001[m[K		EventBits_t [01;31m[Krevents[m[K;	/* returned events */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1679[m[K							which might lead to a second fast [01;31m[Krexmit[m[K. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2973[m[K								request. [According to [01;31m[KRFC[m[K 793 a connection can stay
[01;32m[K  3173[m[K							/* Per the above [01;31m[KRFC[m[K, "In the SYN-SENT state ... the RST is

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   602[m[K		https://www.ietf.org/[01;31m[Krfc[m[K/rfc2131.txt, Transaction ID should be a random
[01;32m[K   602[m[K		https://www.ietf.org/[01;31m[Krfc[m[K/rfc2131.txt, Transaction ID should be a random

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K    69[m[K	 * Generate a randomized TCP Initial Sequence Number per [01;31m[KRFC[m[K.

[1;34m./include/FreeRTOS_TCP_IP.h[39m

[01;32m[K    58[m[K							 acknowledgement of its connection termination request. [According to [01;31m[KRFC[m[K 793 a connection can

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1196[m[K	   /* Set the [01;31m[KRFE[m[K bit according to ETH ReceiveFlowControl value */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K   145[m[K	#define GMII_RCCPSR     260  // [01;31m[KRGMII[m[K Clock and Control Pad Skew Register
[01;32m[K   145[m[K	#define GMII_RCCPSR     260  // [01;31m[KRGMII[m[K Clock and Control Pad Skew Register
[01;32m[K   146[m[K	#define GMII_RRDPSR     261  // [01;31m[KRGMII[m[K RX Data Pad Skew Register
[01;32m[K   146[m[K	#define GMII_RRDPSR     261  // [01;31m[KRGMII[m[K RX Data Pad Skew Register

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   232[m[K	#define GMAC_UR_RGMII (0x1u << 0) /**< \brief (GMAC_UR) [01;31m[KRGMII[m[K Mode */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K    58[m[K	         (##) Write data to a specific [01;31m[KRHY[m[K register:

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K     3[m[K	 * Authors include Hein Tibosch and [01;31m[KRichard[m[K Barry

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   876[m[K			/* Check [01;31m[KRLE[m[K */
[01;32m[K   878[m[K				/* Status [01;31m[KRLE[m[K & Number of discarded buffers */
[01;32m[K   917[m[K				/* Notify upper layer [01;31m[KRLE[m[K */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   866[m[K			/* Check [01;31m[KRLE[m[K */
[01;32m[K   868[m[K				/* Status [01;31m[KRLE[m[K & Number of discarded buffers */
[01;32m[K   900[m[K				/* Notify upper layer [01;31m[KRLE[m[K */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1332[m[K			{ MK_PAIR( [01;31m[KRLEX[m[K  ) }, /* Enable retry limit  exceeded interrupt. */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1335[m[K			{ MK_PAIR( [01;31m[KRLEX[m[K  ) }, /* Enable retry limit  exceeded interrupt. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K  1404[m[K			{ MK_PAIR( [01;31m[KRLEX[m[K  ) }, /* Enable retry limit  exceeded interrupt. */

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K     4[m[K	 * a Media-Independent Interface (MII), or a Reduced Media-Independent Interface ([01;31m[KRMII[m[K).

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K    87[m[K		#define	PHY_REG_17_RBR        0x17	// 23	RW		[01;31m[KRMII[m[K and Bypass Register

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   572[m[K				/* Selecting [01;31m[KRMII[m[K mode. */

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   215[m[K	    // Configure [01;31m[KRMII[m[K pins
[01;32m[K   230[m[K	    // Enable high slew rate on all [01;31m[KRMII[m[K TX output pins

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   133[m[K	/* Two choices must be made: [01;31m[KRMII[m[K versus MII,

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   221[m[K		/* Select MII or [01;31m[KRMII[m[K Mode*/

[1;34m./portable/NetworkInterface/include/phyHandling.h[39m

[01;32m[K     4[m[K	 * a Media-Independent Interface (MII), or a Reduced Media-Independent Interface ([01;31m[KRMII[m[K).

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K    80[m[K		#define	PHY_REG_10_PHYSTS     0x10	// 16	[01;31m[KRO[m[K		PHY Status Register
[01;32m[K    82[m[K		#define	PHY_REG_12_MISR       0x12	// 18	[01;31m[KRO[m[K		MII Interrupt Status Register
[01;32m[K    84[m[K		#define	PHY_REG_14_FCSCR      0x14	// 20	[01;31m[KRO[m[K		False Carrier Sense Counter Register
[01;32m[K    85[m[K		#define	PHY_REG_15_RECR       0x15	// 21	[01;31m[KRO[m[K		Receive Error Counter Register

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1727[m[K							/* The ucCurrentIPAddress value increments without bound and will [01;31m[Krollover[m[K, */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K  2029[m[K	  * @brief  Enables the MMC Counter Stop [01;31m[KRollover[m[K.
[01;32m[K  2036[m[K	  * @brief  Disables the MMC Counter Stop [01;31m[KRollover[m[K.

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K    62[m[K	  [01;31m[KRoReg[m[K   GMAC_NSR;        /**< \brief (Gmac Offset: 0x008) Network Status Register */
[01;32m[K    69[m[K	  [01;31m[KRoReg[m[K   GMAC_ISR;        /**< \brief (Gmac Offset: 0x024) Interrupt Status Register */
[01;32m[K    72[m[K	  [01;31m[KRoReg[m[K   GMAC_IMR;        /**< \brief (Gmac Offset: 0x030) Interrupt Mask Register */
[01;32m[K    74[m[K	  [01;31m[KRoReg[m[K   GMAC_RPQ;        /**< \brief (Gmac Offset: 0x038) Received Pause Quantum Register */
[01;32m[K    90[m[K	  [01;31m[KRoReg[m[K   GMAC_OTLO;       /**< \brief (Gmac Offset: 0x100) Octets Transmitted [31:0] Register */
[01;32m[K    91[m[K	  [01;31m[KRoReg[m[K   GMAC_OTHI;       /**< \brief (Gmac Offset: 0x104) Octets Transmitted [47:32] Register */
[01;32m[K    92[m[K	  [01;31m[KRoReg[m[K   GMAC_FT;         /**< \brief (Gmac Offset: 0x108) Frames Transmitted Register */
[01;32m[K    93[m[K	  [01;31m[KRoReg[m[K   GMAC_BCFT;       /**< \brief (Gmac Offset: 0x10C) Broadcast Frames Transmitted Register */
[01;32m[K    94[m[K	  [01;31m[KRoReg[m[K   GMAC_MFT;        /**< \brief (Gmac Offset: 0x110) Multicast Frames Transmitted Register */
[01;32m[K    95[m[K	  [01;31m[KRoReg[m[K   GMAC_PFT;        /**< \brief (Gmac Offset: 0x114) Pause Frames Transmitted Register */
[01;32m[K    96[m[K	  [01;31m[KRoReg[m[K   GMAC_BFT64;      /**< \brief (Gmac Offset: 0x118) 64 Byte Frames Transmitted Register */
[01;32m[K    97[m[K	  [01;31m[KRoReg[m[K   GMAC_TBFT127;    /**< \brief (Gmac Offset: 0x11C) 65 to 127 Byte Frames Transmitted Register */
[01;32m[K    98[m[K	  [01;31m[KRoReg[m[K   GMAC_TBFT255;    /**< \brief (Gmac Offset: 0x120) 128 to 255 Byte Frames Transmitted Register */
[01;32m[K    99[m[K	  [01;31m[KRoReg[m[K   GMAC_TBFT511;    /**< \brief (Gmac Offset: 0x124) 256 to 511 Byte Frames Transmitted Register */
[01;32m[K   100[m[K	  [01;31m[KRoReg[m[K   GMAC_TBFT1023;   /**< \brief (Gmac Offset: 0x128) 512 to 1023 Byte Frames Transmitted Register */
[01;32m[K   101[m[K	  [01;31m[KRoReg[m[K   GMAC_TBFT1518;   /**< \brief (Gmac Offset: 0x12C) 1024 to 1518 Byte Frames Transmitted Register */
[01;32m[K   102[m[K	  [01;31m[KRoReg[m[K   GMAC_GTBFT1518;  /**< \brief (Gmac Offset: 0x130) Greater Than 1518 Byte Frames Transmitted Register */
[01;32m[K   103[m[K	  [01;31m[KRoReg[m[K   GMAC_TUR;        /**< \brief (Gmac Offset: 0x134) Transmit Under Runs Register */
[01;32m[K   104[m[K	  [01;31m[KRoReg[m[K   GMAC_SCF;        /**< \brief (Gmac Offset: 0x138) Single Collision Frames Register */
[01;32m[K   105[m[K	  [01;31m[KRoReg[m[K   GMAC_MCF;        /**< \brief (Gmac Offset: 0x13C) Multiple Collision Frames Register */
[01;32m[K   106[m[K	  [01;31m[KRoReg[m[K   GMAC_EC;         /**< \brief (Gmac Offset: 0x140) Excessive Collisions Register */
[01;32m[K   107[m[K	  [01;31m[KRoReg[m[K   GMAC_LC;         /**< \brief (Gmac Offset: 0x144) Late Collisions Register */
[01;32m[K   108[m[K	  [01;31m[KRoReg[m[K   GMAC_DTF;        /**< \brief (Gmac Offset: 0x148) Deferred Transmission Frames Register */
[01;32m[K   109[m[K	  [01;31m[KRoReg[m[K   GMAC_CSE;        /**< \brief (Gmac Offset: 0x14C) Carrier Sense Errors Register */
[01;32m[K   110[m[K	  [01;31m[KRoReg[m[K   GMAC_ORLO;       /**< \brief (Gmac Offset: 0x150) Octets Received [31:0] Received */
[01;32m[K   111[m[K	  [01;31m[KRoReg[m[K   GMAC_ORHI;       /**< \brief (Gmac Offset: 0x154) Octets Received [47:32] Received */
[01;32m[K   112[m[K	  [01;31m[KRoReg[m[K   GMAC_FR;         /**< \brief (Gmac Offset: 0x158) Frames Received Register */
[01;32m[K   113[m[K	  [01;31m[KRoReg[m[K   GMAC_BCFR;       /**< \brief (Gmac Offset: 0x15C) Broadcast Frames Received Register */
[01;32m[K   114[m[K	  [01;31m[KRoReg[m[K   GMAC_MFR;        /**< \brief (Gmac Offset: 0x160) Multicast Frames Received Register */
[01;32m[K   115[m[K	  [01;31m[KRoReg[m[K   GMAC_PFR;        /**< \brief (Gmac Offset: 0x164) Pause Frames Received Register */
[01;32m[K   116[m[K	  [01;31m[KRoReg[m[K   GMAC_BFR64;      /**< \brief (Gmac Offset: 0x168) 64 Byte Frames Received Register */
[01;32m[K   117[m[K	  [01;31m[KRoReg[m[K   GMAC_TBFR127;    /**< \brief (Gmac Offset: 0x16C) 65 to 127 Byte Frames Received Register */
[01;32m[K   118[m[K	  [01;31m[KRoReg[m[K   GMAC_TBFR255;    /**< \brief (Gmac Offset: 0x170) 128 to 255 Byte Frames Received Register */
[01;32m[K   119[m[K	  [01;31m[KRoReg[m[K   GMAC_TBFR511;    /**< \brief (Gmac Offset: 0x174) 256 to 511Byte Frames Received Register */
[01;32m[K   120[m[K	  [01;31m[KRoReg[m[K   GMAC_TBFR1023;   /**< \brief (Gmac Offset: 0x178) 512 to 1023 Byte Frames Received Register */
[01;32m[K   121[m[K	  [01;31m[KRoReg[m[K   GMAC_TBFR1518;   /**< \brief (Gmac Offset: 0x17C) 1024 to 1518 Byte Frames Received Register */
[01;32m[K   122[m[K	  [01;31m[KRoReg[m[K   GMAC_TMXBFR;     /**< \brief (Gmac Offset: 0x180) 1519 to Maximum Byte Frames Received Register */
[01;32m[K   123[m[K	  [01;31m[KRoReg[m[K   GMAC_UFR;        /**< \brief (Gmac Offset: 0x184) Undersize Frames Received Register */
[01;32m[K   124[m[K	  [01;31m[KRoReg[m[K   GMAC_OFR;        /**< \brief (Gmac Offset: 0x188) Oversize Frames Received Register */
[01;32m[K   125[m[K	  [01;31m[KRoReg[m[K   GMAC_JR;         /**< \brief (Gmac Offset: 0x18C) Jabbers Received Register */
[01;32m[K   126[m[K	  [01;31m[KRoReg[m[K   GMAC_FCSE;       /**< \brief (Gmac Offset: 0x190) Frame Check Sequence Errors Register */
[01;32m[K   127[m[K	  [01;31m[KRoReg[m[K   GMAC_LFFE;       /**< \brief (Gmac Offset: 0x194) Length Field Frame Errors Register */
[01;32m[K   128[m[K	  [01;31m[KRoReg[m[K   GMAC_RSE;        /**< \brief (Gmac Offset: 0x198) Receive Symbol Errors Register */
[01;32m[K   129[m[K	  [01;31m[KRoReg[m[K   GMAC_AE;         /**< \brief (Gmac Offset: 0x19C) Alignment Errors Register */
[01;32m[K   130[m[K	  [01;31m[KRoReg[m[K   GMAC_RRE;        /**< \brief (Gmac Offset: 0x1A0) Receive Resource Errors Register */
[01;32m[K   131[m[K	  [01;31m[KRoReg[m[K   GMAC_ROE;        /**< \brief (Gmac Offset: 0x1A4) Receive Overrun Register */
[01;32m[K   132[m[K	  [01;31m[KRoReg[m[K   GMAC_IHCE;       /**< \brief (Gmac Offset: 0x1A8) IP Header Checksum Errors Register */
[01;32m[K   133[m[K	  [01;31m[KRoReg[m[K   GMAC_TCE;        /**< \brief (Gmac Offset: 0x1AC) TCP Checksum Errors Register */
[01;32m[K   134[m[K	  [01;31m[KRoReg[m[K   GMAC_UCE;        /**< \brief (Gmac Offset: 0x1B0) UDP Checksum Errors Register */
[01;32m[K   142[m[K	  [01;31m[KRoReg[m[K   GMAC_EFTS;       /**< \brief (Gmac Offset: 0x1E0) PTP Event Frame Transmitted Seconds */
[01;32m[K   143[m[K	  [01;31m[KRoReg[m[K   GMAC_EFTN;       /**< \brief (Gmac Offset: 0x1E4) PTP Event Frame Transmitted Nanoseconds */
[01;32m[K   144[m[K	  [01;31m[KRoReg[m[K   GMAC_EFRS;       /**< \brief (Gmac Offset: 0x1E8) PTP Event Frame Received Seconds */
[01;32m[K   145[m[K	  [01;31m[KRoReg[m[K   GMAC_EFRN;       /**< \brief (Gmac Offset: 0x1EC) PTP Event Frame Received Nanoseconds */
[01;32m[K   146[m[K	  [01;31m[KRoReg[m[K   GMAC_PEFTS;      /**< \brief (Gmac Offset: 0x1F0) PTP Peer Event Frame Transmitted Seconds */
[01;32m[K   147[m[K	  [01;31m[KRoReg[m[K   GMAC_PEFTN;      /**< \brief (Gmac Offset: 0x1F4) PTP Peer Event Frame Transmitted Nanoseconds */
[01;32m[K   148[m[K	  [01;31m[KRoReg[m[K   GMAC_PEFRS;      /**< \brief (Gmac Offset: 0x1F8) PTP Peer Event Frame Received Seconds */
[01;32m[K   149[m[K	  [01;31m[KRoReg[m[K   GMAC_PEFRN;      /**< \brief (Gmac Offset: 0x1FC) PTP Peer Event Frame Received Nanoseconds */
[01;32m[K   151[m[K	  [01;31m[KRoReg[m[K   GMAC_ISRPQ[7];   /**< \brief (Gmac Offset: 0x400) Interrupt Status Register Priority Queue */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1336[m[K			{ MK_PAIR( [01;31m[KROVR[m[K  ) }, /* Enable receive overrun interrupt. */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1339[m[K			{ MK_PAIR( [01;31m[KROVR[m[K  ) }, /* Enable receive overrun interrupt. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K  1408[m[K			{ MK_PAIR( [01;31m[KROVR[m[K  ) }, /* Enable receive overrun interrupt. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1268[m[K	    /* Set the [01;31m[KRPBL[m[K and 4*PBL bits according to ETH RxDMABurstLength value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1244[m[K	    /* Set the [01;31m[KRSF[m[K bit according to ETH ReceiveStoreForward value */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   107[m[K	 * and thus causing a '[01;31m[KRST[m[K' packet on either side.
[01;32m[K   316[m[K	 * case #3. In summary, an [01;31m[KRST[m[K was received with a sequence number that is
[01;32m[K   322[m[K	 * Reply to a peer with the [01;31m[KRST[m[K flag on, in case a packet can not be handled.
[01;32m[K   853[m[K				/* Sending data without a socket, probably replying with a [01;31m[KRST[m[K flag
[01;32m[K  1636[m[K				/* Socket goes to status eCLOSED because of a [01;31m[KRST[m[K.
[01;32m[K  2293[m[K					eCLOSE_WAIT and a [01;31m[KRST[m[K packet will be sent back. */
[01;32m[K  2415[m[K			/* Send [01;31m[KRST[m[K with the expected sequence and ACK numbers,
[01;32m[K  3108[m[K				/* Send a [01;31m[KRST[m[K to all packets that can not be handled.  As a result
[01;32m[K  3110[m[K				1) A packet that already has the [01;31m[KRST[m[K flag set.
[01;32m[K  3134[m[K						connection had gone.  Send a [01;31m[KRST[m[K in order to get a new connect
[01;32m[K  3164[m[K					/* This is not a socket in listening mode. Check for the [01;31m[KRST[m[K
[01;32m[K  3173[m[K							/* Per the above RFC, "In the SYN-SENT state ... the [01;31m[KRST[m[K is

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   148[m[K			/* When non-zero, TCP will not send [01;31m[KRST[m[K packets in reply to

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1154[m[K	 * Subsequent messages for the closed socket will be responded to with a [01;31m[KRST[m[K

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   151[m[K			/* When non-zero, TCP will not send [01;31m[KRST[m[K packets in reply to

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   520[m[K		/* Control [01;31m[KRSTN[m[K and CSN pin from the driver. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1250[m[K	    /* Set the [01;31m[KRTC[m[K bit according to ETH ReceiveThresholdControl value */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K    75[m[K		 * A packet will be retransmitted after a Retransmit Time-Out ([01;31m[KRTO[m[K).
[01;32m[K    79[m[K		 * It will be retransmitted far before the [01;31m[KRTO[m[K.
[01;32m[K  1512[m[K			[01;31m[KRTO[m[K = 2 * SRTT
[01;32m[K  1517[m[K			  [01;31m[KRTO[m[K is Retransmit timeout
[01;32m[K  1668[m[K				It will be retransmitted far before the [01;31m[KRTO[m[K. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K   124[m[K	 * ipconfigMAX_SEND_BLOCK_TIME_TICKS is specified in [01;31m[KRTOS[m[K ticks.  A time in

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K   123[m[K	 * ipconfigMAX_SEND_BLOCK_TIME_TICKS is specified in [01;31m[KRTOS[m[K ticks.  A time in

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   258[m[K	 * Description  : The deferred interrupt handler is a standard [01;31m[KRTOS[m[K task.

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1508[m[K			/* SRTT[i] = (1-a) * SRTT[i-1] + a * [01;31m[KRTT[m[K
[01;32m[K  1515[m[K			  [01;31m[KRTT[m[K is Round Trip Time
[01;32m[K  1516[m[K			  SRTT is Smoothed [01;31m[KRTT[m[K
[01;32m[K  1519[m[K			 A Smoothed [01;31m[KRTT[m[K will increase quickly, but it is conservative when
[01;32m[K  1573[m[K					/* Calculate the [01;31m[KRTT[m[K only if the segment was sent-out for the
[01;32m[K  1581[m[K							/* [01;31m[KRTT[m[K becomes smaller: adapt slowly. */
[01;32m[K  1586[m[K							/* [01;31m[KRTT[m[K becomes larger: adapt quicker */
[01;32m[K  1865[m[K					/* As 'ucTransmitCount' has a minimum of 1, take 2 * [01;31m[KRTT[m[K */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    56[m[K					ucTransmitCount : 8,/* Number of times the segment has been transmitted, used to calculate the [01;31m[KRTT[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   188[m[K	#define	PHY_REG_06_ANER            0x06 //	6	[01;31m[KRW[m[K		Auto-Negotiation Expansion Register
[01;32m[K   189[m[K	#define	PHY_REG_07_ANNPTR          0x07 //	7	[01;31m[KRW[m[K		Auto-Negotiation Next Page TX
[01;32m[K   190[m[K	#define	PHY_REG_08_RESERVED0       0x08 // 0x08..0x0Fh	8-15	[01;31m[KRW[m[K		RESERVED

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K    69[m[K	#define	phyREG_19_PHYCR				0x19U	/* 25 [01;31m[KRW[m[K PHY Control Register */
[01;32m[K    70[m[K	#define	phyREG_1F_PHYSPCS			0x1FU	/* 31 [01;31m[KRW[m[K PHY Special Control Status */
[01;32m[K   610[m[K				/* 31 [01;31m[KRW[m[K PHY Special Control Status */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K    76[m[K		#define	PHY_REG_06_ANER            0x06 //	6	[01;31m[KRW[m[K		Auto-Negotiation Expansion Register
[01;32m[K    77[m[K		#define	PHY_REG_07_ANNPTR          0x07 //	7	[01;31m[KRW[m[K		Auto-Negotiation Next Page TX
[01;32m[K    78[m[K		#define	PHY_REG_08_RESERVED0       0x08 // 0x08..0x0Fh	8-15	[01;31m[KRW[m[K		RESERVED
[01;32m[K    81[m[K		#define	PHY_REG_11_MICR       0x11	// 17	[01;31m[KRW[m[K		MII Interrupt Control Register
[01;32m[K    83[m[K		#define	PHY_REG_13_RESERVED1  0x13	// 19	[01;31m[KRW[m[K		RESERVED
[01;32m[K    86[m[K		#define	PHY_REG_16_PCSR       0x16	// 22	[01;31m[KRW[m[K		PCS Sub-Layer Configuration and Status Register
[01;32m[K    87[m[K		#define	PHY_REG_17_RBR        0x17	// 23	[01;31m[KRW[m[K		RMII and Bypass Register
[01;32m[K    88[m[K		#define	PHY_REG_18_LEDCR      0x18	// 24	[01;31m[KRW[m[K		LED Direct Control Register
[01;32m[K    89[m[K		#define	PHY_REG_19_PHYCR      0x19	// 25	[01;31m[KRW[m[K		PHY Control Register
[01;32m[K    90[m[K		#define	PHY_REG_1A_10BTSCR    0x1A	// 26	[01;31m[KRW[m[K		10Base-T Status/Control Register
[01;32m[K    91[m[K		#define	PHY_REG_1B_CDCTRL1    0x1B	// 27	[01;31m[KRW[m[K		CD Test Control Register and BIST Extensions Register
[01;32m[K    92[m[K		#define	PHY_REG_1B_INT_CTRL   0x1B	// 27	[01;31m[KRW[m[K		KSZ8041NL interrupt control
[01;32m[K    93[m[K		#define	PHY_REG_1C_RESERVED2  0x1C	// 28	[01;31m[KRW[m[K		RESERVED
[01;32m[K    94[m[K		#define	PHY_REG_1D_EDCR       0x1D	// 29	[01;31m[KRW[m[K		Energy Detect Control Register
[01;32m[K    96[m[K		#define	PHY_REG_1F_RESERVED4  0x1F	// 30-31	[01;31m[KRW[m[K		RESERVED

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K    54[m[K	  [01;31m[KRwReg[m[K   GMAC_SAB;        /**< \brief (GmacSa Offset: 0x0) Specific Address 1 Bottom [31:0] Register */
[01;32m[K    55[m[K	  [01;31m[KRwReg[m[K   GMAC_SAT;        /**< \brief (GmacSa Offset: 0x4) Specific Address 1 Top [47:32] Register */
[01;32m[K    60[m[K	  [01;31m[KRwReg[m[K   GMAC_NCR;        /**< \brief (Gmac Offset: 0x000) Network Control Register */
[01;32m[K    61[m[K	  [01;31m[KRwReg[m[K   GMAC_NCFGR;      /**< \brief (Gmac Offset: 0x004) Network Configuration Register */
[01;32m[K    63[m[K	  [01;31m[KRwReg[m[K   GMAC_UR;         /**< \brief (Gmac Offset: 0x00C) User Register */
[01;32m[K    64[m[K	  [01;31m[KRwReg[m[K   GMAC_DCFGR;      /**< \brief (Gmac Offset: 0x010) DMA Configuration Register */
[01;32m[K    65[m[K	  [01;31m[KRwReg[m[K   GMAC_TSR;        /**< \brief (Gmac Offset: 0x014) Transmit Status Register */
[01;32m[K    66[m[K	  [01;31m[KRwReg[m[K   GMAC_RBQB;       /**< \brief (Gmac Offset: 0x018) Receive Buffer Queue Base Address */
[01;32m[K    67[m[K	  [01;31m[KRwReg[m[K   GMAC_TBQB;       /**< \brief (Gmac Offset: 0x01C) Transmit Buffer Queue Base Address */
[01;32m[K    68[m[K	  [01;31m[KRwReg[m[K   GMAC_RSR;        /**< \brief (Gmac Offset: 0x020) Receive Status Register */
[01;32m[K    73[m[K	  [01;31m[KRwReg[m[K   GMAC_MAN;        /**< \brief (Gmac Offset: 0x034) PHY Maintenance Register */
[01;32m[K    75[m[K	  [01;31m[KRwReg[m[K   GMAC_TPQ;        /**< \brief (Gmac Offset: 0x03C) Transmit Pause Quantum Register */
[01;32m[K    76[m[K	  [01;31m[KRwReg[m[K   GMAC_TPSF;       /**< \brief (Gmac Offset: 0x040) TX Partial Store and Forward Register */
[01;32m[K    77[m[K	  [01;31m[KRwReg[m[K   GMAC_RPSF;       /**< \brief (Gmac Offset: 0x044) RX Partial Store and Forward Register */
[01;32m[K    79[m[K	  [01;31m[KRwReg[m[K   GMAC_HRB;        /**< \brief (Gmac Offset: 0x080) Hash Register Bottom [31:0] */
[01;32m[K    80[m[K	  [01;31m[KRwReg[m[K   GMAC_HRT;        /**< \brief (Gmac Offset: 0x084) Hash Register Top [63:32] */
[01;32m[K    82[m[K	  [01;31m[KRwReg[m[K   GMAC_TIDM[4];    /**< \brief (Gmac Offset: 0x0A8) Type ID Match 1 Register */
[01;32m[K    83[m[K	  [01;31m[KRwReg[m[K   GMAC_WOL;        /**< \brief (Gmac Offset: 0x0B8) Wake on LAN Register */
[01;32m[K    84[m[K	  [01;31m[KRwReg[m[K   GMAC_IPGS;       /**< \brief (Gmac Offset: 0x0BC) IPG Stretch Register */
[01;32m[K    85[m[K	  [01;31m[KRwReg[m[K   GMAC_SVLAN;      /**< \brief (Gmac Offset: 0x0C0) Stacked VLAN Register */
[01;32m[K    86[m[K	  [01;31m[KRwReg[m[K   GMAC_TPFCP;      /**< \brief (Gmac Offset: 0x0C4) Transmit PFC Pause Register */
[01;32m[K    87[m[K	  [01;31m[KRwReg[m[K   GMAC_SAMB1;      /**< \brief (Gmac Offset: 0x0C8) Specific Address 1 Mask Bottom [31:0] Register */
[01;32m[K    88[m[K	  [01;31m[KRwReg[m[K   GMAC_SAMT1;      /**< \brief (Gmac Offset: 0x0CC) Specific Address 1 Mask Top [47:32] Register */
[01;32m[K   136[m[K	  [01;31m[KRwReg[m[K   GMAC_TSSS;       /**< \brief (Gmac Offset: 0x1C8) 1588 Timer Sync Strobe Seconds Register */
[01;32m[K   137[m[K	  [01;31m[KRwReg[m[K   GMAC_TSSN;       /**< \brief (Gmac Offset: 0x1CC) 1588 Timer Sync Strobe Nanoseconds Register */
[01;32m[K   138[m[K	  [01;31m[KRwReg[m[K   GMAC_TS;         /**< \brief (Gmac Offset: 0x1D0) 1588 Timer Seconds Register */
[01;32m[K   139[m[K	  [01;31m[KRwReg[m[K   GMAC_TN;         /**< \brief (Gmac Offset: 0x1D4) 1588 Timer Nanoseconds Register */
[01;32m[K   141[m[K	  [01;31m[KRwReg[m[K   GMAC_TI;         /**< \brief (Gmac Offset: 0x1DC) 1588 Timer Increment Register */
[01;32m[K   153[m[K	  [01;31m[KRwReg[m[K   GMAC_TBQBAPQ[7]; /**< \brief (Gmac Offset: 0x440) Transmit Buffer Queue Base Address Priority Queue */
[01;32m[K   155[m[K	  [01;31m[KRwReg[m[K   GMAC_RBQBAPQ[7]; /**< \brief (Gmac Offset: 0x480) Receive Buffer Queue Base Address Priority Queue */
[01;32m[K   157[m[K	  [01;31m[KRwReg[m[K   GMAC_RBSRPQ[7];  /**< \brief (Gmac Offset: 0x4A0) Receive Buffer Size Register Priority Queue */
[01;32m[K   159[m[K	  [01;31m[KRwReg[m[K   GMAC_ST1RPQ[16]; /**< \brief (Gmac Offset: 0x500) Screening Type1 Register Priority Queue */
[01;32m[K   160[m[K	  [01;31m[KRwReg[m[K   GMAC_ST2RPQ[16]; /**< \brief (Gmac Offset: 0x540) Screening Type2 Register Priority Queue */
[01;32m[K   166[m[K	  [01;31m[KRwReg[m[K   GMAC_IMRPQ[7];   /**< \brief (Gmac Offset: 0x640) Interrupt Mask Register Priority Queue */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   878[m[K	#define ETH_DMARXDESC_ES          ((uint32_t)0x00008000U)  /*!< Error summary: OR of the following bits: DE || OE || IPC || LC || [01;31m[KRWT[m[K || RE || CE */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   149[m[K	 * (ulSequenceNumber+xLength).  Normally none will be found, because the next [01;31m[KRx[m[K
[01;32m[K   427[m[K				/* Add it to either the connections' [01;31m[KRx[m[K or Tx queue. */
[01;32m[K   471[m[K			if there are missing packets in the [01;31m[KRx[m[K-queue.  It will accept the
[01;32m[K   473[m[K			  - the [01;31m[KRx[m[K-queue is empty
[01;32m[K   474[m[K			  - the highest [01;31m[KRx[m[K sequence number has been ACK'ed */
[01;32m[K   477[m[K				/* [01;31m[KRx[m[K data has been stored while earlier packets were missing. */
[01;32m[K   482[m[K				/* No [01;31m[KRx[m[K packets are being stored and the highest sequence number
[01;32m[K   733[m[K	 * [01;31m[KRx[m[K functions
[01;32m[K   752[m[K			the next [01;31m[KRX[m[K segment should have a sequence number equal to
[01;32m[K   755[m[K			/* Iterate through all [01;31m[KRX[m[K segments that are stored: */
[01;32m[K   809[m[K			if more [01;31m[KRx[m[K data may be passed to the user after this packet. */
[01;32m[K   822[m[K				for.  It can be passed directly to the [01;31m[Krx[m[K stream. */
[01;32m[K   894[m[K				/* Looks like a TCP keep-alive message.  Do not accept/store [01;31m[KRx[m[K data
[01;32m[K   900[m[K				/* The packet is not the one expected.  See if it falls within the [01;31m[KRx[m[K
[01;32m[K   919[m[K					/* The new segment is ahead of [01;31m[Krx[m[K.ulCurrentSequenceNumber.  The

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   753[m[K				/* Calculate the space in the [01;31m[KRX[m[K buffer in order to advertise the
[01;32m[K   759[m[K					/* An [01;31m[KRX[m[K stream was created already, see how much space is
[01;32m[K   765[m[K					/* No [01;31m[KRX[m[K stream has been created, the full stream size is
[01;32m[K   770[m[K				/* Take the minimum of the [01;31m[KRX[m[K buffer space and the [01;31m[KRX[m[K window size. */
[01;32m[K   782[m[K				/* If possible, advertise an [01;31m[KRX[m[K window size of at least 1 MSS, otherwise
[01;32m[K   811[m[K				of the free [01;31m[KRX[m[K space.  At this moment, 'ulHighestRxAllowed' would be the
[01;32m[K  2592[m[K					/* Refusing FIN: [01;31m[KRx[m[K incomp 1 optlen 4 tx done 1. */
[01;32m[K  2705[m[K				( lRxSpace >= lMinLength ) &&						/* There is [01;31m[KRx[m[K space for more data. */
[01;32m[K  2722[m[K					( lRxSpace < ipNUMERIC_CAST( int32_t, 2U * pxSocket->u.xTCP.usCurMSS ) ) )	/* There are less than 2 x MSS space in the [01;31m[KRx[m[K buffer. */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   576[m[K				/* Ensure the [01;31m[KRx[m[K and Tx timeouts are zero as the DHCP executes in the

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K   278[m[K	 * outstanding packets (for [01;31m[KRx[m[K and Tx).  When using up to 10 TP sockets
[01;32m[K   282[m[K	/* Each TCP socket has a circular buffers for [01;31m[KRx[m[K and Tx, which have a fixed
[01;32m[K   283[m[K	 * maximum size.  Define the size of [01;31m[KRx[m[K buffer for TCP sockets. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   238[m[K	 * MallocLarge is used to allocate large TCP buffers (for [01;31m[KRx[m[K/Tx)
[01;32m[K   366[m[K	/* Each TCP socket has circular stream buffers for [01;31m[KRx[m[K and Tx, which

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K   287[m[K	 * outstanding packets (for [01;31m[KRx[m[K and Tx).  When using up to 10 TP sockets
[01;32m[K   291[m[K	/* Each TCP socket has a circular buffers for [01;31m[KRx[m[K and Tx, which have a fixed
[01;32m[K   292[m[K	 * maximum size.  Define the size of [01;31m[KRx[m[K buffer for TCP sockets. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3191[m[K		/* For the web server: borrow the circular [01;31m[KRx[m[K buffer for inspection
[01;32m[K  3353[m[K						[01;31m[KRx[m[K data, without copying from the rxStream, to the user. */

[1;34m./portable/NetworkInterface/SH2A/NetworkInterface.c[39m

[01;32m[K    75[m[K	/* The semaphore used to wake the deferred interrupt handler task when an [01;31m[KRx[m[K

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   114[m[K	#define   RX_MEM_TEST_FINISHED        (0x0010)    /* [01;31m[KRX[m[K memory BIST test finish */
[01;32m[K   115[m[K	#define   RX_MEM_TEST_FAILED          (0x0008)    /* [01;31m[KRX[m[K memory BIST test fail */
[01;32m[K   116[m[K	#define   RX_MEM_TEST_FAILED_COUNT    (0x0003)    /* [01;31m[KRX[m[K memory BIST test fail count */
[01;32m[K   188[m[K	#define   RX_CTRL_FLUSH_QUEUE         (0x8000)    /* Clear receive queue, reset [01;31m[Krx[m[K frame pointer */
[01;32m[K   249[m[K	#define   RXQ_STAT_TIME_INT           (0x1000)    /* [01;31m[KRX[m[K interrupt is occured by timer duration */
[01;32m[K   250[m[K	#define   RXQ_STAT_BYTE_CNT_INT       (0x0800)    /* [01;31m[KRX[m[K interrupt is occured by byte count threshold */
[01;32m[K   251[m[K	#define   RXQ_STAT_FRAME_CNT_INT      (0x0400)    /* [01;31m[KRX[m[K interrupt is occured by frame count threshold */
[01;32m[K   253[m[K	#define   RXQ_TIME_INT                (0x0080)    /* Enable [01;31m[KRX[m[K interrupt by timer duration */
[01;32m[K   254[m[K	#define   RXQ_BYTE_CNT_INT            (0x0040)    /* Enable [01;31m[KRX[m[K interrupt by byte count threshold */
[01;32m[K   255[m[K	#define   RXQ_FRAME_CNT_INT           (0x0020)    /* Enable [01;31m[KRX[m[K interrupt by frame count threshold */
[01;32m[K   256[m[K	#define   RXQ_AUTO_DEQUEUE            (0x0010)    /* Enable release [01;31m[Krx[m[K frames from [01;31m[Krx[m[K buffer automatically */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   102[m[K						// [01;31m[KRX[m[K step13: enable INT_RX flag.
[01;32m[K   102[m[K						// [01;31m[KRX[m[K step13: enable INT_RX flag.
[01;32m[K   134[m[K							// [01;31m[KRX[m[K step2: disable all interrupts.
[01;32m[K   134[m[K							// [01;31m[KRX[m[K step2: disable all interrupts.
[01;32m[K   165[m[K						// [01;31m[KRX[m[K step21: end RXQ read access.
[01;32m[K   165[m[K						// [01;31m[KRX[m[K step21: end RXQ read access.
[01;32m[K   167[m[K						// [01;31m[KRX[m[K step22-23: update frame count to be read.
[01;32m[K   167[m[K						// [01;31m[KRX[m[K step22-23: update frame count to be read.
[01;32m[K   169[m[K						// [01;31m[KRX[m[K step24: enable INT_RX flag if transfer complete.
[01;32m[K   169[m[K						// [01;31m[KRX[m[K step24: enable INT_RX flag if transfer complete.
[01;32m[K   172[m[K							// Allow more [01;31m[KRX[m[K interrupts.
[01;32m[K   172[m[K							// Allow more [01;31m[KRX[m[K interrupts.
[01;32m[K   205[m[K	/* Interrupt events to process.  Currently only the [01;31m[KRx[m[K event is processed
[01;32m[K   248[m[K		/** [01;31m[KRX[m[K NetworkBufferDescriptor_t pointer list */
[01;32m[K   305[m[K	 * Try to obtain an [01;31m[KRx[m[K packet from the hardware.
[01;32m[K   318[m[K	the [01;31m[KRx[m[K interrupt is handled, although code is included for other events to
[01;32m[K   569[m[K						/* Enable [01;31m[KRX[m[K complete interrupt. */
[01;32m[K   619[m[K	 * \brief Populate the [01;31m[KRX[m[K descriptor ring buffers with pbufs.
[01;32m[K   628[m[K		/* Set up the [01;31m[KRX[m[K descriptors */
[01;32m[K   721[m[K				 * ========================== Handle [01;31m[KRX[m[K ==========================
[01;32m[K   733[m[K						/* [01;31m[KRX[m[K step1: read interrupt status for INT_RX flag. */
[01;32m[K   737[m[K						/* [01;31m[KRX[m[K step2: disable all interrupts. */
[01;32m[K   740[m[K						/* [01;31m[KRX[m[K step3: clear INT_RX flag. */
[01;32m[K   743[m[K						/* [01;31m[KRX[m[K step4-5: check for received frames. */
[01;32m[K   747[m[K							/* [01;31m[KRX[m[K step24: enable INT_RX flag. */
[01;32m[K   773[m[K					/* [01;31m[KRX[m[K step6: get [01;31m[KRX[m[K packet status. */
[01;32m[K   780[m[K						/* [01;31m[KRX[m[K step4-5: check for received frames. */
[01;32m[K   784[m[K							/* [01;31m[KRX[m[K step24: enable INT_RX flag. */
[01;32m[K   792[m[K						/* [01;31m[KRX[m[K step7: read frame length. */
[01;32m[K   795[m[K						/* [01;31m[KRX[m[K step8: Drop packet if len is invalid or no descriptor available. */
[01;32m[K   807[m[K							/* [01;31m[KRX[m[K step9: reset [01;31m[KRX[m[K frame pointer. */
[01;32m[K   810[m[K							/* [01;31m[KRX[m[K step10: start RXQ read access. */
[01;32m[K   812[m[K							/* [01;31m[KRX[m[K step11-17: start asynchronous FIFO read operation. */
[01;32m[K   894[m[K				/* [01;31m[KRX[m[K step18-19: pad with dummy data to keep dword alignment. */
[01;32m[K   902[m[K				/* [01;31m[KRX[m[K step20: end [01;31m[KRX[m[K transfer. */
[01;32m[K   908[m[K				/* [01;31m[KRX[m[K step21: end RXQ read access. */
[01;32m[K   911[m[K				/* [01;31m[KRX[m[K step22-23: update frame count to be read. */
[01;32m[K   914[m[K				/* [01;31m[KRX[m[K step24: enable INT_RX flag if transfer complete. */
[01;32m[K   934[m[K				/* Tell prvEMACHandlerTask that [01;31m[KRX[m[K packets are available. */
[01;32m[K   967[m[K				/* [01;31m[KRX[m[K step13: enable INT_RX flag. */
[01;32m[K   987[m[K				/* [01;31m[KRX[m[K step13: enable INT_RX flag. */
[01;32m[K   997[m[K	 * \brief Set up the [01;31m[KRX[m[K descriptor ring buffers.
[01;32m[K   999[m[K	 * This function sets up the descriptor list used for [01;31m[KRX[m[K packets.
[01;32m[K  1010[m[K		/* Set up the [01;31m[KRX[m[K descriptors. */
[01;32m[K  1016[m[K		/* Build [01;31m[KRX[m[K buffer and descriptors. */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   487[m[K	 * @brief launch 2 linux threads, one for Tx and one for [01;31m[KRx[m[K
[01;32m[K   507[m[K				/* Create the thread that handles pcap  [01;31m[KRx[m[K. */
[01;32m[K   745[m[K			handles pacap [01;31m[KRx[m[K into the FreeRTOS simulator contain another packet? */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   360[m[K		chain of [01;31m[KRX[m[K messages within one message to the IP-task.	*/
[01;32m[K   497[m[K		 * We allocate 65536 bytes for [01;31m[KRX[m[K BDs which can accommodate a
[01;32m[K   515[m[K		 * Allocate [01;31m[KRX[m[K descriptors, 1 RxBD at a time.
[01;32m[K   600[m[K	 * The EmacPs has a HW bug (SI# 692601) on the [01;31m[KRx[m[K path for heavy [01;31m[KRx[m[K traffic.
[01;32m[K   601[m[K	 * Under heavy [01;31m[KRx[m[K traffic because of the HW bug there are times when the [01;31m[KRx[m[K path
[01;32m[K   602[m[K	 * becomes unresponsive. The workaround for it is to check for the [01;31m[KRx[m[K path for
[01;32m[K   604[m[K	 * does not increment for sometime (proving no [01;31m[KRx[m[K traffic), the function resets
[01;32m[K   605[m[K	 * the [01;31m[KRx[m[K data path.

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K   404[m[K			/* Create the Win32 thread that handles WinPCAP [01;31m[KRx[m[K. */
[01;32m[K   551[m[K			handles WinPCAP [01;31m[KRx[m[K into the FreeRTOS simulator contain another packet? */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K    78[m[K	        PIC32_MAC_EVENT_IF_PENDING = 0x004,     /* an interface event signal: [01;31m[KRX[m[K, TX, errors. etc. */
[01;32m[K   123[m[K	    /* MAC [01;31m[KRX[m[K packets functions */
[01;32m[K   635[m[K	                    /* check for [01;31m[KRX[m[K */
[01;32m[K   637[m[K	                    { /* [01;31m[KRX[m[K packets available */
[01;32m[K   660[m[K	    /* we care just for [01;31m[KRX[m[K related events */

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   212[m[K	    /* mainly for [01;31m[KRX[m[K packet */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K   146[m[K	#define GMII_RRDPSR     261  // RGMII [01;31m[KRX[m[K Data Pad Skew Register
[01;32m[K   146[m[K	#define GMII_RRDPSR     261  // RGMII [01;31m[KRX[m[K Data Pad Skew Register

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K    65[m[K	/* Interrupt events to process.  Currently only the [01;31m[KRx[m[K event is processed
[01;32m[K   120[m[K	 * Try to obtain an [01;31m[KRx[m[K packet from the hardware.
[01;32m[K   127[m[K	the [01;31m[KRx[m[K interrupt is handled, although code is included for other events to
[01;32m[K   186[m[K			/* let the prvEMACHandlerTask know that there was an [01;31m[KRX[m[K event. */
[01;32m[K   188[m[K			/* Only an [01;31m[KRX[m[K interrupt can wakeup prvEMACHandlerTask. */
[01;32m[K   198[m[K			/* let the prvEMACHandlerTask know that there was an [01;31m[KRX[m[K event. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K    96[m[K	#define GMAC_RX_UNITSIZE            128     /**< Fixed size for [01;31m[KRX[m[K buffer  */
[01;32m[K   138[m[K		GMAC_PARAM,          /** 5  Parameter error, TX packet invalid or [01;31m[KRX[m[K size too small */
[01;32m[K   223[m[K	/** [01;31m[KRX[m[K callback */
[01;32m[K   243[m[K		/** Pointer to allocated [01;31m[KRX[m[K buffer */
[01;32m[K   245[m[K		/** Pointer to [01;31m[KRx[m[K TDs (must be 8-byte aligned) */
[01;32m[K   259[m[K		/** [01;31m[KRX[m[K TD list size */
[01;32m[K   261[m[K		/** [01;31m[KRX[m[K index for current processing TD */
[01;32m[K   753[m[K	 * \brief Enable/Disable ignore [01;31m[KRX[m[K FCS.
[01;32m[K   756[m[K	 * \param uc_enable   0 to disable ignore [01;31m[KRX[m[K FCS, else to enable it.
[01;32m[K   848[m[K	 * \brief Set [01;31m[KRx[m[K Queue.
[01;32m[K   851[m[K	 * \param ul_addr   [01;31m[KRx[m[K queue address.
[01;32m[K   859[m[K	 * \brief Get [01;31m[KRx[m[K Queue Address.
[01;32m[K   863[m[K	 * \return  [01;31m[KRx[m[K queue address.
[01;32m[K   886[m[K	 * \return  [01;31m[KRx[m[K queue address.
[01;32m[K  1198[m[K	 * The buffer size used for [01;31m[KRX[m[K is GMAC_RX_BUFFERS * 128.

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K    77[m[K	  RwReg   GMAC_RPSF;       /**< \brief (Gmac Offset: 0x044) [01;31m[KRX[m[K Partial Store and Forward Register */
[01;32m[K   224[m[K	#define GMAC_NCFGR_IRXFCS (0x1u << 26) /**< \brief (GMAC_NCFGR) Ignore [01;31m[KRX[m[K FCS */
[01;32m[K   282[m[K	#define GMAC_ISR_RXUBR (0x1u << 2) /**< \brief (GMAC_ISR) [01;31m[KRX[m[K Used Bit Read */
[01;32m[K   307[m[K	#define GMAC_IER_RXUBR (0x1u << 2) /**< \brief (GMAC_IER) [01;31m[KRX[m[K Used Bit Read */
[01;32m[K   332[m[K	#define GMAC_IDR_RXUBR (0x1u << 2) /**< \brief (GMAC_IDR) [01;31m[KRX[m[K Used Bit Read */
[01;32m[K   357[m[K	#define GMAC_IMR_RXUBR (0x1u << 2) /**< \brief (GMAC_IMR) [01;31m[KRX[m[K Used Bit Read */
[01;32m[K   407[m[K	/* -------- GMAC_RPSF : (GMAC Offset: 0x044) [01;31m[KRX[m[K Partial Store and Forward Register -------- */
[01;32m[K   411[m[K	#define GMAC_RPSF_ENRXP (0x1u << 31) /**< \brief (GMAC_RPSF) Enable [01;31m[KRX[m[K Partial Store and Forward Operation */
[01;32m[K   680[m[K	#define GMAC_ISRPQ_RXUBR (0x1u << 2) /**< \brief (GMAC_ISRPQ[7]) [01;31m[KRX[m[K Used Bit Read */
[01;32m[K   720[m[K	#define GMAC_IERPQ_RXUBR (0x1u << 2) /**< \brief (GMAC_IERPQ[7]) [01;31m[KRX[m[K Used Bit Read */
[01;32m[K   728[m[K	#define GMAC_IDRPQ_RXUBR (0x1u << 2) /**< \brief (GMAC_IDRPQ[7]) [01;31m[KRX[m[K Used Bit Read */
[01;32m[K   736[m[K	#define GMAC_IMRPQ_RXUBR (0x1u << 2) /**< \brief (GMAC_IMRPQ[7]) [01;31m[KRX[m[K Used Bit Read */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K    97[m[K	#define GMAC_RX_UNITSIZE            128     /**< Fixed size for [01;31m[KRX[m[K buffer  */
[01;32m[K   139[m[K		GMAC_PARAM,          /** 5  Parameter error, TX packet invalid or [01;31m[KRX[m[K size too small */
[01;32m[K   226[m[K	/** [01;31m[KRX[m[K callback */
[01;32m[K   246[m[K		/** Pointer to allocated [01;31m[KRX[m[K buffer */
[01;32m[K   248[m[K		/** Pointer to [01;31m[KRx[m[K TDs (must be 8-byte aligned) */
[01;32m[K   262[m[K		/** [01;31m[KRX[m[K TD list size */
[01;32m[K   264[m[K		/** [01;31m[KRX[m[K index for current processing TD */
[01;32m[K   756[m[K	 * \brief Enable/Disable ignore [01;31m[KRX[m[K FCS.
[01;32m[K   759[m[K	 * \param uc_enable   0 to disable ignore [01;31m[KRX[m[K FCS, else to enable it.
[01;32m[K   851[m[K	 * \brief Set [01;31m[KRx[m[K Queue.
[01;32m[K   854[m[K	 * \param ul_addr   [01;31m[KRx[m[K queue address.
[01;32m[K   862[m[K	 * \brief Get [01;31m[KRx[m[K Queue Address.
[01;32m[K   866[m[K	 * \return  [01;31m[KRx[m[K queue address.
[01;32m[K   889[m[K	 * \return  [01;31m[KRx[m[K queue address.
[01;32m[K  1201[m[K	 * The buffer size used for [01;31m[KRX[m[K is GMAC_RX_BUFFERS * 128.

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K    93[m[K	/** [01;31m[KRX[m[K descriptors lists */
[01;32m[K   114[m[K		/* Pointer to allocated buffer for [01;31m[KRX[m[K. The address should be 8-byte aligned
[01;32m[K   117[m[K		/* Pointer to allocated [01;31m[KRX[m[K descriptor list. */
[01;32m[K   119[m[K		/* [01;31m[KRX[m[K size, in number of registered units ([01;31m[KRX[m[K descriptors). */
[01;32m[K   242[m[K		/* Disable [01;31m[KRX[m[K */
[01;32m[K   245[m[K		/* Set up the [01;31m[KRX[m[K descriptors */
[01;32m[K   262[m[K	 * Must be invoked after gmac_dev_init() but before [01;31m[KRX[m[K/TX starts.
[01;32m[K   289[m[K		/* Assign [01;31m[KRX[m[K buffers */
[01;32m[K   315[m[K		/* Reset TX & [01;31m[KRX[m[K */
[01;32m[K   319[m[K		/* Enable [01;31m[KRx[m[K and Tx, plus the statistics register */
[01;32m[K   394[m[K		/* Disable TX & [01;31m[KRX[m[K and more */
[01;32m[K   430[m[K		 * Note: tha SAM4E does have [01;31m[KRX[m[K checksum offloading
[01;32m[K   543[m[K		int32_t nextIdx;	/* A copy of the [01;31m[KRx[m[K-index 'ul_rx_idx' */
[01;32m[K   712[m[K	 * \brief Register/Clear [01;31m[KRX[m[K callback. Callback will be invoked after the next received
[01;32m[K   720[m[K	 * This function is usually invoked from the [01;31m[KRX[m[K callback itself with NULL
[01;32m[K   780[m[K	 * \brief Reset TX & [01;31m[KRX[m[K queue & statistics.
[01;32m[K   855[m[K		/* [01;31m[KRX[m[K packet */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K    55[m[K	/* Interrupt events to process.  Currently only the [01;31m[KRx[m[K event is processed
[01;32m[K   167[m[K	 * Try to obtain an [01;31m[KRx[m[K packet from the hardware.
[01;32m[K   179[m[K	the [01;31m[KRx[m[K interrupt is handled, although code is included for other events to
[01;32m[K   265[m[K			/* let the prvEMACHandlerTask know that there was an [01;31m[KRX[m[K event. */
[01;32m[K   267[m[K			/* Only an [01;31m[KRX[m[K interrupt can wakeup prvEMACHandlerTask. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K    99[m[K	//#define GMAC_RX_UNITSIZE            128     /**< Fixed size for [01;31m[KRX[m[K buffer  */
[01;32m[K    99[m[K	//#define GMAC_RX_UNITSIZE            128     /**< Fixed size for [01;31m[KRX[m[K buffer  */
[01;32m[K   100[m[K	#define GMAC_RX_UNITSIZE           1536     /**< Fixed size for [01;31m[KRX[m[K buffer  */
[01;32m[K   144[m[K		GMAC_PARAM,          /** 5  Parameter error, TX packet invalid or [01;31m[KRX[m[K size too small */
[01;32m[K   145[m[K		GMAC_RX_ERROR,       /** 6  [01;31m[KRX[m[K error */
[01;32m[K   268[m[K		/** [01;31m[KRX[m[K index for current processing TD */
[01;32m[K   752[m[K	 * \brief Enable/Disable ignore [01;31m[KRX[m[K FCS.
[01;32m[K   755[m[K	 * \param uc_enable   0 to disable ignore [01;31m[KRX[m[K FCS, else to enable it.
[01;32m[K   847[m[K	 * \brief Set [01;31m[KRx[m[K Queue.
[01;32m[K   850[m[K	 * \param ul_addr   [01;31m[KRx[m[K queue address.
[01;32m[K   858[m[K	 * \brief Set [01;31m[KRx[m[K buffer size.
[01;32m[K   861[m[K	 * \param ul_addr   [01;31m[KRx[m[K buffer.
[01;32m[K   870[m[K	 * \brief Get [01;31m[KRx[m[K Queue Address.
[01;32m[K   874[m[K	 * \return  [01;31m[KRx[m[K queue address.
[01;32m[K   897[m[K	 * \return  [01;31m[KRx[m[K queue address.
[01;32m[K  1152[m[K	 * \brief Set base address of [01;31m[KRX[m[K buffer.
[01;32m[K  1163[m[K	 * \brief Get base address of [01;31m[KRX[m[K buffer.
[01;32m[K  1176[m[K	 * \brief Set size of [01;31m[KRX[m[K buffer.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   130[m[K	/** [01;31m[KRX[m[K descriptors lists */
[01;32m[K   284[m[K		/* Disable [01;31m[KRX[m[K */
[01;32m[K   287[m[K		/* Set up the [01;31m[KRX[m[K descriptors */
[01;32m[K   317[m[K	 * Must be invoked after gmac_dev_init() but before [01;31m[KRX[m[K/TX starts.
[01;32m[K   340[m[K		/* Reset TX & [01;31m[KRX[m[K Memory */
[01;32m[K   344[m[K		/* Enable [01;31m[KRx[m[K and Tx, plus the statistics register */
[01;32m[K   375[m[K		/* Disable TX & [01;31m[KRX[m[K and more */
[01;32m[K   415[m[K		 * Note: SAM4E/SAME70 do have [01;31m[KRX[m[K checksum offloading
[01;32m[K   566[m[K		int32_t nextIdx;	/* A copy of the [01;31m[KRx[m[K-index 'ul_rx_idx' */
[01;32m[K   783[m[K	 * \brief Reset TX & [01;31m[KRX[m[K queue & statistics.
[01;32m[K   849[m[K		/* [01;31m[KRX[m[K packet */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K    48[m[K	/* The size of the stack allocated to the task that handles [01;31m[KRx[m[K packets. */
[01;32m[K   114[m[K	/* Interrupt events to process.  Currently only the [01;31m[KRX[m[K/TX events are processed
[01;32m[K   151[m[K	 * Initialises the Tx and [01;31m[KRx[m[K descriptors respectively.
[01;32m[K   191[m[K	the [01;31m[KRx[m[K and Tx interrupt is handled, although code is included for other events
[01;32m[K   206[m[K	/* [01;31m[KRx[m[K descriptors and index. */
[01;32m[K   213[m[K	/* The handle of the task that processes [01;31m[KRx[m[K packets.  The handle is required so
[01;32m[K   559[m[K		/* Index to the next [01;31m[KRx[m[K descriptor to use. */
[01;32m[K   562[m[K		/* Clear [01;31m[KRX[m[K descriptor list. */
[01;32m[K   819[m[K		/* [01;31m[KRX[m[K group interrupt(s). */
[01;32m[K   822[m[K			/* Remember that an [01;31m[KRX[m[K event has happened. */

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K    62[m[K	/* The handle of the task that processes [01;31m[KRx[m[K packets.  The handle is required so
[01;32m[K   109[m[K	        /* [01;31m[KRx[m[K task */
[01;32m[K   282[m[K	            /* The event about to be sent to the TCP/IP is an [01;31m[KRx[m[K event. */
[01;32m[K   317[m[K	      case 'R': //For [01;31m[KRX[m[K event

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   305[m[K	    // FIX ME: for [01;31m[Krx[m[K-event, to ack rx_isr into event queue

[1;34m./portable/NetworkInterface/M487/m480_eth.h[39m

[01;32m[K    45[m[K	#define MII_LBRERROR        0x18        /* Lpback, [01;31m[Krx[m[K, bypass error    */
[01;32m[K    90[m[K	#define RX_DESCRIPTOR_NUM       4 //8    // Max Number of [01;31m[KRx[m[K Frame Descriptors
[01;32m[K   104[m[K	// [01;31m[KRx[m[K Frame Descriptor Status
[01;32m[K   106[m[K	#define RXFD_RTSAS   0x00800000  // [01;31m[KRX[m[K Time Stamp Available 
[01;32m[K   119[m[K	// Tx/[01;31m[KRx[m[K buffer descriptor structure

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K    65[m[K	/* Interrupt events to process.  Currently only the [01;31m[KRx[m[K event is processed
[01;32m[K   194[m[K	 * Initialise the [01;31m[KRX[m[K descriptors.
[01;32m[K   205[m[K	the [01;31m[KRx[m[K interrupt is handled, although code is included for other events to
[01;32m[K   242[m[K	/* Ethernet [01;31m[KRx[m[K MA Descriptor */
[01;32m[K   312[m[K		/* Ethernet [01;31m[KRX[m[K-Complete callback function, elsewhere declared as weak. */
[01;32m[K   454[m[K				/* Initialise [01;31m[KRX[m[K-descriptors. */
[01;32m[K   563[m[K		 * [01;31m[KRX[m[K-descriptors.
[01;32m[K   595[m[K				/* Set Own bit of the [01;31m[KRx[m[K descriptor Status */
[01;32m[K   899[m[K			/* Update the ETHERNET DMA global [01;31m[KRx[m[K descriptor with next [01;31m[KRx[m[K descriptor */
[01;32m[K   901[m[K			/* Selects the next DMA [01;31m[KRx[m[K descriptor list for next buffer to read */ 
[01;32m[K  1001[m[K			/* When [01;31m[KRx[m[K Buffer unavailable flag is set clear it and resume

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K    48[m[K	      (#)Poll for a received frame in ETH [01;31m[KRX[m[K DMA Descriptors and get received
[01;32m[K    52[m[K	      (#) Get a received frame when an ETH [01;31m[KRX[m[K interrupt occurs:
[01;32m[K   419[m[K	  * @brief  [01;31m[KRx[m[K Transfer completed callbacks.
[01;32m[K   990[m[K		dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or [01;31m[KRx[m[K it is applied for the other */
[01;32m[K   995[m[K		ETH_DMABMR_USP); /* Enable use of separate PBL for [01;31m[KRx[m[K and Tx */
[01;32m[K  1275[m[K	                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or [01;31m[KRx[m[K it is applied for the other */
[01;32m[K  1280[m[K	                                          ETH_DMABMR_USP); /* Enable use of separate PBL for [01;31m[KRx[m[K and Tx */
[01;32m[K  1290[m[K	       /* Enable the Ethernet [01;31m[KRx[m[K Interrupt */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   344[m[K	/* Ethernet DMA [01;31m[KRx[m[K descriptors Frame Length Shift */
[01;32m[K   347[m[K	/* Ethernet DMA [01;31m[KRx[m[K descriptors Buffer2 Size Shift */
[01;32m[K   350[m[K	/* Ethernet DMA [01;31m[KRx[m[K descriptors Frame length Shift */
[01;32m[K   449[m[K	  uint32_t             RxMode;                    /*!< Selects the Ethernet [01;31m[KRx[m[K mode: Polling mode, Interrupt mode.
[01;32m[K   592[m[K	  uint32_t             ForwardUndersizedGoodFrames; /*!< Enables or disables the [01;31m[KRx[m[K FIFO to forward Undersized frames (frames with no Error
[01;32m[K   609[m[K	  uint32_t             RxDMABurstLength;            /*!< Indicates the maximum number of beats to be transferred in one [01;31m[KRx[m[K DMA transaction.
[01;32m[K   621[m[K	  uint32_t             DMAArbitration;              /*!< Selects the DMA Tx/[01;31m[KRx[m[K arbitration.
[01;32m[K   657[m[K	  ETH_DMADescTypeDef *FSRxDesc;          /*!< First Segment [01;31m[KRx[m[K Desc */
[01;32m[K   659[m[K	  ETH_DMADescTypeDef *LSRxDesc;          /*!< Last Segment [01;31m[KRx[m[K Desc */
[01;32m[K   682[m[K	  ETH_DMADescTypeDef         *RxDesc;       /*!< [01;31m[KRx[m[K descriptor to Get        */
[01;32m[K   686[m[K	  ETH_DMARxFrameInfos        RxFrameInfos;  /*!< last [01;31m[KRx[m[K frame infos         */
[01;32m[K   716[m[K	    an Ethernet packet is received, the [01;31m[KRx[m[K-DMA will transfer the packet from RxFIFO
[01;32m[K   739[m[K	 #define ETH_RXBUFNB             ((uint32_t)5U)     /*  5 [01;31m[KRx[m[K buffers of size ETH_RX_BUF_SIZE */
[01;32m[K   855[m[K	/** @defgroup ETH_DMA_RX_Descriptor ETH DMA [01;31m[KRX[m[K Descriptor
[01;32m[K   860[m[K	  DMA [01;31m[KRx[m[K Descriptor
[01;32m[K   873[m[K	  * @brief  Bit definition of RDES0 register: DMA [01;31m[KRx[m[K descriptor status register
[01;32m[K   876[m[K	#define ETH_DMARXDESC_AFM         ((uint32_t)0x40000000U)  /*!< DA Filter Fail for the [01;31m[Krx[m[K frame  */
[01;32m[K   886[m[K	#define ETH_DMARXDESC_IPV4HCE     ((uint32_t)0x00000080U)  /*!< IPC Checksum Error: [01;31m[KRx[m[K Ipv4 header checksum error   */
[01;32m[K   893[m[K	#define ETH_DMARXDESC_MAMPCE      ((uint32_t)0x00000001U)  /*!< [01;31m[KRx[m[K MAC Address/Payload Checksum Error: [01;31m[KRx[m[K MAC address matched/ [01;31m[KRx[m[K Payload Checksum Error */
[01;32m[K   979[m[K	/** @defgroup ETH_Rx_Mode ETH [01;31m[KRx[m[K Mode
[01;32m[K  1296[m[K		#define ETH_MAC_RXFIFO_EMPTY             ((uint32_t)0x00000000)  /* [01;31m[KRx[m[K FIFO fill level: empty */
[01;32m[K  1297[m[K		#define ETH_MAC_RXFIFO_BELOW_THRESHOLD   ((uint32_t)0x00000100)  /* [01;31m[KRx[m[K FIFO fill level: fill-level below flow-control de-activate threshold */
[01;32m[K  1298[m[K		#define ETH_MAC_RXFIFO_ABOVE_THRESHOLD   ((uint32_t)0x00000200)  /* [01;31m[KRx[m[K FIFO fill level: fill-level above flow-control activate threshold */
[01;32m[K  1299[m[K		#define ETH_MAC_RXFIFO_FULL              ((uint32_t)0x00000300)  /* [01;31m[KRx[m[K FIFO fill level: full */
[01;32m[K  1300[m[K		#define ETH_MAC_READCONTROLLER_IDLE            ((uint32_t)0x00000060)  /* [01;31m[KRx[m[K FIFO read controller IDLE state */
[01;32m[K  1301[m[K		#define ETH_MAC_READCONTROLLER_READING_DATA    ((uint32_t)0x00000060)  /* [01;31m[KRx[m[K FIFO read controller Reading frame data */
[01;32m[K  1302[m[K		#define ETH_MAC_READCONTROLLER_READING_STATUS  ((uint32_t)0x00000060)  /* [01;31m[KRx[m[K FIFO read controller Reading frame status (or time-stamp) */
[01;32m[K  1303[m[K		#define ETH_MAC_READCONTROLLER_ FLUSHING       ((uint32_t)0x00000060)  /* [01;31m[KRx[m[K FIFO read controller Flushing the frame data and status */
[01;32m[K  1304[m[K		#define ETH_MAC_RXFIFO_WRITE_ACTIVE     ((uint32_t)0x00000010)  /* [01;31m[KRx[m[K FIFO write controller active */
[01;32m[K  1424[m[K	/** @defgroup ETH_Rx_DMA_Burst_Length ETH [01;31m[KRx[m[K DMA Burst Length
[01;32m[K  1503[m[K	/** @defgroup ETH_DMA_Rx_descriptor_buffers ETH DMA [01;31m[KRx[m[K descriptor buffers
[01;32m[K  1506[m[K	#define ETH_DMARXDESC_BUFFER1     ((uint32_t)0x00000000U)  /*!< DMA [01;31m[KRx[m[K Desc Buffer1 */
[01;32m[K  1507[m[K	#define ETH_DMARXDESC_BUFFER2     ((uint32_t)0x00000001U)  /*!< DMA [01;31m[KRx[m[K Desc Buffer2 */
[01;32m[K  1532[m[K	/** @defgroup ETH_MMC_Rx_Interrupts ETH MMC [01;31m[KRx[m[K Interrupts
[01;32m[K  1535[m[K	#define ETH_MMC_IT_RGUF      ((uint32_t)0x10020000U)  /*!< When [01;31m[KRx[m[K good unicast frames counter reaches half the maximum value */
[01;32m[K  1536[m[K	#define ETH_MMC_IT_RFAE      ((uint32_t)0x10000040U)  /*!< When [01;31m[KRx[m[K alignment error counter reaches half the maximum value */
[01;32m[K  1537[m[K	#define ETH_MMC_IT_RFCE      ((uint32_t)0x10000020U)  /*!< When [01;31m[KRx[m[K crc error counter reaches half the maximum value */
[01;32m[K  1560[m[K	#define ETH_DMA_FLAG_DATATRANSFERERROR ((uint32_t)0x00800000U)  /*!< Error bits 0-[01;31m[KRx[m[K DMA, 1-Tx DMA */
[01;32m[K  1627[m[K	#define ETH_DMA_TRANSMITPROCESS_CLOSING     ((uint32_t)0x00700000U)  /*!< Running - closing [01;31m[KRx[m[K descriptor */
[01;32m[K  1637[m[K	#define ETH_DMA_RECEIVEPROCESS_STOPPED      ((uint32_t)0x00000000U)  /*!< Stopped - Reset or Stop [01;31m[KRx[m[K Command issued */
[01;32m[K  1638[m[K	#define ETH_DMA_RECEIVEPROCESS_FETCHING     ((uint32_t)0x00020000U)  /*!< Running - fetching the [01;31m[KRx[m[K descriptor */
[01;32m[K  1640[m[K	#define ETH_DMA_RECEIVEPROCESS_SUSPENDED    ((uint32_t)0x00080000U)  /*!< Suspended - [01;31m[KRx[m[K Descriptor unavailable */
[01;32m[K  1691[m[K	  * @brief  Checks whether the specified Ethernet DMA [01;31m[KRx[m[K Desc flag is set or not.
[01;32m[K  1699[m[K	  * @brief  Enables the specified DMA [01;31m[KRx[m[K Desc receive interrupt.
[01;32m[K  1706[m[K	  * @brief  Disables the specified DMA [01;31m[KRx[m[K Desc receive interrupt.
[01;32m[K  1713[m[K	  * @brief  Set the specified DMA [01;31m[KRx[m[K Desc Own bit.
[01;32m[K  2050[m[K	  * @brief  Enables the specified Ethernet MMC [01;31m[KRx[m[K interrupts.
[01;32m[K  2054[m[K	  *     @arg ETH_MMC_IT_RGUF  : When [01;31m[KRx[m[K good unicast frames counter reaches half the maximum value
[01;32m[K  2055[m[K	  *     @arg ETH_MMC_IT_RFAE  : When [01;31m[KRx[m[K alignment error counter reaches half the maximum value
[01;32m[K  2056[m[K	  *     @arg ETH_MMC_IT_RFCE  : When [01;31m[KRx[m[K crc error counter reaches half the maximum value
[01;32m[K  2061[m[K	  * @brief  Disables the specified Ethernet MMC [01;31m[KRx[m[K interrupts.
[01;32m[K  2065[m[K	  *     @arg ETH_MMC_IT_RGUF  : When [01;31m[KRx[m[K good unicast frames counter reaches half the maximum value
[01;32m[K  2066[m[K	  *     @arg ETH_MMC_IT_RFAE  : When [01;31m[KRx[m[K alignment error counter reaches half the maximum value
[01;32m[K  2067[m[K	  *     @arg ETH_MMC_IT_RFCE  : When [01;31m[KRx[m[K crc error counter reaches half the maximum value

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K    22[m[K	* Device(s)    : [01;31m[KRX[m[K
[01;32m[K    23[m[K	* Description  : Interfaces FreeRTOS TCP/IP stack to [01;31m[KRX[m[K Ethernet driver.
[01;32m[K   350[m[K	                    /* The event about to be sent to the TCP/IP is an [01;31m[KRx[m[K event. */

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K    79[m[K	/* The semaphore used to wake the deferred interrupt handler task when an [01;31m[KRx[m[K
[01;32m[K   190[m[K			[01;31m[KRx[m[K. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   529[m[K					bLowWater : 1,		/* high-water level has been reached. Cleared as soon as '[01;31m[Krx[m[K-count < lo-water' */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   154[m[K		/* Properties of the [01;31m[KRx[m[K buffer and [01;31m[KRx[m[K window */
[01;32m[K   272[m[K	 * rx_size returns the number of bytes available in the [01;31m[KRx[m[K buffer
[01;32m[K   383[m[K	 * For the web server: borrow the circular [01;31m[KRx[m[K buffer for inspection

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   109[m[K											  * for [01;31m[KRx[m[K: initial receive sequence number (IRS) */
[01;32m[K   110[m[K			uint32_t ulCurrentSequenceNumber;/* Tx/[01;31m[KRx[m[K: the oldest sequence number not yet confirmed, also SND.UNA / RCV.NXT
[01;32m[K   116[m[K		uint32_t ulUserDataLength;			/* Number of bytes in [01;31m[KRx[m[K buffer which may be passed to the user, after having received a 'missing packet' */
[01;32m[K   161[m[K	 * [01;31m[KRx[m[K functions

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   241[m[K	 * MallocLarge is used to allocate large TCP buffers (for [01;31m[KRx[m[K/Tx)
[01;32m[K   396[m[K	/* Each TCP socket has circular stream buffers for [01;31m[KRx[m[K and Tx, which

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   515[m[K		 * Allocate RX descriptors, 1 [01;31m[KRxBD[m[K at a time.

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K    81[m[K			3) Wait for SPI [01;31m[KRXBUFF[m[K interrupt
[01;32m[K   145[m[K			3) Wait for SPI [01;31m[KRXBUFF[m[K interrupt
[01;32m[K   151[m[K						// Transfer complete, disable SPI [01;31m[KRXBUFF[m[K interrupt.
[01;32m[K   151[m[K						// Transfer complete, disable SPI [01;31m[KRXBUFF[m[K interrupt.

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K    69[m[K	#define GMAC_RXD_RXCOEN        (1ul << 24) /**< [01;31m[KRXCOEN[m[K related function */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K    70[m[K	#define GMAC_RXD_RXCOEN        (1ul << 24) /**< [01;31m[KRXCOEN[m[K related function */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K    72[m[K	#define GMAC_RXD_RXCOEN        (1ul << 24) /**< [01;31m[KRXCOEN[m[K related function */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   411[m[K				GMAC_RXD_RXCOEN );	/* [01;31m[KRXCOEN[m[K related function */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K   218[m[K	 * The PHY address is the reset status of CRS, [01;31m[KRXD[m[K[3:0] (the GmacPins' pullups).

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K   144[m[K	 * The PHY address is the reset status of CRS, [01;31m[KRXD[m[K[3:0] (the emacPins' pullups).

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   270[m[K	#define REG_RX_BYTE_CNT_THRES      (0x8E)       /* [01;31m[KRXDBCTR[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   440[m[K				/* Set the TxDesc and [01;31m[KRxDesc[m[K pointers. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   682[m[K	  ETH_DMADescTypeDef         *[01;31m[KRxDesc[m[K;       /*!< Rx descriptor to Get        */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K  1427[m[K	#define ETH_RXDMABURSTLENGTH_1BEAT          ((uint32_t)0x00020000U)  /*!< maximum number of beats to be transferred in one [01;31m[KRxDMA[m[K transaction is 1 */
[01;32m[K  1428[m[K	#define ETH_RXDMABURSTLENGTH_2BEAT          ((uint32_t)0x00040000U)  /*!< maximum number of beats to be transferred in one [01;31m[KRxDMA[m[K transaction is 2 */
[01;32m[K  1429[m[K	#define ETH_RXDMABURSTLENGTH_4BEAT          ((uint32_t)0x00080000U)  /*!< maximum number of beats to be transferred in one [01;31m[KRxDMA[m[K transaction is 4 */
[01;32m[K  1430[m[K	#define ETH_RXDMABURSTLENGTH_8BEAT          ((uint32_t)0x00100000U)  /*!< maximum number of beats to be transferred in one [01;31m[KRxDMA[m[K transaction is 8 */
[01;32m[K  1431[m[K	#define ETH_RXDMABURSTLENGTH_16BEAT         ((uint32_t)0x00200000U)  /*!< maximum number of beats to be transferred in one [01;31m[KRxDMA[m[K transaction is 16 */
[01;32m[K  1432[m[K	#define ETH_RXDMABURSTLENGTH_32BEAT         ((uint32_t)0x00400000U)  /*!< maximum number of beats to be transferred in one [01;31m[KRxDMA[m[K transaction is 32 */
[01;32m[K  1433[m[K	#define ETH_RXDMABURSTLENGTH_4XPBL_4BEAT    ((uint32_t)0x01020000U)  /*!< maximum number of beats to be transferred in one [01;31m[KRxDMA[m[K transaction is 4 */
[01;32m[K  1434[m[K	#define ETH_RXDMABURSTLENGTH_4XPBL_8BEAT    ((uint32_t)0x01040000U)  /*!< maximum number of beats to be transferred in one [01;31m[KRxDMA[m[K transaction is 8 */
[01;32m[K  1435[m[K	#define ETH_RXDMABURSTLENGTH_4XPBL_16BEAT   ((uint32_t)0x01080000U)  /*!< maximum number of beats to be transferred in one [01;31m[KRxDMA[m[K transaction is 16 */
[01;32m[K  1436[m[K	#define ETH_RXDMABURSTLENGTH_4XPBL_32BEAT   ((uint32_t)0x01100000U)  /*!< maximum number of beats to be transferred in one [01;31m[KRxDMA[m[K transaction is 32 */
[01;32m[K  1437[m[K	#define ETH_RXDMABURSTLENGTH_4XPBL_64BEAT   ((uint32_t)0x01200000U)  /*!< maximum number of beats to be transferred in one [01;31m[KRxDMA[m[K transaction is 64 */
[01;32m[K  1438[m[K	#define ETH_RXDMABURSTLENGTH_4XPBL_128BEAT  ((uint32_t)0x01400000U)  /*!< maximum number of beats to be transferred in one [01;31m[KRxDMA[m[K transaction is 128 */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   990[m[K		dmaconf->[01;31m[KRxDMABurstLength[m[K | /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
[01;32m[K  1268[m[K	    /* Set the RPBL and 4*PBL bits according to ETH [01;31m[KRxDMABurstLength[m[K value */
[01;32m[K  1275[m[K	                                          dmainit.[01;31m[KRxDMABurstLength[m[K |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   609[m[K	  uint32_t             [01;31m[KRxDMABurstLength[m[K;            /*!< Indicates the maximum number of beats to be transferred in one Rx DMA transaction.

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   267[m[K	#define REG_RX_TIME_THRES          (0x8C)       /* [01;31m[KRXDTTR[m[K */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K   220[m[K	 * The [01;31m[KRXDV[m[K pin is used to select test mode on reset (pulled up for test mode).

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K   146[m[K	 * The [01;31m[KRXDV[m[K pin is used to select test mode on reset (pulled up for test mode).

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K    69[m[K	#define GMII_RXERCR        0x15   // [01;31m[KRXER[m[K Counter
[01;32m[K   129[m[K	//#define GMII_RXERCR     21   // [01;31m[KRXER[m[K Counter Register

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   291[m[K	#define REG_RX_FRAME_CNT_THRES     (0x9C)       /* [01;31m[KRXFCTFC[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   263[m[K	#define REG_RX_ADDR_PTR            (0x86)       /* [01;31m[KRXFDPR[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   240[m[K	#define REG_RX_FHR_BYTE_CNT        (0x7E)       /* [01;31m[KRXFHBCR[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   223[m[K	#define REG_RX_FHR_STATUS          (0x7C)       /* [01;31m[KRXFHSR[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   716[m[K	    an Ethernet packet is received, the Rx-DMA will transfer the packet from [01;31m[KRxFIFO[m[K

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   686[m[K	  ETH_DMARxFrameInfos        [01;31m[KRxFrameInfos[m[K;  /*!< last Rx frame infos         */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2040[m[K		uxStreamBufferMidSpace() returns the distance between [01;31m[KrxHead[m[K and rxMid.  It
[01;32m[K  2047[m[K			/* All data between txMid and [01;31m[KrxHead[m[K will now be passed to the sliding
[01;32m[K  2058[m[K			/* Move the rxMid pointer forward up to [01;31m[KrxHead[m[K. */
[01;32m[K  2303[m[K				/* Now lTCPAddRxdata() will move the [01;31m[KrxHead[m[K pointer forward

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3302[m[K			if( pucData == NULL ) no copying, just advance [01;31m[KrxHead[m[K
[01;32m[K  3304[m[K			if( uxOffset == 0 ) Also advance [01;31m[KrxHead[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   177[m[K						rx_ready[ [01;31m[KrxHead[m[K ] = pdTRUE;
[01;32m[K   178[m[K						[01;31m[KrxHead[m[K++
[01;32m[K   896[m[K	//			xLength = xMicrelDevice.rx_buffers[ [01;31m[KrxHead[m[K ]->xDataLength & 3;

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2040[m[K		uxStreamBufferMidSpace() returns the distance between rxHead and [01;31m[KrxMid[m[K.  It
[01;32m[K  2058[m[K			/* Move the [01;31m[KrxMid[m[K pointer forward up to rxHead. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   449[m[K	  uint32_t             [01;31m[KRxMode[m[K;                    /*!< Selects the Ethernet Rx mode: Polling mode, Interrupt mode.

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   119[m[K	#define   QMU_SOFTWARE_RESET          (0x0002)    /* QMU soft reset (clear TxQ, [01;31m[KRxQ[m[K) */
[01;32m[K   167[m[K	#define REG_QDR_DUMMY              (0x00)       /* Dummy address to access QMU [01;31m[KRxQ[m[K, TxQ */
[01;32m[K   258[m[K	#define   RXQ_CMD_FREE_PACKET         (0x0001)    /* Manual dequeue (release the current frame from [01;31m[KRxQ[m[K) */
[01;32m[K   319[m[K	#define   RX_LOW_WATERMARK_MASK       (0x0FFF)    /* Set QMU [01;31m[KRxQ[m[K low watermark mask */
[01;32m[K   322[m[K	#define   RX_HIGH_WATERMARK_MASK      (0x0FFF)    /* Set QMU [01;31m[KRxQ[m[K high watermark mask */
[01;32m[K   325[m[K	#define   RX_OVERRUN_WATERMARK_MASK   (0x0FFF)    /* Set QMU [01;31m[KRxQ[m[K overrun watermark mask */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   165[m[K						// RX step21: end [01;31m[KRXQ[m[K read access.
[01;32m[K   165[m[K						// RX step21: end [01;31m[KRXQ[m[K read access.
[01;32m[K   810[m[K							/* RX step10: start [01;31m[KRXQ[m[K read access. */
[01;32m[K   908[m[K				/* RX step21: end [01;31m[KRXQ[m[K read access. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   248[m[K	#define REG_RXQ_CMD                (0x82)       /* [01;31m[KRXQCR[m[K */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2282[m[K				if the head marker in [01;31m[KrxStream[m[K may be advanced,	only if lOffset == 0.

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   126[m[K		 * Create a txStream or a [01;31m[KrxStream[m[K, depending on the parameter 'xIsInputStream'
[01;32m[K  3288[m[K		 * Add data to the [01;31m[KRxStream[m[K.  When uxOffset > 0, data has come in out-of-order
[01;32m[K  3348[m[K					/* Data is being added to [01;31m[KrxStream[m[K at the head (offs = 0) */
[01;32m[K  3353[m[K						Rx data, without copying from the [01;31m[KrxStream[m[K, to the user. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   712[m[K	 * data will be added to the [01;31m[KrxStream[m[K, otherwise to the tXStream.  Normally data

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   286[m[K	/* Returns the number of bytes in the socket's [01;31m[KrxStream[m[K. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2042[m[K		The oldest data not-yet-confirmed can be found at [01;31m[KrxTail[m[K. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1330[m[K			{ MK_PAIR( [01;31m[KRXUBR[m[K ) }, /* Enable receive used bit read interrupt. */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1333[m[K			{ MK_PAIR( [01;31m[KRXUBR[m[K ) }, /* Enable receive used bit read interrupt. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K  1402[m[K			{ MK_PAIR( [01;31m[KRXUBR[m[K ) }, /* Enable receive used bit read interrupt. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   212[m[K	#define   RX_CTRL_BLOCK_MAC           (0x0001)    /* Receive drop frame if the [01;31m[KSA[m[K is same as device MAC address */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   880[m[K	#define ETH_DMARXDESC_SAF         ((uint32_t)0x00002000U)  /*!< [01;31m[KSA[m[K Filter Fail for the received frame */
[01;32m[K  1257[m[K	/** @defgroup ETH_MAC_addresses_filter_SA_DA ETH MAC addresses filter [01;31m[KSA[m[K DA

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1156[m[K	  /* Set the [01;31m[KSAF[m[K and SAIF bits according to ETH SourceAddrFilter value */

[1;34m./test/cbmc/proofs/Socket/vSocketBind/DONT_ALLOW_SOCKET_SEND_WITHOUT_BIND/vSocketBind_harness.c[39m

[01;32m[K    54[m[K		/* malloc instead of [01;31m[KsafeMalloc[m[K since we do not allow socket without binding. */

[1;34m./test/cbmc/proofs/DNS/DNSlookup/DNSlookup_harness.c[39m

[01;32m[K    24[m[K			char *pcHostName = [01;31m[KsafeMalloc[m[K(len); /* malloc is replaced by [01;31m[KsafeMalloc[m[K */

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_cancel/DNSgetHostByName_cancel_harness.c[39m

[01;32m[K    18[m[K	void *[01;31m[KsafeMalloc[m[K(size_t xWantedSize) { /* Returns a NULL pointer if the wanted size is 0. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1156[m[K	  /* Set the SAF and [01;31m[KSAIF[m[K bits according to ETH SourceAddrFilter value */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   280[m[K	Declared in ASF\[01;31m[Ksam[m[K\components\ksz8851snl\ksz8851snl.c */
[01;32m[K   284[m[K	declared in ASF\[01;31m[Ksam[m[K\components\ksz8851snl\ksz8851snl.c */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K     5[m[K	 * \brief KS8851SNL driver for [01;31m[KSAM[m[K.

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.h[39m

[01;32m[K     5[m[K	 * \brief KS8851SNL driver for [01;31m[KSAM[m[K.

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K     4[m[K	 * \brief KSZ8051MNL (Ethernet PHY) driver for [01;31m[KSAM[m[K.

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K     4[m[K	 * \brief GMAC (Ethernet MAC) driver for [01;31m[KSAM[m[K.

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K     4[m[K	 * \brief GMAC (Ethernet MAC) driver for [01;31m[KSAM[m[K.

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K     4[m[K	 * \brief GMAC (Ethernet MAC) driver for [01;31m[KSAM[m[K.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K     4[m[K	 * \brief GMAC (Ethernet MAC) driver for [01;31m[KSAM[m[K.
[01;32m[K   164[m[K		/* Only [01;31m[KSAM[m[K E70 Rev-B. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K     4[m[K	 * \brief GMAC (Ethernet MAC) driver for [01;31m[KSAM[m[K.

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2933[m[K			case eSYN_RECEIVED:	/* (server) we've had a SYN, replied with SYN+[01;31m[KSCK[m[K

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.c[39m

[01;32m[K   157[m[K			/* For experiments in the [01;31m[KSDIO[m[K driver, make the remaining uncached memory

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif.h[39m

[01;32m[K    83[m[K		/* pointers to memory holding buffer descriptors (used only with [01;31m[KSDMA[m[K) */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   236[m[K	 * If there is also [01;31m[KSDRAM[m[K, the user may decide to use a different memory

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   239[m[K	 * If there is also [01;31m[KSDRAM[m[K, the user may decide to use a different memory

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   678[m[K		/*Start with a timeout of 2 * 500 ms (1 [01;31m[Ksec[m[K). */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   376[m[K	#define   WAKEUP_TIME                 (0xFF00)    /* Min time ([01;31m[Ksec[m[K) wake-uo after detected energy */
[01;32m[K   377[m[K	#define   GOSLEEP_TIME                (0x00FF)    /* Min time ([01;31m[Ksec[m[K) before goto sleep when in energy mode */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1251[m[K	    /* Set the OSF bit according to ETH [01;31m[KSecondFrameOperate[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   599[m[K	  uint32_t             [01;31m[KSecondFrameOperate[m[K;          /*!< Selects or not the Operate on second frame mode, which allows the DMA to process a second

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   661[m[K	  uint32_t  [01;31m[KSegCount[m[K;                    /*!< Segment count */

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   141[m[K	    /*  - the Harmony MAC driver: TCPIP_MAC_PACKET->pDSeg->[01;31m[KsegLoad[m[K */

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   147[m[K	    /* NOTE: [01;31m[KsegLoadLen[m[K should NOT include: */

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   145[m[K	    /*      - 2 bytes offset from the MAC packet (Harmony MAC driver: [01;31m[KsegLoadOffset[m[K) */

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K   153[m[K	    //[01;31m[KSendData[m[K: pt = pxDescriptor->pucBuffer, length = pxDescriptor->xDataLength
[01;32m[K   161[m[K	        /* It is assumed [01;31m[KSendData[m[K() copies the data out of the FreeRTOS+TCP Ethernet

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   175[m[K	     * This example assumes [01;31m[KSendData[m[K() is a peripheral driver library function that
[01;32m[K   196[m[K	        /* It is assumed [01;31m[KSendData[m[K() copies the data out of the FreeRTOS+TCP Ethernet
[01;32m[K   524[m[K	 * Function Name: [01;31m[KSendData[m[K ()
[01;32m[K   564[m[K	} /* End of function [01;31m[KSendData[m[K() */

[1;34m./test/cbmc/proofs/IP/SendEventToIPTask/SendEventToIPTask_harness.c[39m

[01;32m[K    39[m[K	// The harness test proceeds to call [01;31m[KSendEventToIPTask[m[K with an unconstrained value

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K   177[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/[01;31m[Ksendto[m[K.html
[01;32m[K   177[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/[01;31m[Ksendto[m[K.html

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1050[m[K			/* pxAddress will be NULL if [01;31m[Ksendto[m[K() was called on a socket without the

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   147[m[K	#define FREERTOS_MSG_DONTWAIT			( 16 )		/* Can be used with recvfrom(), [01;31m[Ksendto[m[K(), recv(), and send(). */

[1;34m./test/cbmc/include/queue_init.h[39m

[01;32m[K    15[m[K	   and a [01;31m[Ksepearted[m[K proof on prvCopyDataToQueue to deal with it.

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2910[m[K					Acknowledge with [01;31m[Kseq[m[K+1 because the SYN is seen as pseudo data

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   115[m[K		uint32_t ulOurSequenceNumber;		/* The [01;31m[KSEQ[m[K number we're sending out */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  3350[m[K						owner to [01;31m[Ksetsockopt[m[K's, therefore copy properties of the server

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K    66[m[K	 * set per socket, using [01;31m[Ksetsockopt[m[K().  If not set, the times below will be

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   369[m[K	 * they can be overridden at runtime by using the [01;31m[Ksetsockopt[m[K() call */

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K    65[m[K	 * set per socket, using [01;31m[Ksetsockopt[m[K().  If not set, the times below will be

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K    46[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/[01;31m[Ksetsockopt[m[K.html
[01;32m[K    46[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/[01;31m[Ksetsockopt[m[K.html

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  2816[m[K						using [01;31m[Ksetsockopt[m[K()
[01;32m[K  3220[m[K			creation, it could still be changed with [01;31m[Ksetsockopt[m[K(). */

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   399[m[K	 * they can be overridden at runtime by using the [01;31m[Ksetsockopt[m[K() call */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K   277[m[K	            /* else same error occurred; this normally should not happen! But the buffer is left in there so it [01;31m[Kshold[m[K be freed! */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   298[m[K				[01;31m[KShouldn[m[K't we test for xARPCache[ x ].ucValid == pdFALSE here ? */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   705[m[K							/* [01;31m[KShouldn[m[K't have cleared the eSOCKET_RECEIVE flag. */
[01;32m[K  2619[m[K						/* [01;31m[KShouldn[m[K't have cleared other flags. */

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   301[m[K	        // [01;31m[KShouldn[m[K't goes here, unless descriptor corrupted
[01;32m[K   347[m[K	        // [01;31m[KShouldn[m[K't goes here, unless descriptor corrupted

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K   111[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/vApplicationIPNetworkEventHook.[01;31m[Kshtml[m[K.
[01;32m[K   111[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/vApplicationIPNetworkEventHook.[01;31m[Kshtml[m[K.

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K   110[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/vApplicationIPNetworkEventHook.[01;31m[Kshtml[m[K.
[01;32m[K   110[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/vApplicationIPNetworkEventHook.[01;31m[Kshtml[m[K.

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   355[m[K		/* There seems to be an issue ([01;31m[KSI[m[K# 692601), see comments below. */
[01;32m[K   600[m[K	 * The EmacPs has a HW bug ([01;31m[KSI[m[K# 692601) on the Rx path for heavy Rx traffic.

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3915[m[K				/* Maybe the socketset was [01;31m[Ksignalled[m[K, but don't

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   244[m[K		eSocketSignalEvent,		/*12: A socket must be [01;31m[Ksignalled[m[K. */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1553[m[K						i.e. the payload size plus [01;31m[Ksizeof[m[K( UDPPacket_t ). */

[1;34m./test/cbmc/proofs/ARP/ARPGenerateRequestPacket/ARPGenerateRequestPacket_harness.c[39m

[01;32m[K    14[m[K		 * is at least allocated to [01;31m[Ksizeof[m[K(ARPPacket_t) size but eventually a even larger buffer.

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K    50[m[K			ulOptionsData[] is initialized as uint32_t ulOptionsData[ipSIZE_TCP_OPTIONS/[01;31m[Ksizeof[m[K(uint32_t)].

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K   151[m[K	     * [01;31m[Ksizeof[m[K(DNSMessage_t) = 6 * [01;31m[Ksizeof[m[K(uint16_t)

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   274[m[K		( void )pxSocket;	/* Was only use fot [01;31m[Ksizeof[m[K. */
[01;32m[K  3243[m[K			/* And make the length a multiple of [01;31m[Ksizeof[m[K( size_t ). */

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K   170[m[K		where N equals '[01;31m[Ksizeof[m[K( size_t )'. */
[01;32m[K   223[m[K			to the nearest multiple of N bytes, where N equals '[01;31m[Ksizeof[m[K( size_t )'. */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   895[m[K				/* Packet lengths will be rounded up to a multiple of "[01;31m[Ksizeof[m[K size_t". */

[1;34m./portable/NetworkInterface/mw300_rd/NetworkInterface.c[39m

[01;32m[K   204[m[K	    pkt_len = 22 + 4; /* [01;31m[Ksizeof[m[K(TxPD) + INTF_HEADER_LEN */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K   732[m[K	            /* [01;31m[Ksizeof[m[K(TCPIP_MAC_ETHERNET_HEADER) is subtracted by the driver */

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   149[m[K	    /*          - the [01;31m[Ksizeof[m[K(TCPIP_MAC_ETHERNET_HEADER) */
[01;32m[K   252[m[K	    /*       or the [01;31m[Ksizeof[m[K(TCPIP_MAC_ETHERNET_HEADER) */
[01;32m[K   360[m[K	     * where N equals '[01;31m[Ksizeof[m[K( size_t )'. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1179[m[K	 *       memcpy(gmac_option.uc_mac_addr, gs_uc_mac_address, [01;31m[Ksizeof[m[K(gs_uc_mac_address));
[01;32m[K  1256[m[K	 *         memcpy(gmac_option.uc_mac_addr, gs_uc_mac_address, [01;31m[Ksizeof[m[K(gs_uc_mac_address));
[01;32m[K  1284[m[K	 *    gmac_dev_read(&gs_gmac_dev, (uint8_t *) gs_uc_eth_buffer, [01;31m[Ksizeof[m[K(gs_uc_eth_buffer), &ul_frm_size));
[01;32m[K  1289[m[K	 *   - \code gmac_dev_read(&gs_gmac_dev, (uint8_t *) gs_uc_eth_buffer, [01;31m[Ksizeof[m[K(gs_uc_eth_buffer), &ul_frm_size)); \endcode

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1182[m[K	 *       memcpy(gmac_option.uc_mac_addr, gs_uc_mac_address, [01;31m[Ksizeof[m[K(gs_uc_mac_address));
[01;32m[K  1259[m[K	 *         memcpy(gmac_option.uc_mac_addr, gs_uc_mac_address, [01;31m[Ksizeof[m[K(gs_uc_mac_address));
[01;32m[K  1287[m[K	 *    gmac_dev_read(&gs_gmac_dev, (uint8_t *) gs_uc_eth_buffer, [01;31m[Ksizeof[m[K(gs_uc_eth_buffer), &ul_frm_size));
[01;32m[K  1292[m[K	 *   - \code gmac_dev_read(&gs_gmac_dev, (uint8_t *) gs_uc_eth_buffer, [01;31m[Ksizeof[m[K(gs_uc_eth_buffer), &ul_frm_size)); \endcode

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   308[m[K		 * 		FreeRTOS_setsockopt( sock, 0, FREERTOS_SO_TCP_CONN_HANDLER, ( void * ) &xHnd, [01;31m[Ksizeof[m[K( xHnd ) );
[01;32m[K   328[m[K		 *		FreeRTOS_setsockopt( sock, 0, FREERTOS_SO_TCP_RECV_HANDLER, ( void * ) &xHand, [01;31m[Ksizeof[m[K( xHand ) );

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   125[m[K		uint32_t ulOptionsData[ipSIZE_TCP_OPTIONS/[01;31m[Ksizeof[m[K(uint32_t)];	/* Contains the options we send out */

[1;34m./test/cbmc/proofs/ParseDNSReply/ParseDNSReply_harness.c[39m

[01;32m[K    82[m[K	 * Abstraction of prvSkipNameField proved in [01;31m[KSkipNameField[m[K

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_wifi.c[39m

[01;32m[K   178[m[K	        { /* [01;31m[Ksmth[m[K went wrong; nothing sent to the */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K   770[m[K	        { /* [01;31m[Ksmth[m[K went wrong; nothing sent to the */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   110[m[K			uint32_t ulCurrentSequenceNumber;/* Tx/Rx: the oldest sequence number not yet confirmed, also [01;31m[KSND[m[K.UNA / RCV.NXT

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3721[m[K						/* Using function "[01;31m[Ksnprintf[m[K". */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2820[m[K				/* Using function "[01;31m[Ksnprintf[m[K". */
[01;32m[K  2827[m[K			/* Using function "[01;31m[Ksnprintf[m[K". */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1917[m[K		/* Printable string to struct [01;31m[Ksockaddr[m[K. */
[01;32m[K  1935[m[K		/* Printable struct [01;31m[Ksockaddr[m[K to string. */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   169[m[K	Berkeley style [01;31m[Ksockaddr[m[K structure. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3915[m[K				/* Maybe the [01;31m[Ksocketset[m[K was signalled, but don't

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   495[m[K				/* Here a complete frame has been seen with [01;31m[KSOF[m[K and EOF */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   499[m[K					/* Here a complete frame has been seen with [01;31m[KSOF[m[K and EOF */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1156[m[K	  /* Set the SAF and SAIF bits according to ETH [01;31m[KSourceAddrFilter[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   510[m[K	  uint32_t             [01;31m[KSourceAddrFilter[m[K;          /*!< Selects the Source Address Filter mode.

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   837[m[K	 * @brief remove [01;31m[Kspacces[m[K from pcMessage into pcBuffer

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    69[m[K	#define   SPI_BUS_MODE                (0x0100)    /* In [01;31m[KSPI[m[K bus mode */
[01;32m[K    77[m[K	#define   CHIP_PACKAGE_32PIN          (0x0001)    /* 32-pin package for [01;31m[KSPI[m[K host interface only */
[01;32m[K   213[m[K	#define   RX_CTRL_BURST_LEN_MASK      (0x00e0)    /* SRDBL [01;31m[KSPI[m[K Receive Data Burst Length */
[01;32m[K   285[m[K	#define   INT_RX_SPI_ERROR            (0x0002)    /* Enable receive [01;31m[KSPI[m[K bus error interrupt */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K    65[m[K			2) Called by EMAC-Task: start [01;31m[KSPI[m[K transfer
[01;32m[K    81[m[K			3) Wait for [01;31m[KSPI[m[K RXBUFF interrupt
[01;32m[K    91[m[K			4) Called by EMAC-Task: finish [01;31m[KSPI[m[K transfer
[01;32m[K   120[m[K			2) Called by EMAC-Task: check for new fragments and start [01;31m[KSPI[m[K transfer
[01;32m[K   140[m[K							// Start [01;31m[KSPI[m[K data transfer
[01;32m[K   140[m[K							// Start [01;31m[KSPI[m[K data transfer
[01;32m[K   145[m[K			3) Wait for [01;31m[KSPI[m[K RXBUFF interrupt
[01;32m[K   151[m[K						// Transfer complete, disable [01;31m[KSPI[m[K RXBUFF interrupt.
[01;32m[K   151[m[K						// Transfer complete, disable [01;31m[KSPI[m[K RXBUFF interrupt.
[01;32m[K   159[m[K			4) Finish [01;31m[KSPI[m[K transfer
[01;32m[K   279[m[K	/* [01;31m[KSPI[m[K PDC register base.
[01;32m[K   520[m[K	 * \brief Handler for [01;31m[KSPI[m[K interrupt.
[01;32m[K   825[m[K							/* Wait for [01;31m[KSPI[m[K interrupt to set status 'SPI_PDC_RX_COMPLETE'. */
[01;32m[K   881[m[K						/* Bring [01;31m[KSPI[m[K SS low. */
[01;32m[K  1058[m[K		/* Initialize [01;31m[KSPI[m[K link. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K    67[m[K	/* [01;31m[KSPI[m[K PDC register base. */
[01;32m[K   458[m[K		/* Init step12: adjust [01;31m[KSPI[m[K data output delay. */
[01;32m[K   493[m[K		/* Configure the [01;31m[KSPI[m[K peripheral. */

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K   126[m[K	 * included in tasks.c.  That is because this project defines its own [01;31m[Ksprintf[m[K()

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif.h[39m

[01;32m[K    67[m[K	 * stored in the [01;31m[KSRAM[m[K based packet buffer until

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   239[m[K	The first 64KB of the [01;31m[KSRAM[m[K is not cached.

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K    86[m[K		The FreeRTOS+TCP port does not make use of "[01;31m[Ksrc[m[K/xemacps_bdring.c".
[01;32m[K   505[m[K		/* These variables will be used in XEmacPs_Start (see [01;31m[Ksrc[m[K/xemacps.c). */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif.h[39m

[01;32m[K    61[m[K	 * Missing declaration in '[01;31m[Ksrc[m[K/xemacps_hw.h' :

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   707[m[K	#define ETH_HEADER               ((uint32_t)14U)    /*!< 6 byte Dest addr, 6 byte [01;31m[KSrc[m[K addr, 2 byte length/type */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   213[m[K	#define   RX_CTRL_BURST_LEN_MASK      (0x00e0)    /* [01;31m[KSRDBL[m[K SPI Receive Data Burst Length */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K    51[m[K	/* Constants used for Smoothed Round Trip Time ([01;31m[KSRTT[m[K). */
[01;32m[K  1508[m[K			/* [01;31m[KSRTT[m[K[i] = (1-a) * [01;31m[KSRTT[m[K[i-1] + a * RTT
[01;32m[K  1512[m[K			RTO = 2 * [01;31m[KSRTT[m[K
[01;32m[K  1516[m[K			  [01;31m[KSRTT[m[K is Smoothed RTT

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   881[m[K						/* Bring SPI [01;31m[KSS[m[K low. */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   279[m[K			/* Make [01;31m[KSTARTTX[m[K high */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   456[m[K	 * Arguments    : xStatus : true when [01;31m[Kstatyus[m[K has become high

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K     3[m[K	 * library, COPYRIGHT(c) 2015 [01;31m[KSTMicroelectronics[m[K.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K    74[m[K	  * <h2><center>&copy; COPYRIGHT(c) 2015 [01;31m[KSTMicroelectronics[m[K</center></h2>
[01;32m[K    83[m[K	  *   3. Neither the name of [01;31m[KSTMicroelectronics[m[K nor the names of its contributors
[01;32m[K  1468[m[K	/************************ (C) COPYRIGHT [01;31m[KSTMicroelectronics[m[K *****END OF FILE****/

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K    11[m[K	  * <h2><center>&copy; COPYRIGHT(c) 2017 [01;31m[KSTMicroelectronics[m[K</center></h2>
[01;32m[K    20[m[K	  *   3. Neither the name of [01;31m[KSTMicroelectronics[m[K nor the names of its contributors
[01;32m[K  2262[m[K	/************************ (C) COPYRIGHT [01;31m[KSTMicroelectronics[m[K *****END OF FILE****/

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName/DNSgetHostByName_harness.c[39m

[01;32m[K    37[m[K	 * bound the iterations of [01;31m[Kstrcmp[m[K.
[01;32m[K    90[m[K	    __CPROVER_assume( len > 0 ); /* prvProcessDNSCache [01;31m[Kstrcmp[m[K */

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_a/DNSgetHostByName_a_harness.c[39m

[01;32m[K    37[m[K	 * bound the iterations of [01;31m[Kstrcmp[m[K.
[01;32m[K   101[m[K	    __CPROVER_assume( len > 0 ); /* prvProcessDNSCache [01;31m[Kstrcmp[m[K */

[1;34m./tools/tcp_mem_stats.c[39m

[01;32m[K    56[m[K	/* When a [01;31m[Kstreambuffer[m[K is allocated, 4 extra bytes will be reserved. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   356[m[K							/* [01;31m[KStreamSize[m[K is expressed in number of bytes */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   253[m[K	/* A DNS query consists of a header, as described in '[01;31m[Kstruct[m[K xDNSMessage'

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   745[m[K			/* Map the ethernet buffer onto a TCPPacket_t [01;31m[Kstruct[m[K for easy access to the fields. */
[01;32m[K  1053[m[K			 * the buffer onto the TCPPacket_t [01;31m[Kstruct[m[K to easily access it's field. */
[01;32m[K  1800[m[K		/* Map the ethernet buffer onto the ProtocolHeader_t [01;31m[Kstruct[m[K for easy access to the fields. */
[01;32m[K  1829[m[K					/* Map the byte stream onto ProtocolHeaders_t [01;31m[Kstruct[m[K for easy
[01;32m[K  2076[m[K	/* Map the ethernet buffer onto the ProtocolHeader_t [01;31m[Kstruct[m[K for easy access to the fields. */
[01;32m[K  2173[m[K	/* Map the ethernet buffer onto the ProtocolHeader_t [01;31m[Kstruct[m[K for easy access to the fields. */
[01;32m[K  2179[m[K	/* Map the buffer onto an IPHeader_t [01;31m[Kstruct[m[K for easy access to fields. */
[01;32m[K  2248[m[K	/* Map the ethernet buffer onto the ProtocolHeader_t [01;31m[Kstruct[m[K for easy access to the fields. */
[01;32m[K  2326[m[K	/* Map the ethernet buffer onto the ProtocolHeader_t [01;31m[Kstruct[m[K for easy access to the fields. */
[01;32m[K  2389[m[K	/* Map the ethernet buffer onto the ProtocolHeader_t [01;31m[Kstruct[m[K for easy access to the fields. */
[01;32m[K  2431[m[K			/* Map the Last packet onto the ProtocolHeader_t [01;31m[Kstruct[m[K for easy access to the fields. */
[01;32m[K  2509[m[K	/* Map the buffer onto the ProtocolHeader_t [01;31m[Kstruct[m[K for easy access to the fields. */
[01;32m[K  2673[m[K	/* Map the buffer onto the ProtocolHeader_t [01;31m[Kstruct[m[K for easy access to the fields. */
[01;32m[K  2818[m[K	/* Map the buffer onto the ProtocolHeader_t [01;31m[Kstruct[m[K for easy access to the fields. */
[01;32m[K  3003[m[K			/* Map the ethernet buffer onto the TCPPacket_t [01;31m[Kstruct[m[K for easy access to the fields. */
[01;32m[K  3067[m[K	/* Map the buffer onto a ProtocolHeaders_t [01;31m[Kstruct[m[K for easy access to the fields. */
[01;32m[K  3090[m[K			/* Map the ethernet buffer onto the IPHeader_t [01;31m[Kstruct[m[K for easy access to the fields. */
[01;32m[K  3298[m[K	/* Map the ethernet buffer onto a TCPPacket_t [01;31m[Kstruct[m[K for easy access to the fields. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1917[m[K		/* Printable string to [01;31m[Kstruct[m[K sockaddr. */
[01;32m[K  1935[m[K		/* Printable [01;31m[Kstruct[m[K sockaddr to string. */
[01;32m[K  2068[m[K		/* inet_pton AF_INET target is a 4-byte '[01;31m[Kstruct[m[K in_addr'. */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   606[m[K			/* When pcap_compile() succeeds, it allocates memory for the memory pointed to by the bpf_program [01;31m[Kstruct[m[K

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K    87[m[K		In stead '[01;31m[Kstruct[m[K xemacpsif_s' has a "head" and a "tail" index.

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_hw.h[39m

[01;32m[K    31[m[K	//void init_emacps(xemacpsif_s *xemacpsif, [01;31m[Kstruct[m[K netif *netif);

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif.h[39m

[01;32m[K    46[m[K	//int 	xemacpsif_init([01;31m[Kstruct[m[K netif *netif);
[01;32m[K    47[m[K	//int 	xemacpsif_input([01;31m[Kstruct[m[K netif *netif);

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K   390[m[K			/* When pcap_compile() succeeds, it allocates memory for the memory pointed to by the bpf_program [01;31m[Kstruct[m[K 

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K   167[m[K	/* Initialise the [01;31m[Kstruct[m[K and assign a PHY-read and -write function. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   151[m[K	/** Receive buffer descriptor [01;31m[Kstruct[m[K */
[01;32m[K   185[m[K	/** Transmit buffer descriptor [01;31m[Kstruct[m[K */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   152[m[K	/** Receive buffer descriptor [01;31m[Kstruct[m[K */
[01;32m[K   186[m[K	/** Transmit buffer descriptor [01;31m[Kstruct[m[K */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   111[m[K	 * GMAC device memory management [01;31m[Kstruct[m[K.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   175[m[K	/** Receive buffer descriptor [01;31m[Kstruct[m[K */
[01;32m[K   209[m[K	/** Transmit buffer descriptor [01;31m[Kstruct[m[K */

[1;34m./portable/NetworkInterface/include/phyHandling.h[39m

[01;32m[K    90[m[K	/* Initialise the [01;31m[Kstruct[m[K and assign a PHY-read and -write function. */

[1;34m./portable/Compiler/CompilerName/pack_struct_start.h[39m

[01;32m[K    32[m[K	/* FIX ME. Update for the compiler specifier needed at the start of a [01;31m[Kstruct[m[K declartion to pack the [01;31m[Kstruct[m[K. */

[1;34m./portable/Compiler/CompilerName/pack_struct_end.h[39m

[01;32m[K    32[m[K	; /* FIX ME. Update for the compiler specifier needed at end of a [01;31m[Kstruct[m[K declartion to pack the [01;31m[Kstruct[m[K. */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K   260[m[K	/* Map the ethernet buffer to the UDPPacket_t [01;31m[Kstruct[m[K for easy access to the fields. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   259[m[K	/* Default values for the above [01;31m[Kstruct[m[K in case DHCP
[01;32m[K  1291[m[K		/* Map the buffer onto Ethernet Header [01;31m[Kstruct[m[K for easy access to fields. */
[01;32m[K  1432[m[K			/* Map the buffer onto the Ethernet Header [01;31m[Kstruct[m[K for easy access to the fields. */
[01;32m[K  1763[m[K									/* Map the buffer onto a ICMP-Packet [01;31m[Kstruct[m[K to easily access the
[01;32m[K  1783[m[K							/* Map the buffer onto a UDP-Packet [01;31m[Kstruct[m[K to easily access the
[01;32m[K  2011[m[K				/* Map the buffer onto a IP-Packet [01;31m[Kstruct[m[K to easily access the
[01;32m[K  2050[m[K				/* Map the Buffer onto the Protocol Packet [01;31m[Kstruct[m[K for easy access to the
[01;32m[K  2051[m[K				 * [01;31m[Kstruct[m[K fields. */
[01;32m[K  2580[m[K			/* Map the Buffer to Ethernet Header [01;31m[Kstruct[m[K for easy access to fields. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   337[m[K	 * to a pointer to a [01;31m[Kstruct[m[K.
[01;32m[K   557[m[K			[01;31m[Kstruct[m[K xSOCKET *pxPeerSocket;	/* for server socket: child, for child socket: parent */
[01;32m[K   607[m[K												 * typedef void (* FOnUDPReceive_t) (Socket_t xSocket, void *pData, size_t xLength, [01;31m[Kstruct[m[K freertos_sockaddr *pxAddr );
[01;32m[K   765[m[K	 * The same as above, but a [01;31m[Kstruct[m[K as a parameter, containing:

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   134[m[K			[01;31m[Kstruct[m[K xNETWORK_BUFFER *pxNextBuffer; /* Possible optimisation for expert users - requires network driver support. */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    65[m[K		[01;31m[Kstruct[m[K xLIST_ITEM xQueueItem;	/* TX only: segments can be linked in one of three queues: xPriorityQueue, xTxQueue, and xWaitQueue */
[01;32m[K    66[m[K		[01;31m[Kstruct[m[K xLIST_ITEM xSegmentItem;	/* With this item the segment can be connected to a list, depending on who is owning it */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1711[m[K						/* All [01;31m[Kstructs[m[K of headers expect a IP header size of 20 bytes

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   507[m[K		 * Note that the values of all short and long integers in these [01;31m[Kstructs[m[K

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   857[m[K		/* Finish off the record. Cast the record onto DNSTail_t [01;31m[Kstucture[m[K to easily

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   666[m[K		[01;31m[Ksubdomain[m[K part and the string end byte. */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./test/unit-test/ConfigFiles/pack_struct_start.h[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./test/unit-test/ConfigFiles/portmacro.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K     7[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./test/unit-test/ConfigFiles/pack_struct_end.h[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./test/unit-test/ConfigFiles/FreeRTOS_errno_TCP.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./test/unit-test/ConfigFiles/NetworkInterface.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./test/unit-test/ConfigFiles/NetworkBufferManagement.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./test/unit-test/ConfigFiles/IPTraceMacroDefaults.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_OutputARPRequest/OutputARPRequest_harness.c[39m

[01;32m[K     9[m[K	 * modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies

[1;34m./test/cbmc/proofs/IP/SendEventToIPTask/SendEventToIPTask_harness.c[39m

[01;32m[K     9[m[K	 * modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies

[1;34m./test/cbmc/proofs/TCP/prvTCPReturnPacket/TCPReturnPacket_harness.c[39m

[01;32m[K     9[m[K	 * modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies

[1;34m./test/cbmc/proofs/TCP/prvTCPPrepareSend/TCPPrepareSend_harness.c[39m

[01;32m[K     9[m[K	 * modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K     9[m[K	 * modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies

[1;34m./test/cbmc/proofs/DHCP/IsDHCPSocket/IsDHCPSocket_harness.c[39m

[01;32m[K     9[m[K	 * modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies

[1;34m./test/cbmc/proofs/DHCP/DHCPProcess/DHCPProcess_harness.c[39m

[01;32m[K     9[m[K	  * modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./tools/tcp_mem_stats.c[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./FreeRTOS_Stream_Buffer.c[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/NetworkInterface/SH2A/NetworkInterface.c[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.c[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/NetworkInterface/mw300_rd/NetworkInterface.c[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_wifi.c[39m

[01;32m[K    18[m[K	*  use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K    18[m[K	*  use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K    13[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/NetworkInterface/board_family/NetworkInterface.c[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/Compiler/Keil/pack_struct_start.h[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/Compiler/Keil/pack_struct_end.h[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/Compiler/Renesas/pack_struct_start.h[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/Compiler/Renesas/pack_struct_end.h[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/Compiler/GCC/pack_struct_start.h[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/Compiler/GCC/pack_struct_end.h[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/Compiler/MSVC/pack_struct_start.h[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/Compiler/MSVC/pack_struct_end.h[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/Compiler/CompilerName/pack_struct_start.h[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/Compiler/CompilerName/pack_struct_end.h[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/Compiler/IAR/pack_struct_start.h[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/Compiler/IAR/pack_struct_end.h[39m

[01;32m[K     8[m[K	use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./include/FreeRTOS_errno_TCP.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./include/NetworkInterface.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./include/NetworkBufferManagement.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./include/tcp_dump_packets.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./include/IPTraceMacroDefaults.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./include/FreeRTOS_TCP_IP.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./include/tcp_mem_stats.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./include/FreeRTOS_UDP_IP.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K     8[m[K	 * use, copy, modify, merge, publish, distribute, [01;31m[Ksublicense[m[K, and/or sell copies of

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   894[m[K			/* Get the Frame Length of the received packet: [01;31m[Ksubstruct[m[K 4 bytes of the CRC */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   129[m[K		#error ipconfigDHCP_USES_USER_HOOK and its associated callback have been [01;31m[Ksuperceeded[m[K - see http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html#ipconfigUSE_DHCP_HOOK

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   132[m[K		#error ipconfigDHCP_USES_USER_HOOK and its associated callback have been [01;31m[Ksuperceeded[m[K - see http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html#ipconfigUSE_DHCP_HOOK

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K   258[m[K	 * \brief Issue a [01;31m[KSW[m[K reset to reset all registers of the PHY.

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.c[39m

[01;32m[K   411[m[K	 * \brief Issue a [01;31m[KSW[m[K reset to reset all registers of the PHY.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   812[m[K	#define ETH_DMATXDESC_FF                      ((uint32_t)0x00002000U)  /*!< Frame Flushed: DMA/MTL flushed the frame due to [01;31m[KSW[m[K flush */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1766[m[K			/* Thanks to Andrey Ivanov from [01;31m[KswissEmbedded[m[K for reporting that the

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   226[m[K		/* Set the [01;31m[KSWR[m[K bit: resets all MAC subsystem internal registers and logic */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   168[m[K	 * Either sends a [01;31m[KSYN[m[K or calls prvTCPSendRepeated (for regular messages).
[01;32m[K   189[m[K	 * Let ARP look-up the MAC-address of the peer and initialise the first [01;31m[KSYN[m[K
[01;32m[K   480[m[K	 *		prvTCPSendPacket()				// Either send a [01;31m[KSYN[m[K or call prvTCPSendRepeated ( regular messages )
[01;32m[K   480[m[K	 *		prvTCPSendPacket()				// Either send a [01;31m[KSYN[m[K or call prvTCPSendRepeated ( regular messages )
[01;32m[K   589[m[K			/* The connection is in a state other than [01;31m[KSYN[m[K. */
[01;32m[K   605[m[K				/* The connection is in the [01;31m[KSYN[m[K status. The packet will be repeated
[01;32m[K   618[m[K				now, proceed to send the packet with the [01;31m[KSYN[m[K flag.
[01;32m[K   623[m[K				/* About to send a [01;31m[KSYN[m[K packet.  Call prvSetSynAckOptions() to set
[01;32m[K   641[m[K				/* Send the [01;31m[KSYN[m[K message to make a connection.  The messages is
[01;32m[K   952[m[K	 * The [01;31m[KSYN[m[K event is very important: the sequence numbers, which have a kind of
[01;32m[K  1008[m[K			break;				/* We can now prepare the [01;31m[KSYN[m[K packet. */
[01;32m[K  1060[m[K			/* And remember that the connect/[01;31m[KSYN[m[K data are prepared. */
[01;32m[K  1100[m[K			/* Only set the [01;31m[KSYN[m[K flag. */
[01;32m[K  1108[m[K			first wait for a [01;31m[KSYN[m[K+ACK reply. */
[01;32m[K  1250[m[K				/* Option is only valid in [01;31m[KSYN[m[K phase. */
[01;32m[K  1435[m[K	 * When opening a TCP connection, while [01;31m[KSYN[m[K's are being sent, the  parties may
[01;32m[K  1444[m[K		/* We send out the TCP Maximum Segment Size option with our [01;31m[KSYN[m[K[+ACK]. */
[01;32m[K  2398[m[K		/* Either expect a ACK or a [01;31m[KSYN[m[K+ACK. */
[01;32m[K  2410[m[K			/* eSYN_RECEIVED: flags ACK  expected, not [01;31m[KSYN[m[K. */
[01;32m[K  2435[m[K				/* Clear the [01;31m[KSYN[m[K flag in lastPacket. */
[01;32m[K  2457[m[K			/* The [01;31m[KSYN[m[K+ACK has been confirmed, increase the next sequence number by
[01;32m[K  2489[m[K			/* This was the third step of connecting: [01;31m[KSYN[m[K, [01;31m[KSYN[m[K+ACK, ACK	so now the
[01;32m[K  2829[m[K		1. in the [01;31m[KSYN[m[K phase, we shall communicate the MSS
[01;32m[K  2872[m[K				'[01;31m[KSYN[m[K+ACK' didn't arrive.  Step back to the previous state in which
[01;32m[K  2873[m[K				a first incoming [01;31m[KSYN[m[K is handled.  The [01;31m[KSYN[m[K was counted already so
[01;32m[K  2906[m[K			case eSYN_FIRST:	/* (server) Just received a [01;31m[KSYN[m[K request for a server
[01;32m[K  2909[m[K					/* A new socket has been created, reply with a [01;31m[KSYN[m[K+ACK.
[01;32m[K  2910[m[K					Acknowledge with seq+1 because the [01;31m[KSYN[m[K is seen as pseudo data
[01;32m[K  2931[m[K								[01;31m[KSYN[m[K, expect	a [01;31m[KSYN[m[K+ACK and send a ACK now. */
[01;32m[K  2933[m[K			case eSYN_RECEIVED:	/* (server) we've had a [01;31m[KSYN[m[K, replied with [01;31m[KSYN[m[K+SCK
[01;32m[K  3130[m[K					has set the [01;31m[KSYN[m[K flag. */
[01;32m[K  3173[m[K							/* Per the above RFC, "In the [01;31m[KSYN[m[K-SENT state ... the RST is
[01;32m[K  3174[m[K							acceptable if the ACK field acknowledges the [01;31m[KSYN[m[K." */
[01;32m[K  3206[m[K						/* [01;31m[KSYN[m[K flag while this socket is already connected. */
[01;32m[K  3236[m[K				/* _HT_ : if we're in the [01;31m[KSYN[m[K phase, and peer does not send a MSS option,
[01;32m[K  3250[m[K					/* rfc1323 : The Window field in a [01;31m[KSYN[m[K (i.e., a <[01;31m[KSYN[m[K> or <[01;31m[KSYN[m[K,ACK>)
[01;32m[K  3310[m[K		/* A pure [01;31m[KSYN[m[K (without ACK) has come in, create a new socket to answer
[01;32m[K  3373[m[K			/* Here is the [01;31m[KSYN[m[K action. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   541[m[K	connections, hang protection can help reduce the impact of [01;31m[KSYN[m[K floods. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   544[m[K					bWinScaling : 1;	/* A TCP-Window Scaling option was offered and accepted in the [01;31m[KSYN[m[K phase. */

[1;34m./include/FreeRTOS_TCP_IP.h[39m

[01;32m[K    44[m[K		eSYN_FIRST,		/* 3 (server) Just created, must ACK the [01;31m[KSYN[m[K request. */

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   579[m[K	connections, hang protection can help reduce the impact of [01;31m[KSYN[m[K floods. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1206[m[K	 * It will be called by the IPtask only to avoid problems with [01;31m[Ksynchronicity[m[K

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2440[m[K				[01;31m[Ksynchronisation[m[K. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   953[m[K	 * random starting value, are being [01;31m[Ksynchronised[m[K.  The sliding window manager

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1185[m[K			/* Let the IP task close the socket to keep it [01;31m[Ksynchronised[m[K	with the

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   218[m[K		/* Enable [01;31m[KSYSCFG[m[K Clock */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1126[m[K	 * -# \ref sysclk_group "System Clock Management ([01;31m[Ksysclock[m[K)"

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1129[m[K	 * -# \ref sysclk_group "System Clock Management ([01;31m[Ksysclock[m[K)"

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   727[m[K		#define CPU_MAX_FREQ	[01;31m[KSystemCoreClock[m[K	/* 84, 100, 168 or 180 MHz */

[1;34m./test/cbmc/include/cbmc.h[39m

[01;32m[K    74[m[K	  * This assertion is used in some of the [01;31m[KTaskPool[m[K proofs.
[01;32m[K    84[m[K	  * This stub is used in some of the [01;31m[KTaskPool[m[K proofs.

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   323[m[K			This is a deferred handler [01;31m[Ktaskr[m[K, not a real interrupt, so it is ok to

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   851[m[K			This is a deferred handler [01;31m[Ktaskr[m[K, not a real interrupt, so it is ok to

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1335[m[K			{ MK_PAIR( [01;31m[KTCOMP[m[K ) }, /* Enable transmit complete interrupt. */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1338[m[K			{ MK_PAIR( [01;31m[KTCOMP[m[K ) }, /* Enable transmit complete interrupt. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K  1407[m[K			{ MK_PAIR( [01;31m[KTCOMP[m[K ) }, /* Enable transmit complete interrupt. */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    28[m[K	 * Module which handles the [01;31m[KTCP[m[K windowing schemes for FreeRTOS+[01;31m[KTCP[m[K.  Many
[01;32m[K    29[m[K	 * functions have two versions - one for FreeRTOS+[01;31m[KTCP[m[K (full) and one for
[01;32m[K    30[m[K	 * FreeRTOS+[01;31m[KTCP[m[K (lite).
[01;32m[K    43[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K    94[m[K	 * All [01;31m[KTCP[m[K sockets share a pool of segment descriptors (TCPSegment_t)
[01;32m[K   157[m[K	 * FreeRTOS+[01;31m[KTCP[m[K stores data in circular buffers.  Calculate the next position to
[01;32m[K   190[m[K	/* [01;31m[KTCP[m[K segment pool. */
[01;32m[K   195[m[K	/* List of free [01;31m[KTCP[m[K segments. */
[01;32m[K   409[m[K				/* If the [01;31m[KTCP[m[K-stack runs out of segments, you might consider
[01;32m[K   588[m[K			/*  Destroy a window.  A [01;31m[KTCP[m[K window doesn't serve any more.  Return all
[01;32m[K   709[m[K	        /* Free and clear the [01;31m[KTCP[m[K segments pointer. This function should only be called
[01;32m[K   710[m[K	         * once FreeRTOS+[01;31m[KTCP[m[K will no longer be used. No thread-safety is provided for this
[01;32m[K   816[m[K			/* Non-zero if [01;31m[KTCP[m[K-windows contains data which must be popped. */
[01;32m[K   894[m[K				/* Looks like a [01;31m[KTCP[m[K keep-alive message.  Do not accept/store Rx data
[01;32m[K  1036[m[K			/* +[01;31m[KTCP[m[K stores data in circular buffers.  Calculate the next position to
[01;32m[K  1659[m[K				/* Get the owner, which is a [01;31m[KTCP[m[K segment. */
[01;32m[K  1805[m[K			/* This is tiny [01;31m[KTCP[m[K: there is only 1 segment for outgoing data.
[01;32m[K  2043[m[K			/* As in tiny [01;31m[KTCP[m[K there are no shared segments descriptors, there is

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    35[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    28[m[K	 * Module which handles the [01;31m[KTCP[m[K connections for FreeRTOS+[01;31m[KTCP[m[K.
[01;32m[K    29[m[K	 * It depends on  FreeRTOS_TCP_WIN.c, which handles the [01;31m[KTCP[m[K windowing
[01;32m[K    46[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K    60[m[K	/* Just make sure the contents doesn't get compiled if [01;31m[KTCP[m[K is not enabled. */
[01;32m[K    66[m[K	 * The meaning of the [01;31m[KTCP[m[K flags:
[01;32m[K    81[m[K	 * A few values of the [01;31m[KTCP[m[K options:
[01;32m[K    83[m[K	#define tcpTCP_OPT_END				0U   /* End of [01;31m[KTCP[m[K options list */
[01;32m[K    84[m[K	#define tcpTCP_OPT_NOOP				1U   /* "No-operation" [01;31m[KTCP[m[K option */
[01;32m[K    85[m[K	#define tcpTCP_OPT_MSS				2U   /* Maximum segment size [01;31m[KTCP[m[K option */
[01;32m[K    86[m[K	#define tcpTCP_OPT_WSOPT			3U   /* [01;31m[KTCP[m[K Window Scale Option (3-byte long) */
[01;32m[K    91[m[K	#define tcpTCP_OPT_MSS_LEN			4U   /* Length of [01;31m[KTCP[m[K MSS option. */
[01;32m[K    92[m[K	#define tcpTCP_OPT_WSOPT_LEN		3U   /* Length of [01;31m[KTCP[m[K WSOPT option. */
[01;32m[K   113[m[K	 * The highest 4 bits in the [01;31m[KTCP[m[K offset byte indicate the total length of the
[01;32m[K   114[m[K	 * [01;31m[KTCP[m[K header, divided by 4.
[01;32m[K   119[m[K	 * Acknowledgements to [01;31m[KTCP[m[K data packets may be delayed as long as more is being expected.
[01;32m[K   134[m[K	 * When there are no [01;31m[KTCP[m[K options, the [01;31m[KTCP[m[K offset equals 20 bytes, which is stored as
[01;32m[K   135[m[K	 * the number 5 (words) in the higher niblle of the [01;31m[KTCP[m[K-offset byte.
[01;32m[K   141[m[K	 * Each [01;31m[KTCP[m[K socket is checked regularly to see if it can send data packets.
[01;32m[K   150[m[K	 * Define a maximum perdiod of time (ms) to leave a [01;31m[KTCP[m[K-socket unattended.
[01;32m[K   151[m[K	 * When a [01;31m[KTCP[m[K timer expires, retries and keep-alive messages will be checked.
[01;32m[K   184[m[K	 * Initialise the data structures which keep track of the [01;31m[KTCP[m[K windowing system.
[01;32m[K   196[m[K		 * For logging and debugging: make a string showing the [01;31m[KTCP[m[K flags.
[01;32m[K   202[m[K	 * Parse the [01;31m[KTCP[m[K option(s) received, if present.
[01;32m[K   207[m[K	 * Identify and deal with a single [01;31m[KTCP[m[K header option, advancing the pointer to
[01;32m[K   218[m[K		 * Skip past [01;31m[KTCP[m[K header options when doing Selective ACK, until there are no
[01;32m[K   235[m[K	 * For anti-hang protection and [01;31m[KTCP[m[K keep-alive messages.  Called in two places:
[01;32m[K   258[m[K	 *  Called to handle the closure of a [01;31m[KTCP[m[K connection.
[01;32m[K   263[m[K	 * Called from prvTCPHandleState().  Find the [01;31m[KTCP[m[K payload data and check and
[01;32m[K   276[m[K	 * Set the [01;31m[KTCP[m[K options (if any) for the outgoing packet.
[01;32m[K   281[m[K	 * Called from prvTCPHandleState() as long as the [01;31m[KTCP[m[K status is eSYN_RECEIVED to
[01;32m[K   288[m[K	 * Called from prvTCPHandleState() as long as the [01;31m[KTCP[m[K status is eESTABLISHED.
[01;32m[K   308[m[K	 * Common code for sending a [01;31m[KTCP[m[K protocol control packet (i.e. no options, no
[01;32m[K   473[m[K	 * As soon as a [01;31m[KTCP[m[K socket timer expires, this function xTCPSocketCheck
[01;32m[K   506[m[K					function is called when the [01;31m[KTCP[m[K timer for the socket expires, the
[01;32m[K   631[m[K				/* Set the [01;31m[KTCP[m[K offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
[01;32m[K   697[m[K	 * which may either point to a real network buffer or to a [01;31m[KTCP[m[K socket field
[01;32m[K   891[m[K				/* calculate the [01;31m[KTCP[m[K checksum for an outgoing packet. */
[01;32m[K  1052[m[K			 * now prepare the initial [01;31m[KTCP[m[K packet and some fields in the socket. Map
[01;32m[K  1096[m[K			/* The [01;31m[KTCP[m[K header size is 20 bytes, divided by 4 equals 5, which is put in
[01;32m[K  1097[m[K			the high nibble of the [01;31m[KTCP[m[K offset field. */
[01;32m[K  1116[m[K	/* For logging and debugging: make a string showing the [01;31m[KTCP[m[K flags
[01;32m[K  1141[m[K	 * Parse the [01;31m[KTCP[m[K option(s) received, if present.  It has already been verified
[01;32m[K  1242[m[K			/* The [01;31m[KTCP[m[K Window Scale Option. */
[01;32m[K  1435[m[K	 * When opening a [01;31m[KTCP[m[K connection, while SYN's are being sent, the  parties may
[01;32m[K  1444[m[K		/* We send out the [01;31m[KTCP[m[K Maximum Segment Size option with our SYN[+ACK]. */
[01;32m[K  1481[m[K	 * For anti-hanging protection and [01;31m[KTCP[m[K keep-alive messages.  Called in two
[01;32m[K  1720[m[K			/* In case we were called from a [01;31m[KTCP[m[K timer event, a buffer must be
[01;32m[K  1812[m[K			Because some [01;31m[KTCP[m[K-stacks (like uIP) use it for flow-control. */
[01;32m[K  2168[m[K	 * The first thing that will be done is find the [01;31m[KTCP[m[K payload data
[01;32m[K  2187[m[K		The size of the [01;31m[KTCP[m[K header is given in a multiple of 4-byte words (single
[01;32m[K  2195[m[K		/* Calculate lReceiveLength - the length of the [01;31m[KTCP[m[K data received.  This is
[01;32m[K  2197[m[K		( LinkLayer length (14) + IP header length (20) + size of [01;31m[KTCP[m[K header(20 +) ).*/
[01;32m[K  2210[m[K		/* Subtract the size of the [01;31m[KTCP[m[K and IP headers and the actual data size is
[01;32m[K  2323[m[K	/* Set the [01;31m[KTCP[m[K options (if any) for the outgoing packet. */
[01;32m[K  2336[m[K			/* [01;31m[KTCP[m[K options must be sent because a packet which is out-of-order
[01;32m[K  2357[m[K			/* [01;31m[KTCP[m[K options must be sent because the MSS has changed. */
[01;32m[K  2635[m[K				/* [01;31m[KTCP[m[K-offsett equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
[01;32m[K  2645[m[K			/* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, [01;31m[KTCP[m[K
[01;32m[K  2646[m[K			can not	send-out both [01;31m[KTCP[m[K options and also a full packet. Sending
[01;32m[K  2802[m[K	 * is the most important function of this [01;31m[KTCP[m[K stack
[01;32m[K  2823[m[K	uint32_t ulReceiveLength;	/* Number of bytes contained in the [01;31m[KTCP[m[K message. */
[01;32m[K  2837[m[K		pucRecvData will point to the first byte of the [01;31m[KTCP[m[K payload. */
[01;32m[K  2901[m[K								any remote [01;31m[KTCP[m[K and port. */
[01;32m[K  2917[m[K					/* Set the [01;31m[KTCP[m[K offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
[01;32m[K  2948[m[K								sent to the remote [01;31m[KTCP[m[K (which includes an
[01;32m[K  2952[m[K			case eFIN_WAIT_1:	/* (server + client) waiting for a connection termination request from the remote [01;31m[KTCP[m[K,
[01;32m[K  2955[m[K			case eFIN_WAIT_2:	/* (server + client) waiting for a connection termination request from the remote [01;31m[KTCP[m[K. */
[01;32m[K  2967[m[K								[01;31m[KTCP[m[K. */
[01;32m[K  2971[m[K								to pass to be sure the remote [01;31m[KTCP[m[K received the
[01;32m[K  3101[m[K				/* A [01;31m[KTCP[m[K messages is received but either there is no socket with the
[01;32m[K  3214[m[K						/* Update the copy of the [01;31m[KTCP[m[K header only (skipping eth and IP
[01;32m[K  3235[m[K				/* Parse the [01;31m[KTCP[m[K option(s), if present. */
[01;32m[K  3239[m[K				/* When there are no [01;31m[KTCP[m[K options, the [01;31m[KTCP[m[K offset equals 20 bytes, which is stored as
[01;32m[K  3240[m[K				the number 5 (words) in the higher nibble of the [01;31m[KTCP[m[K-offset byte. */
[01;32m[K  3381[m[K			/* Make a copy of the header up to the [01;31m[KTCP[m[K header.  It is needed later

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    36[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    34[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/unit-test/ConfigFiles/pack_struct_start.h[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.0.11

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K    55[m[K	/* Define the byte order of the target MCU (the MCU FreeRTOS+[01;31m[KTCP[m[K is executing
[01;32m[K    59[m[K	/* If the network card/driver includes checksum offloading (IP/[01;31m[KTCP[m[K/UDP checksums)
[01;32m[K    71[m[K	/* Include support for DNS caching.  For [01;31m[KTCP[m[K, having a small DNS cache is very
[01;32m[K    93[m[K	/* The size, in words (not bytes), of the stack allocated to the FreeRTOS+[01;31m[KTCP[m[K
[01;32m[K   108[m[K	/* If ipconfigUSE_NETWORK_EVENT_HOOK is set to 1 then FreeRTOS+[01;31m[KTCP[m[K will call the
[01;32m[K   129[m[K	/* If ipconfigUSE_DHCP is 1 then FreeRTOS+[01;31m[KTCP[m[K will attempt to retrieve an IP
[01;32m[K   131[m[K	 * ipconfigUSE_DHCP is 0 then FreeRTOS+[01;31m[KTCP[m[K will use a static IP address.  The
[01;32m[K   222[m[K	/* USE_TCP: Use [01;31m[KTCP[m[K and all its features. */
[01;32m[K   225[m[K	/* USE_WIN: Let [01;31m[KTCP[m[K use windowing mechanism. */
[01;32m[K   276[m[K	/* Define the size of the pool of [01;31m[KTCP[m[K window descriptors.  On the average, each
[01;32m[K   277[m[K	 * [01;31m[KTCP[m[K socket will use up to 2 x 6 descriptors, meaning that it can have 2 x 6
[01;32m[K   282[m[K	/* Each [01;31m[KTCP[m[K socket has a circular buffers for Rx and Tx, which have a fixed
[01;32m[K   283[m[K	 * maximum size.  Define the size of Rx buffer for [01;31m[KTCP[m[K sockets. */
[01;32m[K   286[m[K	/* Define the size of Tx buffer for [01;31m[KTCP[m[K sockets. */
[01;32m[K   293[m[K	/* Include support for [01;31m[KTCP[m[K keep-alive messages. */

[1;34m./test/unit-test/ConfigFiles/pack_struct_end.h[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.0.11

[1;34m./test/unit-test/ConfigFiles/FreeRTOS_errno_TCP.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.0

[1;34m./test/unit-test/ConfigFiles/NetworkInterface.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.0

[1;34m./test/unit-test/ConfigFiles/NetworkBufferManagement.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.0

[1;34m./test/unit-test/ConfigFiles/IPTraceMacroDefaults.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.0

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.0
[01;32m[K   138[m[K		/* Include support for [01;31m[KTCP[m[K scaling windows */
[01;32m[K   148[m[K			/* When non-zero, [01;31m[KTCP[m[K will not send RST packets in reply to
[01;32m[K   149[m[K			[01;31m[KTCP[m[K packets which are unknown, or out-of-order. */
[01;32m[K   238[m[K	 * MallocLarge is used to allocate large [01;31m[KTCP[m[K buffers (for Rx/Tx)
[01;32m[K   260[m[K	 * - [01;31m[KTCP[m[K:     Set the Initial Sequence Number: this is the value of the first outgoing
[01;32m[K   263[m[K	 * - UDP/[01;31m[KTCP[m[K: for setting the first port number to be used, in case a socket
[01;32m[K   366[m[K	/* Each [01;31m[KTCP[m[K socket has circular stream buffers for Rx and Tx, which
[01;32m[K   374[m[K	/* Define the size of Tx stream buffer for [01;31m[KTCP[m[K sockets */

[1;34m./test/cbmc/proofs/CheckOptions/CheckOptions_harness.c[39m

[01;32m[K    11[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/ReadNameField/ReadNameField_harness.c[39m

[01;32m[K    11[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/Socket/vSocketBind/DONT_ALLOW_SOCKET_SEND_WITHOUT_BIND/vSocketBind_harness.c[39m

[01;32m[K     9[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/Socket/vSocketBind/ALLOW_ETHERNET_DRIVER_FILTERS_PACKETS/vSocketBind_harness.c[39m

[01;32m[K     9[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/Socket/vSocketBind/ALLOW_SOCKET_SEND_WITHOUT_BIND/vSocketBind_harness.c[39m

[01;32m[K     9[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/ARP/ARPAgeCache/ARPAgeCache_harness.c[39m

[01;32m[K     5[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/ARP/ARPGetCacheEntryByMac/ARPGetCacheEntryByMac_harness.c[39m

[01;32m[K     5[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/ARP/ARPGetCacheEntry/ARPGetCacheEntry_harness.c[39m

[01;32m[K     5[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/ARP/ARPRefreshCacheEntry/ARPRefreshCacheEntry_harness.c[39m

[01;32m[K     5[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_OutputARPRequest/OutputARPRequest_harness.c[39m

[01;32m[K    33[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/ARP/ARP_OutputARPRequest_buffer_alloc2/OutputARPRequest_harness.c[39m

[01;32m[K    13[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/ARP/ARPProcessPacket/ARPProcessPacket_harness.c[39m

[01;32m[K     5[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/ARP/ARPSendGratuitous/ARPSendGratuitous_harness.c[39m

[01;32m[K     5[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/ARP/ARPGenerateRequestPacket/ARPGenerateRequestPacket_harness.c[39m

[01;32m[K     5[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/ARP/ARP_OutputARPRequest_buffer_alloc1/OutputARPRequest_harness.c[39m

[01;32m[K    13[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_PrintARPCache/FreeRTOS_PrintARPCache_harness.c[39m

[01;32m[K     5[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/ARP/ulARPRemoveCacheEntryByMac/ulARPRemoveCacheEntryByMac_harness.c[39m

[01;32m[K     8[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_ClearARP/ClearARP_harness.c[39m

[01;32m[K     5[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/prvProcessEthernetPacket/prvProcessEthernetPacket_harness.c[39m

[01;32m[K    11[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/UDP/vProcessGeneratedUDPPacket/vProcessGeneratedUDPPacket_harness.c[39m

[01;32m[K    12[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/ProcessDHCPReplies/ProcessDHCPReplies_harness.c[39m

[01;32m[K     9[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/IP/SendEventToIPTask/SendEventToIPTask_harness.c[39m

[01;32m[K    35[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/SkipNameField/SkipNameField_harness.c[39m

[01;32m[K    11[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/TCP/prvTCPReturnPacket/TCPReturnPacket_harness.c[39m

[01;32m[K    33[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/TCP/prvTCPPrepareSend/TCPPrepareSend_harness.c[39m

[01;32m[K    33[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K    33[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/CheckOptionsOuter/CheckOptionsOuter_harness.c[39m

[01;32m[K    11[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/DHCP/IsDHCPSocket/IsDHCPSocket_harness.c[39m

[01;32m[K    35[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/DHCP/DHCPProcess/DHCPProcess_harness.c[39m

[01;32m[K    37[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/parsing/ProcessIPPacket/ProcessIPPacket_harness.c[39m

[01;32m[K     5[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/parsing/ProcessReceivedUDPPacket/ProcessReceivedUDPPacket_harness.c[39m

[01;32m[K     5[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/parsing/ProcessReceivedTCPPacket/ProcessReceivedTCPPacket_harness.c[39m

[01;32m[K     5[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/ParseDNSReply/ParseDNSReply_harness.c[39m

[01;32m[K    11[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/DNS/DNSlookup/DNSlookup_harness.c[39m

[01;32m[K     6[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName/DNSgetHostByName_harness.c[39m

[01;32m[K    10[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K    29[m[K	 *   Many methods in the FreeRTOS [01;31m[KTCP[m[K API in stubs/freertos_api.c

[1;34m./test/cbmc/proofs/DNS/DNSclear/DNSclear_harness.c[39m

[01;32m[K     5[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/DNS/DNSHandlePacket/DNShandlePacket_harness.c[39m

[01;32m[K     5[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_a/DNSgetHostByName_a_harness.c[39m

[01;32m[K    10[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K    29[m[K	 *   Many methods in the FreeRTOS [01;31m[KTCP[m[K API in stubs/freertos_api.c

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_cancel/DNSgetHostByName_cancel_harness.c[39m

[01;32m[K     6[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/proofs/CheckOptionsInner/CheckOptionsInner_harness.c[39m

[01;32m[K    11[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K    40[m[K	* stack in this demo.  Constants specific to FreeRTOS+[01;31m[KTCP[m[K itself (rather than
[01;32m[K   152[m[K	 * and one on [01;31m[KTCP[m[K/IP).  This is done to prevent an output buffer being defined by

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K    52[m[K	/* Define the byte order of the target MCU (the MCU FreeRTOS+[01;31m[KTCP[m[K is executing
[01;32m[K    58[m[K	/* If the network card/driver includes checksum offloading (IP/[01;31m[KTCP[m[K/UDP checksums)
[01;32m[K    70[m[K	/* Include support for DNS caching.  For [01;31m[KTCP[m[K, having a small DNS cache is very
[01;32m[K    92[m[K	/* The size, in words (not bytes), of the stack allocated to the FreeRTOS+[01;31m[KTCP[m[K
[01;32m[K   107[m[K	/* If ipconfigUSE_NETWORK_EVENT_HOOK is set to 1 then FreeRTOS+[01;31m[KTCP[m[K will call the
[01;32m[K   128[m[K	/* If ipconfigUSE_DHCP is 1 then FreeRTOS+[01;31m[KTCP[m[K will attempt to retrieve an IP
[01;32m[K   130[m[K	 * ipconfigUSE_DHCP is 0 then FreeRTOS+[01;31m[KTCP[m[K will use a static IP address.  The
[01;32m[K   227[m[K	/* USE_TCP: Use [01;31m[KTCP[m[K and all its features. */
[01;32m[K   232[m[K	/* USE_WIN: Let [01;31m[KTCP[m[K use windowing mechanism. */
[01;32m[K   285[m[K	/* Define the size of the pool of [01;31m[KTCP[m[K window descriptors.  On the average, each
[01;32m[K   286[m[K	 * [01;31m[KTCP[m[K socket will use up to 2 x 6 descriptors, meaning that it can have 2 x 6
[01;32m[K   291[m[K	/* Each [01;31m[KTCP[m[K socket has a circular buffers for Rx and Tx, which have a fixed
[01;32m[K   292[m[K	 * maximum size.  Define the size of Rx buffer for [01;31m[KTCP[m[K sockets. */
[01;32m[K   295[m[K	/* Define the size of Tx buffer for [01;31m[KTCP[m[K sockets. */
[01;32m[K   302[m[K	/* Include support for [01;31m[KTCP[m[K keep-alive messages. */

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K    11[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K    22[m[K	 * This is a collection of abstractions of methods in the FreeRTOS [01;31m[KTCP[m[K

[1;34m./test/cbmc/include/cbmc.h[39m

[01;32m[K    10[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    36[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K    95[m[K	 * [01;31m[KTCP[m[K and UDP each have their own series of port numbers
[01;32m[K   120[m[K	 * and find the size of the socket space, which is different for UDP and [01;31m[KTCP[m[K
[01;32m[K   134[m[K		 * sending a [01;31m[KTCP[m[K packed.
[01;32m[K   195[m[K			/* Socket has a wrong type (UDP != [01;31m[KTCP[m[K). */
[01;32m[K   239[m[K				/* Check if the [01;31m[KTCP[m[K socket-list has been initialised. */
[01;32m[K   251[m[K				/* In case a UDP socket is created, do not allocate space for [01;31m[KTCP[m[K data. */
[01;32m[K   350[m[K					pxSocket->ucProtocol		= ( uint8_t ) xProtocol; /* protocol: UDP or [01;31m[KTCP[m[K */
[01;32m[K   362[m[K							/* Use half of the buffer size of the [01;31m[KTCP[m[K windows */
[01;32m[K   950[m[K	 * be used for both UDP and [01;31m[KTCP[m[K sockets.  The actual binding will be performed
[01;32m[K  1018[m[K	 * 'xInternal' is used for [01;31m[KTCP[m[K sockets only: it allows to have several
[01;32m[K  1153[m[K	 * In case of a [01;31m[KTCP[m[K socket: the connection will not be closed automatically
[01;32m[K  1214[m[K			/* For [01;31m[KTCP[m[K: clean up a little more. */
[01;32m[K  1431[m[K					/* For [01;31m[KTCP[m[K socket, it isn't necessary to limit the blocking time
[01;32m[K  1466[m[K					case FREERTOS_SO_TCP_RECV_HANDLER:	/* Install a callback for receiving [01;31m[KTCP[m[K data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
[01;32m[K  1467[m[K					case FREERTOS_SO_TCP_SENT_HANDLER:	/* Install a callback for sending [01;31m[KTCP[m[K data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
[01;32m[K  1576[m[K				case FREERTOS_SO_SNDBUF:	/* Set the size of the send buffer, in units of MSS ([01;31m[KTCP[m[K only) */
[01;32m[K  1577[m[K				case FREERTOS_SO_RCVBUF:	/* Set the size of the receive buffer, in units of MSS ([01;31m[KTCP[m[K only) */
[01;32m[K  1615[m[K							pxSocket->u.xTCP.uxRxWinSize = ( uint32_t )pxProps->lRxWinSize;	/* Fixed value: size of the [01;31m[KTCP[m[K reception window */
[01;32m[K  1616[m[K							pxSocket->u.xTCP.uxTxWinSize = ( uint32_t )pxProps->lTxWinSize;	/* Fixed value: size of the [01;31m[KTCP[m[K transmit window */
[01;32m[K  2480[m[K		 * Read incoming data from a [01;31m[KTCP[m[K socket
[01;32m[K  2492[m[K			/* Check if the socket is valid, has type [01;31m[KTCP[m[K and if it is bound to a
[01;32m[K  2521[m[K					case eCLOSING:		/* (server + client) waiting for a connection termination request acknowledgement from the remote [01;31m[KTCP[m[K. */
[01;32m[K  2678[m[K			/* Is this a socket of type [01;31m[KTCP[m[K and is it already bound to a port number ? */
[01;32m[K  2695[m[K				/* This [01;31m[KTCP[m[K connection is closing already, the FIN flag has been sent.
[01;32m[K  2738[m[K	        /* Confirm that this is a [01;31m[KTCP[m[K socket before dereferencing structure
[01;32m[K  2760[m[K		 * Send data using a [01;31m[KTCP[m[K socket.  It is not necessary to have the socket
[01;32m[K  2847[m[K							/* Only send a [01;31m[KTCP[m[K timer event when not called from the
[01;32m[K  2958[m[K			/* listen() is allowed for a valid [01;31m[KTCP[m[K socket in Closed state and already
[01;32m[K  3047[m[K		 * A [01;31m[KTCP[m[K timer has expired, now check all [01;31m[KTCP[m[K sockets for:
[01;32m[K  3136[m[K		 * [01;31m[KTCP[m[K: as multiple sockets may be bound to the same local port number
[01;32m[K  3198[m[K	        /* Confirm that this is a [01;31m[KTCP[m[K socket before dereferencing structure
[01;32m[K  3547[m[K		/* Returns pdTRUE if [01;31m[KTCP[m[K socket is connected. */

[1;34m./tools/tcp_mem_stats.c[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    27[m[K	 * Used to create a CSV file with detaild information about the memory usage of FreeRTOS+[01;31m[KTCP[m[K.
[01;32m[K    40[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    42[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K    67[m[K	/* The [01;31m[KTCP[m[K port number reserved for a DNS server. */
[01;32m[K    70[m[K	/* Some const values describing the 'flags' in a [01;31m[KTCP[m[K packet. */

[1;34m./FreeRTOS_Stream_Buffer.c[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    34[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K    44[m[K	 * will be used when [01;31m[KTCP[m[K data is received while earlier data is still missing.

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    43[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    49[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K   164[m[K			/* Buffers must be at least large enough to hold a [01;31m[KTCP[m[K-packet with
[01;32m[K   165[m[K			headers, or an ARP packet, in case [01;31m[KTCP[m[K is not included. */

[1;34m./portable/NetworkInterface/SH2A/NetworkInterface.c[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    35[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   173[m[K	#define   TX_CTRL_TCP_CHECKSUM        (0x0040)    /* Enable [01;31m[KTCP[m[K frame checksum generation */
[01;32m[K   190[m[K	#define   RX_CTRL_TCP_CHECKSUM        (0x2000)    /* Enable [01;31m[KTCP[m[K frame checksum verification */
[01;32m[K   227[m[K	#define   RX_TCP_ERROR                (0x0800)    /* [01;31m[KTCP[m[K checksum field doesn't match */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    38[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K  1181[m[K				while tuning +[01;31m[KTCP[m[K: see how many buffers are in use. */
[01;32m[K  1193[m[K					while tuning +[01;31m[KTCP[m[K: see how many buffers are in use. */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.0.11
[01;32m[K    32[m[K	/* ========================= FreeRTOS+[01;31m[KTCP[m[K includes ========================== */
[01;32m[K   350[m[K		  routed to the Linux [01;31m[KTCP[m[K/IP stack.
[01;32m[K   489[m[K	 *        and notify the [01;31m[Ktcp[m[K/ip stack of new data

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K    37[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K   235[m[K				It can only calculate protocol checksums of UDP and [01;31m[KTCP[m[K,
[01;32m[K   342[m[K				 * while tuning +[01;31m[KTCP[m[K: see how many buffers are in use. */
[01;32m[K   367[m[K						 * while tuning +[01;31m[KTCP[m[K: see how many buffers are in use. */

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.c[39m

[01;32m[K    55[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K    31[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K    78[m[K		The FreeRTOS+[01;31m[KTCP[m[K port is using a fixed 'topology', which is declared in
[01;32m[K    86[m[K		The FreeRTOS+[01;31m[KTCP[m[K port does not make use of "src/xemacps_bdring.c".
[01;32m[K   175[m[K		/* In this port for FreeRTOS+[01;31m[KTCP[m[K, the EMAC interrupts will only set a bit in
[01;32m[K   358[m[K		/* This FreeRTOS+[01;31m[KTCP[m[K driver shall be compiled with the option

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_hw.c[39m

[01;32m[K    30[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_physpeed.c[39m

[01;32m[K    62[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    35[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K   318[m[K																			routed to the Windows [01;31m[KTCP[m[K/IP stack. */

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K    21[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./portable/NetworkInterface/mw300_rd/NetworkInterface.c[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    30[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K    32[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_wifi.c[39m

[01;32m[K     5[m[K	*   Network Interface file for FreeRTOS-Plus-[01;31m[KTCP[m[K stack
[01;32m[K     8[m[K	*   - Interfaces PIC32 to the FreeRTOS [01;31m[KTCP[m[K/IP stack
[01;32m[K   161[m[K	            /* Send the data to the [01;31m[KTCP[m[K/IP stack. */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K     5[m[K	*   Network Interface file for FreeRTOS-Plus-[01;31m[KTCP[m[K stack
[01;32m[K     8[m[K	*   - Interfaces PIC32 to the FreeRTOS [01;31m[KTCP[m[K/IP stack
[01;32m[K   363[m[K	            /* Set the mac address in the FreeRTOS+[01;31m[KTCP[m[K stack. */
[01;32m[K   755[m[K	            /* Send the data to the [01;31m[KTCP[m[K/IP stack */

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K Labs Build 160919 (C) 2016 Real Time Engineers ltd.
[01;32m[K     9[m[K	 ***   FREERTOS+[01;31m[KTCP[m[K IS STILL IN THE LAB (mainly because the FTP and HTTP     ***
[01;32m[K    13[m[K	 ***   FreeRTOS+[01;31m[KTCP[m[K is functional and has been used in commercial products   ***
[01;32m[K    28[m[K	 * FreeRTOS+[01;31m[KTCP[m[K can be used under two different free open source licenses.  The
[01;32m[K    29[m[K	 * license that applies is dependent on the processor on which FreeRTOS+[01;31m[KTCP[m[K is
[01;32m[K    32[m[K	 * If FreeRTOS+[01;31m[KTCP[m[K is executed on one of the processors listed under the Special
[01;32m[K    33[m[K	 * License Arrangements heading of the FreeRTOS+[01;31m[KTCP[m[K license information web
[01;32m[K    35[m[K	 * License.  If FreeRTOS+[01;31m[KTCP[m[K is used on any other processor, then it can be used
[01;32m[K    39[m[K	 * The FreeRTOS+[01;31m[KTCP[m[K License Information Page: http://www.FreeRTOS.org/tcp_license
[01;32m[K    39[m[K	 * The FreeRTOS+[01;31m[KTCP[m[K License Information Page: http://www.FreeRTOS.org/tcp_license
[01;32m[K    43[m[K	 * FreeRTOS+[01;31m[KTCP[m[K is distributed in the hope that it will be useful.  You cannot
[01;32m[K    44[m[K	 * use FreeRTOS+[01;31m[KTCP[m[K unless you agree that you use the software 'as is'.
[01;32m[K    45[m[K	 * FreeRTOS+[01;31m[KTCP[m[K is provided WITHOUT ANY WARRANTY; without even the implied
[01;32m[K    78[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K   354[m[K	        /* Buffers must be at least large enough to hold a [01;31m[KTCP[m[K-packet with
[01;32m[K   355[m[K	         * headers, or an ARP packet, in case [01;31m[KTCP[m[K is not included. */

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    37[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K   423[m[K				/* Calculate the [01;31m[KTCP[m[K checksum for an outgoing packet. */
[01;32m[K   533[m[K				while tuning +[01;31m[KTCP[m[K: see how many buffers are in use. */
[01;32m[K   545[m[K					while tuning +[01;31m[KTCP[m[K: see how many buffers are in use. */

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   133[m[K	  RoReg   GMAC_TCE;        /**< \brief (Gmac Offset: 0x1AC) [01;31m[KTCP[m[K Checksum Errors Register */
[01;32m[K   617[m[K	/* -------- GMAC_TCE : (GMAC Offset: 0x1AC) [01;31m[KTCP[m[K Checksum Errors Register -------- */
[01;32m[K   619[m[K	#define GMAC_TCE_TCKER_Msk (0xffu << GMAC_TCE_TCKER_Pos) /**< \brief (GMAC_TCE) [01;31m[KTCP[m[K Checksum Errors */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   415[m[K		/* Note: FreeRTOS+[01;31m[KTCP[m[K wants to have this offset set to 2 bytes */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    37[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K   694[m[K			/* Calculate the [01;31m[KTCP[m[K checksum for an outgoing packet. */
[01;32m[K   800[m[K				while tuning +[01;31m[KTCP[m[K: see how many buffers are in use. */
[01;32m[K   810[m[K			while tuning +[01;31m[KTCP[m[K: see how many buffers are in use. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K    61[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K   400[m[K		/* Note: FreeRTOS+[01;31m[KTCP[m[K wants to have this offset set to 2 bytes */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    37[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K   526[m[K				/* Use an assert to check the allocation as +[01;31m[KTCP[m[K applications will
[01;32m[K   527[m[K				often not use a malloc() failed hook as the [01;31m[KTCP[m[K stack will recover
[01;32m[K   592[m[K			/* Use an assert to check the allocation as +[01;31m[KTCP[m[K applications will often
[01;32m[K   593[m[K			not use a malloc failed hook as the [01;31m[KTCP[m[K stack will recover from
[01;32m[K   755[m[K							/* Pass the data to the [01;31m[KTCP[m[K/IP task for processing. */
[01;32m[K   759[m[K								/* Could not send the descriptor into the [01;31m[KTCP[m[K/IP
[01;32m[K   990[m[K				while tuning +[01;31m[KTCP[m[K: see how many buffers are in use. */
[01;32m[K  1004[m[K					while tuning +[01;31m[KTCP[m[K: see how many buffers are in use. */

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    33[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K   161[m[K	        /* It is assumed SendData() copies the data out of the FreeRTOS+[01;31m[KTCP[m[K Ethernet
[01;32m[K   247[m[K	            while tuning +[01;31m[KTCP[m[K: see how many buffers are in use. */
[01;32m[K   282[m[K	            /* The event about to be sent to the [01;31m[KTCP[m[K/IP is an Rx event. */
[01;32m[K   289[m[K	            /* Send the data to the [01;31m[KTCP[m[K/IP stack. */
[01;32m[K   302[m[K	                /* The message was successfully sent to the [01;31m[KTCP[m[K/IP stack.

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K     7[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    42[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K   532[m[K				/* Set the DMA Tx descriptors checksum insertion for [01;31m[KTCP[m[K, UDP, and ICMP */
[01;32m[K  1217[m[K				while tuning +[01;31m[KTCP[m[K: see how many buffers are in use. */
[01;32m[K  1242[m[K					while tuning +[01;31m[KTCP[m[K: see how many buffers are in use. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   491[m[K	  uint32_t             ChecksumOffload;           /*!< Selects or not the IPv4 checksum checking for received frame payloads' [01;31m[KTCP[m[K/UDP/ICMP headers.
[01;32m[K   574[m[K	 uint32_t              DropTCPIPChecksumErrorFrame; /*!< Selects or not the Dropping of [01;31m[KTCP[m[K/IP Checksum Error Frames.
[01;32m[K   804[m[K	#define ETH_DMATXDESC_CIC_TCPUDPICMP_SEGMENT  ((uint32_t)0x00800000U)  /*!< [01;31m[KTCP[m[K/UDP/ICMP Checksum Insertion calculated over segment only */
[01;32m[K   805[m[K	#define ETH_DMATXDESC_CIC_TCPUDPICMP_FULL     ((uint32_t)0x00C00000U)  /*!< [01;31m[KTCP[m[K/UDP/ICMP Checksum Insertion fully calculated */
[01;32m[K   942[m[K	  #define ETH_DMAPTPRXDESC_IPPT_TCP                      ((uint32_t)0x00000002U)  /* [01;31m[KTCP[m[K payload encapsulated in the IP datagram */
[01;32m[K  1317[m[K	/** @defgroup ETH_Drop_TCP_IP_Checksum_Error_Frame ETH Drop [01;31m[KTCP[m[K IP Checksum Error Frame
[01;32m[K  1497[m[K	#define ETH_DMATXDESC_CHECKSUMTCPUDPICMPSEGMENT  ((uint32_t)0x00800000U)   /*!< [01;31m[KTCP[m[K/UDP/ICMP checksum insertion. Pseudo header checksum is assumed to be present */
[01;32m[K  1498[m[K	#define ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL     ((uint32_t)0x00C00000U)   /*!< [01;31m[KTCP[m[K/UDP/ICMP checksum fully in hardware including pseudo header */
[01;32m[K  1754[m[K	  *     @arg ETH_DMATXDESC_CHECKSUMTCPUDPICMPSEGMENT : [01;31m[KTCP[m[K/UDP/ICMP checksum. Pseudo header checksum is assumed to be present
[01;32m[K  1755[m[K	  *     @arg ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL : [01;31m[KTCP[m[K/UDP/ICMP checksum fully in hardware including pseudo header

[1;34m./portable/NetworkInterface/board_family/NetworkInterface.c[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    30[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./portable/NetworkInterface/esp32/NetworkInterface.c[39m

[01;32m[K    26[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K   162[m[K	             * while tuning +[01;31m[KTCP[m[K: see how many buffers are in use. */
[01;32m[K   186[m[K	                     * while tuning +[01;31m[KTCP[m[K: see how many buffers are in use. */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K    23[m[K	* Description  : Interfaces FreeRTOS [01;31m[KTCP[m[K/IP stack to RX Ethernet driver.
[01;32m[K   174[m[K	     * data from the FreeRTOS+[01;31m[KTCP[m[K buffer into the peripheral driver's own buffer.
[01;32m[K   196[m[K	        /* It is assumed SendData() copies the data out of the FreeRTOS+[01;31m[KTCP[m[K Ethernet
[01;32m[K   221[m[K	             * while tuning +[01;31m[KTCP[m[K: see how many buffers are in use. */
[01;32m[K   247[m[K	                     * while tuning +[01;31m[KTCP[m[K: see how many buffers are in use. */
[01;32m[K   350[m[K	                    /* The event about to be sent to the [01;31m[KTCP[m[K/IP is an Rx event. */
[01;32m[K   357[m[K	                    /* Send the data to the [01;31m[KTCP[m[K/IP stack. */
[01;32m[K   369[m[K	                        /* The message was successfully sent to the [01;31m[KTCP[m[K/IP stack.

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    38[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./portable/Compiler/Keil/pack_struct_start.h[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./portable/Compiler/Keil/pack_struct_end.h[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./portable/Compiler/Renesas/pack_struct_start.h[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./portable/Compiler/Renesas/pack_struct_end.h[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./portable/Compiler/GCC/pack_struct_start.h[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./portable/Compiler/GCC/pack_struct_end.h[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./portable/Compiler/MSVC/pack_struct_start.h[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./portable/Compiler/MSVC/pack_struct_end.h[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./portable/Compiler/CompilerName/pack_struct_start.h[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./portable/Compiler/CompilerName/pack_struct_end.h[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./portable/Compiler/IAR/pack_struct_start.h[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./portable/Compiler/IAR/pack_struct_end.h[39m

[01;32m[K     2[m[K	FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    36[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    37[m[K	/* FreeRTOS+[01;31m[KTCP[m[K includes. */
[01;32m[K    95[m[K		/* When initialising the [01;31m[KTCP[m[K timer,
[01;32m[K   164[m[K	 * The main [01;31m[KTCP[m[K/IP stack processing task.  This task receives commands/events
[01;32m[K   209[m[K	 * Checks the ARP, DHCP and [01;31m[KTCP[m[K timers to see if any periodic or timeout
[01;32m[K   277[m[K		/* Set to a non-zero value if one or more [01;31m[KTCP[m[K message have been processed
[01;32m[K   291[m[K		3. [01;31m[KTCP[m[K, to check for timeouts, resends
[01;32m[K   340[m[K			/* Initialise the [01;31m[KTCP[m[K timer. */
[01;32m[K   355[m[K			/* Check the ARP, DHCP and [01;31m[KTCP[m[K timers to see if there is any periodic
[01;32m[K   491[m[K						/* Simply mark the [01;31m[KTCP[m[K timer as expired so it gets processed
[01;32m[K   568[m[K			buffer will be sent at a time.  This is the default way for +[01;31m[KTCP[m[K to pass
[01;32m[K   569[m[K			messages from the MAC to the [01;31m[KTCP[m[K/IP stack. */
[01;32m[K   698[m[K			/* Sockets need to be checked if the [01;31m[KTCP[m[K timer has expired. */
[01;32m[K   701[m[K			/* Sockets will also be checked if there are [01;31m[KTCP[m[K messages but the
[01;32m[K  1241[m[K					/* [01;31m[KTCP[m[K timer events are sent to wake the timer task when
[01;32m[K  1606[m[K				/* Is the upper-layer checksum ([01;31m[KTCP[m[K/UDP/ICMP) correct? */
[01;32m[K  1714[m[K						/* From: the previous start of UDP/ICMP/[01;31m[KTCP[m[K data. */
[01;32m[K  1716[m[K						/* To: the usual start of UDP/ICMP/[01;31m[KTCP[m[K data at offset 20 (decimal ) from IP header. */
[01;32m[K  2071[m[K					/* Unhandled protocol, other than ICMP, IGMP, UDP, or [01;31m[KTCP[m[K. */
[01;32m[K  2229[m[K				/* Unhandled protocol, other than ICMP, IGMP, UDP, or [01;31m[KTCP[m[K. */
[01;32m[K  2308[m[K				/* For UDP and [01;31m[KTCP[m[K, sum the pseudo header, i.e. IP protocol + length
[01;32m[K  2317[m[K				/* Sum [01;31m[KTCP[m[K header and data. */
[01;32m[K  2405[m[K	 *	 of the header's values to. It is often 0, but protocols like [01;31m[KTCP[m[K or UDP
[01;32m[K  2616[m[K			/* When setting up and testing a project with FreeRTOS+[01;31m[KTCP[m[K, it is
[01;32m[K  2626[m[K				 * while tuning +[01;31m[KTCP[m[K: see how many buffers are in use. */
[01;32m[K  2664[m[K					 * while tuning +[01;31m[KTCP[m[K: see how many buffers are in use. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K   143[m[K		/* the option data is not a part of the [01;31m[KTCP[m[K header */
[01;32m[K   238[m[K		eTCPTimerEvent,			/* 6: See if any [01;31m[KTCP[m[K socket needs attention. */
[01;32m[K   458[m[K	 * Initialize the socket list data structures for [01;31m[KTCP[m[K and UDP. 
[01;32m[K   486[m[K		/* Every [01;31m[KTCP[m[K socket has a buffer space just big enough to store
[01;32m[K   487[m[K		the last [01;31m[KTCP[m[K header received.
[01;32m[K   531[m[K					bSendKeepAlive : 1,	/* When this flag is true, a [01;31m[KTCP[m[K keep-alive message must be send */
[01;32m[K   532[m[K					bWaitKeepAlive : 1,	/* When this flag is true, a [01;31m[KTCP[m[K keep-alive reply is expected */
[01;32m[K   544[m[K					bWinScaling : 1;	/* A [01;31m[KTCP[m[K-Window Scaling option was offered and accepted in the SYN phase. */
[01;32m[K   555[m[K									 * [01;31m[KTCP[m[K win segments */
[01;32m[K   556[m[K			uint8_t ucTCPState;		/* [01;31m[KTCP[m[K state: see eTCP_STATE */
[01;32m[K   574[m[K			/* Buffer space to store the last [01;31m[KTCP[m[K header received. */
[01;32m[K   576[m[K			uint8_t tcpflags;		/* [01;31m[KTCP[m[K flags */
[01;32m[K   583[m[K											 		 * In case of a [01;31m[KTCP[m[K socket:
[01;32m[K   590[m[K			size_t uxRxWinSize;	/* Fixed value: size of the [01;31m[KTCP[m[K reception window */
[01;32m[K   591[m[K			size_t uxTxWinSize;	/* Fixed value: size of the [01;31m[KTCP[m[K transmit window */
[01;32m[K   636[m[K		uint8_t ucProtocol; /* choice of FREERTOS_IPPROTO_UDP/[01;31m[KTCP[m[K */
[01;32m[K   652[m[K		/* [01;31m[KTCP[m[K/UDP specific fields: */
[01;32m[K   670[m[K		 * Lookup a [01;31m[KTCP[m[K socket, using a multiple matching: both port numbers and
[01;32m[K   689[m[K	 * Works both for UDP, ICMP and [01;31m[KTCP[m[K packages
[01;32m[K   705[m[K	 * The [01;31m[KTCP[m[K driver needs to bind a socket at the moment a listening socket
[01;32m[K   711[m[K	 * Internal function to add streaming data to a [01;31m[KTCP[m[K socket. If ulIn == true,
[01;32m[K   787[m[K	 * Internal: Sets a new state for a [01;31m[KTCP[m[K socket and performs the necessary

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./include/FreeRTOS_errno_TCP.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./include/NetworkInterface.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    69[m[K	 * Generate a randomized [01;31m[KTCP[m[K Initial Sequence Number per RFC.
[01;32m[K   130[m[K		size_t xDataLength; 			/* Starts by holding the total Ethernet frame length, then the UDP/[01;31m[KTCP[m[K payload length. */
[01;32m[K   368[m[K		abbreviations [01;31m[KTCP[m[K/UDP are now written in capitals, and type names now end with "_t". */

[1;34m./include/NetworkBufferManagement.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./include/tcp_dump_packets.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    89[m[K	 * can be used in stead of [01;31m[KTCP[m[K for testing with sockets in raw mode
[01;32m[K   107[m[K	#define FREERTOS_SO_SNDBUF				( 4 )		/* Set the size of the send buffer ([01;31m[KTCP[m[K only) */
[01;32m[K   108[m[K	#define FREERTOS_SO_RCVBUF				( 5 )		/* Set the size of the receive buffer ([01;31m[KTCP[m[K only) */
[01;32m[K   112[m[K		#define FREERTOS_SO_TCP_RECV_HANDLER	( 7 )		/* Install a callback for receiving [01;31m[KTCP[m[K data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
[01;32m[K   113[m[K		#define FREERTOS_SO_TCP_SENT_HANDLER	( 8 )		/* Install a callback for sending [01;31m[KTCP[m[K data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
[01;32m[K   256[m[K		/* Returns pdTRUE if [01;31m[KTCP[m[K socket is connected. */
[01;32m[K   302[m[K		 * Connect / disconnect handler for a [01;31m[KTCP[m[K socket
[01;32m[K   318[m[K		 * Reception handler for a [01;31m[KTCP[m[K socket

[1;34m./include/IPTraceMacroDefaults.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./include/FreeRTOS_TCP_IP.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    36[m[K		/* Comments about the [01;31m[KTCP[m[K states are borrowed from the very useful
[01;32m[K    41[m[K							 from any remote [01;31m[KTCP[m[K and port. */
[01;32m[K    49[m[K		eFIN_WAIT_1,	/* 6 (server + client) waiting for a connection termination request from the remote [01;31m[KTCP[m[K,
[01;32m[K    51[m[K		eFIN_WAIT_2,	/* 7 (server + client) waiting for a connection termination request from the remote [01;31m[KTCP[m[K. */
[01;32m[K    53[m[K		eCLOSING,		/* 9 (server + client) waiting for a connection termination request acknowledgement from the remote [01;31m[KTCP[m[K. */
[01;32m[K    55[m[K							 previously sent to the remote [01;31m[KTCP[m[K
[01;32m[K    57[m[K		eTIME_WAIT,		/*11 (either server or client) waiting for enough time to pass to be sure the remote [01;31m[KTCP[m[K received the

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K    28[m[K	 *  Module which handles the [01;31m[KTCP[m[K windowing schemes for FreeRTOS-PLUS-[01;31m[KTCP[m[K
[01;32m[K    77[m[K	 * If [01;31m[KTCP[m[K time-stamps are being used, they will occupy 12 bytes in
[01;32m[K    88[m[K	 *	Every [01;31m[KTCP[m[K connection owns a [01;31m[KTCP[m[K window for the administration of all packets
[01;32m[K   100[m[K					bTimeStamps : 1;	/* Socket is supposed to use [01;31m[KTCP[m[K time-stamps. This depends on the */
[01;32m[K   129[m[K		/* For tiny [01;31m[KTCP[m[K, there is only 1 outstanding TX segment */
[01;32m[K   132[m[K		uint16_t usOurPortNumber;			/* Mostly for debugging/logging: our [01;31m[KTCP[m[K port number */
[01;32m[K   133[m[K		uint16_t usPeerPortNumber;			/* debugging/logging: the peer's [01;31m[KTCP[m[K port number */
[01;32m[K   156[m[K	/* Clean up allocated segments. Should only be called when FreeRTOS+[01;31m[KTCP[m[K will no longer be used. */

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./include/tcp_mem_stats.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./include/FreeRTOS_UDP_IP.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1
[01;32m[K   141[m[K		/* Include support for [01;31m[KTCP[m[K scaling windows */
[01;32m[K   151[m[K			/* When non-zero, [01;31m[KTCP[m[K will not send RST packets in reply to
[01;32m[K   152[m[K			[01;31m[KTCP[m[K packets which are unknown, or out-of-order. */
[01;32m[K   241[m[K	 * MallocLarge is used to allocate large [01;31m[KTCP[m[K buffers (for Rx/Tx)
[01;32m[K   263[m[K	 * - [01;31m[KTCP[m[K:     Set the Initial Sequence Number: this is the value of the first outgoing
[01;32m[K   266[m[K	 * - UDP/[01;31m[KTCP[m[K: for setting the first port number to be used, in case a socket
[01;32m[K   396[m[K	/* Each [01;31m[KTCP[m[K socket has circular stream buffers for Rx and Tx, which
[01;32m[K   404[m[K	/* Define the size of Tx stream buffer for [01;31m[KTCP[m[K sockets */

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K     2[m[K	 * FreeRTOS+[01;31m[KTCP[m[K V2.2.1

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   576[m[K			uint8_t [01;31m[Ktcpflags[m[K;		/* TCP flags */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K   173[m[K	    /* cannot use the system_init.c::[01;31m[KtcpipHeapConfig[m[K because FreeRTOS does not have a calloc function! */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1223[m[K					/* Free the resources which were claimed by the [01;31m[KtcpWin[m[K member */
[01;32m[K  1625[m[K						/* In case the socket has already initialised its [01;31m[KtcpWin[m[K,

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   203[m[K				b_wrap:1,            /** 30     Marks last descriptor in [01;31m[KTD[m[K list */
[01;32m[K   256[m[K		/** Optional callback list to be invoked once [01;31m[KTD[m[K has been processed */
[01;32m[K   259[m[K		/** RX [01;31m[KTD[m[K list size */
[01;32m[K   261[m[K		/** RX index for current processing [01;31m[KTD[m[K */
[01;32m[K   263[m[K		/** TX [01;31m[KTD[m[K list size */
[01;32m[K   270[m[K		/** Number of free [01;31m[KTD[m[K before wakeup callback is invoked */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   204[m[K				b_wrap:1,            /** 30     Marks last descriptor in [01;31m[KTD[m[K list */
[01;32m[K   259[m[K		/** Optional callback list to be invoked once [01;31m[KTD[m[K has been processed */
[01;32m[K   262[m[K		/** RX [01;31m[KTD[m[K list size */
[01;32m[K   264[m[K		/** RX index for current processing [01;31m[KTD[m[K */
[01;32m[K   266[m[K		/** TX [01;31m[KTD[m[K list size */
[01;32m[K   273[m[K		/** Number of free [01;31m[KTD[m[K before wakeup callback is invoked */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   227[m[K				b_wrap:1,            /** 30     Marks last descriptor in [01;31m[KTD[m[K list */
[01;32m[K   268[m[K		/** RX index for current processing [01;31m[KTD[m[K */
[01;32m[K   275[m[K		/** Number of free [01;31m[KTD[m[K before wakeup callback is invoked */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   245[m[K		/** Pointer to Rx [01;31m[KTDs[m[K (must be 8-byte aligned) */
[01;32m[K   247[m[K		/** Pointer to Tx [01;31m[KTDs[m[K (must be 8-byte aligned) */
[01;32m[K   252[m[K		/** Optional callback to be invoked once several [01;31m[KTDs[m[K have been released */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   248[m[K		/** Pointer to Rx [01;31m[KTDs[m[K (must be 8-byte aligned) */
[01;32m[K   250[m[K		/** Pointer to Tx [01;31m[KTDs[m[K (must be 8-byte aligned) */
[01;32m[K   255[m[K		/** Optional callback to be invoked once several [01;31m[KTDs[m[K have been released */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   265[m[K		/** Optional callback to be invoked once several [01;31m[KTDs[m[K have been released */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   834[m[K			/* Clear WD, PCE, PS, [01;31m[KTE[m[K and RE bits */
[01;32m[K  1122[m[K	  /* Clear WD, PCE, PS, [01;31m[KTE[m[K and RE bits */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_hw.c[39m

[01;32m[K    65[m[K		/* start the [01;31m[Ktemac[m[K */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_physpeed.c[39m

[01;32m[K   248[m[K			/* Update [01;31m[KTEMAC[m[K speed accordingly */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif.h[39m

[01;32m[K    78[m[K	 * using a particular [01;31m[Ktemac[m[K instance

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1333[m[K			{ MK_PAIR( [01;31m[KTFC[m[K   ) }, /* Enable transmit buffers exhausted in mid-frame interrupt. */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1336[m[K			{ MK_PAIR( [01;31m[KTFC[m[K   ) }, /* Enable transmit buffers exhausted in mid-frame interrupt. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K  1405[m[K			{ MK_PAIR( [01;31m[KTFC[m[K   ) }, /* Enable transmit buffers exhausted in mid-frame interrupt. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1197[m[K	   /* Set the [01;31m[KTFE[m[K bit according to ETH TransmitFlowControl value */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   430[m[K		 * Note: [01;31m[Ktha[m[K SAM4E does have RX checksum offloading

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K     3[m[K	 * Authors include Hein [01;31m[KTibosch[m[K and Richard Barry

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   647[m[K	  uint32_t   [01;31m[KTimeStampHigh[m[K;         /*!< Time Stamp High value for transmit and receive */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   645[m[K	  uint32_t   [01;31m[KTimeStampLow[m[K;          /*!< Time Stamp Low value for transmit and receive */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3076[m[K				/* Sockets with '[01;31m[Ktmout[m[K == 0' do not need any regular attention. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   486[m[K			[01;31m[Ktmpreg[m[K |= ( ( ( uint32_t )heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA );    /* Set the PHY device address   */
[01;32m[K   487[m[K			[01;31m[Ktmpreg[m[K |= ( ( ( uint32_t )PHYReg << 6 ) & ETH_MACMIIAR_MR );                   /* Set the PHY register address */
[01;32m[K   488[m[K			[01;31m[Ktmpreg[m[K &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
[01;32m[K   489[m[K			[01;31m[Ktmpreg[m[K |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
[01;32m[K   568[m[K			[01;31m[Ktmpreg[m[K |= ( ( ( uint32_t ) heth->Init.PhyAddress << 11 ) & ETH_MACMIIAR_PA ); /* Set the PHY device address */
[01;32m[K   569[m[K			[01;31m[Ktmpreg[m[K |= ( ( ( uint32_t ) PHYReg << 6 ) & ETH_MACMIIAR_MR );                 /* Set the PHY register address */
[01;32m[K   570[m[K			[01;31m[Ktmpreg[m[K |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
[01;32m[K   571[m[K			[01;31m[Ktmpreg[m[K |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   929[m[K					/* [01;31m[KTODO[m[K: SACK's may also be delayed for a short period

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K   131[m[K	     * [01;31m[KTODO[m[K: We need to check this out.
[01;32m[K   148[m[K	     * [01;31m[KTODO[m[K: We need to make this lower bound explicit in the Makefile.json

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   530[m[K	                         size_t length ) /*[01;31m[KTODO[m[K complete stub function */
[01;32m[K   593[m[K	        /*[01;31m[KTODO[m[K complete interrupt handler for other events. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1142[m[K	 * that: ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that the [01;31m[KTP[m[K header

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K   278[m[K	 * outstanding packets (for Rx and Tx).  When using up to 10 [01;31m[KTP[m[K sockets

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K   287[m[K	 * outstanding packets (for Rx and Tx).  When using up to 10 [01;31m[KTP[m[K sockets

[1;34m./portable/NetworkInterface/M487/m480_eth.h[39m

[01;32m[K    48[m[K	#define MII_TPISTATUS       0x1b        /* [01;31m[KTPI[m[K status for 10mbps       */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   179[m[K	#define   TX_CTRL_ENABLE              (0x0001)    /* Enable [01;31m[Ktranmsit[m[K */
[01;32m[K   182[m[K	#define   TX_STAT_LATE_COL            (0x2000)    /* [01;31m[KTranmsit[m[K late collision occurs */
[01;32m[K   183[m[K	#define   TX_STAT_MAX_COL             (0x1000)    /* [01;31m[KTranmsit[m[K maximum collision is reached */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1197[m[K	   /* Set the TFE bit according to ETH [01;31m[KTransmitFlowControl[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   555[m[K	  uint32_t             [01;31m[KTransmitFlowControl[m[K;       /*!< Enables or disables the MAC to transmit Pause frames (Full-Duplex mode)

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1246[m[K	    /* Set the TSF bit according to ETH [01;31m[KTransmitStoreForward[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   583[m[K	  uint32_t             [01;31m[KTransmitStoreForward[m[K;        /*!< Enables or disables Transmit store and forward mode.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1247[m[K	    /* Set the TTC bit according to ETH [01;31m[KTransmitThresholdControl[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   586[m[K	  uint32_t             [01;31m[KTransmitThresholdControl[m[K;    /*!< Selects or not the Transmit Threshold Control.

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K   127[m[K	/* #include "[01;31m[KtrcRecorder[m[K.h" */

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.c[39m

[01;32m[K    31[m[K	 * pucGetUncachedMemory( ulSize ) returns a [01;31m[Ktrunc[m[K of this memory with a length

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.h[39m

[01;32m[K     6[m[K	 * pucGetUncachedMemory( ulSize ) returns a [01;31m[Ktrunc[m[K of this memory with a length

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1246[m[K	    /* Set the [01;31m[KTSF[m[K bit according to ETH TransmitStoreForward value */

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   302[m[K	#define GMAC_ISR_SRI (0x1u << 26) /**< \brief (GMAC_ISR) [01;31m[KTSU[m[K Seconds Register Increment */
[01;32m[K   327[m[K	#define GMAC_IER_SRI (0x1u << 26) /**< \brief (GMAC_IER) [01;31m[KTSU[m[K Seconds Register Increment */
[01;32m[K   352[m[K	#define GMAC_IDR_SRI (0x1u << 26) /**< \brief (GMAC_IDR) [01;31m[KTSU[m[K Seconds Register Increment */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1247[m[K	    /* Set the [01;31m[KTTC[m[K bit according to ETH TransmitThresholdControl value */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K   217[m[K	/* Defines the Time To Live ([01;31m[KTTL[m[K) values used in outgoing UDP packets. */

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K   222[m[K	/* Defines the Time To Live ([01;31m[KTTL[m[K) values used in outgoing UDP packets. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K  1331[m[K			{ MK_PAIR( [01;31m[KTUR[m[K   ) }, /* Enable transmit underrun interrupt. */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K  1334[m[K			{ MK_PAIR( [01;31m[KTUR[m[K   ) }, /* Enable transmit underrun interrupt. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K  1403[m[K			{ MK_PAIR( [01;31m[KTUR[m[K   ) }, /* Enable transmit underrun interrupt. */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   181[m[K	 * A higher [01;31m[KTx[m[K block has been acknowledged.  Now iterate through the xWaitQueue
[01;32m[K   427[m[K				/* Add it to either the connections' Rx or [01;31m[KTx[m[K queue. */
[01;32m[K  1026[m[K	 * [01;31m[KTx[m[K functions
[01;32m[K  1059[m[K			/* Puts a message in the [01;31m[KTx[m[K-window (after buffer size has been
[01;32m[K  1067[m[K						/* Adding data to a segment that was already in the [01;31m[KTX[m[K queue.  It
[01;32m[K  1126[m[K					/* Link this segment in the [01;31m[KTx[m[K-Queue. */
[01;32m[K  1396[m[K						/* Move it out of the [01;31m[KTx[m[K queue. */
[01;32m[K  1406[m[K						/* pxWindow->[01;31m[Ktx[m[K.highest registers the highest sequence
[01;32m[K  1503[m[K			All [01;31m[KTX[m[K segments for which
[01;32m[K  1620[m[K					/* All segments below [01;31m[Ktx[m[K.ulCurrentSequenceNumber may be freed. */
[01;32m[K  1650[m[K			/* A higher [01;31m[KTx[m[K block has been acknowledged.  Now iterate through the

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   143[m[K	 * This amount may be further limited by setting the socket's [01;31m[KTX[m[K window size.
[01;32m[K   252[m[K	 * The API FreeRTOS_send() adds data to the [01;31m[KTX[m[K stream.  Add
[01;32m[K   492[m[K			/* The API FreeRTOS_send() might have added data to the [01;31m[KTX[m[K stream.  Add
[01;32m[K  2041[m[K		contains new [01;31m[KTx[m[K data which has not been passed to the sliding window yet.
[01;32m[K  2445[m[K				pxTCPWindow->[01;31m[Ktx[m[K.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
[01;32m[K  2535[m[K			starting at '[01;31m[Ktx[m[K.ulCurrentSequenceNumber'.  Advance the tail pointer in
[01;32m[K  2586[m[K				/* xTCPWindowTxDone returns true when all [01;31m[KTx[m[K queues are empty. */
[01;32m[K  2592[m[K					/* Refusing FIN: Rx incomp 1 optlen 4 [01;31m[Ktx[m[K done 1. */
[01;32m[K  2707[m[K				( xSendLength == ipNUMERIC_CAST( BaseType_t, uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) && /* No [01;31m[KTx[m[K data or options to be sent. */
[01;32m[K  2926[m[K					pxTCPWindow->[01;31m[Ktx[m[K.ulCurrentSequenceNumber = pxTCPWindow->[01;31m[Ktx[m[K.ulFirstSequenceNumber + 1UL; /* because we send a TCP_SYN. */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   576[m[K				/* Ensure the Rx and [01;31m[KTx[m[K timeouts are zero as the DHCP executes in the

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K   278[m[K	 * outstanding packets (for Rx and [01;31m[KTx[m[K).  When using up to 10 TP sockets
[01;32m[K   282[m[K	/* Each TCP socket has a circular buffers for Rx and [01;31m[KTx[m[K, which have a fixed
[01;32m[K   286[m[K	/* Define the size of [01;31m[KTx[m[K buffer for TCP sockets. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   238[m[K	 * MallocLarge is used to allocate large TCP buffers (for Rx/[01;31m[KTx[m[K)
[01;32m[K   366[m[K	/* Each TCP socket has circular stream buffers for Rx and [01;31m[KTx[m[K, which
[01;32m[K   374[m[K	/* Define the size of [01;31m[KTx[m[K stream buffer for TCP sockets */

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K   287[m[K	 * outstanding packets (for Rx and [01;31m[KTx[m[K).  When using up to 10 TP sockets
[01;32m[K   291[m[K	/* Each TCP socket has a circular buffers for Rx and [01;31m[KTx[m[K, which have a fixed
[01;32m[K   295[m[K	/* Define the size of [01;31m[KTx[m[K buffer for TCP sockets. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   111[m[K	#define   TX_MEM_TEST_FINISHED        (0x1000)    /* [01;31m[KTX[m[K memeory BIST test finish */
[01;32m[K   112[m[K	#define   TX_MEM_TEST_FAILED          (0x0800)    /* [01;31m[KTX[m[K memory BIST test fail */
[01;32m[K   113[m[K	#define   TX_MEM_TEST_FAILED_COUNT    (0x0700)    /* [01;31m[KTX[m[K memory BIST test fail count */
[01;32m[K   175[m[K	#define   TX_CTRL_FLUSH_QUEUE         (0x0010)    /* Clear transmit queue, reset [01;31m[Ktx[m[K frame pointer */
[01;32m[K   244[m[K	#define   TXQ_AUTO_ENQUEUE            (0x0004)    /* Enable enqueue [01;31m[Ktx[m[K frames from [01;31m[Ktx[m[K buffer automatically */
[01;32m[K   245[m[K	#define   TXQ_MEM_AVAILABLE_INT       (0x0002)    /* Enable generate interrupt when [01;31m[Ktx[m[K memory is available */
[01;32m[K   246[m[K	#define   TXQ_ENQUEUE                 (0x0001)    /* Enable enqueue [01;31m[Ktx[m[K frames one frame at a time */
[01;32m[K   296[m[K	#define   TX_TOTAL_FRAME_SIZE_MASK    (0xFFFF)    /* Set next total [01;31m[Ktx[m[K frame size mask */
[01;32m[K   400[m[K	#define   PHY_100BTX_FD_CAPABLE       (0x4000)     /* 100BASE-[01;31m[KTX[m[K full duplex capable */
[01;32m[K   401[m[K	#define   PHY_100BTX_CAPABLE          (0x2000)     /* 100BASE-[01;31m[KTX[m[K half duplex capable */
[01;32m[K   402[m[K	#define   PHY_10BT_FD_CAPABLE         (0x1000)     /* 10BASE-[01;31m[KTX[m[K full duplex capable */
[01;32m[K   403[m[K	#define   PHY_10BT_CAPABLE            (0x0800)     /* 10BASE-[01;31m[KTX[m[K half duplex capable */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K    59[m[K			1) Called by UP-task, add buffer to the [01;31m[KTX[m[K-list:
[01;32m[K    97[m[K						// [01;31m[KTX[m[K step12: disable TXQ write access.
[01;32m[K    97[m[K						// [01;31m[KTX[m[K step12: disable TXQ write access.
[01;32m[K    99[m[K						// [01;31m[KTX[m[K step12.1: enqueue frame in TXQ.
[01;32m[K    99[m[K						// [01;31m[KTX[m[K step12.1: enqueue frame in TXQ.
[01;32m[K   189[m[K	#define	PHY_REG_07_ANNPTR          0x07 //	7	RW		Auto-Negotiation Next Page [01;31m[KTX[m[K
[01;32m[K   250[m[K		/** [01;31m[KTX[m[K NetworkBufferDescriptor_t pointer list */
[01;32m[K   391[m[K			/* All [01;31m[KTX[m[K buffers busy. */
[01;32m[K   558[m[K				/* Middle of [01;31m[KTX[m[K. */
[01;32m[K   572[m[K					/* End of [01;31m[KTX[m[K. */
[01;32m[K   668[m[K		//		/* [01;31m[KTX[m[K step11: end [01;31m[KTX[m[K transfer. */
[01;32m[K   668[m[K		//		/* [01;31m[KTX[m[K step11: end [01;31m[KTX[m[K transfer. */
[01;32m[K   678[m[K				/* [01;31m[KTX[m[K step12: disable TXQ write access. */
[01;32m[K   692[m[K				/* [01;31m[KTX[m[K step11: end [01;31m[KTX[m[K transfer. */
[01;32m[K   702[m[K				/* [01;31m[KTX[m[K step12: disable TXQ write access. */
[01;32m[K   831[m[K				 * ========================== Handle [01;31m[KTX[m[K ==========================
[01;32m[K   851[m[K					/* [01;31m[KTX[m[K step1: check if TXQ memory size is available for transmit. */
[01;32m[K   871[m[K						/* [01;31m[KTX[m[K step2: disable all interrupts. */
[01;32m[K   876[m[K						/* [01;31m[KTX[m[K step3: enable TXQ write access. */
[01;32m[K   878[m[K						/* [01;31m[KTX[m[K step4-8: perform FIFO write operation. */
[01;32m[K   945[m[K				/* [01;31m[KTX[m[K step9-10: pad with dummy data to keep dword alignment. */
[01;32m[K   953[m[K	//			/* [01;31m[KTX[m[K step11: end [01;31m[KTX[m[K transfer. */
[01;32m[K   953[m[K	//			/* [01;31m[KTX[m[K step11: end [01;31m[KTX[m[K transfer. */
[01;32m[K   959[m[K				/* [01;31m[KTX[m[K step12: disable TXQ write access. */
[01;32m[K   964[m[K				/* [01;31m[KTX[m[K step12.1: enqueue frame in TXQ. */
[01;32m[K  1021[m[K	 * \brief Set up the [01;31m[KTX[m[K descriptor ring buffers.
[01;32m[K  1023[m[K	 * This function sets up the descriptor list used for [01;31m[KTX[m[K packets.
[01;32m[K  1030[m[K		/* Init [01;31m[KTX[m[K index pointer. */
[01;32m[K  1034[m[K		/* Set up the [01;31m[KTX[m[K descriptors */
[01;32m[K  1227[m[K				/* Future extension: code to release [01;31m[KTX[m[K buffers if zero-copy is used. */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   180[m[K		/* Kick the [01;31m[KTx[m[K task in either case in case it doesn't know the buffer is
[01;32m[K   487[m[K	 * @brief launch 2 linux threads, one for [01;31m[KTx[m[K and one for Rx
[01;32m[K   502[m[K			/* Create event used to signal the  pcap [01;31m[KTx[m[K thread. */
[01;32m[K   519[m[K				/* Create the thread that handles pcap  [01;31m[KTx[m[K. */

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.c[39m

[01;32m[K    41[m[K	 * Both the DMA descriptors as well as all EMAC [01;31m[KTX[m[K-buffers will be allocated in

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K    66[m[K		The actual [01;31m[KTX[m[K buffers are located in uncached RAM.
[01;32m[K   114[m[K		/* uxCount is the number of [01;31m[KTX[m[K descriptors that are in use by the DMA. */
[01;32m[K   151[m[K			/* Tell the counting semaphore that one more [01;31m[KTX[m[K descriptor is available. */
[01;32m[K   263[m[K			/* Update the [01;31m[KTX[m[K-head index. These variable are declared volatile so they will be
[01;32m[K   467[m[K		/* Clear all [01;31m[KTX[m[K descriptors and assign uncached memory to each descriptor.
[01;32m[K   468[m[K		"tx_space" points to the first available [01;31m[KTX[m[K buffer. */

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K   217[m[K		/* Kick the [01;31m[KTx[m[K task in either case in case it doesn't know the buffer is
[01;32m[K   401[m[K			/* Create event used to signal the Win32 WinPCAP [01;31m[KTx[m[K thread. */
[01;32m[K   416[m[K			/* Create the Win32 thread that handlers WinPCAP [01;31m[KTx[m[K. */

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K    95[m[K		010 = 100BASE-[01;31m[KTX[m[K half-duplex
[01;32m[K    96[m[K		110 = 100BASE-[01;31m[KTX[m[K full-duplex
[01;32m[K   376[m[K					  0           1           0        100BASE-[01;31m[KTX[m[K, Half-Duplex
[01;32m[K   377[m[K					  0           1           1        100BASE-[01;31m[KTX[m[K, Full-Duplex
[01;32m[K   380[m[K					  1           0           1        100BASE-[01;31m[KTX[m[K, Half/Full-Duplex
[01;32m[K   382[m[K													   100BASE-[01;31m[KTX[m[K, Half-Duplex
[01;32m[K   384[m[K													   100BASE-[01;31m[KTX[m[K, Half/Full-Duplex
[01;32m[K   588[m[K	//	[010] = 100BASE-[01;31m[KTX[m[K half-duplex
[01;32m[K   589[m[K	//	[110] = 100BASE-[01;31m[KTX[m[K full-duplex
[01;32m[K   597[m[K	//	[110] = 100BASE-[01;31m[KTX[m[K full-duplex
[01;32m[K   604[m[K	//	[010] = 100BASE-[01;31m[KTX[m[K half-duplex

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K    78[m[K	        PIC32_MAC_EVENT_IF_PENDING = 0x004,     /* an interface event signal: RX, [01;31m[KTX[m[K, errors. etc. */

[1;34m./portable/NetworkInterface/ATSAM4E/ethernet_phy.h[39m

[01;32m[K    77[m[K		#define	PHY_REG_07_ANNPTR          0x07 //	7	RW		Auto-Negotiation Next Page [01;31m[KTX[m[K
[01;32m[K   166[m[K	#define GMII_100BASE_TX_FD     (1 << 14) // 100BASE-[01;31m[KTX[m[K Full Duplex Capable
[01;32m[K   167[m[K	#define GMII_100BASE_T4_HD     (1 << 13) // 100BASE-[01;31m[KTX[m[K Half Duplex Capable
[01;32m[K   198[m[K	#define GMII_100TX_FDX           (1 << 8)  // 100BASE-[01;31m[KTX[m[K Full Duplex Support
[01;32m[K   199[m[K	#define GMII_100TX_HDX           (1 << 7)  // 100BASE-[01;31m[KTX[m[K Support

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   159[m[K	DMA [01;31m[KTX[m[K descriptors. */
[01;32m[K   262[m[K	/* Do not wait too long for a free [01;31m[KTX[m[K DMA buffer. */
[01;32m[K   278[m[K				/* Time-out waiting for a free [01;31m[KTX[m[K descriptor. */
[01;32m[K   297[m[K			/* Not interested in a call-back after [01;31m[KTX[m[K. */
[01;32m[K   569[m[K				/* Future extension: code to release [01;31m[KTX[m[K buffers if zero-copy is used. */
[01;32m[K   594[m[K						/* Tell the counting semaphore that one more [01;31m[KTX[m[K descriptor is available. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K   135[m[K		GMAC_TX_BUSY,        /** 2  [01;31m[KTX[m[K in progress */
[01;32m[K   138[m[K		GMAC_PARAM,          /** 5  Parameter error, [01;31m[KTX[m[K packet invalid or RX size too small */
[01;32m[K   236[m[K		 * Pointer to allocated [01;31m[KTX[m[K buffer.
[01;32m[K   247[m[K		/** Pointer to [01;31m[KTx[m[K TDs (must be 8-byte aligned) */
[01;32m[K   263[m[K		/** [01;31m[KTX[m[K TD list size */
[01;32m[K   871[m[K	 * \brief Set [01;31m[KTx[m[K Queue.
[01;32m[K   874[m[K	 * \param ul_addr  [01;31m[KTx[m[K queue address.
[01;32m[K   882[m[K	 * \brief Get [01;31m[KTx[m[K Queue.
[01;32m[K  1208[m[K	 * The buffer size used for [01;31m[KTX[m[K is GMAC_TX_BUFFERS * 1518.

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K    76[m[K	  RwReg   GMAC_TPSF;       /**< \brief (Gmac Offset: 0x040) [01;31m[KTX[m[K Partial Store and Forward Register */
[01;32m[K   283[m[K	#define GMAC_ISR_TXUBR (0x1u << 3) /**< \brief (GMAC_ISR) [01;31m[KTX[m[K Used Bit Read */
[01;32m[K   308[m[K	#define GMAC_IER_TXUBR (0x1u << 3) /**< \brief (GMAC_IER) [01;31m[KTX[m[K Used Bit Read */
[01;32m[K   333[m[K	#define GMAC_IDR_TXUBR (0x1u << 3) /**< \brief (GMAC_IDR) [01;31m[KTX[m[K Used Bit Read */
[01;32m[K   358[m[K	#define GMAC_IMR_TXUBR (0x1u << 3) /**< \brief (GMAC_IMR) [01;31m[KTX[m[K Used Bit Read */
[01;32m[K   402[m[K	/* -------- GMAC_TPSF : (GMAC Offset: 0x040) [01;31m[KTX[m[K Partial Store and Forward Register -------- */
[01;32m[K   406[m[K	#define GMAC_TPSF_ENTXP (0x1u << 31) /**< \brief (GMAC_TPSF) Enable [01;31m[KTX[m[K Partial Store and Forward Operation */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K   136[m[K		GMAC_TX_BUSY,        /** 2  [01;31m[KTX[m[K in progress */
[01;32m[K   139[m[K		GMAC_PARAM,          /** 5  Parameter error, [01;31m[KTX[m[K packet invalid or RX size too small */
[01;32m[K   224[m[K	/** [01;31m[KTX[m[K callback */
[01;32m[K   239[m[K		 * Pointer to allocated [01;31m[KTX[m[K buffer.
[01;32m[K   250[m[K		/** Pointer to [01;31m[KTx[m[K TDs (must be 8-byte aligned) */
[01;32m[K   266[m[K		/** [01;31m[KTX[m[K TD list size */
[01;32m[K   874[m[K	 * \brief Set [01;31m[KTx[m[K Queue.
[01;32m[K   877[m[K	 * \param ul_addr  [01;31m[KTx[m[K queue address.
[01;32m[K   885[m[K	 * \brief Get [01;31m[KTx[m[K Queue.
[01;32m[K  1211[m[K	 * The buffer size used for [01;31m[KTX[m[K is GMAC_TX_BUFFERS * 1518.

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K    86[m[K	/** [01;31m[KTX[m[K descriptor lists */
[01;32m[K    90[m[K	/** [01;31m[KTX[m[K callback lists */
[01;32m[K   122[m[K		/* Pointer to allocated buffer for [01;31m[KTX[m[K. The address should be 8-byte aligned
[01;32m[K   125[m[K		/* Pointer to allocated [01;31m[KTX[m[K descriptor list. */
[01;32m[K   127[m[K		/* [01;31m[KTX[m[K size, in number of registered units ([01;31m[KTX[m[K descriptors). */
[01;32m[K   202[m[K		/* Disable [01;31m[KTX[m[K */
[01;32m[K   205[m[K		/* Set up the [01;31m[KTX[m[K descriptors */
[01;32m[K   262[m[K	 * Must be invoked after gmac_dev_init() but before RX/[01;31m[KTX[m[K starts.
[01;32m[K   270[m[K	 * \param p_tx_cb Pointer to allocated [01;31m[KTX[m[K callback list.
[01;32m[K   301[m[K		/* Assign [01;31m[KTX[m[K buffers */
[01;32m[K   315[m[K		/* Reset [01;31m[KTX[m[K & RX */
[01;32m[K   319[m[K		/* Enable Rx and [01;31m[KTx[m[K, plus the statistics register */
[01;32m[K   394[m[K		/* Disable [01;31m[KTX[m[K & RX and more */
[01;32m[K   431[m[K		 * but [01;31m[KTX[m[K checksum offloading has NOT been implemented.
[01;32m[K   602[m[K	 * GMAC [01;31m[KTx[m[K buffers, and then indicates to the GMAC that the buffer is ready.
[01;32m[K   644[m[K		/* Pointers to the current [01;31m[KTx[m[K callback */
[01;32m[K   668[m[K		/* [01;31m[KTx[m[K callback */
[01;32m[K   742[m[K	 *  \brief Register/Clear [01;31m[KTX[m[K wakeup callback.
[01;32m[K   750[m[K	 * This function is usually invoked with NULL callback from the [01;31m[KTX[m[K wakeup
[01;32m[K   780[m[K	 * \brief Reset [01;31m[KTX[m[K & RX queue & statistics.
[01;32m[K   868[m[K		/* [01;31m[KTX[m[K packet */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   205[m[K	DMA [01;31m[KTX[m[K descriptors. */
[01;32m[K   288[m[K			/* let the prvEMACHandlerTask know that there was an [01;31m[KTX[m[K event. */
[01;32m[K   446[m[K	/** The GMAC [01;31m[KTX[m[K errors to handle */
[01;32m[K   456[m[K			/* Reinit [01;31m[KTX[m[K descriptors. */
[01;32m[K   470[m[K	/* Do not wait too long for a free [01;31m[KTX[m[K DMA buffer. */
[01;32m[K   498[m[K				/* Time-out waiting for a free [01;31m[KTX[m[K descriptor. */
[01;32m[K   525[m[K			/* Not interested in a call-back after [01;31m[KTX[m[K. */
[01;32m[K   883[m[K				/* Future extension: code to release [01;31m[KTX[m[K buffers if zero-copy is used. */
[01;32m[K   908[m[K						/* Tell the counting semaphore that one more [01;31m[KTX[m[K descriptor is available. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K   141[m[K		GMAC_TX_BUSY,        /** 2  [01;31m[KTX[m[K in progress */
[01;32m[K   144[m[K		GMAC_PARAM,          /** 5  Parameter error, [01;31m[KTX[m[K packet invalid or RX size too small */
[01;32m[K   258[m[K		 * Pointer to allocated [01;31m[KTX[m[K buffer.
[01;32m[K   882[m[K	 * \brief Set [01;31m[KTx[m[K Queue.
[01;32m[K   885[m[K	 * \param ul_addr  [01;31m[KTx[m[K queue address.
[01;32m[K   893[m[K	 * \brief Get [01;31m[KTx[m[K Queue.
[01;32m[K  1128[m[K	 * \brief Set base address of [01;31m[KTX[m[K buffer.
[01;32m[K  1139[m[K	 * \brief Get base address of [01;31m[KTX[m[K buffer.

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   119[m[K	/** [01;31m[KTX[m[K descriptor lists */
[01;32m[K   227[m[K		/* Disable [01;31m[KTX[m[K */
[01;32m[K   239[m[K		/* Set up the [01;31m[KTX[m[K descriptors */
[01;32m[K   317[m[K	 * Must be invoked after gmac_dev_init() but before RX/[01;31m[KTX[m[K starts.
[01;32m[K   330[m[K		/* Assign [01;31m[KTX[m[K buffers */
[01;32m[K   340[m[K		/* Reset [01;31m[KTX[m[K & RX Memory */
[01;32m[K   344[m[K		/* Enable Rx and [01;31m[KTx[m[K, plus the statistics register */
[01;32m[K   375[m[K		/* Disable [01;31m[KTX[m[K & RX and more */
[01;32m[K   416[m[K		 * but [01;31m[KTX[m[K checksum offloading has NOT been implemented,
[01;32m[K   424[m[K			/* Let the GMAC set [01;31m[KTX[m[K checksum's. */
[01;32m[K   652[m[K	 * GMAC [01;31m[KTx[m[K buffers, and then indicates to the GMAC that the buffer is ready.
[01;32m[K   745[m[K	 *  \brief Register/Clear [01;31m[KTX[m[K wakeup callback.
[01;32m[K   753[m[K	 * This function is usually invoked with NULL callback from the [01;31m[KTX[m[K wakeup
[01;32m[K   783[m[K	 * \brief Reset [01;31m[KTX[m[K & RX queue & statistics.
[01;32m[K   860[m[K		/* [01;31m[KTX[m[K packet */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   114[m[K	/* Interrupt events to process.  Currently only the RX/[01;31m[KTX[m[K events are processed
[01;32m[K   151[m[K	 * Initialises the [01;31m[KTx[m[K and Rx descriptors respectively.
[01;32m[K   191[m[K	the Rx and [01;31m[KTx[m[K interrupt is handled, although code is included for other events
[01;32m[K   198[m[K	/* [01;31m[KTx[m[K descriptors and index. */
[01;32m[K   223[m[K	DMA [01;31m[KTX[m[K descriptors. */
[01;32m[K   364[m[K		/* This function is called after a [01;31m[KTX[m[K-completion interrupt.
[01;32m[K   400[m[K			/* Tell the counting semaphore that one more [01;31m[KTX[m[K descriptor is available. */
[01;32m[K   413[m[K		/* Attempt to obtain access to a [01;31m[KTx[m[K descriptor. */
[01;32m[K   422[m[K				/* Time-out waiting for a free [01;31m[KTX[m[K descriptor. */
[01;32m[K   429[m[K				/* The semaphore was taken, the [01;31m[KTX[m[K DMA-descriptor is still not available.
[01;32m[K   462[m[K				/* Ensure the DMA is polling [01;31m[KTx[m[K descriptors. */
[01;32m[K   474[m[K				/* The [01;31m[KTx[m[K has been initiated. */
[01;32m[K   503[m[K		/* Start with [01;31m[KTx[m[K descriptors clear. */
[01;32m[K   506[m[K		/* Index to the next [01;31m[KTx[m[K descriptor to use. */
[01;32m[K   509[m[K		/* Index to the next [01;31m[KTx[m[K descriptor to clear ( after transmission ). */
[01;32m[K   521[m[K				/* Allocate a buffer to the [01;31m[KTx[m[K descriptor.  This is the most basic
[01;32m[K   828[m[K		/* [01;31m[KTX[m[K group interrupt(s). */
[01;32m[K   831[m[K			/* Remember that a [01;31m[KTX[m[K event has happened. */
[01;32m[K  1017[m[K				/* Code to release [01;31m[KTX[m[K buffers if zero-copy is used. */

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K   325[m[K	      case 'T': //For [01;31m[KTX[m[K event
[01;32m[K   326[m[K	        // ack of [01;31m[Ktx[m[K done, no-op in this stage

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   230[m[K	    // Enable high slew rate on all RMII [01;31m[KTX[m[K output pins
[01;32m[K   357[m[K	    // FIX ME: for [01;31m[Ktx[m[K-event, no-op at this stage
[01;32m[K   373[m[K	    desc = cur_tx_desc_ptr->next;    // in case [01;31m[KTX[m[K is transmitting and overwrite next pointer before we can update cur_tx_desc_ptr

[1;34m./portable/NetworkInterface/M487/m480_eth.h[39m

[01;32m[K    91[m[K	#define TX_DESCRIPTOR_NUM       2 //4    // Max number of [01;31m[KTx[m[K Frame Descriptors
[01;32m[K   109[m[K	// [01;31m[KTx[m[K Frame Descriptor's Control bits
[01;32m[K   110[m[K	#define TXFD_TTSEN    0x08    // [01;31m[KTx[m[K Time Stamp Enable
[01;32m[K   115[m[K	// [01;31m[KTx[m[K Frame Descriptor Status
[01;32m[K   117[m[K	#define TXFD_TTSAS   0x08000000  // [01;31m[KTX[m[K Time Stamp Available
[01;32m[K   119[m[K	// [01;31m[KTx[m[K/Rx buffer descriptor structure

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   189[m[K	 * Initialise the [01;31m[KTX[m[K descriptors.
[01;32m[K   220[m[K	DMA [01;31m[KTX[m[K descriptors. */
[01;32m[K   233[m[K	 * [01;31m[KTX[m[K buffers are allocated in a zero-copy driver.
[01;32m[K   254[m[K	/* Ethernet [01;31m[KTx[m[K DMA Descriptor */
[01;32m[K   266[m[K	/* DMATxDescToClear points to the next [01;31m[KTX[m[K DMA descriptor
[01;32m[K   351[m[K		/* This function is called after a [01;31m[KTX[m[K-completion interrupt.
[01;32m[K   380[m[K			/* Tell the counting semaphore that one more [01;31m[KTX[m[K descriptor is available. */
[01;32m[K   448[m[K				/* Initialize [01;31m[KTx[m[K Descriptors list: Chain Mode */
[01;32m[K   451[m[K				/* Initialise [01;31m[KTX[m[K-descriptors. */
[01;32m[K   532[m[K				/* Set the DMA [01;31m[KTx[m[K descriptors checksum insertion for TCP, UDP, and ICMP */
[01;32m[K   643[m[K	/* Do not wait too long for a free [01;31m[KTX[m[K DMA buffer. */
[01;32m[K   667[m[K					/* Time-out waiting for a free [01;31m[KTX[m[K descriptor. */
[01;32m[K   733[m[K					/* Set Own bit of the [01;31m[KTx[m[K descriptor Status: gives the buffer back to ETHERNET DMA */
[01;32m[K  1264[m[K				/* Code to release [01;31m[KTX[m[K buffers if zero-copy is used. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K    44[m[K	      (#)Prepare ETH DMA [01;31m[KTX[m[K Descriptors and give the hand to ETH DMA to transfer
[01;32m[K    45[m[K	         the frame to MAC [01;31m[KTX[m[K FIFO:
[01;32m[K   405[m[K	  * @brief  [01;31m[KTx[m[K Transfer completed callbacks.
[01;32m[K   990[m[K		dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for [01;31m[KTx[m[K or Rx it is applied for the other */
[01;32m[K   995[m[K		ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and [01;31m[KTx[m[K */
[01;32m[K  1275[m[K	                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for [01;31m[KTx[m[K or Rx it is applied for the other */
[01;32m[K  1280[m[K	                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and [01;31m[KTx[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   338[m[K	/* Ethernet DMA [01;31m[KTx[m[K descriptors Collision Count Shift */
[01;32m[K   341[m[K	/* Ethernet DMA [01;31m[KTx[m[K descriptors Buffer2 Size Shift */
[01;32m[K   612[m[K	  uint32_t             TxDMABurstLength;            /*!< Indicates the maximum number of beats to be transferred in one [01;31m[KTx[m[K DMA transaction.
[01;32m[K   621[m[K	  uint32_t             DMAArbitration;              /*!< Selects the DMA [01;31m[KTx[m[K/Rx arbitration.
[01;32m[K   684[m[K	  ETH_DMADescTypeDef         *TxDesc;       /*!< [01;31m[KTx[m[K descriptor to Set        */
[01;32m[K   744[m[K	    an Ethernet packet is transmitted, [01;31m[KTx[m[K-DMA will transfer the packet from the
[01;32m[K   767[m[K	 #define ETH_TXBUFNB             ((uint32_t)5U)      /* 5  [01;31m[KTx[m[K buffers of size ETH_TX_BUF_SIZE */
[01;32m[K   774[m[K	/** @defgroup ETH_DMA_TX_Descriptor ETH DMA [01;31m[KTX[m[K Descriptor
[01;32m[K   779[m[K	   DMA [01;31m[KTx[m[K Descriptor
[01;32m[K   792[m[K	  * @brief  Bit definition of TDES0 register: DMA [01;31m[KTx[m[K descriptor status register
[01;32m[K   808[m[K	#define ETH_DMATXDESC_TTSS                    ((uint32_t)0x00020000U)  /*!< [01;31m[KTx[m[K Time Stamp Status */
[01;32m[K  1283[m[K		#define ETH_MAC_TXFIFO_FULL          ((uint32_t)0x02000000)  /* [01;31m[KTx[m[K FIFO full */
[01;32m[K  1284[m[K		#define ETH_MAC_TXFIFONOT_EMPTY      ((uint32_t)0x01000000)  /* [01;31m[KTx[m[K FIFO not empty */
[01;32m[K  1285[m[K		#define ETH_MAC_TXFIFO_WRITE_ACTIVE  ((uint32_t)0x00400000)  /* [01;31m[KTx[m[K FIFO write active */
[01;32m[K  1286[m[K		#define ETH_MAC_TXFIFO_IDLE     ((uint32_t)0x00000000)  /* [01;31m[KTx[m[K FIFO read status: Idle */
[01;32m[K  1287[m[K		#define ETH_MAC_TXFIFO_READ     ((uint32_t)0x00100000)  /* [01;31m[KTx[m[K FIFO read status: Read (transferring data to the MAC transmitter) */
[01;32m[K  1288[m[K		#define ETH_MAC_TXFIFO_WAITING  ((uint32_t)0x00200000)  /* [01;31m[KTx[m[K FIFO read status: Waiting for TxStatus from MAC transmitter */
[01;32m[K  1289[m[K		#define ETH_MAC_TXFIFO_WRITING  ((uint32_t)0x00300000)  /* [01;31m[KTx[m[K FIFO read status: Writing the received TxStatus or flushing the TxFIFO */
[01;32m[K  1443[m[K	/** @defgroup ETH_Tx_DMA_Burst_Length ETH [01;31m[KTx[m[K DMA Burst Length
[01;32m[K  1483[m[K	/** @defgroup ETH_DMA_Tx_descriptor_segment ETH DMA [01;31m[KTx[m[K descriptor segment
[01;32m[K  1492[m[K	/** @defgroup ETH_DMA_Tx_descriptor_Checksum_Insertion_Control ETH DMA [01;31m[KTx[m[K descriptor Checksum Insertion Control
[01;32m[K  1522[m[K	/** @defgroup ETH_MMC_Tx_Interrupts ETH MMC [01;31m[KTx[m[K Interrupts
[01;32m[K  1525[m[K	#define ETH_MMC_IT_TGF       ((uint32_t)0x00200000U)  /*!< When [01;31m[KTx[m[K good frame counter reaches half the maximum value */
[01;32m[K  1526[m[K	#define ETH_MMC_IT_TGFMSC    ((uint32_t)0x00008000U)  /*!< When [01;31m[KTx[m[K good multi col counter reaches half the maximum value */
[01;32m[K  1527[m[K	#define ETH_MMC_IT_TGFSC     ((uint32_t)0x00004000U)  /*!< When [01;31m[KTx[m[K good single col counter reaches half the maximum value */
[01;32m[K  1560[m[K	#define ETH_DMA_FLAG_DATATRANSFERERROR ((uint32_t)0x00800000U)  /*!< Error bits 0-Rx DMA, 1-[01;31m[KTx[m[K DMA */
[01;32m[K  1622[m[K	#define ETH_DMA_TRANSMITPROCESS_STOPPED     ((uint32_t)0x00000000U)  /*!< Stopped - Reset or Stop [01;31m[KTx[m[K Command issued */
[01;32m[K  1623[m[K	#define ETH_DMA_TRANSMITPROCESS_FETCHING    ((uint32_t)0x00100000U)  /*!< Running - fetching the [01;31m[KTx[m[K descriptor */
[01;32m[K  1626[m[K	#define ETH_DMA_TRANSMITPROCESS_SUSPENDED   ((uint32_t)0x00600000U)  /*!< Suspended - [01;31m[KTx[m[K Descriptor unavailable */
[01;32m[K  1683[m[K	  * @brief  Checks whether the specified Ethernet DMA [01;31m[KTx[m[K Desc flag is set or not.
[01;32m[K  1720[m[K	  * @brief  Returns the specified Ethernet DMA [01;31m[KTx[m[K Desc collision count.
[01;32m[K  1727[m[K	  * @brief  Set the specified DMA [01;31m[KTx[m[K Desc Own bit.
[01;32m[K  1734[m[K	  * @brief  Enables the specified DMA [01;31m[KTx[m[K Desc Transmit interrupt.
[01;32m[K  1741[m[K	  * @brief  Disables the specified DMA [01;31m[KTx[m[K Desc Transmit interrupt.
[01;32m[K  1748[m[K	  * @brief  Selects the specified Ethernet DMA [01;31m[KTx[m[K Desc Checksum Insertion.
[01;32m[K  1750[m[K	  * @param  __CHECKSUM__: specifies is the DMA [01;31m[KTx[m[K desc checksum insertion.
[01;32m[K  1761[m[K	  * @brief  Enables the DMA [01;31m[KTx[m[K Desc CRC.
[01;32m[K  1768[m[K	  * @brief  Disables the DMA [01;31m[KTx[m[K Desc CRC.
[01;32m[K  1775[m[K	  * @brief  Enables the DMA [01;31m[KTx[m[K Desc padding for frame shorter than 64 bytes.
[01;32m[K  1782[m[K	  * @brief  Disables the DMA [01;31m[KTx[m[K Desc padding for frame shorter than 64 bytes.
[01;32m[K  2072[m[K	  * @brief  Enables the specified Ethernet MMC [01;31m[KTx[m[K interrupts.
[01;32m[K  2076[m[K	  *     @arg ETH_MMC_IT_TGF   : When [01;31m[KTx[m[K good frame counter reaches half the maximum value
[01;32m[K  2077[m[K	  *     @arg ETH_MMC_IT_TGFMSC: When [01;31m[KTx[m[K good multi col counter reaches half the maximum value
[01;32m[K  2078[m[K	  *     @arg ETH_MMC_IT_TGFSC : When [01;31m[KTx[m[K good single col counter reaches half the maximum value
[01;32m[K  2084[m[K	  * @brief  Disables the specified Ethernet MMC [01;31m[KTx[m[K interrupts.
[01;32m[K  2088[m[K	  *     @arg ETH_MMC_IT_TGF   : When [01;31m[KTx[m[K good frame counter reaches half the maximum value
[01;32m[K  2089[m[K	  *     @arg ETH_MMC_IT_TGFMSC: When [01;31m[KTx[m[K good multi col counter reaches half the maximum value
[01;32m[K  2090[m[K	  *     @arg ETH_MMC_IT_TGFSC : When [01;31m[KTx[m[K good single col counter reaches half the maximum value

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K   135[m[K		/* Attempt to obtain access to a [01;31m[KTx[m[K buffer. */
[01;32m[K   140[m[K				/* Will the data fit in the [01;31m[KTx[m[K buffer? */
[01;32m[K   143[m[K					/* Assign the buffer to the [01;31m[KTx[m[K descriptor that is now known to
[01;32m[K   150[m[K					/* Initiate the [01;31m[KTx[m[K. */
[01;32m[K   154[m[K					/* The [01;31m[KTx[m[K has been initiated. */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   150[m[K		/* Properties of the [01;31m[KTx[m[K buffer and [01;31m[KTx[m[K window */
[01;32m[K   273[m[K	 * tx_space returns the free space in the [01;31m[KTx[m[K buffer

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    50[m[K		TCPTimer_t xTransmitTimer;		/* saves a timestamp at the moment this segment gets transmitted ([01;31m[KTX[m[K only) */
[01;32m[K    65[m[K		struct xLIST_ITEM xQueueItem;	/* [01;31m[KTX[m[K only: segments can be linked in one of three queues: xPriorityQueue, xTxQueue, and xWaitQueue */
[01;32m[K   108[m[K											  * for [01;31m[KTx[m[K: initial send sequence number (ISS)
[01;32m[K   110[m[K			uint32_t ulCurrentSequenceNumber;/* [01;31m[KTx[m[K/Rx: the oldest sequence number not yet confirmed, also SND.UNA / RCV.NXT
[01;32m[K   129[m[K		/* For tiny TCP, there is only 1 outstanding [01;31m[KTX[m[K segment */
[01;32m[K   175[m[K	 * [01;31m[KTx[m[K functions
[01;32m[K   179[m[K	/* Adds data to the [01;31m[KTx[m[K-window */
[01;32m[K   186[m[K	 * Function will be called when a FIN has been received. Only when the [01;31m[KTX[m[K window is clean,

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   241[m[K	 * MallocLarge is used to allocate large TCP buffers (for Rx/[01;31m[KTx[m[K)
[01;32m[K   396[m[K	/* Each TCP socket has circular stream buffers for Rx and [01;31m[KTx[m[K, which
[01;32m[K   404[m[K	/* Define the size of [01;31m[KTx[m[K stream buffer for TCP sockets */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   171[m[K		cleared the [01;31m[KTXCOMPL[m[K and TXSR_USEDREAD status bits in the XEMACPS_TXSR register.

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   170[m[K	#define REG_TX_CTRL                (0x70)       /* [01;31m[KTXCR[m[K */

[1;34m./portable/NetworkInterface/M487/m480_eth.h[39m

[01;32m[K    60[m[K	#define BMCR_LOOPBACK           0x4000  /* [01;31m[KTXD[m[K loopback bits           */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   440[m[K				/* Set the [01;31m[KTxDesc[m[K and RxDesc pointers. */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   684[m[K	  ETH_DMADescTypeDef         *[01;31m[KTxDesc[m[K;       /*!< Tx descriptor to Set        */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K  1446[m[K	#define ETH_TXDMABURSTLENGTH_1BEAT          ((uint32_t)0x00000100U)  /*!< maximum number of beats to be transferred in one [01;31m[KTxDMA[m[K (or both) transaction is 1 */
[01;32m[K  1447[m[K	#define ETH_TXDMABURSTLENGTH_2BEAT          ((uint32_t)0x00000200U)  /*!< maximum number of beats to be transferred in one [01;31m[KTxDMA[m[K (or both) transaction is 2 */
[01;32m[K  1448[m[K	#define ETH_TXDMABURSTLENGTH_4BEAT          ((uint32_t)0x00000400U)  /*!< maximum number of beats to be transferred in one [01;31m[KTxDMA[m[K (or both) transaction is 4 */
[01;32m[K  1449[m[K	#define ETH_TXDMABURSTLENGTH_8BEAT          ((uint32_t)0x00000800U)  /*!< maximum number of beats to be transferred in one [01;31m[KTxDMA[m[K (or both) transaction is 8 */
[01;32m[K  1450[m[K	#define ETH_TXDMABURSTLENGTH_16BEAT         ((uint32_t)0x00001000U)  /*!< maximum number of beats to be transferred in one [01;31m[KTxDMA[m[K (or both) transaction is 16 */
[01;32m[K  1451[m[K	#define ETH_TXDMABURSTLENGTH_32BEAT         ((uint32_t)0x00002000U)  /*!< maximum number of beats to be transferred in one [01;31m[KTxDMA[m[K (or both) transaction is 32 */
[01;32m[K  1452[m[K	#define ETH_TXDMABURSTLENGTH_4XPBL_4BEAT    ((uint32_t)0x01000100U)  /*!< maximum number of beats to be transferred in one [01;31m[KTxDMA[m[K (or both) transaction is 4 */
[01;32m[K  1453[m[K	#define ETH_TXDMABURSTLENGTH_4XPBL_8BEAT    ((uint32_t)0x01000200U)  /*!< maximum number of beats to be transferred in one [01;31m[KTxDMA[m[K (or both) transaction is 8 */
[01;32m[K  1454[m[K	#define ETH_TXDMABURSTLENGTH_4XPBL_16BEAT   ((uint32_t)0x01000400U)  /*!< maximum number of beats to be transferred in one [01;31m[KTxDMA[m[K (or both) transaction is 16 */
[01;32m[K  1455[m[K	#define ETH_TXDMABURSTLENGTH_4XPBL_32BEAT   ((uint32_t)0x01000800U)  /*!< maximum number of beats to be transferred in one [01;31m[KTxDMA[m[K (or both) transaction is 32 */
[01;32m[K  1456[m[K	#define ETH_TXDMABURSTLENGTH_4XPBL_64BEAT   ((uint32_t)0x01001000U)  /*!< maximum number of beats to be transferred in one [01;31m[KTxDMA[m[K (or both) transaction is 64 */
[01;32m[K  1457[m[K	#define ETH_TXDMABURSTLENGTH_4XPBL_128BEAT  ((uint32_t)0x01002000U)  /*!< maximum number of beats to be transferred in one [01;31m[KTxDMA[m[K (or both) transaction is 128 */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1269[m[K	    /* Set the PBL and 4*PBL bits according to ETH [01;31m[KTxDMABurstLength[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   612[m[K	  uint32_t             [01;31m[KTxDMABurstLength[m[K;            /*!< Indicates the maximum number of beats to be transferred in one Tx DMA transaction.

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   262[m[K	#define REG_TX_ADDR_PTR            (0x84)       /* [01;31m[KTXFDPR[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   745[m[K	    driver transmit buffers memory to the [01;31m[KTxFIFO[m[K.
[01;32m[K  1289[m[K		#define ETH_MAC_TXFIFO_WRITING  ((uint32_t)0x00300000)  /* Tx FIFO read status: Writing the received TxStatus or flushing the [01;31m[KTxFIFO[m[K */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2047[m[K			/* All data between [01;31m[KtxMid[m[K and rxHead will now be passed to the sliding

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   220[m[K	#define REG_TX_MEM_INFO            (0x78)       /* [01;31m[KTXMIR[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   295[m[K	#define REG_TX_TOTAL_FRAME_SIZE    (0x9E)       /* [01;31m[KTXNTFSR[m[K */

[1;34m./portable/NetworkInterface/mw300_rd/NetworkInterface.c[39m

[01;32m[K   204[m[K	    pkt_len = 22 + 4; /* sizeof([01;31m[KTxPD[m[K) + INTF_HEADER_LEN */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   119[m[K	#define   QMU_SOFTWARE_RESET          (0x0002)    /* QMU soft reset (clear [01;31m[KTxQ[m[K, RxQ) */
[01;32m[K   167[m[K	#define REG_QDR_DUMMY              (0x00)       /* Dummy address to access QMU RxQ, [01;31m[KTxQ[m[K */
[01;32m[K   221[m[K	#define   TX_MEM_AVAILABLE_MASK       (0x1FFF)    /* The amount of memory available in [01;31m[KTXQ[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K    97[m[K						// TX step12: disable [01;31m[KTXQ[m[K write access.
[01;32m[K    97[m[K						// TX step12: disable [01;31m[KTXQ[m[K write access.
[01;32m[K    99[m[K						// TX step12.1: enqueue frame in [01;31m[KTXQ[m[K.
[01;32m[K    99[m[K						// TX step12.1: enqueue frame in [01;31m[KTXQ[m[K.
[01;32m[K   678[m[K				/* TX step12: disable [01;31m[KTXQ[m[K write access. */
[01;32m[K   702[m[K				/* TX step12: disable [01;31m[KTXQ[m[K write access. */
[01;32m[K   851[m[K					/* TX step1: check if [01;31m[KTXQ[m[K memory size is available for transmit. */
[01;32m[K   876[m[K						/* TX step3: enable [01;31m[KTXQ[m[K write access. */
[01;32m[K   959[m[K				/* TX step12: disable [01;31m[KTXQ[m[K write access. */
[01;32m[K   964[m[K				/* TX step12.1: enqueue frame in [01;31m[KTXQ[m[K. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   243[m[K	#define REG_TXQ_CMD                (0x80)       /* [01;31m[KTXQCR[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   181[m[K	#define REG_TX_STATUS              (0x72)       /* [01;31m[KTXSR[m[K */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K  1288[m[K		#define ETH_MAC_TXFIFO_WAITING  ((uint32_t)0x00200000)  /* Tx FIFO read status: Waiting for [01;31m[KTxStatus[m[K from MAC transmitter */
[01;32m[K  1289[m[K		#define ETH_MAC_TXFIFO_WRITING  ((uint32_t)0x00300000)  /* Tx FIFO read status: Writing the received [01;31m[KTxStatus[m[K or flushing the TxFIFO */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1617[m[K					of [01;31m[KtxStream[m[K may be advanced. */
[01;32m[K  1803[m[K			/* lMax would indicate the size of the [01;31m[KtxStream[m[K. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1370[m[K			 * starting from the head position.  Advance the tail pointer in [01;31m[KtxStream[m[K.
[01;32m[K  1810[m[K			along with the position in the [01;31m[KtxStream[m[K.
[01;32m[K  1835[m[K					/* Translate the position in [01;31m[KtxStream[m[K to an offset from the tail
[01;32m[K  1839[m[K					/* Here data is copied from the [01;31m[KtxStream[m[K in 'peek' mode.  Only
[01;32m[K  2037[m[K		/* A [01;31m[KtxStream[m[K has been created already, see if the socket has new data for
[01;32m[K  2536[m[K			[01;31m[KtxStream[m[K. */
[01;32m[K  2540[m[K				confirmed, and because there is new space in the [01;31m[KtxStream[m[K, the

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   126[m[K		 * Create a [01;31m[KtxStream[m[K or a rxStream, depending on the parameter 'xIsInputStream'
[01;32m[K  2795[m[K					/* If [01;31m[KtxStream[m[K has space. */
[01;32m[K  3451[m[K		/* Returns the number of bytes that may be added to [01;31m[KtxStream[m[K */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   712[m[K	 * data will be added to the rxStream, otherwise to the [01;31m[KtXStream[m[K.  Normally data

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   267[m[K	/* Returns the number of bytes that may be added to [01;31m[KtxStream[m[K */
[01;32m[K   281[m[K	/* Returns the number of outstanding bytes in [01;31m[KtxStream[m[K. */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   191[m[K	 * apPos will point to a location with the circular data buffer: [01;31m[KtxStream[m[K */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   602[m[K		https://www.ietf.org/rfc/rfc2131.[01;31m[Ktxt[m[K, Transaction ID should be a random
[01;32m[K   602[m[K		https://www.ietf.org/rfc/rfc2131.[01;31m[Ktxt[m[K, Transaction ID should be a random

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K    41[m[K	 * The GNU General Public License Version 2: http://www.FreeRTOS.org/gpl-2.0.[01;31m[Ktxt[m[K
[01;32m[K    41[m[K	 * The GNU General Public License Version 2: http://www.FreeRTOS.org/gpl-2.0.[01;31m[Ktxt[m[K

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   240[m[K	See README.[01;31m[KTXT[m[K in this folder. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   636[m[K		/* If no free [01;31m[KTxTd[m[K, buffer can't be sent, schedule the wakeup callback */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   678[m[K		/* If no free [01;31m[KTxTd[m[K, buffer can't be sent, schedule the wakeup callback */

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K   151[m[K	 * are multiple command interpreters running at once (for example, one on a [01;31m[KUART[m[K

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   516[m[K		/* Get pointer to [01;31m[KUART[m[K PDC register base. */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   943[m[K	    /* This is the has value of '[01;31m[KucAddress[m[K' */

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    46[m[K		uint8_t [01;31m[KucAge[m[K;				/* A value that is periodically decremented but can also be refreshed by active communication.  The ARP cache entry is removed if the value reaches zero. */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   273[m[K					given MAC address.[01;31m[KucBytes[m[K.  If found, either of the two entries

[1;34m./test/unit-test/stubs/FreeRTOS_ARP_stubs.c[39m

[01;32m[K    39[m[K		pxMACAddress->[01;31m[KucBytes[m[K[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU );	/* Use 7 bits. */
[01;32m[K    40[m[K		pxMACAddress->[01;31m[KucBytes[m[K[ 4 ] = ( uint8_t ) ( ( ulIP >>  8 ) & 0xffU );	/* Use 8 bits. */
[01;32m[K    41[m[K		pxMACAddress->[01;31m[KucBytes[m[K[ 5 ] = ( uint8_t ) ( ( ulIP       ) & 0xffU );	/* Use 8 bits. */
[01;32m[K   102[m[K		/* .[01;31m[KucBytes[m[K : */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K    59[m[K		/* .[01;31m[KucBytes[m[K : */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1528[m[K		pxMACAddress->[01;31m[KucBytes[m[K[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU );	/* Use 7 bits. */
[01;32m[K  1529[m[K		pxMACAddress->[01;31m[KucBytes[m[K[ 4 ] = ( uint8_t ) ( ( ulIP >>  8 ) & 0xffU );	/* Use 8 bits. */
[01;32m[K  1530[m[K		pxMACAddress->[01;31m[KucBytes[m[K[ 5 ] = ( uint8_t ) ( ( ulIP       ) & 0xffU );	/* Use 8 bits. */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1727[m[K							/* The [01;31m[KucCurrentIPAddress[m[K value increments without bound and will rollover, */

[1;34m./test/unit-test/stubs/FreeRTOS_ARP_stubs.c[39m

[01;32m[K   107[m[K			0x00, 									/* [01;31m[KucDifferentiatedServicesCode[m[K. */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K    64[m[K			0x00, 									/* [01;31m[KucDifferentiatedServicesCode[m[K. */
[01;32m[K   135[m[K					xIPHeader.[01;31m[KucDifferentiatedServicesCode[m[K

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    94[m[K		uint8_t [01;31m[KucDifferentiatedServicesCode[m[K; /*  1 + 1 =  2 */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1678[m[K							/* Not clearing '[01;31m[KucDupAckCount[m[K' yet as more SACK's might come in

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    57[m[K					[01;31m[KucDupAckCount[m[K : 8,	/* Counts the number of times that a higher segment was ACK'd. After 3 times a Fast Retransmission takes place */

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K   451[m[K	The caller has set the values in 'xPhyPreferences' ([01;31m[KucDuplex[m[K and ucSpeed).

[1;34m./portable/NetworkInterface/include/phyHandling.h[39m

[01;32m[K    71[m[K	/* Values for PhyProperties_t::[01;31m[KucDuplex[m[K : */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   648[m[K		ipMAC_ADDRESS_LENGTH_BYTES, 			/* [01;31m[KucHardwareAddressLength[m[K. */
[01;32m[K   672[m[K			xARPHeader.[01;31m[KucHardwareAddressLength[m[K;

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    79[m[K		uint8_t [01;31m[KucHardwareAddressLength[m[K;		/*  4 +  1 =  5 */

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.c[39m

[01;32m[K    34[m[K	 * [01;31m[KucIsCachedMemory[m[K( pucBuffer ) returns non-zero if a given pointer is NOT

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.h[39m

[01;32m[K     9[m[K	 * [01;31m[KucIsCachedMemory[m[K( pucBuffer ) returns non-zero if a given pointer is NOT

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1906[m[K				if( pxSocket->u.xTCP.[01;31m[KucKeepRepCount[m[K > 3U ) /*_RB_ Magic number. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   499[m[K				/* The next field only serves to give '[01;31m[KucLastPacket[m[K' a correct

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1348[m[K						/* [01;31m[KucLen[m[K should be 0 by now. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1166[m[K			/* Avoid integer underflow in computation of [01;31m[KucLength[m[K. */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K  1035[m[K			[01;31m[KucLinkLayerIPAddress[m[K[ 0 ] = ( uint8_t )1 + ( uint8_t )( ulNumbers[ 0 ] % 0xFDU );		/* get value 1..254 for IP-address 3rd byte of IP address to try. */
[01;32m[K  1036[m[K			[01;31m[KucLinkLayerIPAddress[m[K[ 1 ] = ( uint8_t )1 + ( uint8_t )( ulNumbers[ 1 ] % 0xFDU );		/* get value 1..254 for IP-address 4th byte of IP address to try. */

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K   143[m[K	/* [01;31m[KucMACAddress[m[K as it appears in main.c */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   284[m[K			uint8_t [01;31m[KucNameOffset[m[K;   /* The name is not repeated in the answer, only the offset is given with "0xc0 <offs>" */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1544[m[K					/* Someone is looking for a device with [01;31m[KucNBNSName[m[K,

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1731[m[K							/*  that [01;31m[KucNumIPAddresses[m[K has been corrupted.                        */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  2051[m[K			/* lint: [01;31m[KucOctet[m[K has been set because xResult == pdPASS. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1471[m[K			pxTCPHeader->[01;31m[KucOptdata[m[K[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
[01;32m[K  1472[m[K			pxTCPHeader->[01;31m[KucOptdata[m[K[ uxOptionsLength + 3U ] = 2U;	/* 2: length of this option. */

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K    52[m[K			data from pxTCPHeader->[01;31m[KucOptdata[m[K to pxTCPWindow->ulOptionsData.*/

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   144[m[K		uint8_t  [01;31m[KucOptdata[m[K[ipSIZE_TCP_OPTIONS];		/* + 12 = 32 */

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K    49[m[K			/* [01;31m[KucOptionLength[m[K is the number of valid bytes in ulOptionsData[].

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   119[m[K		uint8_t [01;31m[KucOptionLength[m[K;				/* Number of valid bytes in ulOptionsData[] */

[1;34m./test/unit-test/stubs/FreeRTOS_ARP_stubs.c[39m

[01;32m[K   112[m[K			ipPROTOCOL_UDP, 						/* [01;31m[KucProtocol[m[K. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   350[m[K					pxSocket->[01;31m[KucProtocol[m[K		= ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
[01;32m[K  3895[m[K					}	/* if( pxSocket->[01;31m[KucProtocol[m[K == FREERTOS_IPPROTO_TCP ) */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K    69[m[K			ipPROTOCOL_UDP, 						/* [01;31m[KucProtocol[m[K. */
[01;32m[K   140[m[K					xIPHeader.[01;31m[KucProtocol[m[K

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    99[m[K		uint8_t [01;31m[KucProtocol[m[K;                   /*  9 + 1 = 10 */
[01;32m[K   636[m[K		uint8_t [01;31m[KucProtocol[m[K; /* choice of FREERTOS_IPPROTO_UDP/TCP */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   649[m[K		ipIP_ADDRESS_LENGTH_BYTES, 				/* [01;31m[KucProtocolAddressLength[m[K. */
[01;32m[K   673[m[K			xARPHeader.[01;31m[KucProtocolAddressLength[m[K;

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    80[m[K		uint8_t [01;31m[KucProtocolAddressLength[m[K;		/*  5 +  1 =  6 */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   553[m[K			uint8_t [01;31m[KucRepCount[m[K;		/* Send repeat count, for retransmissions

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    83[m[K		uint8_t [01;31m[KucSenderProtocolAddress[m[K[ 4 ];	/* 14 +  4 = 18  */

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K   451[m[K	The caller has set the values in 'xPhyPreferences' (ucDuplex and [01;31m[KucSpeed[m[K).

[1;34m./portable/NetworkInterface/include/phyHandling.h[39m

[01;32m[K    61[m[K	/* Values for PhyProperties_t::[01;31m[KucSpeed[m[K : */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2709[m[K				( pxTCPHeader->[01;31m[KucTCPFlags[m[K == tcpTCP_FLAG_ACK ) )		/* There are no other flags than an ACK. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   138[m[K		uint8_t  [01;31m[KucTCPFlags[m[K;		/* +  1 = 14 */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   634[m[K				[01;31m[KucTCPOffset[m[K = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
[01;32m[K  1142[m[K	 * that: ((pxTCPHeader->[01;31m[KucTCPOffset[m[K & 0xf0) > 0x50), meaning that the TP header
[01;32m[K  1951[m[K			pxProtocolHeaders->xTCPHeader.[01;31m[KucTCPOffset[m[K = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
[01;32m[K  2919[m[K					[01;31m[KucTCPOffset[m[K = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   137[m[K		uint8_t  [01;31m[KucTCPOffset[m[K;		/* +  1 = 13 */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1515[m[K	BaseType_t bBefore = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.[01;31m[KucTCPState[m[K ) );	/* Was it connected ? */
[01;32m[K  2708[m[K				( pxSocket->u.xTCP.[01;31m[KucTCPState[m[K == ( uint8_t ) eESTABLISHED ) &&	/* Connection established. */
[01;32m[K  3161[m[K				}	/* if( pxSocket->u.xTCP.[01;31m[KucTCPState[m[K == eTCP_LISTEN ). */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   556[m[K			uint8_t [01;31m[KucTCPState[m[K;		/* TCP state: see eTCP_STATE */

[1;34m./test/unit-test/stubs/FreeRTOS_ARP_stubs.c[39m

[01;32m[K   111[m[K			ipconfigUDP_TIME_TO_LIVE, 				/* [01;31m[KucTimeToLive[m[K */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K    68[m[K			ipconfigUDP_TIME_TO_LIVE, 				/* [01;31m[KucTimeToLive[m[K */
[01;32m[K   139[m[K					xIPHeader.[01;31m[KucTimeToLive[m[K

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    98[m[K		uint8_t [01;31m[KucTimeToLive[m[K;                 /*  8 + 1 =  9 */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1865[m[K					/* As '[01;31m[KucTransmitCount[m[K' has a minimum of 1, take 2 * RTT */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    56[m[K					[01;31m[KucTransmitCount[m[K : 8,/* Number of times the segment has been transmitted, used to calculate the RTT */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1928[m[K			/* Update the checksum because the [01;31m[KucTypeOfMessage[m[K member in the header

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   110[m[K		uint8_t [01;31m[KucTypeOfMessage[m[K;   /* 0 + 1 = 1 */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   111[m[K		uint8_t [01;31m[KucTypeOfService[m[K;   /* 1 + 1 = 2 */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   253[m[K						"[01;31m[KucValid[m[K == pdFALSE". */
[01;32m[K   271[m[K					doesn't match.  Might be an entry with [01;31m[KucValid[m[K=pdFALSE, waiting
[01;32m[K   298[m[K				Shouldn't we test for xARPCache[ x ].[01;31m[KucValid[m[K == pdFALSE here ? */

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    47[m[K	    uint8_t [01;31m[KucValid[m[K;			/* pdTRUE: xMACAddress is valid, pdFALSE: waiting for ARP reply */

[1;34m./test/unit-test/stubs/FreeRTOS_ARP_stubs.c[39m

[01;32m[K   106[m[K			ipIP_VERSION_AND_HEADER_LENGTH_BYTE, 	/* [01;31m[KucVersionHeaderLength[m[K. */

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K   366[m[K			The lowest four bits of '[01;31m[KucVersionHeaderLength[m[K' indicate the IP-header

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K    63[m[K			ipIP_VERSION_AND_HEADER_LENGTH_BYTE, 	/* [01;31m[KucVersionHeaderLength[m[K. */
[01;32m[K   134[m[K					xIPHeader.[01;31m[KucVersionHeaderLength[m[K

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1725[m[K						pxIPHeader->[01;31m[KucVersionHeaderLength[m[K = ( pxIPHeader->[01;31m[KucVersionHeaderLength[m[K & 0xF0U ) | /* High nibble is the version. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    93[m[K		uint8_t [01;31m[KucVersionHeaderLength[m[K;        /*  0 + 1 =  1 */

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   112[m[K		uint8_t [01;31m[KucVersionHeaderLength[m[K;

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1552[m[K						/* The field xDataLength was set to the total length of the [01;31m[KUDP[m[K packet,
[01;32m[K  1679[m[K				/* calculate the [01;31m[KUDP[m[K checksum for outgoing package */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   213[m[K			a different netmask will also be stored.  After when replying to a [01;31m[KUDP[m[K

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K    52[m[K		part of the DHCP packet is 240 bytes, and the IP/[01;31m[KUDP[m[K headers take 28 bytes. */
[01;32m[K   120[m[K	DHCPv4 uses [01;31m[KUDP[m[K port number  68 for clients and port number  67 for servers.
[01;32m[K   157[m[K	/* The [01;31m[KUDP[m[K socket used for all incoming and outgoing DHCP traffic. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K    59[m[K	/* If the network card/driver includes checksum offloading (IP/TCP/[01;31m[KUDP[m[K checksums)
[01;32m[K   156[m[K	 * stack can only send a [01;31m[KUDP[m[K message to a remove IP address if it knowns the MAC
[01;32m[K   158[m[K	 * contact the remote IP address.  When a [01;31m[KUDP[m[K message is received from a remote IP
[01;32m[K   159[m[K	 * address the MAC address and IP address are added to the ARP cache.  When a [01;31m[KUDP[m[K
[01;32m[K   161[m[K	 * cache then the [01;31m[KUDP[m[K message is replaced by a ARP message that solicits the
[01;32m[K   217[m[K	/* Defines the Time To Live (TTL) values used in outgoing [01;31m[KUDP[m[K packets. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   263[m[K	 * - [01;31m[KUDP[m[K/TCP: for setting the first port number to be used, in case a socket
[01;32m[K   270[m[K	 * End of: HT Added some macro defaults for the PLUS-[01;31m[KUDP[m[K project
[01;32m[K   327[m[K		 * for each [01;31m[KUDP[m[K socket.

[1;34m./test/cbmc/proofs/UDP/vProcessGeneratedUDPPacket/vProcessGeneratedUDPPacket_harness.c[39m

[01;32m[K    76[m[K		/* Assume that the size of packet must be greater than that of [01;31m[KUDP[m[K-Packet and less than

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K    39[m[K	* The bottom of this file contains some constants specific to running the [01;31m[KUDP[m[K
[01;32m[K   146[m[K	 * macros are defined to gather some [01;31m[KUDP[m[K stack statistics that can then be viewed
[01;32m[K   225[m[K	/* The [01;31m[KUDP[m[K port to which print messages are sent. */

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K    58[m[K	/* If the network card/driver includes checksum offloading (IP/TCP/[01;31m[KUDP[m[K checksums)
[01;32m[K   155[m[K	 * stack can only send a [01;31m[KUDP[m[K message to a remove IP address if it knowns the MAC
[01;32m[K   157[m[K	 * contact the remote IP address.  When a [01;31m[KUDP[m[K message is received from a remote IP
[01;32m[K   158[m[K	 * address the MAC address and IP address are added to the ARP cache.  When a [01;31m[KUDP[m[K
[01;32m[K   160[m[K	 * cache then the [01;31m[KUDP[m[K message is replaced by a ARP message that solicits the
[01;32m[K   222[m[K	/* Defines the Time To Live (TTL) values used in outgoing [01;31m[KUDP[m[K packets. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K    95[m[K	 * TCP and [01;31m[KUDP[m[K each have their own series of port numbers
[01;32m[K   120[m[K	 * and find the size of the socket space, which is different for [01;31m[KUDP[m[K and TCP
[01;32m[K   195[m[K			/* Socket has a wrong type ([01;31m[KUDP[m[K != TCP). */
[01;32m[K   235[m[K			/* Check if the [01;31m[KUDP[m[K socket-list has been initialised. */
[01;32m[K   251[m[K				/* In case a [01;31m[KUDP[m[K socket is created, do not allocate space for TCP data. */
[01;32m[K   294[m[K			size depends on the type of socket: [01;31m[KUDP[m[K sockets need less space.  A
[01;32m[K   350[m[K					pxSocket->ucProtocol		= ( uint8_t ) xProtocol; /* protocol: [01;31m[KUDP[m[K or TCP */
[01;32m[K   636[m[K	 * ([01;31m[KUDP[m[K)
[01;32m[K   950[m[K	 * be used for both [01;31m[KUDP[m[K and TCP sockets.  The actual binding will be performed
[01;32m[K  1449[m[K				/* Turn calculating of the [01;31m[KUDP[m[K checksum on/off for this socket. If pvOptionValue
[01;32m[K  1469[m[K					case FREERTOS_SO_UDP_RECV_HANDLER:	/* Install a callback for receiving [01;31m[KUDP[m[K data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
[01;32m[K  1470[m[K					case FREERTOS_SO_UDP_SENT_HANDLER:	/* Install a callback for sending [01;31m[KUDP[m[K data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
[01;32m[K  1493[m[K								protocol, because only [01;31m[KUDP[m[K socket can be created. */
[01;32m[K  2143[m[K		 * [01;31m[KUDP[m[K message and see if there is any [01;31m[KUDP[m[K socket bound to a given port
[01;32m[K  3888[m[K						/* Select events for [01;31m[KUDP[m[K are simpler. */
[01;32m[K  3894[m[K						/* The WRITE and EXCEPT bits are not used for [01;31m[KUDP[m[K */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   172[m[K	#define   TX_CTRL_UDP_CHECKSUM        (0x0080)    /* Enable [01;31m[KUDP[m[K frame checksum generation */
[01;32m[K   189[m[K	#define   RX_CTRL_UDP_CHECKSUM        (0x4000)    /* Enable [01;31m[KUDP[m[K frame checksum verification */
[01;32m[K   208[m[K	#define   RX_CTRL_IPV6_UDP_NOCHECKSUM (0x0010)    /* No checksum generation and verification if IPv6 [01;31m[KUDP[m[K is fragment */
[01;32m[K   209[m[K	#define   RX_CTRL_IPV6_UDP_CHECKSUM   (0x0008)    /* Receive pass IPv6 [01;31m[KUDP[m[K frame with [01;31m[KUDP[m[K checksum is zero */
[01;32m[K   210[m[K	#define   RX_CTRL_UDP_LITE_CHECKSUM   (0x0004)    /* Enable [01;31m[KUDP[m[K Lite frame checksum generation and verification */
[01;32m[K   228[m[K	#define   RX_UDP_ERROR                (0x0400)    /* [01;31m[KUDP[m[K checksum field doesn't match */

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K   235[m[K				It can only calculate protocol checksums of [01;31m[KUDP[m[K and TCP,

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   134[m[K	  RoReg   GMAC_UCE;        /**< \brief (Gmac Offset: 0x1B0) [01;31m[KUDP[m[K Checksum Errors Register */
[01;32m[K   620[m[K	/* -------- GMAC_UCE : (GMAC Offset: 0x1B0) [01;31m[KUDP[m[K Checksum Errors Register -------- */
[01;32m[K   622[m[K	#define GMAC_UCE_UCKER_Msk (0xffu << GMAC_UCE_UCKER_Pos) /**< \brief (GMAC_UCE) [01;31m[KUDP[m[K Checksum Errors */
[01;32m[K   706[m[K	#define GMAC_ST1RPQ_UDPM_Msk (0xffffu << GMAC_ST1RPQ_UDPM_Pos) /**< \brief (GMAC_ST1RPQ[16]) [01;31m[KUDP[m[K Port Match */
[01;32m[K   709[m[K	#define GMAC_ST1RPQ_UDPE (0x1u << 29) /**< \brief (GMAC_ST1RPQ[16]) [01;31m[KUDP[m[K Port Match Enable */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   532[m[K				/* Set the DMA Tx descriptors checksum insertion for TCP, [01;31m[KUDP[m[K, and ICMP */
[01;32m[K   831[m[K					/* FreeRTOS_printf( ( "Drop: [01;31m[KUDP[m[K port %d -> %d\n", usSourcePort, usDestinationPort ) ); */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   491[m[K	  uint32_t             ChecksumOffload;           /*!< Selects or not the IPv4 checksum checking for received frame payloads' TCP/[01;31m[KUDP[m[K/ICMP headers.
[01;32m[K   804[m[K	#define ETH_DMATXDESC_CIC_TCPUDPICMP_SEGMENT  ((uint32_t)0x00800000U)  /*!< TCP/[01;31m[KUDP[m[K/ICMP Checksum Insertion calculated over segment only */
[01;32m[K   805[m[K	#define ETH_DMATXDESC_CIC_TCPUDPICMP_FULL     ((uint32_t)0x00C00000U)  /*!< TCP/[01;31m[KUDP[m[K/ICMP Checksum Insertion fully calculated */
[01;32m[K   941[m[K	  #define ETH_DMAPTPRXDESC_IPPT_UDP                      ((uint32_t)0x00000001U)  /* [01;31m[KUDP[m[K payload encapsulated in the IP datagram */
[01;32m[K  1497[m[K	#define ETH_DMATXDESC_CHECKSUMTCPUDPICMPSEGMENT  ((uint32_t)0x00800000U)   /*!< TCP/[01;31m[KUDP[m[K/ICMP checksum insertion. Pseudo header checksum is assumed to be present */
[01;32m[K  1498[m[K	#define ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL     ((uint32_t)0x00C00000U)   /*!< TCP/[01;31m[KUDP[m[K/ICMP checksum fully in hardware including pseudo header */
[01;32m[K  1754[m[K	  *     @arg ETH_DMATXDESC_CHECKSUMTCPUDPICMPSEGMENT : TCP/[01;31m[KUDP[m[K/ICMP checksum. Pseudo header checksum is assumed to be present
[01;32m[K  1755[m[K	  *     @arg ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL : TCP/[01;31m[KUDP[m[K/ICMP checksum fully in hardware including pseudo header

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K    54[m[K	[01;31m[KUDP[m[K packet.  This array defines the constant parts, allowing this part of the
[01;32m[K    84[m[K		/* Map the [01;31m[KUDP[m[K packet onto the start of the frame. */
[01;32m[K   114[m[K				/* Is it possible that the packet is not actually a [01;31m[KUDP[m[K packet
[01;32m[K   269[m[K			/* When refreshing the ARP cache with received [01;31m[KUDP[m[K packets we must be
[01;32m[K   287[m[K					/* The value of 'xDataLength' was proven to be at least the size of a [01;31m[KUDP[m[K packet in prvProcessIPPacket(). */
[01;32m[K   374[m[K				does open a [01;31m[KUDP[m[K socket to send a messages, this socket will be

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   936[m[K			the total size of a [01;31m[KUDP[m[K/IP header plus the size of the header in
[01;32m[K  1036[m[K				header fragment, which is used when sending [01;31m[KUDP[m[K packets. */
[01;32m[K  1606[m[K				/* Is the upper-layer checksum (TCP/[01;31m[KUDP[m[K/ICMP) correct? */
[01;32m[K  1632[m[K				/* Check if this is a [01;31m[KUDP[m[K packet without a checksum. */
[01;32m[K  1636[m[K					and so [01;31m[KUDP[m[K packets carrying a protocol checksum of 0, will
[01;32m[K  1714[m[K						/* From: the previous start of [01;31m[KUDP[m[K/ICMP/TCP data. */
[01;32m[K  1716[m[K						/* To: the usual start of [01;31m[KUDP[m[K/ICMP/TCP data at offset 20 (decimal ) from IP header. */
[01;32m[K  1745[m[K						packet. For [01;31m[KUDP[m[K packets, this will be done later in
[01;32m[K  1781[m[K							/* The IP packet contained a [01;31m[KUDP[m[K frame. */
[01;32m[K  1783[m[K							/* Map the buffer onto a [01;31m[KUDP[m[K-Packet struct to easily access the
[01;32m[K  1784[m[K							 * fields of [01;31m[KUDP[m[K packet. */
[01;32m[K  1796[m[K									/* Ensure that downstream [01;31m[KUDP[m[K packet handling has the lesser
[01;32m[K  1798[m[K									the sender's [01;31m[KUDP[m[K packet header payload length, minus the
[01;32m[K  1799[m[K									size of the [01;31m[KUDP[m[K header.
[01;32m[K  1801[m[K									The size of the [01;31m[KUDP[m[K packet structure in this implementation
[01;32m[K  1803[m[K									the IP header, and the size of the [01;31m[KUDP[m[K header. */
[01;32m[K  1819[m[K									/* Pass the packet payload to the [01;31m[KUDP[m[K sockets
[01;32m[K  2057[m[K					/* Expect at least a complete [01;31m[KUDP[m[K header. */
[01;32m[K  2071[m[K					/* Unhandled protocol, other than ICMP, IGMP, [01;31m[KUDP[m[K, or TCP. */
[01;32m[K  2229[m[K				/* Unhandled protocol, other than ICMP, IGMP, [01;31m[KUDP[m[K, or TCP. */
[01;32m[K  2274[m[K				/* Other incoming packet than [01;31m[KUDP[m[K. */
[01;32m[K  2308[m[K				/* For [01;31m[KUDP[m[K and TCP, sum the pseudo header, i.e. IP protocol + length
[01;32m[K  2332[m[K					/* In case of [01;31m[KUDP[m[K, a calculated checksum of 0x0000 is transmitted
[01;32m[K  2405[m[K	 *	 of the header's values to. It is often 0, but protocols like TCP or [01;31m[KUDP[m[K

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   218[m[K	/* The maximum [01;31m[KUDP[m[K payload length. */
[01;32m[K   265[m[K	/* The offset into a [01;31m[KUDP[m[K packet at which the [01;31m[KUDP[m[K data (payload) starts. */
[01;32m[K   303[m[K	/* Define a default [01;31m[KUDP[m[K packet header (declared in FreeRTOS_UDP_IP.c) */
[01;32m[K   368[m[K	/* ICMP packets are sent using the same function as [01;31m[KUDP[m[K packets.  The port
[01;32m[K   369[m[K	number is used to distinguish between the two, as 0 is an invalid [01;31m[KUDP[m[K port. */
[01;32m[K   451[m[K	 * The caller must ensure that pxNetworkBuffer->xDataLength is the [01;31m[KUDP[m[K packet 
[01;32m[K   458[m[K	 * Initialize the socket list data structures for TCP and [01;31m[KUDP[m[K. 
[01;32m[K   606[m[K												 * In case of a [01;31m[KUDP[m[K socket:
[01;32m[K   652[m[K		/* TCP/[01;31m[KUDP[m[K specific fields: */
[01;32m[K   683[m[K	 * Called when the application has generated a [01;31m[KUDP[m[K packet to send.
[01;32m[K   689[m[K	 * Works both for [01;31m[KUDP[m[K, ICMP and TCP packages
[01;32m[K   772[m[K	 * Returns a pointer to the original NetworkBuffer from a pointer to a [01;31m[KUDP[m[K

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   130[m[K		size_t xDataLength; 			/* Starts by holding the total Ethernet frame length, then the [01;31m[KUDP[m[K/TCP payload length. */
[01;32m[K   368[m[K		abbreviations TCP/[01;31m[KUDP[m[K are now written in capitals, and type names now end with "_t". */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   103[m[K	#define FREERTOS_SO_UDPCKSUM_OUT		( 2 )	 	/* Used to turn the use of the [01;31m[KUDP[m[K checksum by a socket on or off.  This also doubles as part of an 8-bit bitwise socket option. */
[01;32m[K   114[m[K		#define FREERTOS_SO_UDP_RECV_HANDLER	( 9 )		/* Install a callback for receiving [01;31m[KUDP[m[K data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
[01;32m[K   115[m[K		#define FREERTOS_SO_UDP_SENT_HANDLER	( 10 )		/* Install a callback for sending [01;31m[KUDP[m[K data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
[01;32m[K   126[m[K		#define FREERTOS_SO_UDP_MAX_RX_PACKETS	( 16 )		/* This option helps to limit the maximum number of packets a [01;31m[KUDP[m[K socket will buffer */
[01;32m[K   229[m[K		/* Returns true if an [01;31m[KUDP[m[K socket exists bound to mentioned port number. */
[01;32m[K   339[m[K		 * Reception handler for a [01;31m[KUDP[m[K socket

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   266[m[K	 * - [01;31m[KUDP[m[K/TCP: for setting the first port number to be used, in case a socket
[01;32m[K   273[m[K	 * End of: HT Added some macro defaults for the PLUS-[01;31m[KUDP[m[K project
[01;32m[K   335[m[K	/* Configuration to control whether [01;31m[KUDP[m[K packets with 
[01;32m[K   338[m[K	 * If set to 1, the stack will accept [01;31m[KUDP[m[K packets that have their checksum 
[01;32m[K   340[m[K	 * If set to 0, the stack will drop [01;31m[KUDP[m[K packets that have their checksum value
[01;32m[K   357[m[K		 * for each [01;31m[KUDP[m[K socket.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   810[m[K	#define ETH_DMATXDESC_ES                      ((uint32_t)0x00008000U)  /*!< Error summary: OR of the following bits: [01;31m[KUE[m[K || ED || EC || LCO || NC || LCA || FF || JT */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1812[m[K			Because some TCP-stacks (like [01;31m[KuIP[m[K) use it for flow-control. */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   349[m[K		  to [01;31m[KuIP[m[K, and traffic to the real IP address to be

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K   317[m[K																			to [01;31m[KuIP[m[K, and traffic to the real IP address to be

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   136[m[K		uint32_t [01;31m[KulAckNr[m[K;   	 	/* +  4 = 12 */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   331[m[K	 * \param [01;31m[KulActualLength[m[K the total amount of data to write.

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   396[m[K		if( [01;31m[KulAddressToLookup[m[K == ipLLMNR_IP_ADDR )	/* Is in network byte order. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2435[m[K		[01;31m[KulAlignBits[m[K = ( ( ( uint32_t ) pucNextData ) & 0x03U ); /*lint !e9078 !e923*/	/* gives 0, 1, 2, or 3 */

[1;34m./test/cbmc/proofs/ARP/ulARPRemoveCacheEntryByMac/ulARPRemoveCacheEntryByMac_harness.c[39m

[01;32m[K    16[m[K		/* The pointer passed to [01;31m[KulARPRemoveCacheEntryByMac[m[K cannot be NULL

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   412[m[K			( *pulIPAddress == xNetworkAddressing.[01;31m[KulBroadcastAddress[m[K ) )/* Or a local broadcast address, eg 192.168.1.255? */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   587[m[K				FOnConnected_t pxHandleConnected;	/* Actually type: typedef void (* FOnConnected_t) (Socket_t xSocket, BaseType_t [01;31m[KulConnected[m[K ); */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   304[m[K		 *		static void vMyConnectHandler (Socket_t xSocket, BaseType_t [01;31m[KulConnected[m[K)

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1374[m[K				/* Just advancing the tail index, '[01;31m[KulCount[m[K' bytes have been confirmed. */
[01;32m[K  2539[m[K				/* Just advancing the tail index, '[01;31m[KulCount[m[K' bytes have been

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   146[m[K	 * '[01;31m[KulCurrentSequenceNumber[m[K == ulSequenceNumber', which means that exactly this
[01;32m[K   748[m[K			where '[01;31m[KulCurrentSequenceNumber[m[K == ulSequenceNumber', which means that
[01;32m[K   852[m[K						queue and increment [01;31m[KulCurrentSequenceNumber[m[K. */
[01;32m[K   919[m[K					/* The new segment is ahead of rx.[01;31m[KulCurrentSequenceNumber[m[K.  The
[01;32m[K   950[m[K							( unsigned ) ( ulSequenceNumber - [01;31m[KulCurrentSequenceNumber[m[K ),	/* want this signed */
[01;32m[K  1620[m[K					/* All segments below tx.[01;31m[KulCurrentSequenceNumber[m[K may be freed. */
[01;32m[K  2029[m[K			/* Return true if '[01;31m[KulCurrentSequenceNumber[m[K >= ulHighestSequenceNumber'
[01;32m[K  2030[m[K			'[01;31m[KulCurrentSequenceNumber[m[K' is the highest sequence number stored,

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2445[m[K				pxTCPWindow->tx.[01;31m[KulCurrentSequenceNumber[m[K++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
[01;32m[K  2535[m[K			starting at 'tx.[01;31m[KulCurrentSequenceNumber[m[K'.  Advance the tail pointer in
[01;32m[K  2926[m[K					pxTCPWindow->tx.[01;31m[KulCurrentSequenceNumber[m[K = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL; /* because we send a TCP_SYN. */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   110[m[K			uint32_t [01;31m[KulCurrentSequenceNumber[m[K;/* Tx/Rx: the oldest sequence number not yet confirmed, also SND.UNA / RCV.NXT

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   149[m[K					if( ( [01;31m[KulCurrentSPIStatus[m[K & SPI_SR_RXBUFF ) != 0 )

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2018[m[K				/* [01;31m[KulDelayMs[m[K contains the time to wait before a re-transmission. */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   668[m[K			xEthernetHeader.[01;31m[KulDestinationAddress[m[K

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   102[m[K		uint32_t [01;31m[KulDestinationIPAddress[m[K;      /* 16 + 4 = 20 */

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K   653[m[K		}	/* if( [01;31m[KulDoneMask[m[K != ( uint32_t) 0U ) */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   332[m[K	 * \param [01;31m[KulFIFOLength[m[K the size of the first pbuf to write from the pbuf chain.

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   112[m[K			uint32_t [01;31m[KulFINSequenceNumber[m[K;	 /* The sequence number which carried the FIN flag */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1504[m[K			( ( ulSequenceNumber >= [01;31m[KulFirst[m[K ) && ( ulSequenceNumber < ulLast ) in a

[1;34m./test/cbmc/proofs/CheckOptionsOuter/CheckOptionsOuter_harness.c[39m

[01;32m[K    87[m[K	    __CPROVER_assume( 8 <= buffer_size ); /* [01;31m[KulFirst[m[K and ulLast */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2926[m[K					pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.[01;31m[KulFirstSequenceNumber[m[K + 1UL; /* because we send a TCP_SYN. */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   107[m[K			uint32_t [01;31m[KulFirstSequenceNumber[m[K;	 /* Logging & debug: the first segment received/sent in this connection

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K   120[m[K	     * "If the zero copy calling semantics are used (the [01;31m[KulFlasg[m[K

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K    79[m[K	unsigned long [01;31m[KulGetRunTimeCounterValue[m[K( void ); /* Prototype of function that returns run time counter. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   811[m[K				of the free RX space.  At this moment, '[01;31m[KulHighestRxAllowed[m[K' would be the

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  2029[m[K			/* Return true if 'ulCurrentSequenceNumber >= [01;31m[KulHighestSequenceNumber[m[K'
[01;32m[K  2031[m[K			'[01;31m[KulHighestSequenceNumber[m[K' is the highest sequence number seen. */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   113[m[K			uint32_t [01;31m[KulHighestSequenceNumber[m[K;/* Sequence number of the right-most byte + 1 */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   711[m[K	 * Internal function to add streaming data to a TCP socket. If [01;31m[KulIn[m[K == true,

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   537[m[K				/* Let [01;31m[KulIndex[m[K/pxHead point to the next buffer. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   704[m[K	 * If '[01;31m[KulInternal[m[K' is true, it is called by the driver

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K   197[m[K		/* [01;31m[KulInterruptCause[m[K is used for convenience here.  A context switch is

[1;34m./test/unit-test/ConfigFiles/portmacro.h[39m

[01;32m[K   144[m[K	 * Raise a simulated interrupt represented by the bit mask in [01;31m[KulInterruptMask[m[K.

[1;34m./test/unit-test/stubs/FreeRTOS_ARP_stubs.c[39m

[01;32m[K    39[m[K		pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( [01;31m[KulIP[m[K >> 16 ) & 0x7fU );	/* Use 7 bits. */
[01;32m[K    40[m[K		pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( [01;31m[KulIP[m[K >>  8 ) & 0xffU );	/* Use 8 bits. */
[01;32m[K    41[m[K		pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( [01;31m[KulIP[m[K       ) & 0xffU );	/* Use 8 bits. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1528[m[K		pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( [01;31m[KulIP[m[K >> 16 ) & 0x7fU );	/* Use 7 bits. */
[01;32m[K  1529[m[K		pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( [01;31m[KulIP[m[K >>  8 ) & 0xffU );	/* Use 8 bits. */
[01;32m[K  1530[m[K		pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( [01;31m[KulIP[m[K       ) & 0xffU );	/* Use 8 bits. */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   270[m[K					/* Found an entry containing [01;31m[KulIPAddress[m[K, but the MAC address
[01;32m[K   281[m[K					[01;31m[KulIPAddress[m[K. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1811[m[K									/* Fields in pxNetworkBuffer (usPort, [01;31m[KulIPAddress[m[K) are network order. */

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    44[m[K		uint32_t [01;31m[KulIPAddress[m[K;		/* The IP address of an ARP cache entry. */
[01;32m[K    58[m[K	 * If [01;31m[KulIPAddress[m[K is already in the ARP cache table then reset the age of the
[01;32m[K    59[m[K	 * entry back to its maximum value.  If [01;31m[KulIPAddress[m[K is not already in the ARP
[01;32m[K    83[m[K	 * Look for [01;31m[KulIPAddress[m[K in the ARP cache.  If the IP address exists, copy the

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   128[m[K		uint32_t [01;31m[KulIPAddress[m[K;			/* Source or destination IP address, depending on usage scenario. */

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K   105[m[K		typedef void (* FOnDNSEvent ) ( const char * /* pcName */, void * /* pvSearchID */, uint32_t /* [01;31m[KulIPAddress[m[K */ );

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   213[m[K			uint32_t [01;31m[KulIPAddresses[m[K[ ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY ]; /* The IP address(es) of an ARP cache entry. */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1504[m[K			( ( ulSequenceNumber >= ulFirst ) && ( ulSequenceNumber < [01;31m[KulLast[m[K ) in a

[1;34m./test/cbmc/proofs/CheckOptionsOuter/CheckOptionsOuter_harness.c[39m

[01;32m[K    87[m[K	    __CPROVER_assume( 8 <= buffer_size ); /* ulFirst and [01;31m[KulLast[m[K */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K  1044[m[K			EP_DHCPData.[01;31m[KulLeaseTime[m[K = dhcpDEFAULT_LEASE_TIME;	 /*  don't care about lease time. just put anything. */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   751[m[K			and (ulSequenceNumber+[01;31m[KulLength[m[K).  Normally none will be found, because
[01;32m[K   753[m[K			'(ulSequenceNumber+[01;31m[KulLength[m[K)'. */
[01;32m[K   836[m[K	                    /* Clean up all sequence received between ulSequenceNumber and ulSequenceNumber + [01;31m[KulLength[m[K since they are duplicated.
[01;32m[K   838[m[K	                    So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + [01;31m[KulLength[m[K to be sequential and it is better to just

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   601[m[K	 * \brief Send [01;31m[KulLength[m[K bytes from pcFrom. This copies the buffer to one of the

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   651[m[K	 * \brief Send [01;31m[KulLength[m[K bytes from pcFrom. This copies the buffer to one of the

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2280[m[K			[01;31m[KulLength[m[K -= ( ( uint16_t ) uxIPHeaderLength ); /* normally minus 20 */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   499[m[K				and it will keep on checking the PHY and set '[01;31m[KulLinkStatusMask[m[K' when necessary. */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   634[m[K	const uint32_t [01;31m[KulMandatoryOptions[m[K = 2UL; /* DHCP server address, and the correct DHCP message type must be present in the options. */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   201[m[K	/* [01;31m[KulNextFreeTxDescriptor[m[K is declared volatile, because it is accessed from

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   762[m[K				'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < '[01;31m[KulNextSequenceNumber[m[K'

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1081[m[K						/* [01;31m[KulNextTxSequenceNumber[m[K is the sequence number of the next byte to

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   117[m[K		uint32_t [01;31m[KulNextTxSequenceNumber[m[K;	/* The sequence number given to the next byte to be added for transmission */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K  1035[m[K			ucLinkLayerIPAddress[ 0 ] = ( uint8_t )1 + ( uint8_t )( [01;31m[KulNumbers[m[K[ 0 ] % 0xFDU );		/* get value 1..254 for IP-address 3rd byte of IP address to try. */
[01;32m[K  1036[m[K			ucLinkLayerIPAddress[ 1 ] = ( uint8_t )1 + ( uint8_t )( [01;31m[KulNumbers[m[K[ 1 ] % 0xFDU );		/* get value 1..254 for IP-address 4th byte of IP address to try. */
[01;32m[K  1060[m[K			EP_DHCPData.xDHCPTxPeriod = pdMS_TO_TICKS( 3000UL + ( [01;31m[KulNumbers[m[K[ 0 ] & 0x3ffUL ) ); /*  do ARP test every (3 + 0-1024mS) seconds. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   713[m[K	 * will be written with [01;31m[KulOffset[m[K == 0, meaning: at the end of the FIFO.  When

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K    49[m[K			/* ucOptionLength is the number of valid bytes in [01;31m[KulOptionsData[m[K[].
[01;32m[K    50[m[K			[01;31m[KulOptionsData[m[K[] is initialized as uint32_t [01;31m[KulOptionsData[m[K[ipSIZE_TCP_OPTIONS/sizeof(uint32_t)].
[01;32m[K    52[m[K			data from pxTCPHeader->ucOptdata to pxTCPWindow->[01;31m[KulOptionsData[m[K.*/

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   119[m[K		uint8_t ucOptionLength;				/* Number of valid bytes in [01;31m[KulOptionsData[m[K[] */
[01;32m[K   125[m[K		uint32_t [01;31m[KulOptionsData[m[K[ipSIZE_TCP_OPTIONS/sizeof(uint32_t)];	/* Contains the options we send out */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   115[m[K		uint32_t [01;31m[KulOurSequenceNumber[m[K;		/* The SEQ number we're sending out */

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K   453[m[K	with [01;31m[KulPhyMask[m[K. */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   773[m[K									/* [01;31m[KulProcessed[m[K is not incremented in this case
[01;32m[K   781[m[K								/* [01;31m[KulProcessed[m[K is not incremented in this case
[01;32m[K   812[m[K									/* [01;31m[KulProcessed[m[K is not incremented in this case

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K    96[m[K	 * [01;31m[KulProtocol[m[K is either ipPROTOCOL_UDP or ipPROTOCOL_TCP

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   345[m[K	static inline unsigned long [01;31m[KulReadMDIO[m[K( unsigned /*short*/ usAddress )

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2704[m[K			if( ( [01;31m[KulReceiveLength[m[K > 0U ) &&							/* Data was sent to this socket. */
[01;32m[K  2721[m[K				if( ( [01;31m[KulReceiveLength[m[K < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message. */
[01;32m[K  2823[m[K	uint32_t [01;31m[KulReceiveLength[m[K;	/* Number of bytes contained in the TCP message. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   758[m[K			value of xTimeOut against [01;31m[KulRemainingTime[m[K. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   609[m[K					pxSocket->u.xTCP.[01;31m[KulRemoteIP[m[K,		/* IP address of remote machine. */
[01;32m[K  1909[m[K						pxSocket->u.xTCP.[01;31m[KulRemoteIP[m[K,			/* IP address of remote machine. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3167[m[K						xLocalPort, [01;31m[KulRemoteIP[m[K AND xRemotePort. */
[01;32m[K  3732[m[K						pxSocket->u.xTCP.[01;31m[KulRemoteIP[m[K,	/* IP address of remote machine */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   514[m[K			uint32_t [01;31m[KulRemoteIP[m[K;		/* IP address of remote machine */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1443[m[K				/* pxSegment is not NULL when [01;31m[KulReturn[m[K != 0UL. */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K    98[m[K		/* The field [01;31m[KulSenderProtocolAddress[m[K is badly aligned, copy byte-by-byte. */
[01;32m[K   652[m[K		0x00, 0x00, 0x00, 0x00, 				/* [01;31m[KulSenderProtocolAddress[m[K. */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   145[m[K	 * A segment has been received with sequence number '[01;31m[KulSequenceNumber[m[K', where
[01;32m[K   146[m[K	 * 'ulCurrentSequenceNumber == [01;31m[KulSequenceNumber[m[K', which means that exactly this
[01;32m[K   148[m[K	 * another segment with a sequence number between ([01;31m[KulSequenceNumber[m[K) and
[01;32m[K   149[m[K	 * ([01;31m[KulSequenceNumber[m[K+xLength).  Normally none will be found, because the next Rx
[01;32m[K   150[m[K	 * segment should have a sequence number equal to '([01;31m[KulSequenceNumber[m[K+xLength)'.
[01;32m[K   747[m[K			/* A segment has been received with sequence number '[01;31m[KulSequenceNumber[m[K',
[01;32m[K   748[m[K			where 'ulCurrentSequenceNumber == [01;31m[KulSequenceNumber[m[K', which means that
[01;32m[K   750[m[K			there is already another segment with a sequence number between ([01;31m[KulSequenceNumber[m[K)
[01;32m[K   751[m[K			and ([01;31m[KulSequenceNumber[m[K+ulLength).  Normally none will be found, because
[01;32m[K   753[m[K			'([01;31m[KulSequenceNumber[m[K+ulLength)'. */
[01;32m[K   762[m[K				'[01;31m[KulSequenceNumber[m[K' <= 'pxSegment->[01;31m[KulSequenceNumber[m[K' < 'ulNextSequenceNumber'
[01;32m[K   836[m[K	                    /* Clean up all sequence received between [01;31m[KulSequenceNumber[m[K and [01;31m[KulSequenceNumber[m[K + ulLength since they are duplicated.
[01;32m[K   838[m[K	                    So we cannot rely on the packets between [01;31m[KulSequenceNumber[m[K and [01;31m[KulSequenceNumber[m[K + ulLength to be sequential and it is better to just
[01;32m[K   950[m[K							( unsigned ) ( [01;31m[KulSequenceNumber[m[K - ulCurrentSequenceNumber ),	/* want this signed */
[01;32m[K  1504[m[K			( ( [01;31m[KulSequenceNumber[m[K >= ulFirst ) && ( [01;31m[KulSequenceNumber[m[K < ulLast ) in a
[01;32m[K  1776[m[K			/* Data was received at '[01;31m[KulSequenceNumber[m[K'.  See if it was expected

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   135[m[K		uint32_t [01;31m[KulSequenceNumber[m[K;	/* +  4 =  8 */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    46[m[K		uint32_t [01;31m[KulSequenceNumber[m[K;		/* The sequence number of the first byte in this packet */

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.c[39m

[01;32m[K    31[m[K	 * pucGetUncachedMemory( [01;31m[KulSize[m[K ) returns a trunc of this memory with a length

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.h[39m

[01;32m[K     6[m[K	 * pucGetUncachedMemory( [01;31m[KulSize[m[K ) returns a trunc of this memory with a length

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   101[m[K		uint32_t [01;31m[KulSourceIPAddress[m[K;           /* 12 + 4 = 16 */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   792[m[K			} /* if( ( [01;31m[KulStatus[m[K & nwRX_STATUS_ERROR_BITS ) != 0 ) */
[01;32m[K   793[m[K		} /* if( ( [01;31m[KulStatus[m[K & RDES_OWN ) == 0 ) */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2404[m[K	 *   [01;31m[KulSum[m[K: This argument provides a value to initialize the progressive summation

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   100[m[K		/* The field [01;31m[KulTargetProtocolAddress[m[K is well-aligned, a 32-bits copy. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    85[m[K		uint32_t [01;31m[KulTargetProtocolAddress[m[K;		/* 24 +  4 = 28  */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2534[m[K			/* [01;31m[KulTCPWindowTxAck[m[K() returns the number of bytes which have been acked,

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1809[m[K			/* [01;31m[KulTCPWindowTxGet[m[K will return the amount of data which may be sent

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1335[m[K					 * anymore. [01;31m[KulTCPWindowTxSack[m[K( ) takes care of this administration.
[01;32m[K  1369[m[K			/* [01;31m[KulTCPWindowTxSack[m[K( ) returns the number of bytes which have been acked

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   215[m[K			uint32_t [01;31m[KulTTL[m[K;                               /* Time-to-Live (in seconds) from the DNS server. */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1228[m[K				more new segment of size MSS.  xSize.[01;31m[KulTxWindowLength[m[K is the self-imposed

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K   635[m[K			"\t.[01;31m[KulType[m[K = 0x%lX, /* %s */\n",

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   808[m[K			As a side-effect, pxWindow->[01;31m[KulUserDataLength[m[K will get set to non-zero,
[01;32m[K   895[m[K				[01;31m[KulUserDataLength[m[K = 0. Not packet out-of-sync.  Just reply to it. */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   116[m[K		uint32_t [01;31m[KulUserDataLength[m[K;			/* Number of bytes in Rx buffer which may be passed to the user, after having received a 'missing packet' */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   705[m[K				//[01;31m[KulValue[m[K = ksz8851snl_reset_rx();

[1;34m./portable/NetworkInterface/include/phyHandling.h[39m

[01;32m[K    29[m[K	/* A generic user-provided function that writes '[01;31m[KulValue[m[K' to the

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   589[m[K			uint32_t [01;31m[KulWindowSize[m[K;		/* Current Window size advertised by peer */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   110[m[K			uint32_t ulCurrentSequenceNumber;/* Tx/Rx: the oldest sequence number not yet confirmed, also SND.[01;31m[KUNA[m[K / RCV.NXT

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K    51[m[K	/* Provided memory configured as [01;31m[Kuncached[m[K. */

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.c[39m

[01;32m[K    40[m[K	 * After "_end", 1 MB of [01;31m[Kuncached[m[K memory will be allocated for DMA transfers.
[01;32m[K    42[m[K	 * [01;31m[Kuncached[m[K memory.
[01;32m[K   152[m[K			/* Some objects want to be stored in [01;31m[Kuncached[m[K memory. Hence the 1 MB
[01;32m[K   153[m[K			address range that starts after "_end" is made [01;31m[Kuncached[m[K by setting
[01;32m[K   157[m[K			/* For experiments in the SDIO driver, make the remaining [01;31m[Kuncached[m[K memory

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K    66[m[K		The actual TX buffers are located in [01;31m[Kuncached[m[K RAM.
[01;32m[K   467[m[K		/* Clear all TX descriptors and assign [01;31m[Kuncached[m[K memory to each descriptor.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   618[m[K	  uint32_t             DescriptorSkipLength;        /*!< Specifies the number of word to skip between two [01;31m[Kunchained[m[K descriptors (Ring mode)

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K    47[m[K			/* The usage of #[01;31m[Kundef[m[K violates the rule. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K    85[m[K	#define GMAC_TXD_UNDERRUN     (1ul << 28) /**< Transmit [01;31m[Kunderrun[m[K */
[01;32m[K   201[m[K				b_underrun:1,        /** 28     Transmit [01;31m[Kunderrun[m[K */
[01;32m[K  1331[m[K			{ MK_PAIR( TUR   ) }, /* Enable transmit [01;31m[Kunderrun[m[K interrupt. */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K    86[m[K	#define GMAC_TXD_UNDERRUN     (1ul << 28) /**< Transmit [01;31m[Kunderrun[m[K */
[01;32m[K   202[m[K				b_underrun:1,        /** 28     Transmit [01;31m[Kunderrun[m[K */
[01;32m[K  1334[m[K			{ MK_PAIR( TUR   ) }, /* Enable transmit [01;31m[Kunderrun[m[K interrupt. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   327[m[K				GMAC_IER_TUR   | /* Enable transmit [01;31m[Kunderrun[m[K interrupt. */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   451[m[K	/* Handle GMAC [01;31m[Kunderrun[m[K or AHB errors. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K    88[m[K	#define GMAC_TXD_UNDERRUN     (1ul << 28) /**< Transmit [01;31m[Kunderrun[m[K */
[01;32m[K   225[m[K				b_underrun:1,        /** 28     Transmit [01;31m[Kunderrun[m[K */
[01;32m[K  1403[m[K			{ MK_PAIR( TUR   ) }, /* Enable transmit [01;31m[Kunderrun[m[K interrupt. */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   355[m[K				GMAC_IER_TUR   | /* Enable transmit [01;31m[Kunderrun[m[K interrupt. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2071[m[K					/* [01;31m[KUnhandled[m[K protocol, other than ICMP, IGMP, UDP, or TCP. */
[01;32m[K  2229[m[K				/* [01;31m[KUnhandled[m[K protocol, other than ICMP, IGMP, UDP, or TCP. */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   198[m[K	#define   RX_CTRL_UNICAST             (0x0020)    /* Receive [01;31m[Kunicast[m[K frames that match the device MAC address */
[01;32m[K   231[m[K	#define   RX_UNICAST                  (0x0020)    /* Received frame is a [01;31m[Kunicast[m[K frame */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K    66[m[K	#define GMAC_RXD_UNIHASH      (1ul << 29) /**< [01;31m[KUnicast[m[K hash match */
[01;32m[K   178[m[K				b_uni_hash_match:1,    /**  29     [01;31m[KUnicast[m[K hash match */

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K   196[m[K	#define GMAC_NCFGR_UNIHEN (0x1u << 7) /**< \brief (GMAC_NCFGR) [01;31m[KUnicast[m[K Hash Enable */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K    67[m[K	#define GMAC_RXD_UNIHASH      (1ul << 29) /**< [01;31m[KUnicast[m[K hash match */
[01;32m[K   179[m[K				b_uni_hash_match:1,    /**  29     [01;31m[KUnicast[m[K hash match */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K    69[m[K	#define GMAC_RXD_UNIHASH      (1ul << 29) /**< [01;31m[KUnicast[m[K hash match */
[01;32m[K   202[m[K				b_uni_hash_match:1,    /**  29     [01;31m[KUnicast[m[K hash match */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   513[m[K	  uint32_t             PassControlFrames;         /*!< Sets the forwarding mode of the control frames (including [01;31m[Kunicast[m[K and multicast PAUSE frames)
[01;32m[K   519[m[K	  uint32_t             DestinationAddrFilter;     /*!< Sets the destination filter mode for both [01;31m[Kunicast[m[K and multicast frames.
[01;32m[K   528[m[K	  uint32_t             UnicastFramesFilter;       /*!< Selects the [01;31m[KUnicast[m[K Frames filter mode: HashTableFilter/PerfectFilter/PerfectHashTableFilter.
[01;32m[K   548[m[K	                                                           [01;31m[Kunicast[m[K address and unique multicast address).
[01;32m[K  1180[m[K	/** @defgroup ETH_Unicast_Frames_Filter ETH [01;31m[KUnicast[m[K Frames Filter
[01;32m[K  1210[m[K	/** @defgroup ETH_Unicast_Pause_Frame_Detect ETH [01;31m[KUnicast[m[K Pause Frame Detect
[01;32m[K  1535[m[K	#define ETH_MMC_IT_RGUF      ((uint32_t)0x10020000U)  /*!< When Rx good [01;31m[Kunicast[m[K frames counter reaches half the maximum value */
[01;32m[K  1916[m[K	  * @brief  Enables any [01;31m[Kunicast[m[K packet filtered by the MAC address
[01;32m[K  1924[m[K	  * @brief  Disables any [01;31m[Kunicast[m[K packet filtered by the MAC address
[01;32m[K  2054[m[K	  *     @arg ETH_MMC_IT_RGUF  : When Rx good [01;31m[Kunicast[m[K frames counter reaches half the maximum value
[01;32m[K  2065[m[K	  *     @arg ETH_MMC_IT_RGUF  : When Rx good [01;31m[Kunicast[m[K frames counter reaches half the maximum value

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1162[m[K	  /* Set the HUC and HPF bits according to ETH [01;31m[KUnicastFramesFilter[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   528[m[K	  uint32_t             [01;31m[KUnicastFramesFilter[m[K;       /*!< Selects the Unicast Frames filter mode: HashTableFilter/PerfectFilter/PerfectHashTableFilter.

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1195[m[K	   /* Set the UP bit according to ETH [01;31m[KUnicastPauseFrameDetect[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   547[m[K	  uint32_t             [01;31m[KUnicastPauseFrameDetect[m[K;   /*!< Selects or not the MAC detection of the Pause frames (with MAC Address0

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K   493[m[K	        uint8_t [01;31m[KunsetMACAddr[m[K[ 6 ] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };     /* not set MAC address */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   376[m[K	#define   WAKEUP_TIME                 (0xFF00)    /* Min time (sec) wake-[01;31m[Kuo[m[K after detected energy */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   888[m[K		/* Leave space for the [01;31m[KUPD[m[K header. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2225[m[K		data.  This field is only be interpreted in segments with the [01;31m[KURG[m[K control

[1;34m./test/unit-test/ConfigFiles/pack_struct_start.h[39m

[01;32m[K    28[m[K	 * See the following [01;31m[KURL[m[K for an explanation of this file:

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K    25[m[K	* See the following [01;31m[KURL[m[K for configuration information.

[1;34m./test/unit-test/ConfigFiles/pack_struct_end.h[39m

[01;32m[K    28[m[K	 * See the following [01;31m[KURL[m[K for an explanation of this file:

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K    29[m[K	* See the following [01;31m[KURL[m[K for configuration information.

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K    20[m[K	 ***   [01;31m[KURL[m[K: http://www.FreeRTOS.org/contact  Active early adopters may, at   ***
[01;32m[K    20[m[K	 ***   [01;31m[KURL[m[K: http://www.FreeRTOS.org/contact  Active early adopters may, at   ***

[1;34m./portable/Compiler/Keil/pack_struct_start.h[39m

[01;32m[K    28[m[K	 * See the following [01;31m[KURL[m[K for an explanation of this file:

[1;34m./portable/Compiler/Keil/pack_struct_end.h[39m

[01;32m[K    28[m[K	 * See the following [01;31m[KURL[m[K for an explanation of this file:

[1;34m./portable/Compiler/Renesas/pack_struct_start.h[39m

[01;32m[K    28[m[K	 * See the following [01;31m[KURL[m[K for an explanation of this file:

[1;34m./portable/Compiler/Renesas/pack_struct_end.h[39m

[01;32m[K    28[m[K	 * See the following [01;31m[KURL[m[K for an explanation of this file:

[1;34m./portable/Compiler/GCC/pack_struct_start.h[39m

[01;32m[K    28[m[K	 * See the following [01;31m[KURL[m[K for an explanation of this file:

[1;34m./portable/Compiler/GCC/pack_struct_end.h[39m

[01;32m[K    28[m[K	 * See the following [01;31m[KURL[m[K for an explanation of this file:

[1;34m./portable/Compiler/MSVC/pack_struct_start.h[39m

[01;32m[K    28[m[K	 * See the following [01;31m[KURL[m[K for an explanation of this file:

[1;34m./portable/Compiler/MSVC/pack_struct_end.h[39m

[01;32m[K    28[m[K	 * See the following [01;31m[KURL[m[K for an explanation of this file:

[1;34m./portable/Compiler/CompilerName/pack_struct_start.h[39m

[01;32m[K    28[m[K	 * See the following [01;31m[KURL[m[K for an explanation of this file:

[1;34m./portable/Compiler/CompilerName/pack_struct_end.h[39m

[01;32m[K    28[m[K	 * See the following [01;31m[KURL[m[K for an explanation of this file:

[1;34m./portable/Compiler/IAR/pack_struct_start.h[39m

[01;32m[K    28[m[K	 * See the following [01;31m[KURL[m[K for an explanation of this file:

[1;34m./portable/Compiler/IAR/pack_struct_end.h[39m

[01;32m[K    28[m[K	 * See the following [01;31m[KURL[m[K for an explanation of this file:

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   256[m[K	 * FUNCTIONS IS AVAILABLE ON THE FOLLOWING [01;31m[KURL[m[K:

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   217[m[K	 * FUNCTIONS IS AVAILABLE ON THE FOLLOWING [01;31m[KURL[m[K:

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    95[m[K		application if ipconfigUSE_DHCP_HOOK is set to 1.  See the following [01;31m[KURL[m[K for

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1402[m[K							vSetField16( pxDNSMessageHeader, DNSMessage_t, [01;31m[KusAdditionalRRs[m[K, 0 );                 /* No additional info */

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   345[m[K	static inline unsigned long ulReadMDIO( unsigned /*short*/ [01;31m[KusAddress[m[K )

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1400[m[K							vSetField16( pxDNSMessageHeader, DNSMessage_t, [01;31m[KusAnswers[m[K, 1 );                       /* Provide a single answer */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1401[m[K							vSetField16( pxDNSMessageHeader, DNSMessage_t, [01;31m[KusAuthorityRRs[m[K, 0 );                  /* No authority */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   552[m[K			uint16_t [01;31m[KusBacklog[m[K;		/* In case of a listening socket: maximum number of concurrent connections on this port number */

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   132[m[K		uint16_t [01;31m[KusBoundPort[m[K;			/* The port to which a transmitting socket is bound. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   112[m[K		uint16_t [01;31m[KusChecksum[m[K;       /* 2 + 2 = 4 */
[01;32m[K   125[m[K		uint16_t [01;31m[KusChecksum[m[K;        /* 6 + 2 = 8 */
[01;32m[K   140[m[K		uint16_t [01;31m[KusChecksum[m[K;		/* +  2 = 18 */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   551[m[K			uint16_t [01;31m[KusChildCount[m[K;	/* In case of a listening socket: number of connections on this port number */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1410[m[K							vSetField16( pxAnswer, LLMNRAnswer_t, [01;31m[KusClass[m[K, dnsCLASS_IN );   /* 1: Class IN */
[01;32m[K  1589[m[K						vSetField16( pxAnswer, NBNSAnswer_t, [01;31m[KusClass[m[K, dnsNBNS_CLASS_IN ); /* Class */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1103[m[K			/* Set the values of usInitMSS / [01;31m[KusCurMSS[m[K for this socket. */
[01;32m[K  2721[m[K				if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.[01;31m[KusCurMSS[m[K ) ||	/* Received a small message. */
[01;32m[K  2722[m[K					( lRxSpace < ipNUMERIC_CAST( int32_t, 2U * pxSocket->u.xTCP.[01;31m[KusCurMSS[m[K ) ) )	/* There are less than 2 x MSS space in the Rx buffer. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3588[m[K				/* [01;31m[KusCurMSS[m[K is declared as uint16_t to save space.  FreeRTOS_mss()

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   549[m[K			uint16_t [01;31m[KusCurMSS[m[K;		/* Current Maximum Segment Size */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1591[m[K						vSetField16( pxAnswer, NBNSAnswer_t, [01;31m[KusDataLength[m[K, 6 );           /* 6 bytes including the length field */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   831[m[K					/* FreeRTOS_printf( ( "Drop: UDP port %d -> %d\n", usSourcePort, [01;31m[KusDestinationPort[m[K ) ); */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   123[m[K		uint16_t [01;31m[KusDestinationPort[m[K; /* 2 + 2 = 4 */
[01;32m[K   134[m[K		uint16_t [01;31m[KusDestinationPort[m[K;	/* +  2 =  4 */

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   390[m[K	//void numaker_eth_set_cb(eth_callback_t eth_cb, void *[01;31m[KuserData[m[K)
[01;32m[K   393[m[K	//    nu_userData = [01;31m[KuserData[m[K;

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1399[m[K							vSetField16( pxDNSMessageHeader, DNSMessage_t, [01;31m[KusFlags[m[K, dnsLLMNR_FLAGS_IS_REPONSE ); /* Set the response flag */
[01;32m[K  1576[m[K						vSetField16( pxMessage, DNSMessage_t, [01;31m[KusFlags[m[K, dnsNBNS_QUERY_RESPONSE_FLAGS ); /* 0x8500 */

[1;34m./test/unit-test/stubs/FreeRTOS_ARP_stubs.c[39m

[01;32m[K   110[m[K			0x00, 0x00, 							/* [01;31m[KusFragmentOffset[m[K. */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K    67[m[K			0x00, 0x00, 							/* [01;31m[KusFragmentOffset[m[K. */
[01;32m[K   138[m[K					xIPHeader.[01;31m[KusFragmentOffset[m[K

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    97[m[K		uint16_t [01;31m[KusFragmentOffset[m[K;            /*  6 + 2 =  8 */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   669[m[K			xEthernetHeader.[01;31m[KusFrameType[m[K;

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K   133[m[K					xEthernetHeader.[01;31m[KusFrameType[m[K

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    69[m[K		uint16_t [01;31m[KusFrameType[m[K;              /* 12 + 2 = 14 */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1930[m[K			[01;31m[KusGenerateChecksum[m[K(). */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   646[m[K		0x00, 0x01, 							/* [01;31m[KusHardwareType[m[K (ipARP_HARDWARE_TYPE_ETHERNET). */
[01;32m[K   670[m[K			xARPHeader.[01;31m[KusHardwareType[m[K;

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    77[m[K		uint16_t [01;31m[KusHardwareType[m[K;				/*  0 +  2 =  2 */

[1;34m./test/unit-test/stubs/FreeRTOS_ARP_stubs.c[39m

[01;32m[K   113[m[K			0x00, 0x00, 							/* [01;31m[KusHeaderChecksum[m[K. */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K    70[m[K			0x00, 0x00, 							/* [01;31m[KusHeaderChecksum[m[K. */
[01;32m[K   142[m[K					xIPHeader.[01;31m[KusHeaderChecksum[m[K

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   100[m[K		uint16_t [01;31m[KusHeaderChecksum[m[K;            /* 10 + 2 = 12 */

[1;34m./test/unit-test/stubs/FreeRTOS_ARP_stubs.c[39m

[01;32m[K   109[m[K			0x00, 0x00, 							/* [01;31m[KusIdentification[m[K. */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K    66[m[K			0x00, 0x00, 							/* [01;31m[KusIdentification[m[K. */
[01;32m[K   137[m[K					xIPHeader.[01;31m[KusIdentification[m[K

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    96[m[K		uint16_t [01;31m[KusIdentification[m[K;            /*  4 + 2 =  6 */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1397[m[K							/* We leave '[01;31m[KusIdentifier[m[K' and 'usQuestions' untouched */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   113[m[K		uint16_t [01;31m[KusIdentifier[m[K;     /* 4 + 2 = 6 */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1103[m[K			/* Set the values of [01;31m[KusInitMSS[m[K / usCurMSS for this socket. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   550[m[K			uint16_t [01;31m[KusInitMSS[m[K;		/* Initial maximum segment Size */

[1;34m./test/unit-test/stubs/FreeRTOS_ARP_stubs.c[39m

[01;32m[K   108[m[K			0x00, 0x00, 							/* [01;31m[KusLength[m[K. */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K    65[m[K			0x00, 0x00, 							/* [01;31m[KusLength[m[K. */
[01;32m[K   136[m[K					xIPHeader.[01;31m[KusLength[m[K

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    95[m[K		uint16_t [01;31m[KusLength[m[K;                    /*  2 + 2 =  4 */
[01;32m[K   124[m[K		uint16_t [01;31m[KusLength[m[K;          /* 4 + 2 = 6 */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   979[m[K			The desired port number will be passed in [01;31m[KusLocalPort[m[K. */
[01;32m[K  1107[m[K					/* And also store it in a socket field '[01;31m[KusLocalPort[m[K' in host-byte-order,
[01;32m[K  3731[m[K						pxSocket->[01;31m[KusLocalPort[m[K,		/* Local port on this machine */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   416[m[K					[01;31m[KusLocalPort[m[K. vSocketBind() will actually bind the socket and the

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   634[m[K		uint16_t [01;31m[KusLocalPort[m[K;		/* Local port on this machine */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   134[m[K		uint16_t [01;31m[KusMSS[m[K;						/* Current accepted MSS */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   135[m[K		uint16_t [01;31m[KusMSSInit[m[K;					/* MSS as configured by the socket owner */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   323[m[K			uint16_t [01;31m[KusNbFlags[m[K;     /* NetBIOS flags 0x6000 : IP-address, big-endian */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1300[m[K										[01;31m[KusNumARecordsStored[m[K++;    /* Track # of A records stored */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   650[m[K		0x00, 0x01, 							/* [01;31m[KusOperation[m[K (ipARP_REQUEST). */
[01;32m[K   674[m[K			xARPHeader.[01;31m[KusOperation[m[K;

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    81[m[K		uint16_t [01;31m[KusOperation[m[K;					/*  6 +  2 =  8 */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   132[m[K		uint16_t [01;31m[KusOurPortNumber[m[K;			/* Mostly for debugging/logging: our TCP port number */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   133[m[K		uint16_t [01;31m[KusPeerPortNumber[m[K;			/* debugging/logging: the peer's TCP port number */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1811[m[K									/* Fields in pxNetworkBuffer ([01;31m[KusPort[m[K, ulIPAddress) are network order. */

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   131[m[K		uint16_t [01;31m[KusPort[m[K;				/* Source or destination port, depending on usage scenario. */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   647[m[K		0x08, 0x00,								/* [01;31m[KusProtocolType[m[K. */
[01;32m[K   671[m[K			xARPHeader.[01;31m[KusProtocolType[m[K;

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    78[m[K		uint16_t [01;31m[KusProtocolType[m[K;				/*  2 +  2 =  4 */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1397[m[K							/* We leave 'usIdentifier' and '[01;31m[KusQuestions[m[K' untouched */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   610[m[K					pxSocket->u.xTCP.[01;31m[KusRemotePort[m[K ) );	/* Port on remote machine. */
[01;32m[K  1910[m[K						pxSocket->u.xTCP.[01;31m[KusRemotePort[m[K ) );	/* Port on remote machine. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3733[m[K						pxSocket->u.xTCP.[01;31m[KusRemotePort[m[K,	/* Port on remote machine */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   515[m[K			uint16_t [01;31m[KusRemotePort[m[K;		/* Port on remote machine */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   114[m[K		uint16_t [01;31m[KusSequenceNumber[m[K; /* 6 + 2 = 8 */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   831[m[K					/* FreeRTOS_printf( ( "Drop: UDP port %d -> %d\n", [01;31m[KusSourcePort[m[K, usDestinationPort ) ); */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   122[m[K		uint16_t [01;31m[KusSourcePort[m[K;      /* 0 + 2 = 2 */
[01;32m[K   133[m[K		uint16_t [01;31m[KusSourcePort[m[K;		/* +  2 =  2 */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2024[m[K			/* field '.[01;31m[KusTimeout[m[K' has already been set (by the

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1694[m[K							pxSocket->u.xTCP.[01;31m[KusTimeout[m[K = 1U; /* to set/clear bSendFullSize */
[01;32m[K  1717[m[K						pxSocket->u.xTCP.[01;31m[KusTimeout[m[K = 1U; /* to set/clear bRxStopped */
[01;32m[K  2649[m[K								pxSocket->u.xTCP.[01;31m[KusTimeout[m[K = 1U; /* because bLowWater is cleared. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   548[m[K			uint16_t [01;31m[KusTimeout[m[K;		/* Time (in ticks) after which this socket needs attention */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1409[m[K							vSetField16( pxAnswer, LLMNRAnswer_t, [01;31m[KusType[m[K, dnsTYPE_A_HOST ); /* Type A: host */
[01;32m[K  1588[m[K						vSetField16( pxAnswer, NBNSAnswer_t, [01;31m[KusType[m[K, [01;31m[KusType[m[K );            /* Type */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   141[m[K		uint16_t [01;31m[KusUrgent[m[K;			/* +  2 = 20 */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   139[m[K		uint16_t [01;31m[KusWindow[m[K;			/* +  2 = 15 */

[1;34m./test/unit-test/ConfigFiles/FreeRTOS_errno_TCP.h[39m

[01;32m[K    77[m[K		#define	pdFREERTOS_ERRNO_EILSEQ			138	/* An invalid [01;31m[KUTF[m[K-16 sequence was encountered. */

[1;34m./include/FreeRTOS_errno_TCP.h[39m

[01;32m[K    78[m[K		#define	pdFREERTOS_ERRNO_EILSEQ			138	/* An invalid [01;31m[KUTF[m[K-16 sequence was encountered. */

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   411[m[K	        // with a semi-unique MAC address from the [01;31m[KUUID[m[K

[1;34m./test/cbmc/proofs/Socket/vSocketBind/DONT_ALLOW_SOCKET_SEND_WITHOUT_BIND/vSocketBind_harness.c[39m

[01;32m[K    57[m[K		/* [01;31m[KuxAddressLength[m[K is not used in this implementation. */

[1;34m./test/cbmc/proofs/Socket/vSocketBind/ALLOW_ETHERNET_DRIVER_FILTERS_PACKETS/vSocketBind_harness.c[39m

[01;32m[K    59[m[K		/* [01;31m[KuxAddressLength[m[K is not used in this implementation. */

[1;34m./test/cbmc/proofs/Socket/vSocketBind/ALLOW_SOCKET_SEND_WITHOUT_BIND/vSocketBind_harness.c[39m

[01;32m[K    56[m[K		/* [01;31m[KuxAddressLength[m[K is not used in this implementation. */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   885[m[K		/* [01;31m[KuxCount[m[K gets the valus from pucByte and counts down to 0.

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   114[m[K		/* [01;31m[KuxCount[m[K is the number of TX descriptors that are in use by the DMA. */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   366[m[K		'[01;31m[KuxCount[m[K' represents the number of descriptors given to DMA for transmission.

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   353[m[K		'[01;31m[KuxCount[m[K' represents the number of descriptors given to DMA for transmission.

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K   213[m[K	 * [01;31m[KuxCount[m[K -	The number of bytes to add.

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2409[m[K	 *   [01;31m[KuxDataLengthBytes[m[K: This argument contains the number of bytes that this method
[01;32m[K  2514[m[K		if( ( [01;31m[KuxDataLengthBytes[m[K & ( size_t ) 1 ) != 0U )	/* Maybe one more ? */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   943[m[K							break out of outer loop at the test uxNameLen >= [01;31m[KuxDestLen[m[K. */

[1;34m./test/cbmc/proofs/ReadNameField/ReadNameField_harness.c[39m

[01;32m[K    90[m[K	  /* Avoid overflow on [01;31m[KuxDestLen[m[K - 1U */

[1;34m./test/cbmc/proofs/ParseDNSReply/ParseDNSReply_harness.c[39m

[01;32m[K    60[m[K	  __CPROVER_assert([01;31m[KuxDestLen[m[K <= NAME_SIZE,
[01;32m[K    61[m[K			   "ReadNameField: [01;31m[KuxDestLen[m[K <= NAME_SIZE)");

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K    85[m[K	/* Some helper macro's for defining the 20/80 % limits of uxLittleSpace / [01;31m[KuxEnoughSpace[m[K. */
[01;32m[K  1570[m[K						/* Send a GO when buffer space grows above '[01;31m[KuxEnoughSpace[m[K' bytes. */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   162[m[K		size_t [01;31m[KuxEnoughSpace[m[K;	/* Send a GO when buffer space grows above X bytes */

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K   117[m[K		.[01;31m[KuxEntryCount[m[K = 4,	/* No more than 'dumpMAX_DUMP_ENTRIES' elements. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1126[m[K				( ( [01;31m[KuxFlags[m[K & ( size_t ) tcpTCP_FLAG_FIN ) != 0 )   ? 'F' : '.',	/* 0x0001: No more data from sender */
[01;32m[K  1127[m[K				( ( [01;31m[KuxFlags[m[K & ( size_t ) tcpTCP_FLAG_SYN ) != 0 )   ? 'S' : '.',	/* 0x0002: Synchronize sequence numbers */
[01;32m[K  1128[m[K				( ( [01;31m[KuxFlags[m[K & ( size_t ) tcpTCP_FLAG_RST ) != 0 )   ? 'R' : '.',	/* 0x0004: Reset the connection */
[01;32m[K  1129[m[K				( ( [01;31m[KuxFlags[m[K & ( size_t ) tcpTCP_FLAG_PSH ) != 0 )   ? 'P' : '.',	/* 0x0008: Push function: please push buffered data to the recv application */
[01;32m[K  1130[m[K				( ( [01;31m[KuxFlags[m[K & ( size_t ) tcpTCP_FLAG_ACK ) != 0 )   ? 'A' : '.',	/* 0x0010: Acknowledgment field is significant */
[01;32m[K  1131[m[K				( ( [01;31m[KuxFlags[m[K & ( size_t ) tcpTCP_FLAG_URG ) != 0 )   ? 'U' : '.',	/* 0x0020: Urgent pointer field is significant */
[01;32m[K  1132[m[K				( ( [01;31m[KuxFlags[m[K & ( size_t ) tcpTCP_FLAG_ECN ) != 0 )   ? 'E' : '.',	/* 0x0040: ECN-Echo */
[01;32m[K  1133[m[K				( ( [01;31m[KuxFlags[m[K & ( size_t ) tcpTCP_FLAG_CWR ) != 0 )   ? 'C' : '.');	/* 0x0080: Congestion Window Reduced */

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K    46[m[K		volatile size_t [01;31m[KuxFront[m[K;	/* iterator within the free space */
[01;32m[K   109[m[K	/* Distance between [01;31m[KuxFront[m[K and uxTail
[01;32m[K   110[m[K	or the number of items which can still be added to [01;31m[KuxFront[m[K,

[1;34m./FreeRTOS_Stream_Buffer.c[39m

[01;32m[K    43[m[K	 * an offset from [01;31m[KuxHead[m[K while [01;31m[KuxHead[m[K will not be moved yet.  This possibility
[01;32m[K    45[m[K	 * If 'pucData' equals NULL, the function is called to advance '[01;31m[KuxHead[m[K' only.
[01;32m[K    54[m[K		/* If uxOffset > 0, items can be placed in front of [01;31m[KuxHead[m[K */
[01;32m[K    74[m[K				/* ( uxOffset > 0 ) means: write in front if the [01;31m[KuxHead[m[K marker */
[01;32m[K   104[m[K				/* ( uxOffset == 0 ) means: write at [01;31m[KuxHead[m[K position */

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K    45[m[K		volatile size_t [01;31m[KuxHead[m[K;		/* next position store a new item */
[01;32m[K    97[m[K	/* Returns the number of items which can still be added to [01;31m[KuxHead[m[K
[01;32m[K   124[m[K	before reaching [01;31m[KuxHead[m[K */
[01;32m[K   135[m[K	/* Returns the distance between [01;31m[KuxHead[m[K and uxMid */
[01;32m[K   146[m[K	/* Increment uxMid, but no further than [01;31m[KuxHead[m[K */
[01;32m[K   210[m[K	 * uxOffset -	If uxOffset > 0, data will be written at an offset from [01;31m[KuxHead[m[K
[01;32m[K   211[m[K	 *				while [01;31m[KuxHead[m[K will not be moved yet.

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   463[m[K		call the handler.  Returns pdTRUE if [01;31m[KuxIdentifier[m[K was recognised. */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   910[m[K				/* '[01;31m[KuxIndex[m[K' points to the full name. Walk over the string. */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   722[m[K							/* '[01;31m[KuxIndex[m[K' will be increased at the end of this loop. */
[01;32m[K   729[m[K						/* Confirm [01;31m[KuxIndex[m[K is still a valid index after adjustments to [01;31m[KuxIndex[m[K above */

[1;34m./test/cbmc/proofs/CheckOptionsInner/CheckOptionsInner_harness.c[39m

[01;32m[K    41[m[K	    /* [01;31m[KuxIndex[m[K in an index into the buffer */
[01;32m[K    83[m[K	    /* pointer offset of the pointer pucPtr + [01;31m[KuxIndex[m[K + 8 */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2082[m[K				uxLength -= ( ( uint16_t ) [01;31m[KuxIPHeaderLength[m[K ); /* normally, minus 20. */
[01;32m[K  2280[m[K			ulLength -= ( ( uint16_t ) [01;31m[KuxIPHeaderLength[m[K ); /* normally minus 20 */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2703[m[K			/* lint e9007 is OK because '[01;31m[KuxIPHeaderSizeSocket[m[K()' has no side-effects. */
[01;32m[K  2707[m[K				( xSendLength == ipNUMERIC_CAST( BaseType_t, [01;31m[KuxIPHeaderSizeSocket[m[K( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K   168[m[K		/* Returns true if ( [01;31m[KuxLeft[m[K < uxRight ) */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2082[m[K				[01;31m[KuxLength[m[K -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   322[m[K		 *		static BaseType_t xOnTCPReceive( Socket_t xSocket, void * pData, size_t [01;31m[KuxLength[m[K )

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K    85[m[K	/* Some helper macro's for defining the 20/80 % limits of [01;31m[KuxLittleSpace[m[K / uxEnoughSpace. */
[01;32m[K  1568[m[K						/* Send a STOP when buffer space drops below '[01;31m[KuxLittleSpace[m[K' bytes. */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   161[m[K		size_t [01;31m[KuxLittleSpace[m[K;	/* Send a STOP when buffer space drops below X bytes */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3160[m[K						/* If this is a socket listening to [01;31m[KuxLocalPort[m[K, remember it

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K    65[m[K	/* Returns the space between [01;31m[KuxLower[m[K and uxUpper, which equals to the distance minus 1 */
[01;32m[K    81[m[K	/* Returns the distance between [01;31m[KuxLower[m[K and uxUpper */

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K   223[m[K	 * [01;31m[KuxMaxCount[m[K -	The number of bytes to read.

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   602[m[K			UBaseType_t [01;31m[KuxMaxPackets[m[K; /* Protection: limits the number of packets buffered per socket */

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K    44[m[K		volatile size_t [01;31m[KuxMid[m[K;		/* iterator within the valid items */
[01;32m[K   135[m[K	/* Returns the distance between uxHead and [01;31m[KuxMid[m[K */
[01;32m[K   146[m[K	/* Increment [01;31m[KuxMid[m[K, but no further than uxHead */

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   943[m[K							break out of outer loop at the test [01;31m[KuxNameLen[m[K >= uxDestLen. */

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K   602[m[K		_fprintf( outfile, "\n/* Packet_%04d */\n", [01;31m[KuxNextPacketNumber[m[K );

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3288[m[K		 * Add data to the RxStream.  When [01;31m[KuxOffset[m[K > 0, data has come in out-of-order
[01;32m[K  3300[m[K			/* int32_t uxStreamBufferAdd( pxBuffer, [01;31m[KuxOffset[m[K, pucData, aCount )
[01;32m[K  3303[m[K			if( [01;31m[KuxOffset[m[K != 0 ) Just store data which has come out-of-order
[01;32m[K  3304[m[K			if( [01;31m[KuxOffset[m[K == 0 ) Also advance rxHead */

[1;34m./FreeRTOS_Stream_Buffer.c[39m

[01;32m[K    42[m[K	 * Adds data to a stream buffer.  If [01;31m[KuxOffset[m[K > 0, data will be written at
[01;32m[K    54[m[K		/* If [01;31m[KuxOffset[m[K > 0, items can be placed in front of uxHead */
[01;32m[K    74[m[K				/* ( [01;31m[KuxOffset[m[K > 0 ) means: write in front if the uxHead marker */
[01;32m[K   104[m[K				/* ( [01;31m[KuxOffset[m[K == 0 ) means: write at uxHead position */
[01;32m[K   126[m[K	 * '[01;31m[KuxOffset[m[K' can be used to read data located at a certain offset from 'lTail'.
[01;32m[K   128[m[K	 * if 'xPeek' is pdTRUE, or if '[01;31m[KuxOffset[m[K' is non-zero, the 'lTail' pointer will

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K   210[m[K	 * [01;31m[KuxOffset[m[K -	If [01;31m[KuxOffset[m[K > 0, data will be written at an offset from uxHead
[01;32m[K   221[m[K	 * [01;31m[KuxOffset[m[K -	Can be used to read data located at a certain offset from 'uxTail'.

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   632[m[K				[01;31m[KuxOptionsLength[m[K is always a multiple of 4.  The complete expression
[01;32m[K   634[m[K				ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + [01;31m[KuxOptionsLength[m[K ) / 4 ) << 4 */
[01;32m[K  1471[m[K			pxTCPHeader->ucOptdata[ [01;31m[KuxOptionsLength[m[K + 2U ] = tcpTCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
[01;32m[K  1472[m[K			pxTCPHeader->ucOptdata[ [01;31m[KuxOptionsLength[m[K + 3U ] = 2U;	/* 2: length of this option. */
[01;32m[K  1477[m[K		return [01;31m[KuxOptionsLength[m[K; /* bytes, not words. */
[01;32m[K  1951[m[K			pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + [01;31m[KuxOptionsLength[m[K ) << 2 ); /*_RB_ "2" needs comment. */
[01;32m[K  2827[m[K		/* [01;31m[KuxOptionsLength[m[K: the size of the options to be sent (always a multiple of
[01;32m[K  2918[m[K					[01;31m[KuxOptionsLength[m[K is a multiple of 4.  The complete expression is:
[01;32m[K  2919[m[K					ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + [01;31m[KuxOptionsLength[m[K ) / 4 ) << 4 */

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K    51[m[K			This assumption is required for a memcpy function that copies [01;31m[KuxOptionsLength[m[K

[1;34m./test/cbmc/proofs/ReadNameField/ReadNameField_harness.c[39m

[01;32m[K    87[m[K	  /* Avoid overflow on uxSourceLen - 1U with uxSourceLen == [01;31m[KuxRemainingBytes[m[K */
[01;32m[K    88[m[K	  //__CPROVER_assume([01;31m[KuxRemainingBytes[m[K > 0);

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   348[m[K			TickType_t [01;31m[KuxRemaningTime[m[K;		/* Timeout in ms */

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K   168[m[K		/* Returns true if ( uxLeft < [01;31m[KuxRight[m[K ) */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1413[m[K			/* 'xTCP.[01;31m[KuxRxWinSize[m[K' is the size of the reception window in units of MSS. */

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K    54[m[K			/* [01;31m[KuxRxWinSize[m[K is initialized as size_t. This assumption is required to terminate `while(uxWinSize > 0xfffful)` loop.*/
[01;32m[K    56[m[K			/* [01;31m[KuxRxWinSize[m[K is initialized as uint16_t. This assumption is required to terminate `while(uxWinSize > 0xfffful)` loop.*/

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1615[m[K							pxSocket->u.xTCP.[01;31m[KuxRxWinSize[m[K = ( uint32_t )pxProps->lRxWinSize;	/* Fixed value: size of the TCP reception window */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   590[m[K			size_t [01;31m[KuxRxWinSize[m[K;	/* Fixed value: size of the TCP reception window */

[1;34m./test/cbmc/proofs/ReadNameField/ReadNameField_harness.c[39m

[01;32m[K    87[m[K	  /* Avoid overflow on [01;31m[KuxSourceLen[m[K - 1U with [01;31m[KuxSourceLen[m[K == uxRemainingBytes */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3300[m[K			/* int32_t [01;31m[KuxStreamBufferAdd[m[K( pxBuffer, uxOffset, pucData, aCount )

[1;34m./FreeRTOS_Stream_Buffer.c[39m

[01;32m[K    41[m[K	 * [01;31m[KuxStreamBufferAdd[m[K( )

[1;34m./FreeRTOS_Stream_Buffer.c[39m

[01;32m[K   125[m[K	 * [01;31m[KuxStreamBufferGet[m[K( )

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2040[m[K		[01;31m[KuxStreamBufferMidSpace[m[K() returns the distance between rxHead and rxMid.  It

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K    43[m[K		volatile size_t [01;31m[KuxTail[m[K;		/* next item to read */
[01;32m[K    98[m[K	before hitting on [01;31m[KuxTail[m[K */
[01;32m[K   109[m[K	/* Distance between uxFront and [01;31m[KuxTail[m[K
[01;32m[K   111[m[K	before hitting on [01;31m[KuxTail[m[K */
[01;32m[K   123[m[K	/* Returns the number of items which can be read from [01;31m[KuxTail[m[K
[01;32m[K   221[m[K	 * uxOffset -	Can be used to read data located at a certain offset from '[01;31m[KuxTail[m[K'.

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K    90[m[K	format the raw data provided by the [01;31m[KuxTaskGetSystemState[m[K() function in to human

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K   122[m[K	 * format the raw data provided by the [01;31m[KuxTaskGetSystemState[m[K() function in to human

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1616[m[K							pxSocket->u.xTCP.[01;31m[KuxTxWinSize[m[K = ( uint32_t )pxProps->lTxWinSize;	/* Fixed value: size of the TCP transmit window */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   591[m[K			size_t [01;31m[KuxTxWinSize[m[K;	/* Fixed value: size of the TCP transmit window */

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K    65[m[K	/* Returns the space between uxLower and [01;31m[KuxUpper[m[K, which equals to the distance minus 1 */
[01;32m[K    81[m[K	/* Returns the distance between uxLower and [01;31m[KuxUpper[m[K */

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K    54[m[K			/* uxRxWinSize is initialized as size_t. This assumption is required to terminate `while([01;31m[KuxWinSize[m[K > 0xfffful)` loop.*/
[01;32m[K    56[m[K			/* uxRxWinSize is initialized as uint16_t. This assumption is required to terminate `while([01;31m[KuxWinSize[m[K > 0xfffful)` loop.*/

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   470[m[K	//	if((pxHead->addr.[01;31m[Kval[m[K & GMAC_RXD_OWNERSHIP) != 0)

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   885[m[K		/* uxCount gets the [01;31m[Kvalus[m[K from pucByte and counts down to 0.

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K   111[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/[01;31m[KvApplicationIPNetworkEventHook[m[K.shtml.
[01;32m[K   111[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/[01;31m[KvApplicationIPNetworkEventHook[m[K.shtml.

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K   110[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/[01;31m[KvApplicationIPNetworkEventHook[m[K.shtml.
[01;32m[K   110[m[K	 * http://www.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/[01;31m[KvApplicationIPNetworkEventHook[m[K.shtml.

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K   362[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/[01;31m[KvApplicationIPNetworkEventHook[m[K.html
[01;32m[K   362[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/[01;31m[KvApplicationIPNetworkEventHook[m[K.html

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   196[m[K	 * [01;31m[KvApplicationPingReplyHook[m[K() is called with the results.

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   579[m[K		time [01;31m[KvARPAgeCache[m[K() is called. */
[01;32m[K   582[m[K		/* Let the IP-task call [01;31m[KvARPAgeCache[m[K(). */

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_OutputARPRequest/OutputARPRequest_harness.c[39m

[01;32m[K    48[m[K	 * to get a NetworkBufferDescriptor. Then it calls [01;31m[KvARPGenerateRequestPacket[m[K
[01;32m[K    49[m[K	 * passing this buffer along in the function call. [01;31m[KvARPGenerateRequestPacket[m[K

[1;34m./test/cbmc/proofs/ARP/ARPGenerateRequestPacket/ARPGenerateRequestPacket_harness.c[39m

[01;32m[K    15[m[K		 * This is not checked inside [01;31m[KvARPGenerateRequestPacket[m[K.
[01;32m[K    25[m[K		/* [01;31m[KvARPGenerateRequestPacket[m[K asserts buffer has room for a packet */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   430[m[K				Actually that should not occur, the 'TDES_OWN' was already confirmed low in [01;31m[KvClearTXBuffers[m[K(). */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   267[m[K	that must be cleared by [01;31m[KvClearTXBuffers[m[K(). */
[01;32m[K   331[m[K		by the function [01;31m[KvClearTXBuffers[m[K(). */
[01;32m[K   705[m[K					Also need an Interrupt on Completion so that '[01;31m[KvClearTXBuffers[m[K()' will be called.. */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K    80[m[K	void [01;31m[KvConfigureTimerForRunTimeStats[m[K( void );	/* Prototype of function that initialises the run time counter. */

[1;34m./test/cbmc/proofs/DHCP/DHCPProcess/DHCPProcess_harness.c[39m

[01;32m[K    71[m[K	 * The proof of [01;31m[KvDHCPProcess[m[K

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_cancel/DNSgetHostByName_cancel_harness.c[39m

[01;32m[K    36[m[K		[01;31m[KvDNSInitialise[m[K(); /* We initialize the callbacklist in order to be able to check for functions that timed out. */ 

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K   125[m[K		 * The function [01;31m[KvDNSInitialise[m[K() initialises the DNS module.

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_cancel/DNSgetHostByName_cancel_harness.c[39m

[01;32m[K    47[m[K		[01;31m[KvDNSSetCallBack[m[K( pcHostName, &pvSearchID, pCallback, xTimeout, xIdentifier); /* Add an item to be able to check the cancel function if the list is non-empty. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2803[m[K	 * We'[01;31m[Kve[m[K tried to keep it (relatively short) by putting a lot of code in
[01;32m[K  2930[m[K			case eCONNECT_SYN:	/* (client) also called SYN_SENT: we'[01;31m[Kve[m[K just send a
[01;32m[K  2933[m[K			case eSYN_RECEIVED:	/* (server) we'[01;31m[Kve[m[K had a SYN, replied with SYN+SCK

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_eth.c[39m

[01;32m[K   620[m[K	                { /* link status changed; some event could [01;31m[Kve[m[K fired here if needed */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   538[m[K					bFinSent : 1,		/* We'[01;31m[Kve[m[K sent out a FIN */
[01;32m[K   539[m[K					bFinRecv : 1,		/* We'[01;31m[Kve[m[K received a FIN from our peer */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   413[m[K					Now call [01;31m[KvIPNetworkUpCalls[m[K() to send the network-up event and
[01;32m[K   470[m[K						be used.  Now call [01;31m[KvIPNetworkUpCalls[m[K() to send the
[01;32m[K   542[m[K			call [01;31m[KvIPNetworkUpCalls[m[K() to send the network-up event and start the ARP

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1210[m[K	   /* Set the [01;31m[KVL[m[K bit according to ETH VLANTagIdentifier value */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.h[39m

[01;32m[K    71[m[K	#define GMAC_RXD_VLAN         (1ul << 21) /**< [01;31m[KVLAN[m[K tag detected */
[01;32m[K    73[m[K	#define GMAC_RXD_PRIORITY_MASK  (3ul << 17) /**< [01;31m[KVLAN[m[K priority */
[01;32m[K   170[m[K				vlan_priority:3,       /**  17..19 [01;31m[KVLAN[m[K priority (if [01;31m[KVLAN[m[K detected) */
[01;32m[K   172[m[K				b_vlan_detected:1,     /**  21     [01;31m[KVLAN[m[K tag detected */

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K    85[m[K	  RwReg   GMAC_SVLAN;      /**< \brief (Gmac Offset: 0x0C0) Stacked [01;31m[KVLAN[m[K Register */
[01;32m[K   191[m[K	#define GMAC_NCFGR_DNVLAN (0x1u << 2) /**< \brief (GMAC_NCFGR) Discard Non-[01;31m[KVLAN[m[K FRAMES */
[01;32m[K   468[m[K	/* -------- GMAC_SVLAN : (GMAC Offset: 0x0C0) Stacked [01;31m[KVLAN[m[K Register -------- */
[01;32m[K   472[m[K	#define GMAC_SVLAN_ESVLAN (0x1u << 31) /**< \brief (GMAC_SVLAN) Enable Stacked [01;31m[KVLAN[m[K Processing Mode */
[01;32m[K   715[m[K	#define GMAC_ST2RPQ_VLANP_Msk (0xfu << GMAC_ST2RPQ_VLANP_Pos) /**< \brief (GMAC_ST2RPQ[16]) [01;31m[KVLAN[m[K Priority */
[01;32m[K   717[m[K	#define GMAC_ST2RPQ_VLANE (0x1u << 8) /**< \brief (GMAC_ST2RPQ[16]) [01;31m[KVLAN[m[K Enable */

[1;34m./portable/NetworkInterface/ATSAM4E/instance/gmac.h[39m

[01;32m[K    72[m[K	#define GMAC_RXD_VLAN         (1ul << 21) /**< [01;31m[KVLAN[m[K tag detected */
[01;32m[K    74[m[K	#define GMAC_RXD_PRIORITY_MASK  (3ul << 17) /**< [01;31m[KVLAN[m[K priority */
[01;32m[K   171[m[K				vlan_priority:3,       /**  17..19 [01;31m[KVLAN[m[K priority (if [01;31m[KVLAN[m[K detected) */
[01;32m[K   173[m[K				b_vlan_detected:1,     /**  21     [01;31m[KVLAN[m[K tag detected */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K    74[m[K	#define GMAC_RXD_VLAN         (1ul << 21) /**< [01;31m[KVLAN[m[K tag detected */
[01;32m[K    76[m[K	#define GMAC_RXD_PRIORITY_MASK  (3ul << 17) /**< [01;31m[KVLAN[m[K priority */
[01;32m[K   194[m[K				b_vlan_priority:3,     /**  17..19 [01;31m[KVLAN[m[K priority (if [01;31m[KVLAN[m[K detected) */
[01;32m[K   196[m[K				b_vlan_detected:1,     /**  21     [01;31m[KVLAN[m[K tag detected */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   559[m[K	  uint32_t             VLANTagComparison;         /*!< Selects the 12-bit [01;31m[KVLAN[m[K identifier or the complete 16-bit [01;31m[KVLAN[m[K tag for
[01;32m[K   563[m[K	  uint32_t             VLANTagIdentifier;         /*!< Holds the [01;31m[KVLAN[m[K tag identifier for receive frames */
[01;32m[K   710[m[K	#define ETH_VLAN_TAG              ((uint32_t)4U)    /*!< optional 802.1q [01;31m[KVLAN[m[K Tag */
[01;32m[K   818[m[K	#define ETH_DMATXDESC_VF                      ((uint32_t)0x00000080U)  /*!< [01;31m[KVLAN[m[K Frame */
[01;32m[K   883[m[K	#define ETH_DMARXDESC_VLAN        ((uint32_t)0x00000400U)  /*!< [01;31m[KVLAN[m[K Tag: received frame is a [01;31m[KVLAN[m[K frame */
[01;32m[K  1237[m[K	/** @defgroup ETH_VLAN_Tag_Comparison ETH [01;31m[KVLAN[m[K Tag Comparison

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K    57[m[K	/* The size of the Ethernet header is 14, meaning that 802.1Q [01;31m[KVLAN[m[K tags

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1209[m[K	   /* Set the ETV bit according to ETH [01;31m[KVLANTagComparison[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   559[m[K	  uint32_t             [01;31m[KVLANTagComparison[m[K;         /*!< Selects the 12-bit VLAN identifier or the complete 16-bit VLAN tag for

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1210[m[K	   /* Set the VL bit according to ETH [01;31m[KVLANTagIdentifier[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   563[m[K	  uint32_t             [01;31m[KVLANTagIdentifier[m[K;         /*!< Holds the VLAN tag identifier for receive frames */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   632[m[K			[01;31m[KvListInitialise[m[K( &( pxWindow->xPriorityQueue ) );	/* Priority queue: segments which must be sent immediately */
[01;32m[K   633[m[K			[01;31m[KvListInitialise[m[K( &( pxWindow->xTxQueue ) );			/* Transmit queue: segments queued for transmission */
[01;32m[K   634[m[K			[01;31m[KvListInitialise[m[K( &( pxWindow->xWaitQueue ) );		/* Waiting queue:  outstanding segments */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   349[m[K					/* Could call [01;31m[KvListInitialiseItem[m[K here but all data has been

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   304[m[K		 *		static void [01;31m[KvMyConnectHandler[m[K (Socket_t xSocket, BaseType_t ulConnected)
[01;32m[K   307[m[K		 * 		F_TCP_UDP_Handler_t xHnd = { [01;31m[KvMyConnectHandler[m[K };

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   432[m[K	 * Function Name: [01;31m[KvNetworkInterfaceAllocateRAMToBuffers[m[K ()
[01;32m[K   450[m[K	} /* End of function [01;31m[KvNetworkInterfaceAllocateRAMToBuffers[m[K() */

[1;34m./include/NetworkInterface.h[39m

[01;32m[K    37[m[K	/* "[01;31m[KvNetworkInterfaceAllocateRAMToBuffers[m[K" is declared but never defined.

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   235[m[K	 * pvPortMalloc()/[01;31m[KvPortFree[m[K() will be used.

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   238[m[K	 * pvPortMalloc()/[01;31m[KvPortFree[m[K() will be used.

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1177[m[K					[01;31m[KvProcessGeneratedUDPPacket[m[K */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   490[m[K		calling [01;31m[KvReleaseNetworkBufferAndDescriptor[m[K(), */

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K   306[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/[01;31m[KvReleaseNetworkBufferAndDescriptor[m[K.html
[01;32m[K   306[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/[01;31m[KvReleaseNetworkBufferAndDescriptor[m[K.html

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   106[m[K						[01;31m[KvReleaseNetworkBufferAndDescriptor[m[K( pxNetworkBuffer );

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K   528[m[K		calling [01;31m[KvReleaseNetworkBufferAndDescriptor[m[K(), */

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K   811[m[K								[01;31m[KvRxFaultInjection[m[K().  Don't release it here. */

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K   624[m[K								[01;31m[KvRxFaultInjection[m[K().  Don't release it here. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1017[m[K	 * [01;31m[KvSocketBind[m[K(): internal version of bind() that should not be called directly.
[01;32m[K  1087[m[K				/* If [01;31m[KvSocketBind[m[K() is called from the API FreeRTOS_bind() it has been

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   416[m[K					usLocalPort. [01;31m[KvSocketBind[m[K() will actually bind the socket and the

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   456[m[K							function: [01;31m[KvSocketClose[m[K(). */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   556[m[K			function '[01;31m[KvSocketClose[m[K()` to close the socket. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   435[m[K					[01;31m[KvSocketClose[m[K().  As the socket gets closed, there is no way to

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   457[m[K				/* Now have the IP-task call [01;31m[KvSocketSelect[m[K() to see if the set contains

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   459[m[K					[01;31m[KvSocketSelect[m[K() will check which sockets actually have an event

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  2094[m[K	/* _HT_ must work this out, now [01;31m[KvSocketWakeUpUser[m[K will be called for any important

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K    91[m[K	readable ASCII form.  See the notes in the implementation of [01;31m[KvTaskList[m[K() within

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K   123[m[K	 * readable ASCII form.  See the notes in the implementation of [01;31m[KvTaskList[m[K() within

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   118[m[K					[01;31m[KvTaskNotifyGiveFromISR[m[K();	// Wake up the EMAC task
[01;32m[K   118[m[K					[01;31m[KvTaskNotifyGiveFromISR[m[K();	// Wake up the EMAC task

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   333[m[K		in turn will wake-up the task by calling [01;31m[KvTaskNotifyGiveFromISR[m[K() */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3677[m[K			/* Ask the IP-task to call [01;31m[KvTCPNetStat[m[K()

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1107[m[K			[01;31m[KvTCPWindowInit[m[K() will be called to fill in the peer's sequence numbers, but

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1269[m[K					/* A message should have been sent to the IP task, but [01;31m[Kwasn[m[K't. */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   484[m[K				/* [01;31m[KWated[m[K more than xMaxTime, return. */

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   379[m[K				/* [01;31m[KWated[m[K more than xMaxTime, return. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   945[m[K				warning: cast increases required alignment of target type [-[01;31m[KWcast[m[K-align].

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K   834[m[K			/* Clear [01;31m[KWD[m[K, PCE, PS, TE and RE bits */
[01;32m[K  1122[m[K	  /* Clear [01;31m[KWD[m[K, PCE, PS, TE and RE bits */
[01;32m[K  1124[m[K	  /* Set the [01;31m[KWD[m[K bit according to ETH Watchdog value */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   126[m[K	#define REG_WOL_CTRL               (0x2A)       /* [01;31m[KWFCR[m[K */

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K   164[m[K	 * or [01;31m[KWiFi[m[K data to and from a real network connection.  Many computers have more
[01;32m[K   185[m[K	 * connection that uses this MAC address by accessing the raw Ethernet/[01;31m[KWiFi[m[K data

[1;34m./portable/NetworkInterface/mw300_rd/NetworkInterface.c[39m

[01;32m[K   141[m[K	/* Callback function called from the [01;31m[Kwifi[m[K module */

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_wifi.c[39m

[01;32m[K    79[m[K	        /*Turn  [01;31m[KWiFi[m[K ON */

[1;34m./portable/NetworkInterface/M487/m480_eth.c[39m

[01;32m[K   406[m[K	    // http://en.[01;31m[Kwikipedia[m[K.org/wiki/MAC_address

[1;34m./include/FreeRTOS_TCP_IP.h[39m

[01;32m[K    38[m[K		 * http://en.[01;31m[Kwikipedia[m[K.org/wiki/Transmission_Control_Protocol */
[01;32m[K    38[m[K		 * http://en.[01;31m[Kwikipedia[m[K.org/wiki/Transmission_Control_Protocol */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   923[m[K				/* The packet [01;31m[Kwil[m[K be accepted, but check first if a new Network Buffer can

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K    26[m[K	/* [01;31m[KWinPCap[m[K includes. */
[01;32m[K    46[m[K	[01;31m[KWinPCAP[m[K Windows threads. */
[01;32m[K    66[m[K	 * used to interface with the [01;31m[KWinPCAP[m[K libraries.
[01;32m[K    92[m[K	 * [01;31m[KWinPCap[m[K interface for new data.
[01;32m[K    98[m[K	 * and the Win32 threads that manage [01;31m[KWinPCAP[m[K.
[01;32m[K   109[m[K	/* Required by the [01;31m[KWinPCap[m[K library. */
[01;32m[K   112[m[K	/* An event used to wake up the Win32 thread that sends data through the [01;31m[KWinPCAP[m[K
[01;32m[K   124[m[K	/* The interface being used by [01;31m[KWinPCap[m[K. */
[01;32m[K   134[m[K	/* Logs the number of [01;31m[KWinPCAP[m[K send failures, for viewing in the debugger only. */
[01;32m[K   170[m[K		the Win32 thread that sends via the [01;31m[KWinPCAP[m[K library. */
[01;32m[K   180[m[K		via the [01;31m[KWinPCAP[m[K library to the FreeRTOS task. */
[01;32m[K   200[m[K		tasks and the Win32 thread that sends data via the [01;31m[KWinPCAP[m[K library.  Drop
[01;32m[K   396[m[K		and the Win32 threads that are handling [01;31m[KWinPCAP[m[K. */
[01;32m[K   401[m[K			/* Create event used to signal the Win32 [01;31m[KWinPCAP[m[K Tx thread. */
[01;32m[K   404[m[K			/* Create the Win32 thread that handles [01;31m[KWinPCAP[m[K Rx. */
[01;32m[K   416[m[K			/* Create the Win32 thread that handlers [01;31m[KWinPCAP[m[K Tx. */
[01;32m[K   436[m[K	/* [01;31m[KWinPCAP[m[K function. */
[01;32m[K   551[m[K			handles [01;31m[KWinPCAP[m[K Rx into the FreeRTOS simulator contain another packet? */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   652[m[K			 * because [01;31m[Kwithing[m[K p_buffer, it is well aligned */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   688[m[K			 * because [01;31m[Kwithing[m[K p_buffer, it is well aligned */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1552[m[K						probably due to [01;31m[KWND[m[K limits

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K   281[m[K	#define   INT_RX_WOL_FRAME            (0x0020)    /* Enable [01;31m[KWOL[m[K on receive wake-up frame detect interrupt */
[01;32m[K   282[m[K	#define   INT_RX_WOL_MAGIC            (0x0010)    /* Enable [01;31m[KWOL[m[K on receive magic packet detect interrupt */
[01;32m[K   283[m[K	#define   INT_RX_WOL_LINKUP           (0x0008)    /* Enable [01;31m[KWOL[m[K on link up detect interrupt */
[01;32m[K   284[m[K	#define   INT_RX_WOL_ENERGY           (0x0004)    /* Enable [01;31m[KWOL[m[K on energy detect interrupt */
[01;32m[K   286[m[K	#define   INT_RX_WOL_DELAY_ENERGY     (0x0001)    /* Enable [01;31m[KWOL[m[K on delay energy detect interrupt */

[1;34m./portable/NetworkInterface/ATSAM4E/component/gmac.h[39m

[01;32m[K    70[m[K	  [01;31m[KWoReg[m[K   GMAC_IER;        /**< \brief (Gmac Offset: 0x028) Interrupt Enable Register */
[01;32m[K    71[m[K	  [01;31m[KWoReg[m[K   GMAC_IDR;        /**< \brief (Gmac Offset: 0x02C) Interrupt Disable Register */
[01;32m[K   140[m[K	  [01;31m[KWoReg[m[K   GMAC_TA;         /**< \brief (Gmac Offset: 0x1D8) 1588 Timer Adjust Register */
[01;32m[K   162[m[K	  [01;31m[KWoReg[m[K   GMAC_IERPQ[7];   /**< \brief (Gmac Offset: 0x600) Interrupt Enable Register Priority Queue */
[01;32m[K   164[m[K	  [01;31m[KWoReg[m[K   GMAC_IDRPQ[7];   /**< \brief (Gmac Offset: 0x620) Interrupt Disable Register Priority Queue */

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K   217[m[K	 * \param [01;31m[Kwrdata[m[K the new register value.

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   115[m[K		and the size should be GMAC_RX_UNITSIZE * [01;31m[KwRxSize[m[K. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K    92[m[K	#define tcpTCP_OPT_WSOPT_LEN		3U   /* Length of TCP [01;31m[KWSOPT[m[K option. */

[1;34m./portable/NetworkInterface/ATSAM4E/gmac.c[39m

[01;32m[K   123[m[K		and the size should be GMAC_TX_UNITSIZE * [01;31m[KwTxSize[m[K. */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K   602[m[K		https://[01;31m[Kwww[m[K.ietf.org/rfc/rfc2131.txt, Transaction ID should be a random
[01;32m[K   602[m[K		https://[01;31m[Kwww[m[K.ietf.org/rfc/rfc2131.txt, Transaction ID should be a random

[1;34m./test/unit-test/ConfigFiles/pack_struct_start.h[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./test/unit-test/ConfigFiles/portmacro.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    22[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./test/unit-test/ConfigFiles/FreeRTOSConfig.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    22[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    41[m[K	 * http://[01;31m[Kwww[m[K.freertos.org/a00110.html
[01;32m[K    41[m[K	 * http://[01;31m[Kwww[m[K.freertos.org/a00110.html

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K    19[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    19[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    26[m[K	* http://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K    26[m[K	* http://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K    97[m[K	 * http://[01;31m[Kwww[m[K.freertos.org/Stacks-and-stack-overflow-checking.html. */
[01;32m[K    97[m[K	 * http://[01;31m[Kwww[m[K.freertos.org/Stacks-and-stack-overflow-checking.html. */
[01;32m[K   111[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/vApplicationIPNetworkEventHook.shtml.
[01;32m[K   111[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/vApplicationIPNetworkEventHook.shtml.

[1;34m./test/unit-test/ConfigFiles/pack_struct_end.h[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./test/unit-test/ConfigFiles/FreeRTOS_errno_TCP.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./test/unit-test/ConfigFiles/NetworkInterface.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./test/unit-test/ConfigFiles/NetworkBufferManagement.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./test/unit-test/ConfigFiles/IPTraceMacroDefaults.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    28[m[K	http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Trace.html */
[01;32m[K    28[m[K	http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Trace.html */

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    22[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K   129[m[K		#error ipconfigDHCP_USES_USER_HOOK and its associated callback have been superceeded - see http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html#ipconfigUSE_DHCP_HOOK

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_OutputARPRequest/OutputARPRequest_harness.c[39m

[01;32m[K    26[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    26[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./test/cbmc/proofs/IP/SendEventToIPTask/SendEventToIPTask_harness.c[39m

[01;32m[K    26[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    26[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./test/cbmc/proofs/TCP/prvTCPReturnPacket/TCPReturnPacket_harness.c[39m

[01;32m[K    26[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    26[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./test/cbmc/proofs/TCP/prvTCPPrepareSend/TCPPrepareSend_harness.c[39m

[01;32m[K    26[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    26[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./test/cbmc/proofs/TCP/prvTCPHandleState/TCPHandleState_harness.c[39m

[01;32m[K    26[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    26[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./test/cbmc/proofs/DHCP/IsDHCPSocket/IsDHCPSocket_harness.c[39m

[01;32m[K    26[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    26[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./test/cbmc/proofs/DHCP/DHCPProcess/DHCPProcess_harness.c[39m

[01;32m[K    26[m[K	  * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    26[m[K	  * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./test/cbmc/patches/FreeRTOSConfig.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    37[m[K	* http://[01;31m[Kwww[m[K.freertos.org/a00110.html
[01;32m[K    37[m[K	* http://[01;31m[Kwww[m[K.freertos.org/a00110.html
[01;32m[K   176[m[K	 * http://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_Echo_Clients.html,
[01;32m[K   176[m[K	 * http://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_Echo_Clients.html,
[01;32m[K   177[m[K	 * http://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/UDP_Echo_Clients.html. */
[01;32m[K   177[m[K	 * http://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/UDP_Echo_Clients.html. */

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    30[m[K	* http://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K    30[m[K	* http://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K    96[m[K	 * http://[01;31m[Kwww[m[K.freertos.org/Stacks-and-stack-overflow-checking.html. */
[01;32m[K    96[m[K	 * http://[01;31m[Kwww[m[K.freertos.org/Stacks-and-stack-overflow-checking.html. */
[01;32m[K   110[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/vApplicationIPNetworkEventHook.shtml.
[01;32m[K   110[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/vApplicationIPNetworkEventHook.shtml.

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K    30[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/socket.html
[01;32m[K    30[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/socket.html
[01;32m[K    46[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/setsockopt.html
[01;32m[K    46[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/setsockopt.html
[01;32m[K    64[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/close.html
[01;32m[K    64[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/close.html
[01;32m[K    76[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/bind.html
[01;32m[K    76[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/bind.html
[01;32m[K    92[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/inet_addr.html
[01;32m[K    92[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/inet_addr.html
[01;32m[K   104[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/recvfrom.html
[01;32m[K   104[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/recvfrom.html
[01;32m[K   177[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/sendto.html
[01;32m[K   177[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/sendto.html
[01;32m[K   198[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/FreeRTOS_GetUDPPayloadBuffer.html
[01;32m[K   198[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_UDP/API/FreeRTOS_GetUDPPayloadBuffer.html
[01;32m[K   219[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/FreeRTOS_ReleaseUDPPayloadBuffer.html
[01;32m[K   219[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/FreeRTOS_ReleaseUDPPayloadBuffer.html
[01;32m[K   235[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/pxGetNetworkBufferWithDescriptor.html
[01;32m[K   235[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/pxGetNetworkBufferWithDescriptor.html
[01;32m[K   306[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/vReleaseNetworkBufferAndDescriptor.html
[01;32m[K   306[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/vReleaseNetworkBufferAndDescriptor.html
[01;32m[K   324[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/FreeRTOS_GetAddressConfiguration.html
[01;32m[K   324[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/FreeRTOS_GetAddressConfiguration.html
[01;32m[K   362[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/vApplicationIPNetworkEventHook.html
[01;32m[K   362[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/API/vApplicationIPNetworkEventHook.html
[01;32m[K   371[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K   371[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
[01;32m[K   384[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Porting.html#xNetworkInterfaceOutput
[01;32m[K   384[m[K	 * https://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Porting.html#xNetworkInterfaceOutput

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./tools/tcp_mem_stats.c[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./FreeRTOS_Stream_Buffer.c[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    30[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html
[01;32m[K    30[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    22[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    32[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html
[01;32m[K    32[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html

[1;34m./portable/NetworkInterface/SH2A/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl_reg.h[39m

[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="http://[01;31m[Kwww[m[K.atmel.com/design-support/">Atmel Support</a>
[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="http://[01;31m[Kwww[m[K.atmel.com/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.c[39m

[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="http://[01;31m[Kwww[m[K.atmel.com/design-support/">Atmel Support</a>
[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="http://[01;31m[Kwww[m[K.atmel.com/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/ksz8851snl/ksz8851snl.h[39m

[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="http://[01;31m[Kwww[m[K.atmel.com/design-support/">Atmel Support</a>
[01;32m[K    45[m[K	 * Support and FAQ: visit <a href="http://[01;31m[Kwww[m[K.atmel.com/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/linux/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    73[m[K	http://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html */
[01;32m[K    73[m[K	http://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html */

[1;34m./portable/NetworkInterface/Zynq/uncached_memory.c[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./portable/NetworkInterface/WinPCap/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./portable/NetworkInterface/mw300_rd/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K    20[m[K	 ***   URL: http://[01;31m[Kwww[m[K.FreeRTOS.org/contact  Active early adopters may, at   ***
[01;32m[K    20[m[K	 ***   URL: http://[01;31m[Kwww[m[K.FreeRTOS.org/contact  Active early adopters may, at   ***
[01;32m[K    39[m[K	 * The FreeRTOS+TCP License Information Page: http://[01;31m[Kwww[m[K.FreeRTOS.org/tcp_license
[01;32m[K    39[m[K	 * The FreeRTOS+TCP License Information Page: http://[01;31m[Kwww[m[K.FreeRTOS.org/tcp_license
[01;32m[K    40[m[K	 * The FreeRTOS Open Source License: http://[01;31m[Kwww[m[K.FreeRTOS.org/license
[01;32m[K    40[m[K	 * The FreeRTOS Open Source License: http://[01;31m[Kwww[m[K.FreeRTOS.org/license
[01;32m[K    41[m[K	 * The GNU General Public License Version 2: http://[01;31m[Kwww[m[K.FreeRTOS.org/gpl-2.0.txt
[01;32m[K    41[m[K	 * The GNU General Public License Version 2: http://[01;31m[Kwww[m[K.FreeRTOS.org/gpl-2.0.txt
[01;32m[K    52[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    52[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    53[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/plus
[01;32m[K    53[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/plus
[01;32m[K    54[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/labs
[01;32m[K    54[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/labs
[01;32m[K    62[m[K	* http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html
[01;32m[K    62[m[K	* http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.h[39m

[01;32m[K    44[m[K	 * Support and FAQ: visit <a href="http://[01;31m[Kwww[m[K.atmel.com/design-support/">Atmel Support</a>
[01;32m[K    44[m[K	 * Support and FAQ: visit <a href="http://[01;31m[Kwww[m[K.atmel.com/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K    44[m[K	 * Support and FAQ: visit <a href="http://[01;31m[Kwww[m[K.atmel.com/design-support/">Atmel Support</a>
[01;32m[K    44[m[K	 * Support and FAQ: visit <a href="http://[01;31m[Kwww[m[K.atmel.com/design-support/">Atmel Support</a>

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    73[m[K	http://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html */
[01;32m[K    73[m[K	http://[01;31m[Kwww[m[K.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Buffer_Management.html */

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K    28[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    28[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./portable/NetworkInterface/board_family/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./portable/NetworkInterface/esp32/NetworkInterface.c[39m

[01;32m[K     7[m[K	//     http://[01;31m[Kwww[m[K.apache.org/licenses/LICENSE-2.0

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K    15[m[K	* http://[01;31m[Kwww[m[K.renesas.com/disclaimer
[01;32m[K    15[m[K	* http://[01;31m[Kwww[m[K.renesas.com/disclaimer

[1;34m./portable/NetworkInterface/RX/ether_callback.c[39m

[01;32m[K    15[m[K	* http://[01;31m[Kwww[m[K.renesas.com/disclaimer
[01;32m[K    15[m[K	* http://[01;31m[Kwww[m[K.renesas.com/disclaimer

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./portable/Compiler/Keil/pack_struct_start.h[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/Keil/pack_struct_end.h[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/Renesas/pack_struct_start.h[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/Renesas/pack_struct_end.h[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/GCC/pack_struct_start.h[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/GCC/pack_struct_end.h[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/MSVC/pack_struct_start.h[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/MSVC/pack_struct_end.h[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/CompilerName/pack_struct_start.h[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/CompilerName/pack_struct_end.h[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/IAR/pack_struct_start.h[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./portable/Compiler/IAR/pack_struct_end.h[39m

[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html
[01;32m[K    29[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Compiler_Porting.html

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./include/FreeRTOS_errno_TCP.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./include/NetworkInterface.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K   257[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/FreeRTOS_TCP_API_Functions.html
[01;32m[K   257[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/FreeRTOS_TCP_API_Functions.html

[1;34m./include/NetworkBufferManagement.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./include/tcp_dump_packets.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K   218[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/FreeRTOS_TCP_API_Functions.html
[01;32m[K   218[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/FreeRTOS_TCP_API_Functions.html

[1;34m./include/IPTraceMacroDefaults.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    28[m[K	http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Trace.html */
[01;32m[K    28[m[K	http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Trace.html */

[1;34m./include/FreeRTOS_TCP_IP.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./include/tcp_mem_stats.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./include/FreeRTOS_UDP_IP.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./include/FreeRTOSIPConfigDefaults.h[39m

[01;32m[K    22[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    22[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K   132[m[K		#error ipconfigDHCP_USES_USER_HOOK and its associated callback have been superceeded - see http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html#ipconfigUSE_DHCP_HOOK

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org

[1;34m./include/FreeRTOS_DHCP.h[39m

[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    23[m[K	 * http://[01;31m[Kwww[m[K.FreeRTOS.org
[01;32m[K    97[m[K		http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html#ipconfigUSE_DHCP_HOOK
[01;32m[K    97[m[K		http://[01;31m[Kwww[m[K.FreeRTOS.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html#ipconfigUSE_DHCP_HOOK

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   713[m[K						[01;31m[KxAddress[m[K.sin_addr = ipLLMNR_IP_ADDR; /* Is in network byte order. */

[1;34m./portable/NetworkInterface/include/phyHandling.h[39m

[01;32m[K    24[m[K	/* A generic user-provided function that reads from the PHY-port at '[01;31m[KxAddress[m[K'( 0-based ). A 16-bit value shall be stored in
[01;32m[K    30[m[K	   PHY-port at '[01;31m[KxAddress[m[K' ( 0-based ). xRegister is the register number ( 0 .. 31 ).

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   420[m[K					[01;31m[KxAddress[m[K.sin_addr = 0U;	/* For the moment. */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   527[m[K			[01;31m[KxApplicationDHCPHook[m[K() returned another value than 'eDHCPContinue',

[1;34m./test/unit-test/ConfigFiles/FreeRTOSIPConfig.h[39m

[01;32m[K   142[m[K	 * [01;31m[KxApplicationDHCPUserHook[m[K(). */

[1;34m./test/cbmc/patches/FreeRTOSIPConfig.h[39m

[01;32m[K   141[m[K	 * [01;31m[KxApplicationDHCPUserHook[m[K(). */

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K    80[m[K		 * ([01;31m[KxApplicationDNSQueryHook[m[K returns true) an answer will be sent back.

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   341[m[K	/* This [01;31m[KxApplicationGetRandomNumber[m[K() will set *pulNumber to a random number,
[01;32m[K   348[m[K	/* "[01;31m[KxApplicationGetRandomNumber[m[K" is declared but never defined, because it may

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   298[m[K				Shouldn't we test for [01;31m[KxARPCache[m[K[ x ].ucValid == pdFALSE here ? */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K  1062[m[K			[01;31m[KxARPHadIPClash[m[K = pdFALSE;	   /* reset flag that shows if have ARP clash. */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   670[m[K			[01;31m[KxARPHeader[m[K.usHardwareType;
[01;32m[K   671[m[K			[01;31m[KxARPHeader[m[K.usProtocolType;
[01;32m[K   672[m[K			[01;31m[KxARPHeader[m[K.ucHardwareAddressLength;
[01;32m[K   673[m[K			[01;31m[KxARPHeader[m[K.ucProtocolAddressLength;
[01;32m[K   674[m[K			[01;31m[KxARPHeader[m[K.usOperation;
[01;32m[K   675[m[K			[01;31m[KxARPHeader[m[K.xTargetHardwareAddress;

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   158[m[K		ARPHeader_t [01;31m[KxARPHeader[m[K;			/* 14 + 28 = 42 */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K    51[m[K	/* The ItemValue of the sockets [01;31m[KxBoundSocketListItem[m[K member holds the socket's
[01;32m[K  1104[m[K					This macro will set '[01;31m[KxBoundSocketListItem[m[K->xItemValue' */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   630[m[K		ListItem_t [01;31m[KxBoundSocketListItem[m[K; /* Used to reference the socket from a bound sockets list. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  3524[m[K	 * not walk through the [01;31m[KxBoundTCPSocketsList[m[K the IP-task will do this.
[01;32m[K  3534[m[K		/* Here [01;31m[KxBoundTCPSocketsList[m[K can be accessed safely IP-task is the only one

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K    57[m[K	xBoundUDPSocketsList or [01;31m[KxBoundTCPSocketsList[m[K */
[01;32m[K   952[m[K	 * (xBoundUDPSocketsList or [01;31m[KxBoundTCPSocketsList[m[K).
[01;32m[K  1122[m[K						/* Add the socket to 'xBoundUDPSocketsList' or '[01;31m[KxBoundTCPSocketsList[m[K' */
[01;32m[K  3678[m[K			 * to avoid accessing [01;31m[KxBoundTCPSocketsList[m[K

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   476[m[K		 * Actually a user thing, but because [01;31m[KxBoundTCPSocketsList[m[K, let it do by the

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K    57[m[K	[01;31m[KxBoundUDPSocketsList[m[K or xBoundTCPSocketsList */
[01;32m[K   952[m[K	 * ([01;31m[KxBoundUDPSocketsList[m[K or xBoundTCPSocketsList).
[01;32m[K  1113[m[K						/* If the network driver can iterate through '[01;31m[KxBoundUDPSocketsList[m[K',
[01;32m[K  1122[m[K						/* Add the socket to '[01;31m[KxBoundUDPSocketsList[m[K' or 'xBoundTCPSocketsList' */
[01;32m[K  1252[m[K			/* If the network driver can iterate through '[01;31m[KxBoundUDPSocketsList[m[K',

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   300[m[K	extern const MACAddress_t [01;31m[KxBroadcastMACAddress[m[K; /* all 0xff's */

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K   122[m[K	     * pvBuffer does not point to a buffer and [01;31m[KxBufferLength[m[K is not

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   127[m[K		ListItem_t [01;31m[KxBufferListItem[m[K; 	/* Used to reference the buffer form the free buffer list or a socket. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  2789[m[K				/* [01;31m[KxByteCount[m[K is number of bytes that can be sent now. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  2786[m[K				/* [01;31m[KxBytesLeft[m[K is number of bytes to send, will count to zero. */

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K   122[m[K		if( [01;31m[KxCheckLoopback[m[K( pxDescriptor, bReleaseAfterSend ) != 0 )

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   675[m[K								pdTRUE /*[01;31m[KxClearOnExit[m[K*/, pdFALSE /*xWaitAllBits*/, socketDONT_BLOCK );
[01;32m[K   697[m[K					pdTRUE /*[01;31m[KxClearOnExit[m[K*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
[01;32m[K  1005[m[K				( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*[01;31m[KxClearOnExit[m[K*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
[01;32m[K  2340[m[K					( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_CONNECT, pdTRUE /*[01;31m[KxClearOnExit[m[K*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
[01;32m[K  2468[m[K					( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_ACCEPT, pdTRUE /*[01;31m[KxClearOnExit[m[K*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
[01;32m[K  2563[m[K									pdTRUE /*[01;31m[KxClearOnExit[m[K*/, pdFALSE /*xWaitAllBits*/, socketDONT_BLOCK );
[01;32m[K  2590[m[K						pdTRUE /*[01;31m[KxClearOnExit[m[K*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
[01;32m[K  2911[m[K						pdTRUE /*[01;31m[KxClearOnExit[m[K*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1552[m[K						/* The field [01;31m[KxDataLength[m[K was set to the total length of the UDP packet,

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1721[m[K			created.  Otherwise, test '[01;31m[KxDataLength[m[K' of the provided buffer. */
[01;32m[K  1767[m[K			[01;31m[KxDataLength[m[K member must get the correct length too! */

[1;34m./test/cbmc/proofs/parsing/ProcessIPPacket/ProcessIPPacket_harness.c[39m

[01;32m[K    25[m[K		/* Minimum length of the pxNetworkBuffer->[01;31m[KxDataLength[m[K is at least the size of the IPPacket_t. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   749[m[K				The validity of `[01;31m[KxDataLength[m[K` prvProcessIPPacket has been confirmed
[01;32m[K   884[m[K					/* [01;31m[KxDataLength[m[K is the size of the total packet, including the Ethernet header. */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   896[m[K	//			xLength = xMicrelDevice.rx_buffers[ rxHead ]->[01;31m[KxDataLength[m[K & 3;

[1;34m./portable/NetworkInterface/M487/NetworkInterface.c[39m

[01;32m[K   136[m[K	//    FreeRTOS_printf(("<-- dataLength=%d\n",pxDescriptor->[01;31m[KxDataLength[m[K));
[01;32m[K   153[m[K	    //SendData: pt = pxDescriptor->pucBuffer, length = pxDescriptor->[01;31m[KxDataLength[m[K

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   179[m[K	     * by pxDescriptor->[01;31m[KxDataLength[m[K. */

[1;34m./portable/NetworkInterface/LPC17xx/NetworkInterface.c[39m

[01;32m[K   141[m[K				if( pxNetworkBuffer->[01;31m[KxDataLength[m[K < EMAC_ETH_MAX_FLEN ) /*_RB_ The size needs to come from FreeRTOSIPConfig.h. */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K   287[m[K					/* The value of '[01;31m[KxDataLength[m[K' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1181[m[K					/* [01;31m[KxDataLength[m[K is the size of the total packet, including the Ethernet header. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   451[m[K	 * The caller must ensure that pxNetworkBuffer->[01;31m[KxDataLength[m[K is the UDP packet 

[1;34m./include/FreeRTOS_IP.h[39m

[01;32m[K   130[m[K		size_t [01;31m[KxDataLength[m[K; 			/* Starts by holding the total Ethernet frame length, then the UDP/TCP payload length. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   444[m[K	 * Return the checksum generated over [01;31m[KxDataLengthBytes[m[K from pucNextData.

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   262[m[K	/* "[01;31m[KxDefaultAddressing[m[K" should be defined at block scope. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   318[m[K	extern NetworkAddressingParameters_t [01;31m[KxDefaultAddressing[m[K;	/*lint !e9003 could define variable '[01;31m[KxDefaultAddressing[m[K' at block scope [MISRA 2012 Rule 8.9, advisory]. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   328[m[K	/* The local IP address is accessed from within [01;31m[KxDefaultPartUDPPacketHeader[m[K,
[01;32m[K   332[m[K	/* The local MAC address is accessed from within [01;31m[KxDefaultPartUDPPacketHeader[m[K,

[1;34m./portable/NetworkInterface/mw300_rd/NetworkInterface.c[39m

[01;32m[K   122[m[K	    pxNetworkBuffer = pxGetNetworkBufferWithDescriptor(/*payload_len*/datalen, [01;31m[KxDescriptorWaitTime[m[K);

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    67[m[K		MACAddress_t [01;31m[KxDestinationAddress[m[K; /*  0 + 6 = 6  */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K  1040[m[K			/* prepare [01;31m[KxDHCPData[m[K with data to test. */

[1;34m./test/cbmc/proofs/ProcessDHCPReplies/ProcessDHCPReplies_harness.c[39m

[01;32m[K    30[m[K	    /* Omitting model of an unconstrained [01;31m[KxDHCPData[m[K because [01;31m[KxDHCPData[m[K is */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K  1060[m[K			EP_DHCPData.[01;31m[KxDHCPTxPeriod[m[K = pdMS_TO_TICKS( 3000UL + ( ulNumbers[ 0 ] & 0x3ffUL ) ); /*  do ARP test every (3 + 0-1024mS) seconds. */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   728[m[K							/* This zero-copy driver makes sure that every '[01;31m[KxDMARxDescriptors[m[K' contains

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   253[m[K	/* A DNS query consists of a header, as described in 'struct [01;31m[KxDNSMessage[m[K'

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   674[m[K			correct parameters, and [01;31m[KxDNSSocket[m[K is != NULL, the return value is 

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K   101[m[K	/* Bollean '[01;31m[KxDumpingReady[m[K' becomes true once all desired packet have been collected.

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   505[m[K		/* These variables will be used in XEmacPs_Start (see src/[01;31m[Kxemacps[m[K.c). */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif.h[39m

[01;32m[K    39[m[K	#include "[01;31m[Kxemacps[m[K.h"		/* defines [01;31m[KXEmacPs[m[K API */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_hw.c[39m

[01;32m[K    41[m[K	/*** IMPORTANT: Define PEEP in [01;31m[Kxemacpsif[m[K.h and sys_arch_raw.c

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_hw.h[39m

[01;32m[K    31[m[K	//void init_emacps(xemacpsif_s *[01;31m[Kxemacpsif[m[K, struct netif *netif);

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_physpeed.c[39m

[01;32m[K    75[m[K	/*** IMPORTANT: Define PEEP in [01;31m[Kxemacpsif[m[K.h and sys_arch_raw.c

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif.h[39m

[01;32m[K   104[m[K	//extern xemacpsif_s [01;31m[Kxemacpsif[m[K;

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K   204[m[K			to it.  The task's handle is stored in [01;31m[KxEMACTaskHandle[m[K so interrupts can

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   469[m[K				to it.  The task's handle is stored in [01;31m[KxEMACTaskHandle[m[K so interrupts can
[01;32m[K   481[m[K		} /* if( [01;31m[KxEMACTaskHandle[m[K == NULL ) */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   668[m[K			[01;31m[KxEthernetHeader[m[K.ulDestinationAddress
[01;32m[K   669[m[K			[01;31m[KxEthernetHeader[m[K.usFrameType;

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K   132[m[K					[01;31m[KxEthernetHeader[m[K.xSourceAddress
[01;32m[K   133[m[K					[01;31m[KxEthernetHeader[m[K.usFrameType

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   157[m[K		EthernetHeader_t [01;31m[KxEthernetHeader[m[K;	/*  0 + 14 = 14 */
[01;32m[K   185[m[K		EthernetHeader_t [01;31m[KxEthernetHeader[m[K; /*  0 + 14 = 14 */
[01;32m[K   195[m[K		EthernetHeader_t [01;31m[KxEthernetHeader[m[K; /*  0 + 14 = 14 */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1382[m[K						/* The field '[01;31m[KxEventBits[m[K' is used to store regular socket events

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3102[m[K				/* In [01;31m[KxEventBits[m[K the driver may indicate that the socket has

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   372[m[K	/* For now, the lower 8 bits in '[01;31m[KxEventBits[m[K' will be reserved for the above

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   694[m[K				'eSOCKET_RECEIVE' bit in '[01;31m[KxEventGroup[m[K', if it receives data for this
[01;32m[K  1005[m[K				( void ) xEventGroupWaitBits( pxSocket->[01;31m[KxEventGroup[m[K, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
[01;32m[K  2340[m[K					( void ) xEventGroupWaitBits( pxSocket->[01;31m[KxEventGroup[m[K, ( EventBits_t ) eSOCKET_CONNECT, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
[01;32m[K  2433[m[K						/* Ask to set an event in '[01;31m[KxEventGroup[m[K' as soon as a new
[01;32m[K  2468[m[K					( void ) xEventGroupWaitBits( pxSocket->[01;31m[KxEventGroup[m[K, ( EventBits_t ) eSOCKET_ACCEPT, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   426[m[K					( [01;31m[KxEventGroup[m[K != NULL ) so it can be used now to wake up the

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1005[m[K				( void ) [01;31m[KxEventGroupWaitBits[m[K( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
[01;32m[K  2340[m[K					( void ) [01;31m[KxEventGroupWaitBits[m[K( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_CONNECT, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
[01;32m[K  2468[m[K					( void ) [01;31m[KxEventGroupWaitBits[m[K( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_ACCEPT, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K   142[m[K	 * The parameter '[01;31m[KxExpected[m[K' indicates whether the identifier in the reply

[1;34m./portable/BufferManagement/BufferAllocation_1.c[39m

[01;32m[K    60[m[K	to the system.  All the network buffers referenced from [01;31m[KxFreeBuffersList[m[K exist
[01;32m[K    62[m[K	when the [01;31m[KxFreeBuffersList[m[K is filled (as all the buffers are free when the system

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K    81[m[K	to the system.  All the network buffers referenced from [01;31m[KxFreeBuffersList[m[K exist
[01;32m[K    83[m[K	when the [01;31m[KxFreeBuffersList[m[K is filled (as all the buffers are free when the system

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   115[m[K	 * to the system.  All the network buffers referenced from [01;31m[KxFreeBuffersList[m[K exist
[01;32m[K   117[m[K	 * when the [01;31m[KxFreeBuffersList[m[K is filled (as all the buffers are free when the system

[1;34m./include/NetworkInterface.h[39m

[01;32m[K    41[m[K	/* "[01;31m[KxGetPhyLinkStatus[m[K" is provided by the network driver. */

[1;34m./FreeRTOS_DHCP.c[39m

[01;32m[K   526[m[K			/* [01;31m[KxGivingUp[m[K became true either because of a time-out, or because

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   172[m[K		the value of [01;31m[KxGMACSwitchRequired[m[K. */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   251[m[K		the value of [01;31m[KxGMACSwitchRequired[m[K. */

[1;34m./portable/NetworkInterface/include/phyHandling.h[39m

[01;32m[K   106[m[K	'[01;31m[KxHadReception[m[K' : make this true if a packet has been received since the

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   327[m[K		 *		F_TCP_UDP_Handler_t [01;31m[KxHand[m[K = { xOnTCPReceive };
[01;32m[K   328[m[K		 *		FreeRTOS_setsockopt( sock, 0, FREERTOS_SO_TCP_RECV_HANDLER, ( void * ) &[01;31m[KxHand[m[K, sizeof( [01;31m[KxHand[m[K ) );

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K   294[m[K						xReturn = pdFAIL; /* [01;31m[KxHandler[m[K has consumed the data, do not add it to .xWaitingPacketsList'. */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1227[m[K				/* If '[01;31m[KxHasSpace[m[K', it looks like the peer has at least space for 1

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   588[m[K	        /* If [01;31m[KxHigherPriorityTaskWoken[m[K is now set to pdTRUE then a context switch

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   307[m[K		 * 		F_TCP_UDP_Handler_t [01;31m[KxHnd[m[K = { vMyConnectHandler };
[01;32m[K   308[m[K		 * 		FreeRTOS_setsockopt( sock, 0, FREERTOS_SO_TCP_CONN_HANDLER, ( void * ) &[01;31m[KxHnd[m[K, sizeof( [01;31m[KxHnd[m[K ) );

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_cancel/DNSgetHostByName_cancel_harness.c[39m

[01;32m[K    47[m[K		vDNSSetCallBack( pcHostName, &pvSearchID, pCallback, xTimeout, [01;31m[KxIdentifier[m[K); /* Add an item to be able to check the cancel function if the list is non-empty. */

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K    45[m[K	/* [01;31m[KXilinx[m[K library files. */

[1;34m./portable/NetworkInterface/Zynq/x_topology.h[39m

[01;32m[K     2[m[K	 * Copyright (c) 2007-2013 [01;31m[KXilinx[m[K, Inc.  All rights reserved.
[01;32m[K     4[m[K	 * [01;31m[KXilinx[m[K, Inc.
[01;32m[K     5[m[K	 * [01;31m[KXILINX[m[K IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
[01;32m[K     8[m[K	 * STANDARD, [01;31m[KXILINX[m[K IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
[01;32m[K    11[m[K	 * [01;31m[KXILINX[m[K EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K   170[m[K		/* This function is called from an ISR. The [01;31m[KXilinx[m[K ISR-handler has already

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_hw.c[39m

[01;32m[K     2[m[K	 * Copyright (c) 2010-2013 [01;31m[KXilinx[m[K, Inc.  All rights reserved.
[01;32m[K     4[m[K	 * [01;31m[KXilinx[m[K, Inc.
[01;32m[K     5[m[K	 * [01;31m[KXILINX[m[K IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
[01;32m[K     8[m[K	 * STANDARD, [01;31m[KXILINX[m[K IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
[01;32m[K    11[m[K	 * [01;31m[KXILINX[m[K EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_hw.h[39m

[01;32m[K     2[m[K	 * Copyright (c) 2010-2013 [01;31m[KXilinx[m[K, Inc.  All rights reserved.
[01;32m[K     4[m[K	 * [01;31m[KXilinx[m[K, Inc.
[01;32m[K     5[m[K	 * [01;31m[KXILINX[m[K IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
[01;32m[K     8[m[K	 * STANDARD, [01;31m[KXILINX[m[K IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
[01;32m[K    11[m[K	 * [01;31m[KXILINX[m[K EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_physpeed.c[39m

[01;32m[K    34[m[K	 * Some portions copyright (c) 2010-2013 [01;31m[KXilinx[m[K, Inc.  All rights reserved.
[01;32m[K    36[m[K	 * [01;31m[KXilinx[m[K, Inc.
[01;32m[K    37[m[K	 * [01;31m[KXILINX[m[K IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
[01;32m[K    40[m[K	 * STANDARD, [01;31m[KXILINX[m[K IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
[01;32m[K    43[m[K	 * [01;31m[KXILINX[m[K EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif.h[39m

[01;32m[K     2[m[K	 * Copyright (c) 2010-2013 [01;31m[KXilinx[m[K, Inc.  All rights reserved.
[01;32m[K     4[m[K	 * [01;31m[KXilinx[m[K, Inc.
[01;32m[K     5[m[K	 * [01;31m[KXILINX[m[K IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
[01;32m[K     8[m[K	 * STANDARD, [01;31m[KXILINX[m[K IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
[01;32m[K    11[m[K	 * [01;31m[KXILINX[m[K EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1018[m[K	 * '[01;31m[KxInternal[m[K' is used for TCP sockets only: it allows to have several

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K   134[m[K					[01;31m[KxIPHeader[m[K.ucVersionHeaderLength
[01;32m[K   135[m[K					[01;31m[KxIPHeader[m[K.ucDifferentiatedServicesCode
[01;32m[K   136[m[K					[01;31m[KxIPHeader[m[K.usLength
[01;32m[K   137[m[K					[01;31m[KxIPHeader[m[K.usIdentification
[01;32m[K   138[m[K					[01;31m[KxIPHeader[m[K.usFragmentOffset
[01;32m[K   139[m[K					[01;31m[KxIPHeader[m[K.ucTimeToLive
[01;32m[K   140[m[K					[01;31m[KxIPHeader[m[K.ucProtocol
[01;32m[K   142[m[K					[01;31m[KxIPHeader[m[K.usHeaderChecksum

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   186[m[K		IPHeader_t [01;31m[KxIPHeader[m[K;             /* 14 + 20 = 34 */
[01;32m[K   196[m[K		IPHeader_t [01;31m[KxIPHeader[m[K;             /* 14 + 20 = 34 */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   307[m[K	/* "[01;31m[KxIPTaskInitialised[m[K" should be defined at block scope. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   126[m[K		 * Create a txStream or a rxStream, depending on the parameter '[01;31m[KxIsInputStream[m[K'

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1104[m[K					This macro will set 'xBoundSocketListItem->[01;31m[KxItemValue[m[K' */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   578[m[K		/* Setting [01;31m[KxLastGratuitousARPTime[m[K to 0 will force a gratuitous ARP the next

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3906[m[K			}	/* for( xRound = 0; xRound <= [01;31m[KxLastRound[m[K; xRound++ ) */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2505[m[K		 * is being applied to the pointers "xSource.u16ptr" and "[01;31m[KxLastSource[m[K.u16ptr",

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   149[m[K	 * (ulSequenceNumber+[01;31m[KxLength[m[K).  Normally none will be found, because the next Rx
[01;32m[K   150[m[K	 * segment should have a sequence number equal to '(ulSequenceNumber+[01;31m[KxLength[m[K)'.

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K    76[m[K						ksz8851_fifo_write( pxNetworkBuffer->pucEthernetBuffer, [01;31m[KxLength[m[K, [01;31m[KxLength[m[K );
[01;32m[K   896[m[K	//			[01;31m[KxLength[m[K = xMicrelDevice.rx_buffers[ rxHead ]->xDataLength & 3;
[01;32m[K   897[m[K	//			if( [01;31m[KxLength[m[K != 0 )
[01;32m[K   899[m[K	//				ksz8851_fifo_dummy( 4 - [01;31m[KxLength[m[K );
[01;32m[K   950[m[K	//				ksz8851_fifo_dummy( 4 - [01;31m[KxLength[m[K );

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   584[m[K											 		 * typedef void (* FOnTCPReceive_t) (Socket_t xSocket, void *pData, size_t [01;31m[KxLength[m[K );
[01;32m[K   607[m[K												 * typedef void (* FOnUDPReceive_t) (Socket_t xSocket, void *pData, size_t [01;31m[KxLength[m[K, struct freertos_sockaddr *pxAddr );

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K   685[m[K			Otherwise, polling will be done when the '[01;31m[KxLinkStatusTimer[m[K' expires. */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   310[m[K		but it puts the item just before [01;31m[KxListEnd[m[K, so it will be the last item

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K   333[m[K		 * The program should only try to release its semaphore if '[01;31m[KxListItemAlreadyInFreeList[m[K' is false.

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   549[m[K	     * The program should only try to release its semaphore if '[01;31m[KxListItemAlreadyInFreeList[m[K' is false.

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3167[m[K						[01;31m[KxLocalPort[m[K, ulRemoteIP AND xRemotePort. */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif.h[39m

[01;32m[K    42[m[K	//#include "[01;31m[Kxlwipconfig[m[K.h"

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K    45[m[K		MACAddress_t [01;31m[KxMACAddress[m[K;	/* The MAC address of an ARP cache entry. */
[01;32m[K    47[m[K	    uint8_t ucValid;			/* pdTRUE: [01;31m[KxMACAddress[m[K is valid, pdFALSE: waiting for ARP reply */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   484[m[K				/* Wated more than [01;31m[KxMaxTime[m[K, return. */

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K   100[m[K	 * Look for the link to be up every few milliseconds until either [01;31m[KxMaxTime[m[K time

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   379[m[K				/* Wated more than [01;31m[KxMaxTime[m[K, return. */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   581[m[K		}	/* switch( [01;31m[KxMicrelDevice[m[K.ul_spi_pdc_status ) */
[01;32m[K   755[m[K					/* Now [01;31m[KxMicrelDevice[m[K.us_pending_frame != 0 */
[01;32m[K   896[m[K	//			xLength = [01;31m[KxMicrelDevice[m[K.rx_buffers[ rxHead ]->xDataLength & 3;
[01;32m[K   981[m[K				//[01;31m[KxMicrelDevice[m[K.ul_had_intn_interrupt = 1;
[01;32m[K   993[m[K		}	/* switch( [01;31m[KxMicrelDevice[m[K.ul_spi_pdc_status ) */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   554[m[K									 * This counter is separate from the [01;31m[KxmitCount[m[K in the

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   412[m[K			( *pulIPAddress == [01;31m[KxNetworkAddressing[m[K.ulBroadcastAddress ) )/* Or a local broadcast address, eg 192.168.1.255? */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   315[m[K	These values will be copied to '[01;31m[KxNetworkAddressing[m[K' in case DHCP is not used,

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   698[m[K	 * called 'xTCP.xPacket'.   A temporary [01;31m[KxNetworkBuffer[m[K will be used to pass

[1;34m./test/cbmc/proofs/ARP/ARP_FreeRTOS_OutputARPRequest/OutputARPRequest_harness.c[39m

[01;32m[K    50[m[K	 * casts the pointer [01;31m[KxNetworkBuffer[m[K.pucEthernetBuffer into an ARPPacket_t pointer

[1;34m./FreeRTOS_DNS.c[39m

[01;32m[K  1568[m[K					/* Should not occur: pucUDPPayloadBuffer is part of a [01;31m[KxNetworkBufferDescriptor[m[K */

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K   332[m[K		 * Update the network state machine, unless the program fails to release its '[01;31m[KxNetworkBufferSemaphore[m[K'.

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   548[m[K	     * Update the network state machine, unless the program fails to release its '[01;31m[KxNetworkBufferSemaphore[m[K'.

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   311[m[K		/* Keep track of the lowest amount of space in '[01;31m[KxNetworkEventQueue[m[K'. */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   116[m[K	 * Function Name: [01;31m[KxNetworkInterfaceInitialise[m[K ()
[01;32m[K   158[m[K	} /* End of function [01;31m[KxNetworkInterfaceInitialise[m[K() */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   483[m[K	 *			[01;31m[KxNetworkInterfaceOutput[m[K()	// Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
[01;32m[K   483[m[K	 *			[01;31m[KxNetworkInterfaceOutput[m[K()	// Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
[01;32m[K  3057[m[K	 *				[01;31m[KxNetworkInterfaceOutput[m[K()	// Sends data to the NIC
[01;32m[K  3057[m[K	 *				[01;31m[KxNetworkInterfaceOutput[m[K()	// Sends data to the NIC
[01;32m[K  3060[m[K	 *			[01;31m[KxNetworkInterfaceOutput[m[K()	// Sends data to the NIC
[01;32m[K  3060[m[K	 *			[01;31m[KxNetworkInterfaceOutput[m[K()	// Sends data to the NIC

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   705[m[K		 * The function is to be called within the function [01;31m[KxNetworkInterfaceOutput[m[K().

[1;34m./test/cbmc/stubs/freertos_api.c[39m

[01;32m[K   383[m[K	 * Abstract [01;31m[KxNetworkInterfaceOutput[m[K
[01;32m[K   384[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Porting.html#[01;31m[KxNetworkInterfaceOutput[m[K
[01;32m[K   384[m[K	 * https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/Embedded_Ethernet_Porting.html#[01;31m[KxNetworkInterfaceOutput[m[K

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K    60[m[K				[01;31m[KxNetworkInterfaceOutput[m[K()

[1;34m./portable/NetworkInterface/Zynq/NetworkInterface.c[39m

[01;32m[K   437[m[K					[01;31m[KxNetworkInterfaceOutput[m[K() can send packets. */

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   365[m[K		It will release each Network Buffer used in [01;31m[KxNetworkInterfaceOutput[m[K().

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   352[m[K		It will release each Network Buffer used in [01;31m[KxNetworkInterfaceOutput[m[K().

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   162[m[K	 * Function Name: [01;31m[KxNetworkInterfaceOutput[m[K ()
[01;32m[K   203[m[K	} /* End of function [01;31m[KxNetworkInterfaceOutput[m[K() */
[01;32m[K   399[m[K	             * [01;31m[KxNetworkInterfaceOutput[m[K() can send packets. */

[1;34m./include/FreeRTOS_ARP.h[39m

[01;32m[K   119[m[K	The function is to be called within the function [01;31m[KxNetworkInterfaceOutput[m[K()

[1;34m./portable/NetworkInterface/pic32mzef/NetworkInterface_wifi.c[39m

[01;32m[K    77[m[K	        [01;31m[KxNetworkParams[m[K.cChannel = M2M_WIFI_CH_ALL; /* Scan all channels (255) */

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   322[m[K		 *		static BaseType_t [01;31m[KxOnTCPReceive[m[K( Socket_t xSocket, void * pData, size_t uxLength )
[01;32m[K   327[m[K		 *		F_TCP_UDP_Handler_t xHand = { [01;31m[KxOnTCPReceive[m[K };

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   619[m[K				prvTCPPrepareConnect() prepares '[01;31m[KxPacket[m[K' and returns pdTRUE if
[01;32m[K   642[m[K				stored in the socket field '[01;31m[KxPacket[m[K'.  It will be wrapped in a
[01;32m[K   698[m[K	 * called 'xTCP.[01;31m[KxPacket[m[K'.   A temporary xNetworkBuffer will be used to pass
[01;32m[K  1755[m[K					/* Or from the socket field 'xTCP.[01;31m[KxPacket[m[K'. */

[1;34m./tools/tcp_dump_packets.c[39m

[01;32m[K   554[m[K						DumpPacket_t *[01;31m[KxPacketList[m[K[ dumpPACKET_COUNT ] =

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif.h[39m

[01;32m[K    30[m[K	#include "xparameters_ps.h"	/* defines [01;31m[KXPAR[m[K values */

[1;34m./FreeRTOS_Stream_Buffer.c[39m

[01;32m[K   128[m[K	 * if '[01;31m[KxPeek[m[K' is pdTRUE, or if 'uxOffset' is non-zero, the 'lTail' pointer will

[1;34m./include/FreeRTOS_Stream_Buffer.h[39m

[01;32m[K   224[m[K	 * [01;31m[KxPeek[m[K -		If set to pdTRUE the data will remain in the buffer.

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K   450[m[K	/* [01;31m[KxPhyFixedValue[m[K(): this function is called in case auto-negotiation is disabled.
[01;32m[K   484[m[K	/* xPhyStartAutoNegotiation() is the alternative [01;31m[KxPhyFixedValue[m[K():

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K   451[m[K	The caller has set the values in '[01;31m[KxPhyPreferences[m[K' (ucDuplex and ucSpeed).

[1;34m./portable/NetworkInterface/include/phyHandling.h[39m

[01;32m[K   102[m[K	/* Do not use auto negotiation but use predefined values from 'pxPhyObject->[01;31m[KxPhyPreferences[m[K'. */

[1;34m./portable/NetworkInterface/Common/phyHandling.c[39m

[01;32m[K   484[m[K	/* [01;31m[KxPhyStartAutoNegotiation[m[K() is the alternative xPhyFixedValue():

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1114[m[K						by calling [01;31m[KxPortHasUDPSocket[m[K() then the IP-task must temporarily
[01;32m[K  1253[m[K			by calling [01;31m[KxPortHasUDPSocket[m[K(), then the IP-task must temporarily

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif.h[39m

[01;32m[K    41[m[K	//#include "netif/[01;31m[Kxpqueue[m[K.h"

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   632[m[K			vListInitialise( &( pxWindow->[01;31m[KxPriorityQueue[m[K ) );	/* Priority queue: segments which must be sent immediately */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    65[m[K		struct xLIST_ITEM xQueueItem;	/* TX only: segments can be linked in one of three queues: [01;31m[KxPriorityQueue[m[K, xTxQueue, and xWaitQueue */
[01;32m[K   121[m[K		List_t [01;31m[KxPriorityQueue[m[K;				/* Priority queue: segments which must be sent immediately */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2902[m[K				/* The listen state was handled in [01;31m[KxProcessReceivedTCPPacket[m[K().
[01;32m[K  3053[m[K	 *	[01;31m[KxProcessReceivedTCPPacket[m[K()

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1746[m[K						[01;31m[KxProcessReceivedUDPPacket[m[K(), as soon as it's know that the message

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   350[m[K					pxSocket->ucProtocol		= ( uint8_t ) [01;31m[KxProtocol[m[K; /* protocol: UDP or TCP */

[1;34m./test/cbmc/include/queue_init.h[39m

[01;32m[K    37[m[K	/* [01;31m[KxQueueCreateSet[m[K is compiled out if configUSE_QUEUE_SETS != 1.*/

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    65[m[K		struct xLIST_ITEM [01;31m[KxQueueItem[m[K;	/* TX only: segments can be linked in one of three queues: xPriorityQueue, xTxQueue, and xWaitQueue */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   526[m[K					/* [01;31m[KxQueueReceive[m[K() returned because of a normal time-out. */

[1;34m./portable/NetworkInterface/ksz8851snl/NetworkInterface.c[39m

[01;32m[K   141[m[K							ksz8851_fifo_read( pxNetworkBuffer->pucEthernetBuffer, [01;31m[KxReadLength[m[K );

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   631[m[K		TickType_t [01;31m[KxReceiveBlockTime[m[K; /* if recv[to] is called while no data is available, wait this amount of time. Unit in clock-ticks */

[1;34m./portable/NetworkInterface/include/phyHandling.h[39m

[01;32m[K    25[m[K	  '*pulValue'. [01;31m[KxRegister[m[K is the register number ( 0 .. 31 ). In fact all PHY registers are 16-bit.
[01;32m[K    30[m[K	   PHY-port at 'xAddress' ( 0-based ). [01;31m[KxRegister[m[K is the register number ( 0 .. 31 ).

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2785[m[K			/* Set the parameter '[01;31m[KxReleaseAfterSend[m[K' to the value of

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   164[m[K	 * Arguments    : pxDescriptor, [01;31m[KxReleaseAfterSend[m[K

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   643[m[K	TickType_t [01;31m[KxRemainingTime[m[K = ( TickType_t ) 0; /* Obsolete assignment, but some compilers output a warning if its not done. */
[01;32m[K   697[m[K					pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, [01;31m[KxRemainingTime[m[K );
[01;32m[K  2340[m[K					( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_CONNECT, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, [01;31m[KxRemainingTime[m[K );
[01;32m[K  2468[m[K					( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_ACCEPT, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, [01;31m[KxRemainingTime[m[K );
[01;32m[K  2590[m[K						pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, [01;31m[KxRemainingTime[m[K );
[01;32m[K  2911[m[K						pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, [01;31m[KxRemainingTime[m[K );

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3167[m[K						xLocalPort, ulRemoteIP AND [01;31m[KxRemotePort[m[K. */

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K   222[m[K			/* Add 2 bytes to [01;31m[KxRequestedSizeBytes[m[K and round up [01;31m[KxRequestedSizeBytes[m[K

[1;34m./test/cbmc/proofs/DHCP/DHCPProcess/DHCPProcess_harness.c[39m

[01;32m[K    91[m[K	     * [01;31m[KxReset[m[K==True resets the state to eWaitingSendFirstDiscover.

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1762[m[K			/* [01;31m[KxResize[m[K is false, the network buffer provided was big enough. */
[01;32m[K  1763[m[K			configASSERT( pxNetworkBuffer != NULL );	/* to tell lint: when [01;31m[KxResize[m[K is false, pxNetworkBuffer is not NULL. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  3229[m[K				/* pxSocket is not NULL when [01;31m[KxResult[m[K != pdFAIL. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  2051[m[K			/* lint: ucOctet has been set because [01;31m[KxResult[m[K == pdPASS. */
[01;32m[K  2239[m[K				[01;31m[KxResult[m[K = bMayConnect( pxSocket ); /* -EINPROGRESS, -EAGAIN, or 0 for OK */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1023[m[K	BaseType_t [01;31m[KxReturn[m[K = 0; /* In Berkeley sockets, 0 means pass for bind(). */

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K   294[m[K						[01;31m[KxReturn[m[K = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
[01;32m[K   309[m[K						[01;31m[KxReturn[m[K = pdFAIL; /* we did not consume or release the buffer */
[01;32m[K   316[m[K			if( [01;31m[KxReturn[m[K == pdPASS )	/*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
[01;32m[K   318[m[K			/* [01;31m[KxReturn[m[K is still pdPASS. */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  3906[m[K			}	/* for( [01;31m[KxRound[m[K = 0; [01;31m[KxRound[m[K <= xLastRound; [01;31m[KxRound[m[K++ ) */

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   250[m[K		/* gmac_handler() may call [01;31m[KxRxCallback[m[K() which may change

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K    97[m[K	 * 'xTxSegments' or '[01;31m[KxRxSegments[m[K'
[01;32m[K   107[m[K	 * segments: 'pxWindow->[01;31m[KxRxSegments[m[K'.
[01;32m[K   567[m[K			/* Take it out of [01;31m[KxRxSegments[m[K/xTxSegments */
[01;32m[K   590[m[K			one to remove the segments from [01;31m[KxRxSegments[m[K, and a second round to clear

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   127[m[K		List_t [01;31m[KxRxSegments[m[K;					/* A linked list of reception segments, order depends on sequence of arrival */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    66[m[K		struct xLIST_ITEM [01;31m[KxSegmentItem[m[K;	/* With this item the segment can be connected to a list, depending on who is owning it */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K    95[m[K	 * Available descriptors are stored in the '[01;31m[KxSegmentList[m[K'
[01;32m[K   115[m[K	 * The socket will borrow all segments from a common pool: '[01;31m[KxSegmentList[m[K',
[01;32m[K   330[m[K			/* Allocate space for 'xTCPSegments' and store them in '[01;31m[KxSegmentList[m[K'. */
[01;32m[K   406[m[K			common pool: '[01;31m[KxSegmentList[m[K', which is a list of 'TCPSegment_t' */
[01;32m[K   424[m[K				/* Remove the item from [01;31m[KxSegmentList[m[K. */
[01;32m[K   573[m[K			/* Return it to [01;31m[KxSegmentList[m[K */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   632[m[K		TickType_t [01;31m[KxSendBlockTime[m[K; /* if send[to] is called while there is not enough space to send, wait this amount of time. Unit in clock-ticks */

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   651[m[K		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 	/* [01;31m[KxSenderHardwareAddress[m[K. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    82[m[K		MACAddress_t [01;31m[KxSenderHardwareAddress[m[K;	/*  8 +  6 = 14 */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   270[m[K	    /* Used to indicate that [01;31m[KxSendEventStructToIPTask[m[K() is being called because

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2707[m[K				( [01;31m[KxSendLength[m[K == ipNUMERIC_CAST( BaseType_t, uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K  1228[m[K				more new segment of size MSS.  [01;31m[KxSize[m[K.ulTxWindowLength is the self-imposed

[1;34m./portable/BufferManagement/BufferAllocation_2.c[39m

[01;32m[K   169[m[K		/* Round up [01;31m[KxSize[m[K to the nearest multiple of N bytes,

[1;34m./portable/NetworkInterface/pic32mzef/BufferAllocation_2.c[39m

[01;32m[K   359[m[K	    /* Round up [01;31m[KxSize[m[K to the nearest multiple of N bytes,

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   557[m[K			struct [01;31m[KxSOCKET[m[K *pxPeerSocket;	/* for server socket: child, for child socket: parent */
[01;32m[K   584[m[K											 		 * typedef void (* FOnTCPReceive_t) (Socket_t [01;31m[KxSocket[m[K, void *pData, size_t xLength );
[01;32m[K   587[m[K				FOnConnected_t pxHandleConnected;	/* Actually type: typedef void (* FOnConnected_t) (Socket_t [01;31m[KxSocket[m[K, BaseType_t ulConnected ); */
[01;32m[K   607[m[K												 * typedef void (* FOnUDPReceive_t) (Socket_t [01;31m[KxSocket[m[K, void *pData, size_t xLength, struct freertos_sockaddr *pxAddr );

[1;34m./include/FreeRTOS_Sockets.h[39m

[01;32m[K   304[m[K		 *		static void vMyConnectHandler (Socket_t [01;31m[KxSocket[m[K, BaseType_t ulConnected)
[01;32m[K   322[m[K		 *		static BaseType_t xOnTCPReceive( Socket_t [01;31m[KxSocket[m[K, void * pData, size_t uxLength )

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  4068[m[K			/* Now set the return events, copying from the socked field '[01;31m[KxSocketBits[m[K'. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   460[m[K					and update the socket field [01;31m[KxSocketBits[m[K. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2443[m[K			/* Now [01;31m[KxSource[m[K is word (16-bit) aligned. */
[01;32m[K  2452[m[K			/* Now [01;31m[KxSource[m[K is word (32-bit) aligned. */
[01;32m[K  2505[m[K		 * is being applied to the pointers "[01;31m[KxSource[m[K.u16ptr" and "xLastSource.u16ptr",

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K   132[m[K					xEthernetHeader.[01;31m[KxSourceAddress[m[K

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    68[m[K		MACAddress_t [01;31m[KxSourceAddress[m[K;      /*  6 + 6 = 12 */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   456[m[K	 * Arguments    : [01;31m[KxStatus[m[K : true when statyus has become high

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    49[m[K		int32_t lStreamPos;				/* reference to the [t|r][01;31m[KxStream[m[K of the socket */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  2521[m[K		/* Assigning value from "xTerm.u32" to "[01;31m[KxSum[m[K.u32" here, but that stored value is overwritten before it can be used.

[1;34m./FreeRTOS_ARP.c[39m

[01;32m[K   653[m[K		0x00, 0x00, 0x00, 0x00, 0x00, 0x00 		/* [01;31m[KxTargetHardwareAddress[m[K. */
[01;32m[K   675[m[K			xARPHeader.[01;31m[KxTargetHardwareAddress[m[K;

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K    84[m[K		MACAddress_t [01;31m[KxTargetHardwareAddress[m[K;	/* 18 +  6 = 24  */

[1;34m./test/cbmc/proofs/CBMCStubLibrary/tasksStubs.c[39m

[01;32m[K    10[m[K	   This value is used to bound any loop depending on [01;31m[KxTaskCheckForTimeOut[m[K

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_cancel/DNSgetHostByName_cancel_harness.c[39m

[01;32m[K    26[m[K	/* Abstraction of [01;31m[KxTaskCheckForTimeOut[m[K from task pool. This also abstracts the concurrency. */ 

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_cancel/DNSgetHostByName_cancel_harness.c[39m

[01;32m[K    29[m[K	/* Abstraction of [01;31m[KxTaskResumeAll[m[K from task pool. This also abstracts the concurrency. */ 

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   609[m[K					pxSocket->u.[01;31m[KxTCP[m[K.ulRemoteIP,		/* IP address of remote machine. */
[01;32m[K   610[m[K					pxSocket->u.[01;31m[KxTCP[m[K.usRemotePort ) );	/* Port on remote machine. */
[01;32m[K   698[m[K	 * called '[01;31m[KxTCP[m[K.xPacket'.   A temporary xNetworkBuffer will be used to pass
[01;32m[K  1413[m[K			/* '[01;31m[KxTCP[m[K.uxRxWinSize' is the size of the reception window in units of MSS. */
[01;32m[K  1515[m[K	BaseType_t bBefore = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.[01;31m[KxTCP[m[K.ucTCPState ) );	/* Was it connected ? */
[01;32m[K  1755[m[K					/* Or from the socket field '[01;31m[KxTCP[m[K.xPacket'. */
[01;32m[K  1906[m[K				if( pxSocket->u.[01;31m[KxTCP[m[K.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
[01;32m[K  1909[m[K						pxSocket->u.[01;31m[KxTCP[m[K.ulRemoteIP,			/* IP address of remote machine. */
[01;32m[K  1910[m[K						pxSocket->u.[01;31m[KxTCP[m[K.usRemotePort ) );	/* Port on remote machine. */
[01;32m[K  2706[m[K				( pxSocket->u.[01;31m[KxTCP[m[K.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
[01;32m[K  2708[m[K				( pxSocket->u.[01;31m[KxTCP[m[K.ucTCPState == ( uint8_t ) eESTABLISHED ) &&	/* Connection established. */
[01;32m[K  2721[m[K				if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.[01;31m[KxTCP[m[K.usCurMSS ) ||	/* Received a small message. */
[01;32m[K  2722[m[K					( lRxSpace < ipNUMERIC_CAST( int32_t, 2U * pxSocket->u.[01;31m[KxTCP[m[K.usCurMSS ) ) )	/* There are less than 2 x MSS space in the Rx buffer. */
[01;32m[K  3161[m[K				}	/* if( pxSocket->u.[01;31m[KxTCP[m[K.ucTCPState == eTCP_LISTEN ). */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K  1557[m[K							/* It is not allowed to access 'pxSocket->u.[01;31m[KxTCP[m[K'. */
[01;32m[K  1615[m[K							pxSocket->u.[01;31m[KxTCP[m[K.uxRxWinSize = ( uint32_t )pxProps->lRxWinSize;	/* Fixed value: size of the TCP reception window */
[01;32m[K  1616[m[K							pxSocket->u.[01;31m[KxTCP[m[K.uxTxWinSize = ( uint32_t )pxProps->lTxWinSize;	/* Fixed value: size of the TCP transmit window */
[01;32m[K  1694[m[K							pxSocket->u.[01;31m[KxTCP[m[K.usTimeout = 1U; /* to set/clear bSendFullSize */
[01;32m[K  1717[m[K						pxSocket->u.[01;31m[KxTCP[m[K.usTimeout = 1U; /* to set/clear bRxStopped */
[01;32m[K  2649[m[K								pxSocket->u.[01;31m[KxTCP[m[K.usTimeout = 1U; /* because bLowWater is cleared. */
[01;32m[K  3732[m[K						pxSocket->u.[01;31m[KxTCP[m[K.ulRemoteIP,	/* IP address of remote machine */
[01;32m[K  3733[m[K						pxSocket->u.[01;31m[KxTCP[m[K.usRemotePort,	/* Port on remote machine */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   661[m[K				/* Make sure that [01;31m[KxTCP[m[K is 8-bytes aligned by

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  1951[m[K			pxProtocolHeaders->[01;31m[KxTCPHeader[m[K.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   197[m[K		TCPHeader_t [01;31m[KxTCPHeader[m[K;           /* 34 + 32 = 66 */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   330[m[K			/* Allocate space for '[01;31m[KxTCPSegments[m[K' and store them in 'xSegmentList'. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   473[m[K	 * As soon as a TCP socket timer expires, this function [01;31m[KxTCPSocketCheck[m[K
[01;32m[K   479[m[K	 *		[01;31m[KxTCPSocketCheck[m[K()				// Either send a delayed ACK or call prvTCPSendPacket()
[01;32m[K   479[m[K	 *		[01;31m[KxTCPSocketCheck[m[K()				// Either send a delayed ACK or call prvTCPSendPacket()
[01;32m[K   579[m[K	 * It is only called by [01;31m[KxTCPSocketCheck[m[K().

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1242[m[K					[01;31m[KxTCPTimer[m[K has expired, but there is no point sending them if the

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    38[m[K	/* The name [01;31m[KxTCPTimer[m[K was already use as the name of an IP-timer. */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   460[m[K						[01;31m[KxTCPTimerCheck[m[K()
[01;32m[K   474[m[K	 * will be called (from [01;31m[KxTCPTimerCheck[m[K)
[01;32m[K   478[m[K	 *		[01;31m[KxTCPTimerCheck[m[K()				// Check all sockets ( declared in FreeRTOS_Sockets.c )
[01;32m[K   478[m[K	 *		[01;31m[KxTCPTimerCheck[m[K()				// Check all sockets ( declared in FreeRTOS_Sockets.c )

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K  1843[m[K								/* Setting this variable will cause [01;31m[KxTCPTimerCheck[m[K()

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   147[m[K	 * segment was expected.  [01;31m[KxTCPWindowRxConfirm[m[K() will check if there is already
[01;32m[K   749[m[K			exactly this segment was expected.  [01;31m[KxTCPWindowRxConfirm[m[K() will check if

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K  2586[m[K				/* [01;31m[KxTCPWindowTxDone[m[K returns true when all Tx queues are empty. */

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_cancel/DNSgetHostByName_cancel_harness.c[39m

[01;32m[K    47[m[K		vDNSSetCallBack( pcHostName, &pvSearchID, pCallback, [01;31m[KxTimeout[m[K, xIdentifier); /* Add an item to be able to check the cancel function if the list is non-empty. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   758[m[K			value of [01;31m[KxTimeOut[m[K against ulRemainingTime. */

[1;34m./include/FreeRTOS_DNS.h[39m

[01;32m[K   109[m[K		 * [01;31m[KxTimeout[m[K is in units of ms.

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    50[m[K		TCPTimer_t [01;31m[KxTransmitTimer[m[K;		/* saves a timestamp at the moment this segment gets transmitted (TX only) */

[1;34m./portable/NetworkInterface/DriverSAM/gmac_SAM.c[39m

[01;32m[K   887[m[K					[01;31m[KxTxCallback[m[K(ul_tx_status_flag, (void*)p_tx_td->addr); // Function call prvTxCallback

[1;34m./portable/NetworkInterface/ATSAM4E/NetworkInterface.c[39m

[01;32m[K   157[m[K	/* [01;31m[KxTXDescriptorSemaphore[m[K is a counting semaphore with

[1;34m./portable/NetworkInterface/DriverSAM/NetworkInterface.c[39m

[01;32m[K   203[m[K	/* [01;31m[KxTXDescriptorSemaphore[m[K is a counting semaphore with

[1;34m./portable/NetworkInterface/LPC18xx/NetworkInterface.c[39m

[01;32m[K   221[m[K	/* [01;31m[KxTXDescriptorSemaphore[m[K is a counting semaphore with

[1;34m./portable/NetworkInterface/STM32Fxx/NetworkInterface.c[39m

[01;32m[K   218[m[K	/* [01;31m[KxTXDescriptorSemaphore[m[K is a counting semaphore with
[01;32m[K   473[m[K					/* The [01;31m[KxTXDescriptorSemaphore[m[K and the task are created successfully. */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   633[m[K			vListInitialise( &( pxWindow->[01;31m[KxTxQueue[m[K ) );			/* Transmit queue: segments queued for transmission */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    65[m[K		struct xLIST_ITEM xQueueItem;	/* TX only: segments can be linked in one of three queues: xPriorityQueue, [01;31m[KxTxQueue[m[K, and xWaitQueue */
[01;32m[K   122[m[K		List_t [01;31m[KxTxQueue[m[K;					/* Transmit queue: segments queued for transmission */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   130[m[K		TCPSegment_t [01;31m[KxTxSegment[m[K;			/* Priority queue */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K    97[m[K	 * '[01;31m[KxTxSegments[m[K' or 'xRxSegments'
[01;32m[K   567[m[K			/* Take it out of xRxSegments/[01;31m[KxTxSegments[m[K */
[01;32m[K   591[m[K			[01;31m[KxTxSegments[m[K*/
[01;32m[K  1505[m[K			contiguous block.  Note that the segments are stored in [01;31m[KxTxSegments[m[K in a

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K   126[m[K		List_t [01;31m[KxTxSegments[m[K;					/* A linked list of all transmission segments, sorted on sequence number */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   187[m[K		UDPHeader_t [01;31m[KxUDPHeader[m[K;           /* 34 +  8 = 42 */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   675[m[K								pdTRUE /*xClearOnExit*/, pdFALSE /*[01;31m[KxWaitAllBits[m[K*/, socketDONT_BLOCK );
[01;32m[K   697[m[K					pdTRUE /*xClearOnExit*/, pdFALSE /*[01;31m[KxWaitAllBits[m[K*/, xRemainingTime );
[01;32m[K  1005[m[K				( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*[01;31m[KxWaitAllBits[m[K*/, portMAX_DELAY );
[01;32m[K  2340[m[K					( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_CONNECT, pdTRUE /*xClearOnExit*/, pdFALSE /*[01;31m[KxWaitAllBits[m[K*/, xRemainingTime );
[01;32m[K  2468[m[K					( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_ACCEPT, pdTRUE /*xClearOnExit*/, pdFALSE /*[01;31m[KxWaitAllBits[m[K*/, xRemainingTime );
[01;32m[K  2563[m[K									pdTRUE /*xClearOnExit*/, pdFALSE /*[01;31m[KxWaitAllBits[m[K*/, socketDONT_BLOCK );
[01;32m[K  2590[m[K						pdTRUE /*xClearOnExit*/, pdFALSE /*[01;31m[KxWaitAllBits[m[K*/, xRemainingTime );
[01;32m[K  2911[m[K						pdTRUE /*xClearOnExit*/, pdFALSE /*[01;31m[KxWaitAllBits[m[K*/, xRemainingTime );

[1;34m./FreeRTOS_UDP_IP.c[39m

[01;32m[K   294[m[K						xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .[01;31m[KxWaitingPacketsList[m[K'. */

[1;34m./include/FreeRTOS_IP_Private.h[39m

[01;32m[K   600[m[K		List_t [01;31m[KxWaitingPacketsList[m[K;	/* Incoming packets */

[1;34m./FreeRTOS_TCP_WIN.c[39m

[01;32m[K   181[m[K	 * A higher Tx block has been acknowledged.  Now iterate through the [01;31m[KxWaitQueue[m[K
[01;32m[K   634[m[K			vListInitialise( &( pxWindow->[01;31m[KxWaitQueue[m[K ) );		/* Waiting queue:  outstanding segments */
[01;32m[K  1651[m[K			 [01;31m[KxWaitQueue[m[K to find a possible condition for a FAST retransmission. */
[01;32m[K  1688[m[K							/* Remove it from [01;31m[KxWaitQueue[m[K. */

[1;34m./include/FreeRTOS_TCP_WIN.h[39m

[01;32m[K    65[m[K		struct xLIST_ITEM xQueueItem;	/* TX only: segments can be linked in one of three queues: xPriorityQueue, xTxQueue, and [01;31m[KxWaitQueue[m[K */
[01;32m[K   123[m[K		List_t [01;31m[KxWaitQueue[m[K;					/* Waiting queue:  outstanding segments */

[1;34m./FreeRTOS_Sockets.c[39m

[01;32m[K   102[m[K	 * [01;31m[KxWantedItemValue[m[K.  If there is no such list item return NULL.
[01;32m[K  1798[m[K	'[01;31m[KxWantedItemValue[m[K' refers to a port number */

[1;34m./test/cbmc/proofs/DNS/DNSgetHostByName_cancel/DNSgetHostByName_cancel_harness.c[39m

[01;32m[K    18[m[K	void *safeMalloc(size_t [01;31m[KxWantedSize[m[K) { /* Returns a NULL pointer if the wanted size is 0. */

[1;34m./FreeRTOS_IP.c[39m

[01;32m[K   702[m[K			message queue is empty (indicated by [01;31m[KxWillSleep[m[K being true). */

[1;34m./FreeRTOS_TCP_IP.c[39m

[01;32m[K   483[m[K	 *			xNetworkInterfaceOutput()	// Sends data to the NIC ( declared in portable/NetworkInterface/[01;31m[Kxxx[m[K )
[01;32m[K   483[m[K	 *			xNetworkInterfaceOutput()	// Sends data to the NIC ( declared in portable/NetworkInterface/[01;31m[Kxxx[m[K )

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K   486[m[K	    }; /*[01;31m[KXXX[m[K Fix me */
[01;32m[K   558[m[K	        return -5; /* [01;31m[KXXX[m[K return meaningful value */

[1;34m./portable/NetworkInterface/RX/NetworkInterface.c[39m

[01;32m[K    27[m[K	* History : DD.MM.[01;31m[KYYYY[m[K Version  Description

[1;34m./portable/NetworkInterface/RX/ether_callback.c[39m

[01;32m[K    25[m[K	* History : DD.MM.[01;31m[KYYYY[m[K Version  Description

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.c[39m

[01;32m[K  1193[m[K	   /* Set the DZPQ bit according to ETH [01;31m[KZeroQuantaPause[m[K value */

[1;34m./portable/NetworkInterface/STM32Fxx/stm32fxx_hal_eth.h[39m

[01;32m[K   540[m[K	  uint32_t             [01;31m[KZeroQuantaPause[m[K;           /*!< Selects or not the automatic generation of Zero-Quanta Pause Control frames.

[1;34m./portable/NetworkInterface/Zynq/x_topology.h[39m

[01;32m[K    33[m[K		unsigned scugic_baseaddr; /* valid only for [01;31m[KZynq[m[K */

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_dma.c[39m

[01;32m[K    79[m[K		./portable/NetworkInterface/[01;31m[KZynq[m[K/NetworkInterface.c

[1;34m./portable/NetworkInterface/Zynq/x_emacpsif_physpeed.c[39m

[01;32m[K   274[m[K	#else /* [01;31m[KZynq[m[K */
